{"version":3,"sources":["node_modules/browser-pack/_prelude.js","source/display/canvas/canvasholderhtml.ts","source/display/canvas/canvasmouse.ts","source/display/canvas/mouseeventhandlerworldobject.ts","source/display/canvas/mousestatus.ts","source/display/drawableshapes/circledisplayshape.ts","source/display/worlddisplay.ts","source/engine/mockengine/mockengine.ts","source/engine/mockengine/shapes/mockcircle.ts","source/engine/mockengine/shapes/mockshape.ts","source/main_mock.ts","source/world/world.ts","source/world/worldid.ts","source/world/worldofworldobjects.ts","source/world/worldposition.ts"],"names":["f","exports","module","define","amd","g","window","global","self","this","test_mock","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","canvasmouse_1","mouseeventhandlerworldobject_1","worlddisplay_1","CanvasHolderHTML","canvasName","world","isVisable","isDrawable","canvas","document","getElementById","context","getContext","canvasMouse","CanvasMouse","MouseEventHandlerWorldObject","prototype","clearCanvas","clearRect","getWidth","getHeight","fillStyle","WorldDisplay","getColorFromString","fillRect","getCanvas","isCanvasVisable","_isVisable","isCanvasDrawable","_isDrawable","Object","defineProperty","_canvasName","value","_canvas","_context","_canvasMouse","worldposition_1","canvasholderHTML","mouseEventHandler","offset","getCanvasOffset","addEventListener","event","pointerDownEvent","pointerMoveEvent","pointerUpEvent","offsetLeft","offsetTop","object","isNaN","element","offsetParent","hasOwnProperty","WorldPosition","_offset","_mouseEventHandler","mousestatus_1","mouseStatus","MouseStatus","currentWorldObject","lastWorldObject","worldObjectSelected","wWorldObject","worldObjectDeselected","getWorldPositionFromMouseEvent","pageX","x","pageY","y","eventPosition","console","log","JSON","stringify","isDown","startPosition","position","setAnimated","setSelected","clickWorldObject","getWorldObjectContainingPosition","getWorldId","id","clone","clickOffset","getWorldPosition","getDelta","deltaPosition","newX","newY","setWorldPosition","_mouseStatus","_currentWorldObject","_lastWorldObject","_isDown","_startPosition","_position","_clickOffset","CircleDisplayShape","circleEngineShape","init","options","_circleEngineShape","draw","strokeStyle","beginPath","arc","getRadius","Math","PI","closePath","fill","lineWidth","stroke","colorString","parseInt","substring","getCirclePositionList","radius","curvePoints","pointList","Array","angleInc","angle","rads","push","cos","sin","getTrianglePositionList","width","height","getRectanglePositionList","getArcPositionList","endAngle","startAngle","abs","angle_1","fillTextMutipleLines","text","lineHeight","splitChar","lines","split","fillText","metricsTextMutipleLines","maxWidth","totalHeight","metrics","measureText","roundedRect","w","h","borderWitdh","borderColor","rectColor","moveTo","arcTo","mockcircle_1","MockEngine","createCircle","worldId","drawable","numberOfSides","worldPosition","MockCircle","mockshape_1","_super","mockEngine","_this","__extends","containsWorldPosition","getDistance","_curvePoints","_radius","MockShape","isObjectAnimated","isObjectVisable","isObjectSelected","isAnimated","isSelected","getOptions","animated","selected","setVisable","visable","translate","getDrawable","_drawable","_worldId","_isObjectAnimated","_isObjectVisable","_isObjectSelected","_objectOptions","doDraw","drawWorld","canvasHolder","canvasholderhtml_1","mockengine_1","worldofworldobjects_1","circledisplayshape_1","worldid_1","WorldOfWorldObjects","circle1","worldEngine","WorldId","circle2","worldObjectArray","setInterval","World","_worldEngine","woldObjectId","_id","world_1","foundObject","worldObject","_worldObjectArray","_x","_y","getDeltaY","getDeltaX","equals","sqrt","pow","getAveragePostionFromWorldPositionList","positionList","p","getAveragePostionFromWorldObjectList","worldObjectList","getPostionListFromNodeList","positions"],"mappings":"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","file":"test_mock.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import { CanvasHolder } from \"./canvasholder\";\nimport { World } from \"../../world/world\";\nimport { CanvasMouse } from \"./canvasmouse\";\nimport { MouseEventHandlerWorldObject } from \"./mouseeventhandlerworldobject\";\nimport { WorldDisplay } from \"../worlddisplay\";\n\n\nexport class CanvasHolderHTML implements CanvasHolder\n{\n\tprivate _isVisable:boolean;\n\tprivate _isDrawable:boolean;\n\tprivate _canvasName:string;\n\tprivate _canvas:HTMLCanvasElement;\n\tprivate _context:CanvasRenderingContext2D;\n\tprivate _canvasMouse:CanvasMouse;\n\t\n\tconstructor(canvasName:string,world:World)\n\t{\n\t\tthis.canvasName = canvasName;\n\t\tthis.isVisable = true;\n\t\tthis.isDrawable = true;\n\t\tthis.canvas = <HTMLCanvasElement>document.getElementById(this.canvasName);\t\t\t\n\t\tthis.context = this.canvas.getContext(\"2d\");\n\t\tthis.canvasMouse = new CanvasMouse(world,this,new MouseEventHandlerWorldObject());\n\t\t/*if (typeof document !== 'undefined')\n\t\t{\n\t\t\tthis.canvas = document.getElementById(this.canvasName);\t\t\t\n\t\t\tthis.context = this.canvas.getContext('2d');\n\t\t}*/\n\t}\n\n\tpublic clearCanvas():void {\n\t\tif(this.isVisable && this.isDrawable)\n\t\t{\n\t\t\tthis.context.clearRect(0, 0, this.getWidth(), this.getHeight());\n\t\t\tthis.context.fillStyle = WorldDisplay.getColorFromString(\"ffffff\"+\"ff\");\n\t\t\tthis.context.fillRect(0, 0, this.getWidth(), this.getHeight());\n\t\t}\n\t}\n\n\tpublic getCanvas():HTMLCanvasElement {\n\t\treturn(this.canvas);\n\t}\n\n\tpublic getContext():CanvasRenderingContext2D {\n\t\treturn(this.context);\n\t}\n\t\n\tpublic getWidth():number\n\t{\n\t\treturn(this.canvas.width);\n\t}\n\t\n\tpublic getHeight():number\n\t{\n\t\treturn(this.canvas.height);\n\t}\n\n\tpublic isCanvasVisable(): boolean {\n\t\treturn this._isVisable;\n\t}\n\n\tpublic isCanvasDrawable(): boolean {\n\t\treturn this._isDrawable;\n\t}\n\n\tpublic get canvasName(): string {\n\t\treturn this._canvasName;\n\t}\n\n\tpublic set canvasName(value: string) {\n\t\tthis._canvasName = value;\n\t}\n\n\n\tpublic get canvas(): HTMLCanvasElement {\n\t\treturn this._canvas;\n\t}\n\n\tpublic set canvas(value: HTMLCanvasElement) {\n\t\tthis._canvas = value;\n\t}\n\n\tpublic get context(): CanvasRenderingContext2D {\n\t\treturn this._context;\n\t}\n\n\tpublic set context(value: CanvasRenderingContext2D) {\n\t\tthis._context = value;\n\t}\n\n\tpublic get isVisable(): boolean {\n\t\treturn this._isVisable;\n\t}\n\n\tpublic set isVisable(value: boolean) {\n\t\tthis._isVisable = value;\n\t}\n\n\tpublic get isDrawable(): boolean {\n\t\treturn this._isDrawable;\n\t}\n\n\tpublic set isDrawable(value: boolean) {\n\t\tthis._isDrawable = value;\n\t}\n\n\tpublic get canvasMouse(): CanvasMouse {\n\t\treturn this._canvasMouse;\n\t}\n\n\tpublic set canvasMouse(value: CanvasMouse) {\n\t\tthis._canvasMouse = value;\n\t}\n\t\n\t\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t/*\n\tstatic createCanvasHolderFromClientJson(worldDef,json)\n\t{\n\t  var canvasHolder = new CanvasHolder(json.canavsName,worldDef);\n\t  return(canvasHolder);\n\t}\n\t*/\n\t/*\n\t  getClientJson()\n\t  {\n\t\t  var json = {};\n\t\t  \n\t\t  \n\t\t  json.canvasName = this.canvasName;\n\t\t  json.origin = this.origin;\n\t\t  json.width = this.getWidth();\n\t\t  json.height = this.getHeight();\n\t\t  json.worldDef = this.worldDef;\n\t\t  \n\t\t  JSON.stringify(json);\n\t\t  return(json)\n\t  }\n\t*/\n\n\t/*  \n\tgetConnector(connectorDefKey,name)\n\t{\n\t\tvar connector = this.getConnectorDef(connectorDefKey)(this.worldDef,name);\n\t\tconnector.connectorDefKey = connectorDefKey;\n\t\treturn(connector);\n\t}\n\t*/\n\n\t/*\n\tgetConnectorDef(connectorDefKey)\n\t{\n\t\tvar connectorDef = this.worldDef.worldDisplay.connectorDefs[\"generic\"];\n\t\t\n\t\tvar foundConnectorDef = false;\n\t\tif(this.worldDef.worldDisplay.connectorDefs.hasOwnProperty(connectorDefKey))\n\t\t{\n\t\t\tconnectorDef = this.worldDef.worldDisplay.connectorDefs[connectorDefKey];\n\t\t\tfoundConnectorDef = true;\n\t\t}\n\t\tif(!foundConnectorDef) console.trace(\"CanvasHolder:getConnectorDef:connectorDefKey=\\\"\"+connectorDefKey+ \"\\\" was not found using generic\");\n\t\telse console.log(\"found connector display :\"+connectorDefKey);\n\t\tconnectorDef.connectorDefKey = connectorDefKey;\n\t\treturn(connectorDef);\n\t}\n\t*/\n\n\t/*\n\tgetConnectorDisplay(connectorDisplayKey)\n\t{\n\t\tvar connectorDisplay = this.worldDef.worldDisplay.connectorDisplay[\"generic\"];\n\t\t\n\t\tvar foundConnectorDisplay = false;\n\t\tif(this.worldDef.worldDisplay.connectorDisplay.hasOwnProperty(connectorDisplayKey))\n\t\t{\n\t\t\tconnectorDisplay = this.worldDef.worldDisplay.connectorDisplay[connectorDisplayKey];\n\t\t\tfoundConnectorDisplay = true;\n\t\t}\n\t\tif(!foundConnectorDisplay) console.trace(\"CanvasHolder:getConnectorDisplay:connectorDisplayKey=\\\"\"+connectorDisplayKey+ \"\\\" was not found using generic\");\n\t\tconnectorDisplay.connectorDisplayKey = connectorDisplayKey;\n\t\treturn(connectorDisplay);\n\t}\n\t*/\n\n\t/*\n\tgetGraphData(graphDataKey)\n\t{\n\t\tvar graphData = this.worldDef.worldDisplay.nodeDisplay[\"generic\"];\t\n\t\tvar foundGraphData = false;\n\t\tif(this.worldDef.worldDisplay.nodeDisplay.hasOwnProperty(graphDataKey))\n\t\t{\n\t\t\tgraphData = this.worldDef.worldDisplay.nodeDisplay[graphDataKey];\n\t\t\tfoundGraphData = true;\n\t\t}\n\t\tif(!foundGraphData) console.trace(\"CanvasHolder:getGraphData:graphDataKey=\\\"\"+graphDataKey+ \"\\\" was not found using generic\")\n\t\t//console.trace(\"CanvasHolder:getGraphData:graphDataKey=\\\"\"+graphDataKey+ \"\\\" was not found using generic\")\n\t\t//console.log(\"FOR:\"+graphDataKey+Common.toString(graphData));\n\t\t//console.log(\"getGraphData:graphDataKey=\"+graphDataKey+\":clone=\"+graphData.nodeDisplay.displayInfo.clone);\n\n\t\t//if(graphData.nodeDisplay.displayInfo.clone)\n\t\tif(graphData.nodeDisplayFunction)\n\t\t{\n\t\t\t//console.log(\"getGraphData:graphDataKey:FOUND A FUNCTION:\"+graphDataKey);\n\t\t\tgraphData = Object.create(graphData);\n\t\t\tgraphData.nodeDisplay = graphData.nodeDisplayFunction();\n\t\t\t//console.log(\"CLONING:\"+graphDataKey+Common.toString(graphData));\n\t\t\t//graphData.nodeDisplay.displayInfo = Object.create(graphData.nodeDisplay.displayInfo);\n\t\t\t//graphData.nodeDisplay.displayInfo  = JSON.parse(JSON.stringify(graphData.nodeDisplay.displayInfo));\n\t\t\t//graphData.nodeDisplay.displayInfo  = JSON.parse(JSON.stringify(graphData.nodeDisplay.displayInfo));\n\t\t\t//graphData = Object.create(graphData);\n\t\t\t//graphData.nodeDisplay.displayInfo.ts = new Date().getTime();\n\n\n\t\t}\n\n\t\tgraphData.graphDataKey = graphDataKey;\n\t\treturn(graphData);\n\t}\n\t*/\n\t/*\n\tclone(origin)\n\t{\n\t\tvar canvasHolder = new CanvasHolderHTML(this.canvasName);\n\t\t//canvasHolder.origin = origin;\n\t\t\n\t\tvar canvasHolder = new Object();\n\t\tcanvasHolder.origin = origin;\n\t\t\n\t\tcanvasHolder.canvasName = this.canvasName;\n\t\tcanvasHolder.canvas = this.canvas;\n\t\tcanvasHolder.context = this.context;\n\t\tcanvasHolder.isCanvasVisable = this.isCanvasVisable;\n\t\tcanvasHolder.isCanvasDrawable = this.isCanvasDrawable;\n\t\tcanvasHolder.isDrawable = this.isDrawable;\n\t\tcanvasHolder.isVisable = this.isVisable;\n\t\tcanvasHolder.getWidth = this.getWidth;\n\t\tcanvasHolder.getHeight = this.getHeight;\n\t\tcanvasHolder.worldDef = this.worldDef;\n\t\tcanvasHolder.getGraphData = this.getGraphData;\n\t\t\n\t\t\n\t\treturn(canvasHolder);\n\t}\n\t*/","import { WorldPosition } from \"../../world/worldposition\";\nimport { CanvasHolderHTML } from \"./canvasholderhtml\";\nimport { MouseEventHandler } from \"./mouseeventhandler\";\nimport { World } from \"../../world/world\";\n\n\nexport class CanvasMouse\n{\n\tprivate _offset:WorldPosition;\n\tprivate canvasholderHTML:CanvasHolderHTML;\n\tprivate _mouseEventHandler:MouseEventHandler;\n\t\n\n\tconstructor(world:World,canvasholderHTML:CanvasHolderHTML,mouseEventHandler:MouseEventHandler)\n\t{\n\t\tthis.canvasholderHTML = canvasholderHTML;\n\t\tthis.mouseEventHandler = mouseEventHandler;\n\t\tif(canvasholderHTML.isCanvasVisable()) \n\t\t{\n\t\t\t//this.offset = NodeCanvasMouse.getCanvasOffset(this.canvasholder.canvas);\n\t\t\tthis.offset = this.getCanvasOffset();\t\t\n\t\t\tvar self = this;\n\t\t\tthis.canvasholderHTML.canvas.addEventListener(\"pointerdown\", function(event) { self.pointerDownEvent(world,self,event) }, false);\n\t\t\tthis.canvasholderHTML.canvas.addEventListener(\"pointermove\",function(event) { self.pointerMoveEvent(world,self,event) }, false);\n\t\t\tthis.canvasholderHTML.canvas.addEventListener(\"pointerup\",function(event) { self.pointerUpEvent(world,self,event) }, false);\n\t\t\t//this.nodeMouseMovment = {};\n\t\t}\n\t}\n\n\tprivate getCanvasOffset():WorldPosition\n\t{\n\t    let offsetLeft = 0;\n\t\tlet offsetTop = 0;\n\t\tlet object:HTMLElement = this.canvasholderHTML.canvas;\n\t    do\n\t    {\n\t      if (!isNaN(object.offsetLeft))\n\t      {\n\t          offsetLeft += object.offsetLeft;\n\t      }\n\t      if (!isNaN(object.offsetTop))\n\t      {\n\t          offsetTop += object.offsetTop;\n\t\t  }   \n\t\t let element:any = object.offsetParent;\n\t\t if(element.hasOwnProperty(\"offsetParent\")) object = element;\n\t\t else object = null;\n\t    }\n\t    while(object);\n\t    \n\t    return( new WorldPosition(offsetLeft,offsetTop) );\n\t}\n\n\tpublic pointerDownEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent) {\n\t\tthis.mouseEventHandler.pointerDownEvent(world,canvasMouse,event);\n\t}\n\t\n\tpublic pointerMoveEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent)\t{\n\t\tthis.mouseEventHandler.pointerMoveEvent(world,canvasMouse,event);\n\n\t}\n\t\n\tpublic pointerUpEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent)\n\t{\n\t\tthis.mouseEventHandler.pointerUpEvent(world,canvasMouse,event);\n\n\t}\n\t\n\n\t\n\tpublic get offset(): WorldPosition {\n\t\treturn this._offset;\n\t}\n\n\tpublic set offset(value: WorldPosition) {\n\t\tthis._offset = value;\n\t}\n\n\tpublic get mouseEventHandler(): MouseEventHandler {\n\t\treturn this._mouseEventHandler;\n\t}\n\n\tpublic set mouseEventHandler(value: MouseEventHandler) {\n\t\tthis._mouseEventHandler = value;\n\t}\n\n\n\tpublic get $canvasholderHTML(): CanvasHolderHTML {\n\t\treturn this.canvasholderHTML;\n\t}\n\n\tpublic set $canvasholderHTML(value: CanvasHolderHTML) {\n\t\tthis.canvasholderHTML = value;\n\t}\n\t\n\n}\n","import { MouseStatus } from \"./mousestatus\";\nimport { WorldObject } from \"../../world/worldobject\";\nimport { MouseEventHandler } from \"./mouseeventhandler\";\nimport { WorldPosition } from \"../../world/worldposition\";\nimport { World } from \"../../world/world\";\nimport { CanvasMouse } from \"./canvasmouse\";\n\n\n\nexport class MouseEventHandlerWorldObject implements MouseEventHandler {\n   private _mouseStatus:MouseStatus;\n   private _currentWorldObject:WorldObject;\n   private _lastWorldObject:WorldObject;\n\n    constructor()\n    {\n        this.mouseStatus = new MouseStatus();\n        this.currentWorldObject = null;\n        this.lastWorldObject = null;\n    }\n\n    public worldObjectSelected(world:World,event:MouseEvent,wWorldObject:WorldObject):void {\n\n    }\n\n    public worldObjectDeselected(world:World,event:MouseEvent):void {\n\n\t}\n\t\n\tpublic getWorldPositionFromMouseEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent):WorldPosition {\n\t\tvar eventPosition:WorldPosition = new WorldPosition(event.pageX-canvasMouse.offset.x,event.pageY-canvasMouse.offset.y);\n\t\treturn(eventPosition);\n\t}\n   \n    public pointerDownEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent):void\n\t{\n\t\t//console.log(\"pointerDownEvent:\"+JSON.stringify(event));;\n\t\tvar eventPosition:WorldPosition = this.getWorldPositionFromMouseEvent(world,canvasMouse,event);\n\t\t//this.hideCurrentNodeInfo();\n\t\tconsole.log(\"pointerDownEvent:\"+JSON.stringify(eventPosition));;\n\n\t\tthis.mouseStatus.isDown = true;\n\t\tthis.mouseStatus.startPosition = eventPosition;\n\t\tthis.mouseStatus.position = eventPosition;\n\t\tif(this.currentWorldObject!=null)\n\t\t{\n\t\t\tthis.currentWorldObject.setAnimated(true);\n\t\t\tthis.currentWorldObject.setSelected(false);\n\t\t\tthis.currentWorldObject = null;\n\t\t}\n\t\t\n\t\tlet clickWorldObject:WorldObject =  world.getWorldObjectContainingPosition(eventPosition);\n\t\n\t\tif(clickWorldObject!=null && clickWorldObject!=this.lastWorldObject)\n\t\t{\n\t\t\tconsole.log(\"pointerDownEvent:clickWorldObject=\"+clickWorldObject.getWorldId().id);\n\n\t\t\tthis.currentWorldObject = clickWorldObject;\n\n\t\t\tthis.mouseStatus.startPosition = eventPosition.clone();\n\n\t\t\tthis.currentWorldObject.setSelected(true);\n\t\t\tthis.mouseStatus.clickOffset = this.currentWorldObject.getWorldPosition().getDelta(eventPosition);\n\n\t\t\t/////////////////this.mouseStatus.clickOffset = clickWorldObject.getWorldPosition().getDelta(eventPosition);\n\t\t\t//this.mouseEventHandler.pointerDown(this.mouseStatus);\t\t\t\n\t\t\tthis.worldObjectSelected(world,event,this.currentWorldObject);\n\t\t}\n\t\t\n\t\tif(clickWorldObject==null)\n\t\t{\n\t\t\tthis.worldObjectDeselected(world,event);\n\t\t}\n\t\t\n\t\tif(this.lastWorldObject)\n\t\t{\n\t\t\tthis.worldObjectDeselected(world,event);\n\t\t\tthis.lastWorldObject.setSelected(false);\n\t\t\tthis.lastWorldObject = null;\n\t\t}\n\t\n    }\n    \n    \n\n    public pointerMoveEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent):void {\n\t\tif(this.mouseStatus.isDown)\n\t\t{\n\t\t\tvar eventPosition:WorldPosition = this.getWorldPositionFromMouseEvent(world,canvasMouse,event);\n\n\t\t\t////////////console.log(\"pointerMoveEvent:\"+event);\n\n\t\t\tthis.worldObjectDeselected(world,event);\n\n\t\t\tif(this.currentWorldObject!=null)\n\t\t\t{\n\t\t\t\tthis.currentWorldObject.setAnimated(false);\n\t\t\t\tthis.mouseStatus.position = eventPosition;\n\t\t\t\tvar deltaPosition = this.mouseStatus.startPosition.getDelta(eventPosition);\n\n\n\t\t\t\t\t\t\n\t\t\t\tlet newX = this.mouseStatus.startPosition.x-\n\t\t\t\t\t\tdeltaPosition.x+\n\t\t\t\t\t\tthis.mouseStatus.clickOffset.x;\n\t\t\t\t\n\t\t\t\tlet newY = this.mouseStatus.startPosition.y-\n\t\t\t\t\t\tdeltaPosition.y+\n\t\t\t\t\t\tthis.mouseStatus.clickOffset.y;\n\n\t\t\t\tthis.currentWorldObject.setWorldPosition( new WorldPosition(newX,newY));\n\t\t\t}\n\t\t}\n    }\n            \n\n    public pointerUpEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent):void \t{\n\t\t//console.log(\"pointerUpEvent:\"+JSON.stringify(event));\n\t\t//var eventPosition:WorldPosition = this.getWorldPositionFromMouseEvent(world,canvasMouse,event);\n\n\t\tif(this.currentWorldObject!=null)\n\t\t{\n\t\t\t///this.nodeCanvas.pointerUp(this.mouseStatus.node);\n\t\t\tthis.currentWorldObject.setAnimated(true);\n\t\t\t//this.mouseStatus.node.isSelected = false;\n\t\t\tthis.lastWorldObject = this.currentWorldObject;\n\t\n\t\t\tthis.currentWorldObject = null;\n\t\t}\n\t\tthis.mouseStatus.isDown = false;\n\t}\n\n\tpublic get mouseStatus(): MouseStatus {\n\t\treturn this._mouseStatus;\n\t}\n\n\tpublic set mouseStatus(value: MouseStatus) {\n\t\tthis._mouseStatus = value;\n\t}\n\n\n\tpublic get currentWorldObject(): WorldObject {\n\t\treturn this._currentWorldObject;\n\t}\n\n\tpublic set currentWorldObject(value: WorldObject) {\n\t\tthis._currentWorldObject = value;\n\t}\n\n\n\tpublic get lastWorldObject(): WorldObject {\n\t\treturn this._lastWorldObject;\n\t}\n\n\tpublic set lastWorldObject(value: WorldObject) {\n\t\tthis._lastWorldObject = value;\n\t}\n    \n}","import { WorldPosition } from \"../../world/worldposition\";\n\nexport class MouseStatus\n{\n\tprivate _isDown:boolean;\n\tprivate _startPosition:WorldPosition;\n\tprivate _position:WorldPosition;\n\t//private _worldObject:WorldObject;\n\t//private _objectStartPosition:WorldPosition;\n\tprivate _clickOffset:WorldPosition;\n\t//private _lastWorldObject:WorldObject;\n\t\n\t\n\t\n\n\tconstructor()\n\t{\n\t\tthis.isDown = false;\n\t\tthis.startPosition = new WorldPosition(0,0);\n\t\tthis.position = new WorldPosition(0,0);\n\t\tthis.clickOffset = new WorldPosition(0,0);\n\n\t\t//this.objectStartPosition = null\n\t}\n// \t\t\tnodeCanvasMouse.mouseStatus = new MouseStatus(false,new Position(0,0),new Position(0,0),null,null);\n\n\n\tpublic get isDown(): boolean {\n\t\treturn this._isDown;\n\t}\n\n\tpublic set isDown(value: boolean) {\n\t\tthis._isDown = value;\n\t}\n\n\tpublic get startPosition(): WorldPosition {\n\t\treturn this._startPosition;\n\t}\n\n\tpublic set startPosition(value: WorldPosition) {\n\t\tthis._startPosition = value;\n\t}\n\t\n\n\tpublic get position(): WorldPosition {\n\t\treturn this._position;\n\t}\n\n\tpublic set position(value: WorldPosition) {\n\t\tthis._position = value;\n\t}\n\n\tpublic get clickOffset(): WorldPosition {\n\t\treturn this._clickOffset;\n\t}\n\n\tpublic set clickOffset(value: WorldPosition) {\n\t\tthis._clickOffset = value;\n\t}\n\n\n\n\t\n}\n","import { Drawable } from \"../drawable\";\nimport { WorldPosition } from \"../../world/worldposition\";\n//import { WalkerWorld } from \"../../walkers/walkerworld/walkerworld\";\nimport { WorldDisplay } from \"../worlddisplay\";\nimport { CircleEngineShape } from \"../../engine/shapes/circleengineshape\";\n//import { WalkerEngine } from \"../../walkerworld/walkerengine\";\n\n\nexport class CircleDisplayShape implements Drawable\n{\n\tprivate _circleEngineShape:CircleEngineShape;\n\n\tconstructor()\n\t{\n\t\tthis.circleEngineShape = null;\n\t}\n\n\tpublic init(circleEngineShape:CircleEngineShape,options:any):void {\n\t\tthis.circleEngineShape = circleEngineShape;\t\t\n\t}\n\t\n\n\tpublic get circleEngineShape(): CircleEngineShape {\n\t\treturn this._circleEngineShape;\n\t}\n\n\tpublic set circleEngineShape(value: CircleEngineShape) {\n\t\tthis._circleEngineShape = value;\n\t}\n\t\n\t\n\tpublic draw(context:CanvasRenderingContext2D):void\n\t{\n\t\t//super.drawConnector(canvasHolder,node);\n\t\t/*\n\t\tsuper.drawNode(canvasHolder,node);\n\n\t\t*/\n\t\t//console.log(\"CircleDisplayShape.drawShape\");\n\n\t\tcontext.fillStyle = WorldDisplay.getColorFromString(\"ff0000ff\");\n\t\tcontext.strokeStyle = WorldDisplay.getColorFromString(\"0000ffff\");\n\t\tlet position:WorldPosition = this.circleEngineShape.getWorldPosition();\n\t\t\n\t    context.beginPath();\n\t    context.arc(position.x,position.y,this.circleEngineShape.getRadius(),0,Math.PI * 2, false);\n\t    context.closePath();\n\t    context.fill();\n\t    context.lineWidth = 2;\n\t\tcontext.stroke();\n\t}\n}\n","//import { MatterTools } from \"../matterengine/mattertools\";\n//import { World } from \"../walkerworld/world\";\n//import { MatterEvent } from \"../matterengine/matterevent\";\n//import { MatterCollisionEvent } from \"../matterengine/mattercollisionevent\";\n//import { MatterCompositeEvent } from \"../matterengine/mattercompositeevent\";\nimport { WorldPosition } from \"../world/worldposition\";\n\n//import * as Matter from \"matter-js\";\n\nexport class WorldDisplay  {\n    /*\n    static world(render:Matter.Render) {\n\n        Matter.Render.world(render);\n        console.log(\"doing some redering...\");\n    }\n    */    \n    public static getColorFromString(colorString:string):string\n    {\n      if(colorString.length==6)\n      {\n        colorString += \"ff\";\n      }\n      \n      let color = \"rgba(\"+\n          parseInt(colorString.substring(0,2), 16)+\",\"+\n          parseInt(colorString.substring(2,4), 16)+\",\"+\n          parseInt(colorString.substring(4,6), 16)+\",\"+\n          parseInt(colorString.substring(6,8), 16)/255.0+\")\";\n      \n      return(color);\n    }\n\n    public static getCirclePositionList(radius:number,curvePoints:number):Array<WorldPosition> {\n\t\tlet pointList = new Array<WorldPosition>();\n\t\t\n\t\tlet angleInc = 360 / curvePoints;\n\t\tfor(let angle=0;angle<=360;angle=angle+angleInc)\n\t\t{\n\t\t\tlet rads = angle * (Math.PI/180);\n\t\t\tpointList.push(\n\t\t\t\t\tnew WorldPosition(\n\t\t\t\t\t\t\tradius*Math.cos(rads),\n\t\t\t\t\t\t\tradius*Math.sin(rads))\n\t\t\t\t\t);\t\n\t\t}\n\t\t\n\t\treturn(pointList);\n\t}\n\n\tpublic static getTrianglePositionList(width:number,height:number):Array<WorldPosition> {\n\t\tlet pointList = new Array<WorldPosition>();\n\t\t\n\t\tpointList.push(new WorldPosition(0,-(height/2)));\n\t\tpointList.push(new WorldPosition(width/2,height/2));\n\t\tpointList.push(new WorldPosition(-(width/2),height/2));\n\t\tpointList.push(new WorldPosition(0,-(height/2)));\n\t\t\n\t\treturn(pointList);;\n\t}\n\t\n\tpublic static getRectanglePositionList(width:number,height:number):Array<WorldPosition> {\n\t\tlet pointList = new Array<WorldPosition>();\n\t\t\n\t\tpointList.push(new WorldPosition(-(width/2),-(height/2)));\n\t\tpointList.push(new WorldPosition((width/2),-(height/2)));\n\t\tpointList.push(new WorldPosition((width/2),(height/2)));\n\t\tpointList.push(new WorldPosition(-(width/2),(height/2)));\t\n\t\tpointList.push(new WorldPosition(-(width/2),-(height/2)));\n\t\n\t\treturn(pointList);;\n\t}\n\n\tpublic static getArcPositionList(endAngle:number,startAngle:number,radius:number,curvePoints:number):Array<WorldPosition> {\n\t\tlet pointList = new Array<WorldPosition>();\n\t\t\n\t\t// bug durring the port to javascript... it was just expecting one arg so probably endAngle was used\n\t\tlet angle:number = Math.abs(endAngle-startAngle);\n\t\tlet angleInc:number = angle / curvePoints;\n\t\t\n\t\tpointList.push(new WorldPosition(0,0));\n\t\tfor(let angle=startAngle;\n\t\t\tangle<=endAngle && angleInc>0;\n\t\t\tangle=angle+angleInc)\n\t\t{\n\t\t\tif( (angle+angleInc) > endAngle )\n\t\t\t{\n\t\t\t\tif(angle!=endAngle) angle = endAngle ;\n\t\t\t}\n\t\t\tvar rads = angle * (Math.PI/180);\n\t\t\tpointList.push(\n\t\t\t\t\tnew WorldPosition(\n\t\t\t\t\t\t\tradius*Math.cos(rads),\n\t\t\t\t\t\t\tradius*Math.sin(rads))\n\t\t\t\t\t);\t\n\t\t}\n\t\t\n\t\tpointList.push(new WorldPosition(0,0));\n\t\t\n\t\treturn(pointList);\n\t}\n\n    public static fillTextMutipleLines(context:CanvasRenderingContext2D,text:string,x:number,y:number,lineHeight:number,splitChar:string)\n\t{\n\t\tlet lines:Array<string> = text.split(splitChar);\n\t    let line:string = '';\n\t\n\t    for(let n = 0; n < lines.length; n++)\n\t    {\n\t      //let metrics:TextMetrics = context.measureText(lines[n]);\n\t      context.fillText(lines[n], x, y);\n\t      y = y+lineHeight; \n\t    }\n\t    context.fillText(line, x, y);\n\t }\n\t\n    public static metricsTextMutipleLines(context:CanvasRenderingContext2D,text:string,lineHeight:number,splitChar:string)\n\t{\n\t\tlet lines:Array<string> = text.split(splitChar);\n\t    //let line:string = '';\n\t    let maxWidth:number = 0;\n\t    let totalHeight = 0;\n\t    for(var n = 0; n < lines.length; n++)\n\t    {\n            let metrics:TextMetrics = context.measureText(lines[n]);\n            if(metrics.width>maxWidth) maxWidth = metrics.width;\n            totalHeight = totalHeight + lineHeight;\n\t    }\n\t    return({width:maxWidth,height:totalHeight});\n\t }\n\t\n    public static roundedRect(context:CanvasRenderingContext2D,x:number,y:number,\n        w:number,h:number,r:number,borderWitdh:number,borderColor:string,rectColor:string):void\n\t{\n\t\t  if (w < 2 * r) r = w / 2;\n\t\t  if (h < 2 * r) r = h / 2;\n\t\t  context.beginPath();\n\t\t  context.moveTo(x+r, y);\n\t\t  context.arcTo(x+w, y,   x+w, y+h, r);\n\t\t  context.arcTo(x+w, y+h, x,   y+h, r);\n\t\t  context.arcTo(x,   y+h, x,   y,   r);\n\t\t  context.arcTo(x,   y,   x+w, y,   r);\n\t\t  context.closePath();\n\t\t/*\n\t    context.beginPath();\n\t    context.moveTo(x, y);\n\t    context.lineTo(x + width - cornerRadius, y);\n\t    context.arcTo(x + width, y, x + width, y + cornerRadius, cornerRadius);\n\t    context.lineTo(x + width, y + height);\n\t   */ \n\t    context.lineWidth = borderWitdh;\n\t    context.fillStyle = rectColor;\n\t    context.strokeStyle = borderColor;\n\t    \n\t    context.stroke();\n\t    context.fill();\n\t\n\t}\n}\n","import { WorldEngine } from \"../worldengine\";\nimport { Drawable } from \"../../display/drawable\";\nimport { WorldId } from \"../../world/worldid\";\nimport { WorldPosition } from \"../../world/worldposition\";\nimport { CircleEngineShape } from \"../shapes/circleengineshape\";\nimport { MockCircle } from \"./shapes/mockcircle\";\n\n\n\nexport class MockEngine implements WorldEngine {\n\n    public createCircle(worldId:WorldId,drawable:Drawable,radius:number,numberOfSides:number,worldPosition:WorldPosition,options:any):CircleEngineShape {\n\n      //\tconstructor(worldId:WorldId,drawable:Drawable,radius:number,curvePoints:number,position:WorldPosition,mockEngine:MockEngine)\n\n        let circle:MockCircle = new MockCircle(\n          worldId,\n          drawable,\n          radius,numberOfSides,worldPosition,\n          options,\n          this\n        );\n        return(circle);\n  \n      }\n    \n    \n};","import { CircleEngineShape } from \"../../shapes/circleengineshape\";\nimport { WorldPosition } from \"../../../world/worldposition\";\nimport { Drawable } from \"../../../display/drawable\";\nimport { MockShape } from \"./mockshape\";\nimport { WorldId } from \"../../../world/worldid\";\nimport { MockEngine } from \"../mockengine\";\n\nexport class MockCircle extends MockShape implements CircleEngineShape\n{\n\tprivate _curvePoints:number;\n\tprivate _radius:number;\n\t\n\n\tconstructor(worldId:WorldId,drawable:Drawable,radius:number,curvePoints:number,position:WorldPosition,options:any,mockEngine:MockEngine)\n\t{\n\t\tsuper(worldId,drawable,position,options);\n\t\t//super(shapeName,radius);\n\t\tthis.radius = radius;\n\t\tthis.curvePoints = curvePoints;\t\n\t\tdrawable.init(this,options);\n\t\tconsole.log(\"MockCircle pos:\"+this.getWorldPosition());\n\t\tconsole.log(\"          x:\"+this.getWorldPosition().x);\n\t\tconsole.log(\"          x:\"+position.x);\n\t\t\n\t}\n\n\tpublic containsWorldPosition(worldPosition:WorldPosition):boolean {\n\t\tconsole.log(\"containsWorldPosition:\"+this.getWorldPosition());\n\t\tconsole.log(\"          x:\"+this.getWorldPosition().x);\n\t\t\n\t\tlet distance = this.getWorldPosition().getDistance(worldPosition);\n\t\treturn(distance<=this.radius);\n\t}\n\n\tpublic getRadius():number {\n\t\treturn(this.radius);\n\t}\n\n\n\tpublic get curvePoints(): number {\n\t\treturn this._curvePoints;\n\t}\n\n\tpublic set curvePoints(value: number) {\n\t\tthis._curvePoints = value;\n\t}\n\t\n\n\tpublic get radius(): number {\n\t\treturn this._radius;\n\t}\n\n\tpublic set radius(value: number) {\n\t\tthis._radius = value;\n\t}\n\n\n}\n","import { WorldPosition } from \"../../../world/worldposition\";\n\nimport { Drawable } from \"../../../display/drawable\";\nimport { WorldObject } from \"../../../world/worldobject\";\nimport { WorldId } from \"../../../world/worldid\";\n\n//import { World } from \"../../walkerworld/world\";\n//import { WorldObjectDisplay } from \"../worldobjectdisplay\";\n\nexport abstract class MockShape implements WorldObject  \n{\n\tprivate _drawable:Drawable;\n\tprivate _worldId:WorldId;\n\tprivate _isObjectAnimated:boolean;\n\tprivate _isObjectVisable:boolean;\n\tprivate _isObjectSelected:boolean;\n\tprivate _objectOptions:any;\n\t\n\tprivate _position:WorldPosition; \n\n    constructor(worldId:WorldId,drawable:Drawable,position:WorldPosition,options:any) {\n\t\tthis.worldId = worldId;\n\t\tthis.drawable = drawable;\n\t\tthis.isObjectAnimated = true;\n\t\tthis.isObjectVisable = true;\n\t\tthis.isObjectSelected = true;\n\t\tthis.drawable = drawable;\n\t\tthis.position = position;\n\n\t\tconsole.log(\"MockShape pos:\"+this.getWorldPosition());\n\t\tconsole.log(\"          x:\"+this.getWorldPosition().x);\n\t\tconsole.log(\"          x:\"+position.x);\n\t}\n\t\n\tpublic isAnimated(): boolean { return(this.isObjectAnimated); }\n\tpublic isSelected(): boolean { return(this.isObjectSelected); }\n\tpublic isVisable():boolean { return(this.isObjectVisable); }\n\tpublic getWorldId(): WorldId { return(this.worldId); }\n\tpublic getOptions(): any { return(this.objectOptions); }\n\n\tpublic setAnimated(animated:boolean):void { this.isObjectAnimated = animated; }\n\tpublic setSelected(selected:boolean): void { this.isObjectSelected = selected; }\n\tpublic setVisable(visable:boolean):void { this.isObjectVisable = visable; }\n\t\n\t\n    public getWorldPosition():WorldPosition {\n\t\treturn(this.position );\n\t}\n\n\tpublic translate(worldPosition:WorldPosition):void {\n\t\tthis.position.x = worldPosition.x;\n\t\tthis.position.y = worldPosition.y;\n\t}\n\n\t\n\tpublic setWorldPosition(worldPosition:WorldPosition):void {\n\t\tthis.position.x = worldPosition.x;\n\t\tthis.position.y = worldPosition.y;\n\t}\n\n\tpublic abstract containsWorldPosition(worldPosition:WorldPosition):boolean;\n\n    public getDrawable():Drawable {\n        return(this.drawable);\n    }\n\n\n\tpublic get drawable(): Drawable {\n\t\treturn this._drawable;\n\t}\n\n\tpublic set drawable(value: Drawable) {\n\t\tthis._drawable = value;\n\t}\n    \n\n\tpublic get position(): WorldPosition {\n\t\treturn this._position;\n\t}\n\n\tpublic set position(value: WorldPosition) {\n\t\tthis._position = value;\n\t}\n\n\tpublic get worldId(): WorldId {\n\t\treturn this._worldId;\n\t}\n\n\tpublic set worldId(value: WorldId) {\n\t\tthis._worldId = value;\n\t}\n\n\tpublic get isObjectAnimated(): boolean {\n\t\treturn this._isObjectAnimated;\n\t}\n\n\tpublic set isObjectAnimated(value: boolean) {\n\t\tthis._isObjectAnimated = value;\n\t}\n\n\tpublic get isObjectVisable(): boolean {\n\t\treturn this._isObjectVisable;\n\t}\n\n\tpublic set isObjectVisable(value: boolean) {\n\t\tthis._isObjectVisable = value;\n\t}\n\n\tpublic get isObjectSelected(): boolean {\n\t\treturn this._isObjectSelected;\n\t}\n\n\tpublic set isObjectSelected(value: boolean) {\n\t\tthis._isObjectSelected = value;\n\t}\n\n\tpublic get objectOptions(): any {\n\t\treturn this._objectOptions;\n\t}\n\n\tpublic set objectOptions(value: any) {\n\t\tthis._objectOptions = value;\n\t}\n\n}\n","import { CanvasHolderHTML } from \"./display/canvas/canvasholderhtml\";\nimport { MockEngine } from \"./engine/mockengine/mockengine\";\nimport { WorldOfWorldObjects } from \"./world/worldofworldobjects\";\nimport { CircleDisplayShape } from \"./display/drawableshapes/circledisplayshape\";\nimport { WorldPosition } from \"./world/worldposition\";\nimport { WorldId } from \"./world/worldid\";\nimport { CircleEngineShape } from \"./engine/shapes/circleengineshape\";\n\n\nlet mockEngine = new MockEngine();\nlet world:WorldOfWorldObjects = new WorldOfWorldObjects(mockEngine);\nlet canvasHolder:CanvasHolderHTML = new CanvasHolderHTML(\"worldCanvas\",world);\n\nlet circle1:CircleEngineShape = world.worldEngine.createCircle(\n  new WorldId(\"circle1\"),\n  new CircleDisplayShape(),\n  30,8,\n  new WorldPosition(400,400),\n  {}\n);\n\nlet circle2:CircleEngineShape = world.worldEngine.createCircle(\nnew WorldId(\"circle1\"),\nnew CircleDisplayShape(),\n40,8,\nnew WorldPosition(300,300),\n{}\n);\n      \nworld.worldObjectArray.push(circle1);\nworld.worldObjectArray.push(circle2);\n\nlet interval:number = 1000/30; //one millisecond over beat per second\n\nconsole.log(\"drawing every : \"+interval+\"ms\");\n\nsetInterval(doDraw,interval);\n\nfunction doDraw()\n{\n  world.drawWorld(canvasHolder);\t\n}\n\n\n\n","//import { MatterTools } from \"../matterengine/mattertools\";\n//import { World } from \"../walkerworld/world\";\n//import { MatterEvent } from \"../matterengine/matterevent\";\n//import { MatterCollisionEvent } from \"../matterengine/mattercollisionevent\";\n//import { DisplayHolder } from \"../display/displayholder\";\nimport { WorldEngine } from \"../engine/worldengine\";\nimport { WorldPosition } from \"./worldposition\";\nimport { WorldObject } from \"./worldobject\";\nimport { CanvasHolder } from \"../display/canvas/canvasholder\";\n\n\nexport abstract class World {\n\n   // private _displayHolder:DisplayHolder;\n\tprivate _worldEngine:WorldEngine;\n\n    constructor(worldEngine:WorldEngine){\n\t\tthis.worldEngine = worldEngine;\n\t}\n\t\n\tpublic abstract getWorldObjectContainingPosition(worldPosition:WorldPosition):WorldObject;\n\n\tpublic abstract drawWorld(canvasHolder:CanvasHolder):void;\n\n\tpublic get worldEngine(): WorldEngine {\n\t\treturn this._worldEngine;\n\t}\n\n\tpublic set worldEngine(value: WorldEngine) {\n\t\tthis._worldEngine = value;\n\t}\n    \n}","\nexport class WorldId {\n    private _id:string;\n\n    public constructor(woldObjectId:string) {\n        this.id = woldObjectId;\n    }\n\n\tpublic get id(): string {\n\t\treturn this._id;\n\t}\n\n\tpublic set id(value: string) {\n\t\tthis._id = value;\n\t}\n\n}","//import { MatterTools } from \"../matterengine/mattertools\";\n//import { World } from \"../walkerworld/world\";\n//import { MatterEvent } from \"../matterengine/matterevent\";\n//import { MatterCollisionEvent } from \"../matterengine/mattercollisionevent\";\n//import { DisplayHolder } from \"../display/displayholder\";\nimport { WorldEngine } from \"../engine/worldengine\";\nimport { WorldObject } from \"./worldobject\";\nimport { World } from \"./world\";\nimport { CanvasHolder } from \"../display/canvas/canvasholder\";\nimport { WorldPosition } from \"./worldposition\";\n\n\nexport class WorldOfWorldObjects extends World{\n\n    private _worldObjectArray:Array<WorldObject>;\n\n    constructor(worldEngine:WorldEngine){\n        super(worldEngine);\n        this.worldObjectArray = new Array<WorldObject>();\n\t}\n\t\n\t\n\tpublic drawWorld(canvasHolder:CanvasHolder):void {\n        let context = canvasHolder.getContext();\n        canvasHolder.clearCanvas();\n        for(let i=0;i<this.worldObjectArray.length;i++) {\n            let worldObject:WorldObject = this.worldObjectArray[i];\n            worldObject.getDrawable().draw(context);\n        }\n    }\n\n    public getWorldObjectContainingPosition(worldPosition:WorldPosition):WorldObject {\n        let foundObject:WorldObject = null;\n        for(let i=0;i<this.worldObjectArray.length;i++) {\n            ////console.log(\"this.worldObjectArray.length=\"+this.worldObjectArray.length+\":i=\"+i);\n            let worldObject:WorldObject = this.worldObjectArray[i];\n            ////console.log(\"    worldObject.position=\"+worldObject.getWorldPosition());\n            if(worldObject.containsWorldPosition(worldPosition)) foundObject = worldObject;\n        }\n        return(foundObject);\n    }\n\n\n\tpublic get worldObjectArray(): Array<WorldObject> {\n\t\treturn this._worldObjectArray;\n\t}\n\n\tpublic set worldObjectArray(value: Array<WorldObject>) {\n\t\tthis._worldObjectArray = value;\n\t}\n\n    \n}","import { WorldObject } from \"./worldobject\";\n\n\nexport class WorldPosition {\n    private _x:number;\n    private _y:number;\n\n    public constructor(x:number,y:number) {\n        this.x = x;\n        this.y = y;\n    }\n\n\tpublic get x(): number {\n\t\treturn this._x;\n\t}\n\n\tpublic set x(value: number) {\n\t\tthis._x = value;\n\t}\n\n\tpublic get y(): number {\n\t\treturn this._y;\n\t}\n\n\tpublic set y(value: number) {\n\t\tthis._y = value;\n\t}\n\n\tpublic clone():WorldPosition {\n\t\treturn(new WorldPosition(this.x,this.y));\n\t}\n\n\tpublic getDeltaY(worldPosition:WorldPosition):number\n\t{\n\t\t\treturn(this.y-worldPosition.y);\n\t}\n\n\tpublic getDeltaX(worldPosition:WorldPosition):number\n\t{\n\t\t\treturn(this.x-worldPosition.x);\n\t}\n\n\tpublic getDelta(worldPosition:WorldPosition):WorldPosition\n\t{\n\t\t\treturn(new WorldPosition(this.getDeltaX(worldPosition),this.getDeltaY(worldPosition)));\n\t}\n\n\tpublic equals(worldPosition:WorldPosition):boolean\n\t{\n\t\treturn( (this.x==worldPosition.x) && (this.y==worldPosition.y) ) ;\n\t}\n\n\tpublic getDistance(worldPosition:WorldPosition):number\n\t{\n\t\treturn (Math.sqrt(Math.pow(this.getDeltaX(worldPosition), 2) + Math.pow(this.getDeltaY(worldPosition), 2)));\n\t}\n\n\tpublic static getAveragePostionFromWorldPositionList(positionList:Array<WorldPosition>):WorldPosition\n\t{\n\t\tlet x = 0.0;\n\t\tlet y = 0.0;\n\t\tfor(let i=0;i<positionList.length;i++)\n\t\t{\n\t\t\tlet p = positionList[i];\n\t\t\tx += p.x;\n\t\t\ty += p.y;\n\t\t}\n\t\tx = x / positionList.length;\n\t\ty = y / positionList.length;\n\t\treturn(new WorldPosition(x,y));\n\t}\n\n\tpublic static getAveragePostionFromWorldObjectList(worldObjectList:Array<WorldObject>):WorldPosition\n\t{\n\t  let x = 0.0;\n\t  let y = 0.0;\n\t  for(var i=0;i<worldObjectList.length;i++)\n\t  {\n\t\t  var p = worldObjectList[i].getWorldPosition();\n\t\t  x += p.x;\n\t\t  y += p.y;\n\t  }\n\t  x = x / worldObjectList.length;\n\t  y = y / worldObjectList.length;\n\t  return(new WorldPosition(x,y));\n\t}\n\n\tpublic static getPostionListFromNodeList(worldObjectList:Array<WorldObject>):Array<WorldPosition>\n\t{\n\t\tvar positions = new Array<WorldPosition>();\n\t\tfor (var i = 0; i < worldObjectList.length; i++)\n\t\t{\n\t\t\tpositions.push(worldObjectList[i].getWorldPosition());\n\t\t}\n\t\treturn(positions);\n\t}\n\n\n}"]}