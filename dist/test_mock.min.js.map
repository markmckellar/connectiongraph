{"version":3,"sources":["node_modules/browser-pack/_prelude.js","source/display/canvas/canvasholderhtml.ts","source/display/canvas/canvasmouse.ts","source/display/canvas/mouseeventhandlerworldobject.ts","source/display/canvas/mousestatus.ts","source/display/drawableshapes/circledisplayshape.ts","source/display/drawableshapes/polygondisplayshape.ts","source/display/drawableshapes/rectangledisplayshape.ts","source/display/worlddisplay.ts","source/engine/mockengine/mockengine.ts","source/engine/mockengine/shapes/mockcircle.ts","source/engine/mockengine/shapes/mockpolygon.ts","source/engine/mockengine/shapes/mockrectangle.ts","source/engine/mockengine/shapes/mockshape.ts","source/main_mock.ts","source/world/world.ts","source/world/worldid.ts","source/world/worldofworldobjects.ts","source/world/worldposition.ts"],"names":["f","exports","module","define","amd","g","window","global","self","this","test_mock","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","canvasmouse_1","mouseeventhandlerworldobject_1","worlddisplay_1","CanvasHolderHTML","canvasName","world","isVisable","isDrawable","canvas","document","getElementById","context","getContext","canvasMouse","CanvasMouse","MouseEventHandlerWorldObject","prototype","clearCanvas","clearRect","getWidth","getHeight","fillStyle","WorldDisplay","getColorFromString","fillRect","getCanvas","isCanvasVisable","_isVisable","isCanvasDrawable","_isDrawable","Object","defineProperty","_canvasName","value","_canvas","_context","_canvasMouse","worldposition_1","canvasholderHTML","mouseEventHandler","offset","getCanvasOffset","addEventListener","event","pointerDownEvent","pointerMoveEvent","pointerUpEvent","offsetLeft","offsetTop","object","isNaN","element","offsetParent","hasOwnProperty","WorldPosition","_offset","_mouseEventHandler","mousestatus_1","mouseStatus","MouseStatus","currentWorldObject","lastWorldObject","getMouseStatus","worldObjectSelected","wWorldObject","worldObjectDeselected","getCurrentWorldObject","eventPosition","getWorldPositionFromMouseEvent","console","log","JSON","stringify","isDown","startPosition","position","setAnimated","setSelected","clickWorldObject","getWorldObjectContainingPosition","getWorldId","id","clone","clickOffset","getWorldPosition","getDelta","worldEngine","pointerDownEngineEvent","pointerMoveEngineEvent","pointerUpEngineEvent","_mouseStatus","_currentWorldObject","_lastWorldObject","_isDown","_startPosition","_position","_clickOffset","CircleDisplayShape","circleEngineShape","init","options","_circleEngineShape","draw","strokeStyle","beginPath","arc","x","y","getRadius","Math","PI","closePath","fill","lineWidth","stroke","PolygonDisplayShape","polygonEngineShape","_polygonEngineShape","drawOutlinedShape","getPolygonPoints","RectangleDisplayShape","rectangleEngineShape","_rectangleEngineShape","getShapePoints","colorString","parseInt","substring","pageX","pageY","startAngle","numberOfSides","radius","polygonPointArray","Array","angle","angleIncrement","push","cos","sin","worldPositionArray","point","moveTo","lineTo","getAveragePostionFromPositionList","positionList","p","getCirclePositionList","curvePoints","pointList","angleInc","rads","getTrianglePositionList","width","height","getRectanglePositionList","getArcPositionList","endAngle","abs","angle_1","fillTextMutipleLines","text","lineHeight","splitChar","lines","split","fillText","metricsTextMutipleLines","maxWidth","totalHeight","metrics","measureText","roundedRect","w","h","borderWitdh","borderColor","rectColor","arcTo","worldid_1","mockcircle_1","mockrectangle_1","mockpolygon_1","circledisplayshape_1","MockEngine","mouseAnchor","MockCircle","WorldId","restitution","isSensor","getMouseAnchor","createCircle","worldId","drawable","worldPosition","createRectangle","MockRectangle","createPolygon","MockPolygon","newPosition","translate","deltaPosition","newX","newY","setWorldPosition","_mouseAnchor","mockshape_1","_super","mockEngine","_this","__extends","containsWorldPosition","getDistance","_curvePoints","_radius","MockShape","j","c","pi","pj","getNumberOfSides","getPointList","_polygonPointArray","_numberOfSides","_width","_height","isObjectAnimated","isObjectVisable","isObjectSelected","isAnimated","isSelected","getOptions","animated","selected","setVisable","visable","getDrawable","_drawable","_worldId","_isObjectAnimated","_isObjectVisable","_isObjectSelected","_objectOptions","doDraw","drawWorld","canvasHolder","canvasholderhtml_1","mockengine_1","worldofworldobjects_1","rectangledisplayshape_1","polygondisplayshape_1","WorldOfWorldObjects","circle1","circle2","rectangle1","polygon1","worldObjectArray","setInterval","World","_worldEngine","woldObjectId","_id","world_1","foundObject","worldObject","_worldObjectArray","_x","_y","getDeltaY","getDeltaX","equals","sqrt","pow","getAveragePostionFromWorldPositionList","getAveragePostionFromWorldObjectList","worldObjectList","getPostionListFromNodeList","positions"],"mappings":"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","file":"test_mock.min.js","sourcesContent":["(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()","import { CanvasHolder } from \"./canvasholder\";\r\nimport { World } from \"../../world/world\";\r\nimport { CanvasMouse } from \"./canvasmouse\";\r\nimport { MouseEventHandlerWorldObject } from \"./mouseeventhandlerworldobject\";\r\nimport { WorldDisplay } from \"../worlddisplay\";\r\n\r\n\r\nexport class CanvasHolderHTML implements CanvasHolder\r\n{\r\n\tprivate _isVisable:boolean;\r\n\tprivate _isDrawable:boolean;\r\n\tprivate _canvasName:string;\r\n\tprivate _canvas:HTMLCanvasElement;\r\n\tprivate _context:CanvasRenderingContext2D;\r\n\tprivate _canvasMouse:CanvasMouse;\r\n\t\r\n\tconstructor(canvasName:string,world:World)\r\n\t{\r\n\t\tthis.canvasName = canvasName;\r\n\t\tthis.isVisable = true;\r\n\t\tthis.isDrawable = true;\r\n\t\tthis.canvas = <HTMLCanvasElement>document.getElementById(this.canvasName);\t\t\t\r\n\t\tthis.context = this.canvas.getContext(\"2d\");\r\n\t\tthis.canvasMouse = new CanvasMouse(world,this,new MouseEventHandlerWorldObject());\r\n\t\t/*if (typeof document !== 'undefined')\r\n\t\t{\r\n\t\t\tthis.canvas = document.getElementById(this.canvasName);\t\t\t\r\n\t\t\tthis.context = this.canvas.getContext('2d');\r\n\t\t}*/\r\n\t}\r\n\r\n\tpublic clearCanvas():void {\r\n\t\tif(this.isVisable && this.isDrawable)\r\n\t\t{\r\n\t\t\tthis.context.clearRect(0, 0, this.getWidth(), this.getHeight());\r\n\t\t\tthis.context.fillStyle = WorldDisplay.getColorFromString(\"ffffff\"+\"ff\");\r\n\t\t\tthis.context.fillRect(0, 0, this.getWidth(), this.getHeight());\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getCanvas():HTMLCanvasElement {\r\n\t\treturn(this.canvas);\r\n\t}\r\n\r\n\tpublic getContext():CanvasRenderingContext2D {\r\n\t\treturn(this.context);\r\n\t}\r\n\t\r\n\tpublic getWidth():number\r\n\t{\r\n\t\treturn(this.canvas.width);\r\n\t}\r\n\t\r\n\tpublic getHeight():number\r\n\t{\r\n\t\treturn(this.canvas.height);\r\n\t}\r\n\r\n\tpublic isCanvasVisable(): boolean {\r\n\t\treturn this._isVisable;\r\n\t}\r\n\r\n\tpublic isCanvasDrawable(): boolean {\r\n\t\treturn this._isDrawable;\r\n\t}\r\n\r\n\tpublic get canvasName(): string {\r\n\t\treturn this._canvasName;\r\n\t}\r\n\r\n\tpublic set canvasName(value: string) {\r\n\t\tthis._canvasName = value;\r\n\t}\r\n\r\n\r\n\tpublic get canvas(): HTMLCanvasElement {\r\n\t\treturn this._canvas;\r\n\t}\r\n\r\n\tpublic set canvas(value: HTMLCanvasElement) {\r\n\t\tthis._canvas = value;\r\n\t}\r\n\r\n\tpublic get context(): CanvasRenderingContext2D {\r\n\t\treturn this._context;\r\n\t}\r\n\r\n\tpublic set context(value: CanvasRenderingContext2D) {\r\n\t\tthis._context = value;\r\n\t}\r\n\r\n\tpublic get isVisable(): boolean {\r\n\t\treturn this._isVisable;\r\n\t}\r\n\r\n\tpublic set isVisable(value: boolean) {\r\n\t\tthis._isVisable = value;\r\n\t}\r\n\r\n\tpublic get isDrawable(): boolean {\r\n\t\treturn this._isDrawable;\r\n\t}\r\n\r\n\tpublic set isDrawable(value: boolean) {\r\n\t\tthis._isDrawable = value;\r\n\t}\r\n\r\n\tpublic get canvasMouse(): CanvasMouse {\r\n\t\treturn this._canvasMouse;\r\n\t}\r\n\r\n\tpublic set canvasMouse(value: CanvasMouse) {\r\n\t\tthis._canvasMouse = value;\r\n\t}\r\n\t\r\n\t\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t/*\r\n\tstatic createCanvasHolderFromClientJson(worldDef,json)\r\n\t{\r\n\t  var canvasHolder = new CanvasHolder(json.canavsName,worldDef);\r\n\t  return(canvasHolder);\r\n\t}\r\n\t*/\r\n\t/*\r\n\t  getClientJson()\r\n\t  {\r\n\t\t  var json = {};\r\n\t\t  \r\n\t\t  \r\n\t\t  json.canvasName = this.canvasName;\r\n\t\t  json.origin = this.origin;\r\n\t\t  json.width = this.getWidth();\r\n\t\t  json.height = this.getHeight();\r\n\t\t  json.worldDef = this.worldDef;\r\n\t\t  \r\n\t\t  JSON.stringify(json);\r\n\t\t  return(json)\r\n\t  }\r\n\t*/\r\n\r\n\t/*  \r\n\tgetConnector(connectorDefKey,name)\r\n\t{\r\n\t\tvar connector = this.getConnectorDef(connectorDefKey)(this.worldDef,name);\r\n\t\tconnector.connectorDefKey = connectorDefKey;\r\n\t\treturn(connector);\r\n\t}\r\n\t*/\r\n\r\n\t/*\r\n\tgetConnectorDef(connectorDefKey)\r\n\t{\r\n\t\tvar connectorDef = this.worldDef.worldDisplay.connectorDefs[\"generic\"];\r\n\t\t\r\n\t\tvar foundConnectorDef = false;\r\n\t\tif(this.worldDef.worldDisplay.connectorDefs.hasOwnProperty(connectorDefKey))\r\n\t\t{\r\n\t\t\tconnectorDef = this.worldDef.worldDisplay.connectorDefs[connectorDefKey];\r\n\t\t\tfoundConnectorDef = true;\r\n\t\t}\r\n\t\tif(!foundConnectorDef) console.trace(\"CanvasHolder:getConnectorDef:connectorDefKey=\\\"\"+connectorDefKey+ \"\\\" was not found using generic\");\r\n\t\telse console.log(\"found connector display :\"+connectorDefKey);\r\n\t\tconnectorDef.connectorDefKey = connectorDefKey;\r\n\t\treturn(connectorDef);\r\n\t}\r\n\t*/\r\n\r\n\t/*\r\n\tgetConnectorDisplay(connectorDisplayKey)\r\n\t{\r\n\t\tvar connectorDisplay = this.worldDef.worldDisplay.connectorDisplay[\"generic\"];\r\n\t\t\r\n\t\tvar foundConnectorDisplay = false;\r\n\t\tif(this.worldDef.worldDisplay.connectorDisplay.hasOwnProperty(connectorDisplayKey))\r\n\t\t{\r\n\t\t\tconnectorDisplay = this.worldDef.worldDisplay.connectorDisplay[connectorDisplayKey];\r\n\t\t\tfoundConnectorDisplay = true;\r\n\t\t}\r\n\t\tif(!foundConnectorDisplay) console.trace(\"CanvasHolder:getConnectorDisplay:connectorDisplayKey=\\\"\"+connectorDisplayKey+ \"\\\" was not found using generic\");\r\n\t\tconnectorDisplay.connectorDisplayKey = connectorDisplayKey;\r\n\t\treturn(connectorDisplay);\r\n\t}\r\n\t*/\r\n\r\n\t/*\r\n\tgetGraphData(graphDataKey)\r\n\t{\r\n\t\tvar graphData = this.worldDef.worldDisplay.nodeDisplay[\"generic\"];\t\r\n\t\tvar foundGraphData = false;\r\n\t\tif(this.worldDef.worldDisplay.nodeDisplay.hasOwnProperty(graphDataKey))\r\n\t\t{\r\n\t\t\tgraphData = this.worldDef.worldDisplay.nodeDisplay[graphDataKey];\r\n\t\t\tfoundGraphData = true;\r\n\t\t}\r\n\t\tif(!foundGraphData) console.trace(\"CanvasHolder:getGraphData:graphDataKey=\\\"\"+graphDataKey+ \"\\\" was not found using generic\")\r\n\t\t//console.trace(\"CanvasHolder:getGraphData:graphDataKey=\\\"\"+graphDataKey+ \"\\\" was not found using generic\")\r\n\t\t//console.log(\"FOR:\"+graphDataKey+Common.toString(graphData));\r\n\t\t//console.log(\"getGraphData:graphDataKey=\"+graphDataKey+\":clone=\"+graphData.nodeDisplay.displayInfo.clone);\r\n\r\n\t\t//if(graphData.nodeDisplay.displayInfo.clone)\r\n\t\tif(graphData.nodeDisplayFunction)\r\n\t\t{\r\n\t\t\t//console.log(\"getGraphData:graphDataKey:FOUND A FUNCTION:\"+graphDataKey);\r\n\t\t\tgraphData = Object.create(graphData);\r\n\t\t\tgraphData.nodeDisplay = graphData.nodeDisplayFunction();\r\n\t\t\t//console.log(\"CLONING:\"+graphDataKey+Common.toString(graphData));\r\n\t\t\t//graphData.nodeDisplay.displayInfo = Object.create(graphData.nodeDisplay.displayInfo);\r\n\t\t\t//graphData.nodeDisplay.displayInfo  = JSON.parse(JSON.stringify(graphData.nodeDisplay.displayInfo));\r\n\t\t\t//graphData.nodeDisplay.displayInfo  = JSON.parse(JSON.stringify(graphData.nodeDisplay.displayInfo));\r\n\t\t\t//graphData = Object.create(graphData);\r\n\t\t\t//graphData.nodeDisplay.displayInfo.ts = new Date().getTime();\r\n\r\n\r\n\t\t}\r\n\r\n\t\tgraphData.graphDataKey = graphDataKey;\r\n\t\treturn(graphData);\r\n\t}\r\n\t*/\r\n\t/*\r\n\tclone(origin)\r\n\t{\r\n\t\tvar canvasHolder = new CanvasHolderHTML(this.canvasName);\r\n\t\t//canvasHolder.origin = origin;\r\n\t\t\r\n\t\tvar canvasHolder = new Object();\r\n\t\tcanvasHolder.origin = origin;\r\n\t\t\r\n\t\tcanvasHolder.canvasName = this.canvasName;\r\n\t\tcanvasHolder.canvas = this.canvas;\r\n\t\tcanvasHolder.context = this.context;\r\n\t\tcanvasHolder.isCanvasVisable = this.isCanvasVisable;\r\n\t\tcanvasHolder.isCanvasDrawable = this.isCanvasDrawable;\r\n\t\tcanvasHolder.isDrawable = this.isDrawable;\r\n\t\tcanvasHolder.isVisable = this.isVisable;\r\n\t\tcanvasHolder.getWidth = this.getWidth;\r\n\t\tcanvasHolder.getHeight = this.getHeight;\r\n\t\tcanvasHolder.worldDef = this.worldDef;\r\n\t\tcanvasHolder.getGraphData = this.getGraphData;\r\n\t\t\r\n\t\t\r\n\t\treturn(canvasHolder);\r\n\t}\r\n\t*/","import { WorldPosition } from \"../../world/worldposition\";\r\nimport { CanvasHolderHTML } from \"./canvasholderhtml\";\r\nimport { MouseEventHandler } from \"./mouseeventhandler\";\r\nimport { World } from \"../../world/world\";\r\n\r\n\r\nexport class CanvasMouse\r\n{\r\n\tprivate _offset:WorldPosition;\r\n\tprivate canvasholderHTML:CanvasHolderHTML;\r\n\tprivate _mouseEventHandler:MouseEventHandler;\r\n\t\r\n\r\n\tconstructor(world:World,canvasholderHTML:CanvasHolderHTML,mouseEventHandler:MouseEventHandler)\r\n\t{\r\n\t\tthis.canvasholderHTML = canvasholderHTML;\r\n\t\tthis.mouseEventHandler = mouseEventHandler;\r\n\t\tif(canvasholderHTML.isCanvasVisable()) \r\n\t\t{\r\n\t\t\t//this.offset = NodeCanvasMouse.getCanvasOffset(this.canvasholder.canvas);\r\n\t\t\tthis.offset = this.getCanvasOffset();\t\t\r\n\t\t\tvar self = this;\r\n\t\t\tthis.canvasholderHTML.canvas.addEventListener(\"pointerdown\", function(event) { self.pointerDownEvent(world,self,event) }, false);\r\n\t\t\tthis.canvasholderHTML.canvas.addEventListener(\"pointermove\",function(event) { self.pointerMoveEvent(world,self,event) }, false);\r\n\t\t\tthis.canvasholderHTML.canvas.addEventListener(\"pointerup\",function(event) { self.pointerUpEvent(world,self,event) }, false);\r\n\t\t\t//this.nodeMouseMovment = {};\r\n\t\t}\r\n\t}\r\n\r\n\tprivate getCanvasOffset():WorldPosition\r\n\t{\r\n\t    let offsetLeft = 0;\r\n\t\tlet offsetTop = 0;\r\n\t\tlet object:HTMLElement = this.canvasholderHTML.canvas;\r\n\t    do\r\n\t    {\r\n\t      if (!isNaN(object.offsetLeft))\r\n\t      {\r\n\t          offsetLeft += object.offsetLeft;\r\n\t      }\r\n\t      if (!isNaN(object.offsetTop))\r\n\t      {\r\n\t          offsetTop += object.offsetTop;\r\n\t\t  }   \r\n\t\t let element:any = object.offsetParent;\r\n\t\t if(element.hasOwnProperty(\"offsetParent\")) object = element;\r\n\t\t else object = null;\r\n\t    }\r\n\t    while(object);\r\n\t    \r\n\t    return( new WorldPosition(offsetLeft,offsetTop) );\r\n\t}\r\n\r\n\tpublic pointerDownEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent) {\r\n\t\tthis.mouseEventHandler.pointerDownEvent(world,canvasMouse,event);\r\n\t}\r\n\t\r\n\tpublic pointerMoveEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent)\t{\r\n\t\tthis.mouseEventHandler.pointerMoveEvent(world,canvasMouse,event);\r\n\r\n\t}\r\n\t\r\n\tpublic pointerUpEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent)\r\n\t{\r\n\t\tthis.mouseEventHandler.pointerUpEvent(world,canvasMouse,event);\r\n\r\n\t}\r\n\t\r\n\r\n\t\r\n\tpublic get offset(): WorldPosition {\r\n\t\treturn this._offset;\r\n\t}\r\n\r\n\tpublic set offset(value: WorldPosition) {\r\n\t\tthis._offset = value;\r\n\t}\r\n\r\n\tpublic get mouseEventHandler(): MouseEventHandler {\r\n\t\treturn this._mouseEventHandler;\r\n\t}\r\n\r\n\tpublic set mouseEventHandler(value: MouseEventHandler) {\r\n\t\tthis._mouseEventHandler = value;\r\n\t}\r\n\r\n\r\n\tpublic get $canvasholderHTML(): CanvasHolderHTML {\r\n\t\treturn this.canvasholderHTML;\r\n\t}\r\n\r\n\tpublic set $canvasholderHTML(value: CanvasHolderHTML) {\r\n\t\tthis.canvasholderHTML = value;\r\n\t}\r\n\t\r\n\r\n}\r\n","import { MouseStatus } from \"./mousestatus\";\r\nimport { WorldObject } from \"../../world/worldobject\";\r\nimport { MouseEventHandler } from \"./mouseeventhandler\";\r\nimport { WorldPosition } from \"../../world/worldposition\";\r\nimport { World } from \"../../world/world\";\r\nimport { CanvasMouse } from \"./canvasmouse\";\r\nimport { WorldDisplay } from \"../worlddisplay\";\r\n\r\n\r\n\r\nexport class MouseEventHandlerWorldObject implements MouseEventHandler {\r\n   private _mouseStatus:MouseStatus;\r\n   private _currentWorldObject:WorldObject;\r\n   private _lastWorldObject:WorldObject;\r\n\r\n    constructor()\r\n    {\r\n        this.mouseStatus = new MouseStatus();\r\n        this.currentWorldObject = null;\r\n        this.lastWorldObject = null;\r\n\t}\r\n\t\r\n\tpublic getMouseStatus():MouseStatus {\r\n\t\treturn(this.mouseStatus);\r\n\t}\r\n\r\n    public worldObjectSelected(world:World,event:MouseEvent,wWorldObject:WorldObject):void {\r\n\r\n    }\r\n\r\n    public worldObjectDeselected(world:World,event:MouseEvent):void {\r\n\r\n\t}\r\n\r\n\tpublic getCurrentWorldObject():WorldObject {\r\n\t\treturn(this.currentWorldObject);\r\n\t}\r\n\t\r\n\t/*\r\n\tpublic getWorldPositionFromMouseEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent):WorldPosition {\r\n\t\tvar eventPosition:WorldPosition = new WorldPosition(event.pageX-canvasMouse.offset.x,event.pageY-canvasMouse.offset.y);\r\n\t\treturn(eventPosition);\r\n\t}\r\n\t*/\r\n   \r\n    public pointerDownEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent):void\r\n\t{\r\n\t\t//console.log(\"pointerDownEvent:\"+JSON.stringify(event));;\r\n\t\tvar eventPosition:WorldPosition = WorldDisplay.getWorldPositionFromMouseEvent(world,canvasMouse,event);\r\n\t\t//this.hideCurrentNodeInfo();\r\n\t\tconsole.log(\"pointerDownEvent:\"+JSON.stringify(eventPosition));;\r\n\r\n\t\tthis.mouseStatus.isDown = true;\r\n\t\tthis.mouseStatus.startPosition = eventPosition;\r\n\t\tthis.mouseStatus.position = eventPosition;\r\n\t\tif(this.currentWorldObject!=null)\r\n\t\t{\r\n\t\t\tthis.currentWorldObject.setAnimated(true);\r\n\t\t\tthis.currentWorldObject.setSelected(false);\r\n\t\t\tthis.currentWorldObject = null;\r\n\t\t}\r\n\t\t\r\n\t\tlet clickWorldObject:WorldObject =  world.getWorldObjectContainingPosition(eventPosition);\r\n\t\r\n\t\tif(clickWorldObject!=null && clickWorldObject!=this.lastWorldObject)\r\n\t\t{\r\n\t\t\tconsole.log(\"pointerDownEvent:clickWorldObject=\"+clickWorldObject.getWorldId().id);\r\n\r\n\t\t\tthis.currentWorldObject = clickWorldObject;\r\n\r\n\t\t\tthis.mouseStatus.startPosition = eventPosition.clone();\r\n\r\n\t\t\tthis.currentWorldObject.setSelected(true);\r\n\t\t\tthis.mouseStatus.clickOffset = this.currentWorldObject.getWorldPosition().getDelta(eventPosition);\r\n\t\t\tthis.currentWorldObject.setAnimated(false);\r\n\t\t\t/////////////////this.mouseStatus.clickOffset = clickWorldObject.getWorldPosition().getDelta(eventPosition);\r\n\t\t\t//this.mouseEventHandler.pointerDown(this.mouseStatus);\t\t\t\r\n\t\t\tthis.worldObjectSelected(world,event,this.currentWorldObject);\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tif(clickWorldObject==null)\r\n\t\t{\r\n\t\t\tthis.worldObjectDeselected(world,event);\r\n\t\t}\r\n\t\t\r\n\t\tif(this.lastWorldObject)\r\n\t\t{\r\n\t\t\tthis.worldObjectDeselected(world,event);\r\n\t\t\tthis.lastWorldObject.setSelected(false);\r\n\t\t\tthis.lastWorldObject = null;\r\n\t\t}\r\n\r\n\t\tworld.worldEngine.pointerDownEngineEvent(world,canvasMouse,event,this);\r\n\t\t////////////this.updateObjectPosition(eventPosition);\r\n\r\n\t\t\r\n\t\t\r\n\t\r\n\t}\r\n/*\r\n\tprivate updateObjectPosition():void {\r\n\r\n\t\tif(this.currentWorldObject!=null)\r\n\t\t{\r\n\t\t\tthis.currentWorldObject.setAnimated(false);\r\n\t\t\tthis.mouseStatus.position = this.mouseStatus.position;;\r\n\t\t\tvar deltaPosition = this.mouseStatus.startPosition.getDelta(this.mouseStatus.position);\r\n\r\n\r\n\t\t\t\t\t\r\n\t\t\tlet newX = this.mouseStatus.startPosition.x-\r\n\t\t\t\t\tdeltaPosition.x+\r\n\t\t\t\t\tthis.mouseStatus.clickOffset.x;\r\n\t\t\t\r\n\t\t\tlet newY = this.mouseStatus.startPosition.y-\r\n\t\t\t\t\tdeltaPosition.y+\r\n\t\t\t\t\tthis.mouseStatus.clickOffset.y;\r\n\r\n\t\t\tthis.currentWorldObject.setWorldPosition( new WorldPosition(newX,newY));\r\n\t\t}\r\n\t}\r\n  */  \r\n    \r\n\r\n    public pointerMoveEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent):void {\r\n\t\tvar eventPosition:WorldPosition = WorldDisplay.getWorldPositionFromMouseEvent(world,canvasMouse,event);\r\n\t\tthis.mouseStatus.position = eventPosition;\r\n\t\t\r\n\t\tif(this.mouseStatus.isDown)\r\n\t\t{\r\n\t\t\t//var eventPosition:WorldPosition = WorldDisplay.getWorldPositionFromMouseEvent(world,canvasMouse,event);\r\n\t\t\t//this.mouseStatus.position = eventPosition;\r\n\t\t\t\r\n\t\t\t////////////console.log(\"pointerMoveEvent:\"+event);\r\n\r\n\t\t\tthis.worldObjectDeselected(world,event);\r\n\t\t\tif(this.currentWorldObject!=null) this.currentWorldObject.setAnimated(false);\r\n\t\t\tthis.mouseStatus.position = this.mouseStatus.position;;\r\n\t\t\t\r\n\t\t\t//this.updateObjectPosition(eventPosition);\r\n\t\t\t/*\r\n\t\t\tif(this.currentWorldObject!=null)\r\n\t\t\t{\r\n\t\t\t\tthis.currentWorldObject.setAnimated(false);\r\n\t\t\t\tthis.mouseStatus.position = eventPosition;\r\n\t\t\t\tvar deltaPosition = this.mouseStatus.startPosition.getDelta(eventPosition);\r\n\r\n\r\n\t\t\t\t\t\t\r\n\t\t\t\tlet newX = this.mouseStatus.startPosition.x-\r\n\t\t\t\t\t\tdeltaPosition.x+\r\n\t\t\t\t\t\tthis.mouseStatus.clickOffset.x;\r\n\t\t\t\t\r\n\t\t\t\tlet newY = this.mouseStatus.startPosition.y-\r\n\t\t\t\t\t\tdeltaPosition.y+\r\n\t\t\t\t\t\tthis.mouseStatus.clickOffset.y;\r\n\r\n\t\t\t\tthis.currentWorldObject.setWorldPosition( new WorldPosition(newX,newY));\r\n\t\t\t}\r\n\t\t\t*/\r\n\t\t}\r\n\t\tworld.worldEngine.pointerMoveEngineEvent(world,canvasMouse,event,this);\r\n    }\r\n            \r\n\r\n    public pointerUpEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent):void \t{\r\n\t\t//console.log(\"pointerUpEvent:\"+JSON.stringify(event));\r\n\t\t//var eventPosition:WorldPosition = this.getWorldPositionFromMouseEvent(world,canvasMouse,event);\r\n\t\tvar eventPosition:WorldPosition = WorldDisplay.getWorldPositionFromMouseEvent(world,canvasMouse,event);\r\n\t\tthis.mouseStatus.position = eventPosition;\r\n\t\t\r\n\t\tif(this.currentWorldObject!=null)\r\n\t\t{\r\n\t\t\t///this.nodeCanvas.pointerUp(this.mouseStatus.node);\r\n\t\t\tthis.currentWorldObject.setAnimated(true);\r\n\t\t\t//this.mouseStatus.node.isSelected = false;\r\n\t\t\tthis.lastWorldObject = this.currentWorldObject;\r\n\t\r\n\t\t\tthis.currentWorldObject = null;\r\n\t\t}\r\n\t\tthis.mouseStatus.isDown = false;\r\n\t\tworld.worldEngine.pointerUpEngineEvent(world,canvasMouse,event,this);\r\n\t\t\r\n\t}\r\n\r\n\tpublic get mouseStatus(): MouseStatus {\r\n\t\treturn this._mouseStatus;\r\n\t}\r\n\r\n\tpublic set mouseStatus(value: MouseStatus) {\r\n\t\tthis._mouseStatus = value;\r\n\t}\r\n\r\n\r\n\tpublic get currentWorldObject(): WorldObject {\r\n\t\treturn this._currentWorldObject;\r\n\t}\r\n\r\n\tpublic set currentWorldObject(value: WorldObject) {\r\n\t\tthis._currentWorldObject = value;\r\n\t}\r\n\r\n\r\n\tpublic get lastWorldObject(): WorldObject {\r\n\t\treturn this._lastWorldObject;\r\n\t}\r\n\r\n\tpublic set lastWorldObject(value: WorldObject) {\r\n\t\tthis._lastWorldObject = value;\r\n\t}\r\n    \r\n}","import { WorldPosition } from \"../../world/worldposition\";\r\n\r\nexport class MouseStatus\r\n{\r\n\tprivate _isDown:boolean;\r\n\tprivate _startPosition:WorldPosition;\r\n\tprivate _position:WorldPosition;\r\n\t//private _worldObject:WorldObject;\r\n\t//private _objectStartPosition:WorldPosition;\r\n\tprivate _clickOffset:WorldPosition;\r\n\t//private _lastWorldObject:WorldObject;\r\n\t\r\n\t\r\n\t\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tthis.isDown = false;\r\n\t\tthis.startPosition = new WorldPosition(0,0);\r\n\t\tthis.position = new WorldPosition(0,0);\r\n\t\tthis.clickOffset = new WorldPosition(0,0);\r\n\r\n\t\t//this.objectStartPosition = null\r\n\t}\r\n// \t\t\tnodeCanvasMouse.mouseStatus = new MouseStatus(false,new Position(0,0),new Position(0,0),null,null);\r\n\r\n\r\n\tpublic get isDown(): boolean {\r\n\t\treturn this._isDown;\r\n\t}\r\n\r\n\tpublic set isDown(value: boolean) {\r\n\t\tthis._isDown = value;\r\n\t}\r\n\r\n\tpublic get startPosition(): WorldPosition {\r\n\t\treturn this._startPosition;\r\n\t}\r\n\r\n\tpublic set startPosition(value: WorldPosition) {\r\n\t\tthis._startPosition = value;\r\n\t}\r\n\t\r\n\r\n\tpublic get position(): WorldPosition {\r\n\t\treturn this._position;\r\n\t}\r\n\r\n\tpublic set position(value: WorldPosition) {\r\n\t\tthis._position = value;\r\n\t}\r\n\r\n\tpublic get clickOffset(): WorldPosition {\r\n\t\treturn this._clickOffset;\r\n\t}\r\n\r\n\tpublic set clickOffset(value: WorldPosition) {\r\n\t\tthis._clickOffset = value;\r\n\t}\r\n\r\n\r\n\r\n\t\r\n}\r\n","import { Drawable } from \"../drawable\";\r\nimport { WorldPosition } from \"../../world/worldposition\";\r\n//import { WalkerWorld } from \"../../walkers/walkerworld/walkerworld\";\r\nimport { WorldDisplay } from \"../worlddisplay\";\r\nimport { CircleEngineShape } from \"../../engine/shapes/circleengineshape\";\r\n//import { WalkerEngine } from \"../../walkerworld/walkerengine\";\r\n\r\n\r\nexport class CircleDisplayShape implements Drawable\r\n{\r\n\tprivate _circleEngineShape:CircleEngineShape;\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tthis.circleEngineShape = null;\r\n\t}\r\n\r\n\tpublic init(circleEngineShape:CircleEngineShape,options:any):void {\r\n\t\tthis.circleEngineShape = circleEngineShape;\t\t\r\n\t}\r\n\t\r\n\r\n\tpublic get circleEngineShape(): CircleEngineShape {\r\n\t\treturn this._circleEngineShape;\r\n\t}\r\n\r\n\tpublic set circleEngineShape(value: CircleEngineShape) {\r\n\t\tthis._circleEngineShape = value;\r\n\t}\r\n\t\r\n\t\r\n\tpublic draw(context:CanvasRenderingContext2D):void\r\n\t{\r\n\t\tif(!this.circleEngineShape) throw Error(\"CircleDisplayShape:CircleEngineShape is not set, was init called?\")\r\n\t\t//super.drawConnector(canvasHolder,node);\r\n\t\t/*\r\n\t\tsuper.drawNode(canvasHolder,node);\r\n\r\n\t\t*/\r\n\t\t//console.log(\"CircleDisplayShape.drawShape\");\r\n\r\n\t\tcontext.fillStyle = WorldDisplay.getColorFromString(\"ff0000ff\");\r\n\t\tcontext.strokeStyle = WorldDisplay.getColorFromString(\"0000ffff\");\r\n\t\tlet position:WorldPosition = this.circleEngineShape.getWorldPosition();\r\n\t\t\r\n\t    context.beginPath();\r\n\t    context.arc(position.x,position.y,this.circleEngineShape.getRadius(),0,Math.PI * 2, false);\r\n\t    context.closePath();\r\n\t    context.fill();\r\n\t    context.lineWidth = 2;\r\n\t\tcontext.stroke();\r\n\t}\r\n}\r\n","import { Drawable } from \"../drawable\";\r\nimport { PolygonEngineShape } from \"../../engine/shapes/polygonengineshape\";\r\nimport { WorldDisplay } from \"../worlddisplay\";\r\n\r\nexport class PolygonDisplayShape implements Drawable\r\n{\r\n\tprivate _polygonEngineShape:PolygonEngineShape;\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tthis.polygonEngineShape = null;\r\n\t}\r\n\r\n\tpublic init(polygonEngineShape:PolygonEngineShape,options:any):void {\r\n\t\tthis.polygonEngineShape = polygonEngineShape;\t\t\r\n\t}\r\n\r\n\tpublic get polygonEngineShape(): PolygonEngineShape {\r\n\t\treturn this._polygonEngineShape;\r\n\t}\r\n\r\n\tpublic set polygonEngineShape(value: PolygonEngineShape) {\r\n\t\tthis._polygonEngineShape = value;\r\n\t}\r\n\r\n\t\r\n\t\r\n\tpublic draw(context:CanvasRenderingContext2D):void\r\n\t{\r\n\t\tif(!this.polygonEngineShape) throw Error(\"PolygonDisplayShape:PolygonEngineShape is not set, was init called?\")\r\n\r\n\t\tcontext.fillStyle = WorldDisplay.getColorFromString(\"ff0000ff\");\r\n\t\tcontext.strokeStyle = WorldDisplay.getColorFromString(\"0000ffff\");\r\n        context.lineWidth = 2;\r\n        \r\n        WorldDisplay.drawOutlinedShape(context,this.polygonEngineShape.getPolygonPoints());\r\n\t\t\r\n\t}\r\n}\r\n","import { Drawable } from \"../drawable\";\r\nimport { WorldDisplay } from \"../worlddisplay\";\r\nimport { RectangleEngineShape } from \"../../engine/shapes/rectangleengineshape\";\r\n\r\nexport class RectangleDisplayShape implements Drawable\r\n{\r\n\tprivate _rectangleEngineShape:RectangleEngineShape;\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tthis.rectangleEngineShape = null;\r\n\t}\r\n\r\n\tpublic init(rectangleEngineShape:RectangleEngineShape,options:any):void {\r\n\t\tthis.rectangleEngineShape = rectangleEngineShape;\t\t\r\n\t}\r\n\r\n\tpublic get rectangleEngineShape(): RectangleEngineShape {\r\n\t\treturn this._rectangleEngineShape;\r\n\t}\r\n\r\n\tpublic set rectangleEngineShape(value: RectangleEngineShape) {\r\n\t\tthis._rectangleEngineShape = value;\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\tpublic draw(context:CanvasRenderingContext2D):void\r\n\t{\r\n\t\tif(!this.rectangleEngineShape) throw Error(\"RectangleDisplayShape:rectangleEngineShape is not set, was init called?\")\r\n\t\t//super.drawConnector(canvasHolder,node);\r\n\t\t/*\r\n\t\tsuper.drawNode(canvasHolder,node);\r\n\r\n\t\t*/\r\n\t\t//console.log(\"CircleDisplayShape.drawShape\");\r\n\r\n\t\tcontext.fillStyle = WorldDisplay.getColorFromString(\"ff0000ff\");\r\n\t\tcontext.strokeStyle = WorldDisplay.getColorFromString(\"0000ffff\");\r\n\r\n        context.lineWidth = 2;\r\n        \r\n        WorldDisplay.drawOutlinedShape(context,this.rectangleEngineShape.getShapePoints());\r\n\r\n\t\t/*\r\n\r\n\t\tlet position:WorldPosition = this.rectangleEngineShape.getWorldPosition();\r\n\r\n\r\n\t\tcontext.fillRect( \r\n\t\t\t(position.x-this.rectangleEngineShape.getWidth()/2),\r\n\t\t\t(position.y-this.rectangleEngineShape.getHeight()/2),\r\n\t\t\tthis.rectangleEngineShape.getWidth(),\r\n\t\t\tthis.rectangleEngineShape.getHeight());\r\n\t\t\tcontext.lineWidth = 2;\r\n\t\tcontext.strokeRect( \r\n\t\t\t(position.x-this.rectangleEngineShape.getWidth()/2), \r\n\t\t\t(position.y-this.rectangleEngineShape.getHeight()/2), \r\n\t\t\tthis.rectangleEngineShape.getWidth(), \r\n\t\t\tthis.rectangleEngineShape.getHeight());\r\n\t\t*/\r\n\r\n\t}\r\n}\r\n","\r\nimport { WorldPosition } from \"../world/worldposition\";\r\nimport { World } from \"../world/world\";\r\nimport { CanvasMouse } from \"./canvas/canvasmouse\";\r\n\r\nexport class WorldDisplay  {\r\n    /*\r\n    static world(render:Matter.Render) {\r\n\r\n        Matter.Render.world(render);\r\n        console.log(\"doing some redering...\");\r\n    }\r\n    */    \r\n    public static getColorFromString(colorString:string):string\r\n    {\r\n      if(colorString.length==6)\r\n      {\r\n        colorString += \"ff\";\r\n      }\r\n      \r\n      let color = \"rgba(\"+\r\n          parseInt(colorString.substring(0,2), 16)+\",\"+\r\n          parseInt(colorString.substring(2,4), 16)+\",\"+\r\n          parseInt(colorString.substring(4,6), 16)+\",\"+\r\n          parseInt(colorString.substring(6,8), 16)/255.0+\")\";\r\n      \r\n      return(color);\r\n\t}\r\n\r\n\tpublic static getWorldPositionFromMouseEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent):WorldPosition {\r\n\t\tvar eventPosition:WorldPosition = new WorldPosition(event.pageX-canvasMouse.offset.x,event.pageY-canvasMouse.offset.y);\r\n\t\treturn(eventPosition);\r\n\t}\r\n\r\n\r\n\tpublic static getPolygonPoints(startAngle:number,numberOfSides:number,radius:number,position:WorldPosition):Array<WorldPosition> {\r\n\t\tlet polygonPointArray = Array<WorldPosition>();\t\r\n        let angle = 0\r\n        let angleIncrement = 2 * Math.PI / numberOfSides;\r\n    \r\n        for(let i=0;i < numberOfSides;i++) {\r\n            polygonPointArray.push(new WorldPosition(\r\n                position.x  + radius * Math.cos(angle),\r\n                position.y  + radius * Math.sin(angle)\r\n            ));\r\n            angle = angle + angleIncrement;\r\n                \r\n\t\t}\r\n\t\treturn(polygonPointArray);\r\n\t}\r\n\t/**\r\n\t * Draws an outlined shape from an Array of WorldPosition objects. It is assumed that the fill color, \r\n\t * stroek color and line width for the context have been set before the call is made\r\n\t * \r\n\t * @static\r\n\t * @param {CanvasRenderingContext2D} context \r\n\t * @param {Array<WorldPosition>} worldPositionArray \r\n\t * @memberof WorldDisplay\r\n\t */\r\n\tpublic static drawOutlinedShape(context:CanvasRenderingContext2D,worldPositionArray:Array<WorldPosition>):void\r\n\t{\t    \r\n\t    context.beginPath();\r\n\t    for(let i=0;i<worldPositionArray.length;i++)\r\n\t    {   \t\r\n\t\t\tvar point = worldPositionArray[i];\r\n\t    \tif(i==0) context.moveTo(point.x,point.y);\r\n\t    \telse context.lineTo(point.x,point.y);\r\n\t    }\r\n\t    context.closePath();\r\n\t    \r\n\t    context.fill();\r\n\t    //context.lineWidth = displayInfo.borderWidth;\r\n\t    context.stroke();\r\n\t}\r\n\r\n\tpublic static getAveragePostionFromPositionList(positionList:Array<WorldPosition>):WorldPosition\r\n\t{\r\n\t  let x = 0.0;\r\n\t  let y = 0.0;\r\n\t  for(let i=0;i<positionList.length;i++)\r\n\t  {\r\n\t\t  let p = positionList[i];\r\n\t\t  x += p.x;\r\n\t\t  y += p.y;\r\n\t  }\r\n\t  x = x / positionList.length;\r\n\t  y = y / positionList.length;\r\n\t  return(new WorldPosition(x,y));\r\n\t}\r\n\t\t  \r\n\r\n    public static getCirclePositionList(radius:number,curvePoints:number):Array<WorldPosition> {\r\n\t\tlet pointList = new Array<WorldPosition>();\r\n\t\t\r\n\t\tlet angleInc = 360 / curvePoints;\r\n\t\tfor(let angle=0;angle<=360;angle=angle+angleInc)\r\n\t\t{\r\n\t\t\tlet rads = angle * (Math.PI/180);\r\n\t\t\tpointList.push(\r\n\t\t\t\t\tnew WorldPosition(\r\n\t\t\t\t\t\t\tradius*Math.cos(rads),\r\n\t\t\t\t\t\t\tradius*Math.sin(rads))\r\n\t\t\t\t\t);\t\r\n\t\t}\r\n\t\t\r\n\t\treturn(pointList);\r\n\t}\r\n\r\n\tpublic static getTrianglePositionList(width:number,height:number):Array<WorldPosition> {\r\n\t\tlet pointList = new Array<WorldPosition>();\r\n\t\t\r\n\t\tpointList.push(new WorldPosition(0,-(height/2)));\r\n\t\tpointList.push(new WorldPosition(width/2,height/2));\r\n\t\tpointList.push(new WorldPosition(-(width/2),height/2));\r\n\t\tpointList.push(new WorldPosition(0,-(height/2)));\r\n\t\t\r\n\t\treturn(pointList);;\r\n\t}\r\n\t\r\n\tpublic static getRectanglePositionList(width:number,height:number):Array<WorldPosition> {\r\n\t\tlet pointList = new Array<WorldPosition>();\r\n\t\t\r\n\t\tpointList.push(new WorldPosition(-(width/2),-(height/2)));\r\n\t\tpointList.push(new WorldPosition((width/2),-(height/2)));\r\n\t\tpointList.push(new WorldPosition((width/2),(height/2)));\r\n\t\tpointList.push(new WorldPosition(-(width/2),(height/2)));\t\r\n\t\tpointList.push(new WorldPosition(-(width/2),-(height/2)));\r\n\t\r\n\t\treturn(pointList);;\r\n\t}\r\n\r\n\tpublic static getArcPositionList(endAngle:number,startAngle:number,radius:number,curvePoints:number):Array<WorldPosition> {\r\n\t\tlet pointList = new Array<WorldPosition>();\r\n\t\t\r\n\t\t// bug durring the port to javascript... it was just expecting one arg so probably endAngle was used\r\n\t\tlet angle:number = Math.abs(endAngle-startAngle);\r\n\t\tlet angleInc:number = angle / curvePoints;\r\n\t\t\r\n\t\tpointList.push(new WorldPosition(0,0));\r\n\t\tfor(let angle=startAngle;\r\n\t\t\tangle<=endAngle && angleInc>0;\r\n\t\t\tangle=angle+angleInc)\r\n\t\t{\r\n\t\t\tif( (angle+angleInc) > endAngle )\r\n\t\t\t{\r\n\t\t\t\tif(angle!=endAngle) angle = endAngle ;\r\n\t\t\t}\r\n\t\t\tvar rads = angle * (Math.PI/180);\r\n\t\t\tpointList.push(\r\n\t\t\t\t\tnew WorldPosition(\r\n\t\t\t\t\t\t\tradius*Math.cos(rads),\r\n\t\t\t\t\t\t\tradius*Math.sin(rads))\r\n\t\t\t\t\t);\t\r\n\t\t}\r\n\t\t\r\n\t\tpointList.push(new WorldPosition(0,0));\r\n\t\t\r\n\t\treturn(pointList);\r\n\t}\r\n\r\n    public static fillTextMutipleLines(context:CanvasRenderingContext2D,text:string,x:number,y:number,lineHeight:number,splitChar:string)\r\n\t{\r\n\t\tlet lines:Array<string> = text.split(splitChar);\r\n\t    let line:string = '';\r\n\t\r\n\t    for(let n = 0; n < lines.length; n++)\r\n\t    {\r\n\t      //let metrics:TextMetrics = context.measureText(lines[n]);\r\n\t      context.fillText(lines[n], x, y);\r\n\t      y = y+lineHeight; \r\n\t    }\r\n\t    context.fillText(line, x, y);\r\n\t }\r\n\t\r\n    public static metricsTextMutipleLines(context:CanvasRenderingContext2D,text:string,lineHeight:number,splitChar:string)\r\n\t{\r\n\t\tlet lines:Array<string> = text.split(splitChar);\r\n\t    //let line:string = '';\r\n\t    let maxWidth:number = 0;\r\n\t    let totalHeight = 0;\r\n\t    for(var n = 0; n < lines.length; n++)\r\n\t    {\r\n            let metrics:TextMetrics = context.measureText(lines[n]);\r\n            if(metrics.width>maxWidth) maxWidth = metrics.width;\r\n            totalHeight = totalHeight + lineHeight;\r\n\t    }\r\n\t    return({width:maxWidth,height:totalHeight});\r\n\t }\r\n\t\r\n    public static roundedRect(context:CanvasRenderingContext2D,x:number,y:number,\r\n        w:number,h:number,r:number,borderWitdh:number,borderColor:string,rectColor:string):void\r\n\t{\r\n\t\t  if (w < 2 * r) r = w / 2;\r\n\t\t  if (h < 2 * r) r = h / 2;\r\n\t\t  context.beginPath();\r\n\t\t  context.moveTo(x+r, y);\r\n\t\t  context.arcTo(x+w, y,   x+w, y+h, r);\r\n\t\t  context.arcTo(x+w, y+h, x,   y+h, r);\r\n\t\t  context.arcTo(x,   y+h, x,   y,   r);\r\n\t\t  context.arcTo(x,   y,   x+w, y,   r);\r\n\t\t  context.closePath();\r\n\t\t/*\r\n\t    context.beginPath();\r\n\t    context.moveTo(x, y);\r\n\t    context.lineTo(x + width - cornerRadius, y);\r\n\t    context.arcTo(x + width, y, x + width, y + cornerRadius, cornerRadius);\r\n\t    context.lineTo(x + width, y + height);\r\n\t   */ \r\n\t    context.lineWidth = borderWitdh;\r\n\t    context.fillStyle = rectColor;\r\n\t    context.strokeStyle = borderColor;\r\n\t    \r\n\t    context.stroke();\r\n\t    context.fill();\r\n\t\r\n\t}\r\n}\r\n","import { WorldEngine } from \"../worldengine\";\r\nimport { Drawable } from \"../../display/drawable\";\r\nimport { WorldId } from \"../../world/worldid\";\r\nimport { WorldPosition } from \"../../world/worldposition\";\r\nimport { CircleEngineShape } from \"../shapes/circleengineshape\";\r\nimport { RectangleEngineShape } from \"../shapes/rectangleengineshape\";\r\nimport { MockCircle } from \"./shapes/mockcircle\";\r\nimport { MockRectangle } from \"./shapes/mockrectangle\";\r\nimport { MockPolygon } from \"./shapes/mockpolygon\";\r\nimport { PolygonEngineShape } from \"../shapes/polygonengineshape\";\r\nimport { CanvasMouse } from \"../../display/canvas/canvasmouse\";\r\nimport { MouseEventHandler } from \"../../display/canvas/mouseeventhandler\";\r\nimport { World } from \"../../world/world\";\r\nimport { CircleDisplayShape } from \"../../display/drawableshapes/circledisplayshape\";\r\nimport { EngineShape } from \"../shapes/engineshape\";\r\n\r\nexport class MockEngine implements WorldEngine {\r\n  private _mouseAnchor: MockCircle;\r\n\r\n  public constructor() {\r\n    this.mouseAnchor = new MockCircle(\r\n      new WorldId(\"mouseAnchor\"),\r\n      new CircleDisplayShape(),\r\n      5,\r\n      8,\r\n      new WorldPosition(-10,-10),\r\n      { restitution: 0.9, isSensor: true },\r\n      this\r\n    );\r\n  }\r\n  public getMouseAnchor(): EngineShape {\r\n    return this.mouseAnchor;\r\n  }\r\n\r\n  public createCircle(\r\n    worldId: WorldId,\r\n    drawable: Drawable,\r\n    radius: number,\r\n    numberOfSides: number,\r\n    worldPosition: WorldPosition,\r\n    options: any\r\n  ): CircleEngineShape {\r\n    let circle: MockCircle = new MockCircle(\r\n      worldId,\r\n      drawable,\r\n      radius,\r\n      numberOfSides,\r\n      worldPosition,\r\n      options,\r\n      this\r\n    );\r\n    return circle;\r\n  }\r\n\r\n  public createRectangle(\r\n    worldId: WorldId,\r\n    drawable: Drawable,\r\n    width: number,\r\n    height: number,\r\n    worldPosition: WorldPosition,\r\n    options: any\r\n  ): RectangleEngineShape {\r\n    let rectangle: MockRectangle = new MockRectangle(\r\n      worldId,\r\n      drawable,\r\n      width,\r\n      height,\r\n      worldPosition,\r\n      options,\r\n      this\r\n    );\r\n    return rectangle;\r\n  }\r\n  public createPolygon(\r\n    worldId: WorldId,\r\n    drawable: Drawable,\r\n    numberOfSides: number,\r\n    radius: number,\r\n    worldPosition: WorldPosition,\r\n    options: any\r\n  ): PolygonEngineShape {\r\n    let ploygon: PolygonEngineShape = new MockPolygon(\r\n      worldId,\r\n      drawable,\r\n      numberOfSides,\r\n      radius,\r\n      worldPosition,\r\n      options,\r\n      this\r\n    );\r\n    return ploygon;\r\n  }\r\n\r\n  public pointerDownEngineEvent(\r\n    world: World,\r\n    canvasMouse: CanvasMouse,\r\n    event: MouseEvent,\r\n    mouseEventHandler: MouseEventHandler\r\n  ): void {}\r\n\r\n  public pointerMoveEngineEvent(\r\n    world: World,\r\n    canvasMouse: CanvasMouse,\r\n    event: MouseEvent,\r\n    mouseEventHandler: MouseEventHandler\r\n  ): void {\r\n    var newPosition = new WorldPosition(\r\n      event.x - canvasMouse.offset.x,\r\n      event.y - canvasMouse.offset.y\r\n    );\r\n    this.mouseAnchor.translate(newPosition);\r\n\r\n    if (mouseEventHandler.getCurrentWorldObject() != null) {\r\n      var deltaPosition = mouseEventHandler\r\n        .getMouseStatus()\r\n        .startPosition.getDelta(mouseEventHandler.getMouseStatus().position);\r\n\r\n      let newX =\r\n        mouseEventHandler.getMouseStatus().startPosition.x -\r\n        deltaPosition.x +\r\n        mouseEventHandler.getMouseStatus().clickOffset.x;\r\n\r\n      let newY =\r\n        mouseEventHandler.getMouseStatus().startPosition.y -\r\n        deltaPosition.y +\r\n        mouseEventHandler.getMouseStatus().clickOffset.y;\r\n\r\n      mouseEventHandler\r\n        .getCurrentWorldObject()\r\n        .setWorldPosition(new WorldPosition(newX, newY));\r\n    }\r\n  }\r\n\r\n  public pointerUpEngineEvent(\r\n    world: World,\r\n    canvasMouse: CanvasMouse,\r\n    event: MouseEvent,\r\n    mouseEventHandler: MouseEventHandler\r\n  ): void {}\r\n\r\n  public get mouseAnchor(): MockCircle {\r\n    return this._mouseAnchor;\r\n  }\r\n\r\n  public set mouseAnchor(value: MockCircle) {\r\n    this._mouseAnchor = value;\r\n  }\r\n}\r\n","import { CircleEngineShape } from \"../../shapes/circleengineshape\";\r\nimport { WorldPosition } from \"../../../world/worldposition\";\r\nimport { Drawable } from \"../../../display/drawable\";\r\nimport { MockShape } from \"./mockshape\";\r\nimport { WorldId } from \"../../../world/worldid\";\r\nimport { MockEngine } from \"../mockengine\";\r\n\r\nexport class MockCircle extends MockShape implements CircleEngineShape\r\n{\r\n\tprivate _curvePoints:number;\r\n\tprivate _radius:number;\r\n\t\r\n\r\n\tconstructor(worldId:WorldId,drawable:Drawable,radius:number,curvePoints:number,position:WorldPosition,options:any,mockEngine:MockEngine)\r\n\t{\r\n\t\tsuper(worldId,drawable,position,options);\r\n\t\tthis.radius = radius;\r\n\t\tthis.curvePoints = curvePoints;\t\r\n\t\tdrawable.init(this,options);\r\n\t}\r\n\r\n\tpublic containsWorldPosition(worldPosition:WorldPosition):boolean {\r\n\t\tlet distance = this.getWorldPosition().getDistance(worldPosition);\r\n\t\treturn(distance<=this.radius);\r\n\t}\r\n\r\n\tpublic getRadius():number {\r\n\t\treturn(this.radius);\r\n\t}\r\n\r\n\tpublic getShapePoints():Array<WorldPosition> {\r\n\t\t//return( WorldDisplay.getPolygonPoints(Math.PI/4,4,this.getWidth()+this.get,this.getWorldPosition() ) ;\r\n\t\treturn(null);\r\n    }\r\n\r\n\tpublic get curvePoints(): number {\r\n\t\treturn this._curvePoints;\r\n\t}\r\n\r\n\tpublic set curvePoints(value: number) {\r\n\t\tthis._curvePoints = value;\r\n\t}\r\n\t\r\n\r\n\tpublic get radius(): number {\r\n\t\treturn this._radius;\r\n\t}\r\n\r\n\tpublic set radius(value: number) {\r\n\t\tthis._radius = value;\r\n\t}\r\n\r\n\r\n}\r\n","import { WorldPosition } from \"../../../world/worldposition\";\r\nimport { Drawable } from \"../../../display/drawable\";\r\nimport { MockShape } from \"./mockshape\";\r\nimport { WorldId } from \"../../../world/worldid\";\r\nimport { MockEngine } from \"../mockengine\";\r\nimport { PolygonEngineShape } from \"../../shapes/polygonengineshape\";\r\nimport { WorldDisplay } from \"../../../display/worlddisplay\";\r\n\r\n\r\nexport class MockPolygon extends MockShape implements PolygonEngineShape\r\n{\r\n    private _polygonPointArray:Array<WorldPosition>;\r\n    private _numberOfSides:number;\r\n    private _radius:number;\r\n    \r\n\r\n    constructor(worldId:WorldId,drawable:Drawable,numberOfSides:number,radius:number,worldPosition:WorldPosition,options:any,mockEngine:MockEngine)    \r\n\t{\r\n        super(worldId,drawable,worldPosition,options);\r\n        this.radius = radius;\r\n        this.numberOfSides = numberOfSides;\r\n        this.polygonPointArray = WorldDisplay.getPolygonPoints(0,numberOfSides,radius,worldPosition);\r\n\t\tdrawable.init(this,options);\r\n\t}\r\n\r\n\tpublic containsWorldPosition(worldPosition:WorldPosition):boolean {\r\n        //if(this.boundingBox.containsPosition(position,node)) return false;\r\n        \r\n        let i = 0;\r\n        let j = 0;\r\n        let c = false;\r\n        for(i=0,j=this.polygonPointArray.length-1;i< this.polygonPointArray.length;j=i++)\r\n        {\r\n            //\r\n            var pi = this.polygonPointArray[i];\r\n            var pj = this.polygonPointArray[j];\r\n                \r\n            if (\r\n                ((pi.y>worldPosition.y) != (pj.y>worldPosition.y)) &&\r\n                    (worldPosition.x < (pj.x-pi.x) *\r\n                    (worldPosition.y-pi.y) /\r\n                    (pj.y-pi.y) +\r\n                    pi.x) )\r\n                c = !c;\r\n        }\r\n        return c;\r\n    }\r\n\r\n    public getRadius():number {\r\n        return(this.radius);\r\n    }\r\n\r\n    public getNumberOfSides():number {\r\n        return(this.numberOfSides);\r\n    }\r\n\r\n    public \tgetShapePoints():Array<WorldPosition> {\r\n        return(this.polygonPointArray);\r\n    }    \r\n\r\n    public \tgetPointList():Array<WorldPosition> {\r\n        return(this.polygonPointArray);\r\n    }    \r\n\r\n    public translate(worldPosition:WorldPosition):void {\r\n        super.translate(worldPosition);\r\n        //this.polygonPointArray = WorldDisplay.getPolygonPoints(0,this.numberOfSides,this.radius,worldPosition);\r\n        \r\n            for(let i=0;i<this.polygonPointArray.length;i++) \r\n                this.polygonPointArray[i].translate(this.getWorldPosition());\r\n\t}\r\n\r\n\t\r\n\tpublic setWorldPosition(worldPosition:WorldPosition):void {\r\n       super.setWorldPosition(worldPosition);\r\n       this.polygonPointArray = WorldDisplay.getPolygonPoints(0,this.numberOfSides,this.radius,this.getWorldPosition());\r\n\r\n       // TODO this is not working becasue it moves all points to the same point... it should be getting the offset from the set\r\n       // position and moving each point by that amount\r\n      //  for(let i=0;i<this.polygonPointArray.length;i++) \r\n      //    this.polygonPointArray[i].setWorldPosition(this.getWorldPosition());\r\n\t}\r\n\r\n\r\n\t\r\n\r\n    public getPolygonPoints():Array<WorldPosition> {\r\n        return(this.polygonPointArray);\r\n\r\n    }\r\n    \r\n\r\n\tpublic get radius(): number {\r\n\t\treturn this._radius;\r\n\t}\r\n\r\n\tpublic set radius(value: number) {\r\n\t\tthis._radius = value;\r\n\t}\r\n    \r\n\r\n\r\n\tpublic get polygonPointArray(): Array<WorldPosition> {\r\n\t\treturn this._polygonPointArray;\r\n\t}\r\n\r\n\tpublic set polygonPointArray(value: Array<WorldPosition>) {\r\n\t\tthis._polygonPointArray = value;\r\n\t}\r\n\r\n\r\n\tpublic get numberOfSides(): number {\r\n\t\treturn this._numberOfSides;\r\n\t}\r\n\r\n\tpublic set numberOfSides(value: number) {\r\n\t\tthis._numberOfSides = value;\r\n\t}\r\n\r\n}\r\n","import { RectangleEngineShape } from \"../../shapes/rectangleengineshape\";\r\nimport { WorldPosition } from \"../../../world/worldposition\";\r\nimport { Drawable } from \"../../../display/drawable\";\r\nimport { MockShape } from \"./mockshape\";\r\nimport { WorldId } from \"../../../world/worldid\";\r\nimport { MockEngine } from \"../mockengine\";\r\n\r\nexport class MockRectangle extends MockShape implements RectangleEngineShape\r\n{\r\n\tprivate _width:number;\r\n\tprivate _height:number;\r\n\r\n\tconstructor(worldId:WorldId,drawable:Drawable,width:number,height:number,position:WorldPosition,options:any,mockEngine:MockEngine)\r\n\t{\r\n\t\tsuper(worldId,drawable,position,options);\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\t\r\n\t\tdrawable.init(this,options);\r\n\t}\r\n\r\n\tpublic containsWorldPosition(worldPosition:WorldPosition):boolean {\r\n\t\treturn(\r\n\t\t\t(\r\n\t\t\t\t\t\t\t(this.getWorldPosition().x-this.getWidth()/2)<=worldPosition.x &&\r\n\t\t\t\t\t\t\t(this.getWorldPosition().x+this.getWidth()/2)>=worldPosition.x &&\r\n\t\t\t\t\t\t\t(this.getWorldPosition().y-this.getHeight()/2)<=worldPosition.y &&\r\n\t\t\t\t\t\t\t(this.getWorldPosition().y+this.getHeight()/2)>=worldPosition.y\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\tpublic getShapePoints():Array<WorldPosition> {\r\n\t\t//return( WorldDisplay.getPolygonPoints(Math.PI/4,4,this.getWidth()+this.get,this.getWorldPosition() ) ;\r\n\t\tlet polygonPointArray = Array<WorldPosition>();\t\r\n\r\n\r\n\t\tpolygonPointArray.push( new WorldPosition(\r\n\t\t\tthis.getWorldPosition().x+this.getWidth()/2,\r\n\t\t\tthis.getWorldPosition().y+this.getHeight()/2 ) );\r\n\r\n\t\tpolygonPointArray.push( new WorldPosition(\r\n\t\t\tthis.getWorldPosition().x+this.getWidth()/2,\r\n\t\t\tthis.getWorldPosition().y-this.getHeight()/2 ) );\r\n\r\n\t\tpolygonPointArray.push( new WorldPosition(\r\n\t\t\tthis.getWorldPosition().x-this.getWidth()/2,\r\n\t\t\tthis.getWorldPosition().y-this.getHeight()/2 ) );\r\n\r\n\t\tpolygonPointArray.push( new WorldPosition(\r\n\t\t\tthis.getWorldPosition().x-this.getWidth()/2,\r\n\t\t\tthis.getWorldPosition().y+this.getHeight()/2 ) );\r\n\r\n\t\treturn(polygonPointArray);    }\r\n\r\n\tpublic getWidth():number {\r\n\t\treturn(this.width);\r\n\t}\r\n\tpublic getHeight():number {\r\n\t\treturn(this.height);\r\n\t}\r\n\r\n\tpublic get width(): number {\r\n\t\treturn this._width;\r\n\t}\r\n\r\n\tpublic set width(value: number) {\r\n\t\tthis._width = value;\r\n\t}\r\n\r\n\tpublic get height(): number {\r\n\t\treturn this._height;\r\n\t}\r\n\r\n\tpublic set height(value: number) {\r\n\t\tthis._height = value;\r\n\t}\r\n\r\n\r\n\r\n}\r\n","import { WorldPosition } from \"../../../world/worldposition\";\r\nimport { Drawable } from \"../../../display/drawable\";\r\nimport { WorldObject } from \"../../../world/worldobject\";\r\nimport { WorldId } from \"../../../world/worldid\";\r\n\r\n//import { World } from \"../../walkerworld/world\";\r\n//import { WorldObjectDisplay } from \"../worldobjectdisplay\";\r\n\r\nexport abstract class MockShape implements WorldObject  \r\n{\r\n\tprivate _drawable:Drawable;\r\n\tprivate _worldId:WorldId;\r\n\tprivate _isObjectAnimated:boolean;\r\n\tprivate _isObjectVisable:boolean;\r\n\tprivate _isObjectSelected:boolean;\r\n\tprivate _objectOptions:any;\r\n\t\r\n\tprivate _position:WorldPosition; \r\n\r\n    constructor(worldId:WorldId,drawable:Drawable,position:WorldPosition,options:any) {\r\n\t\tthis.worldId = worldId;\r\n\t\tthis.drawable = drawable;\r\n\t\tthis.isObjectAnimated = true;\r\n\t\tthis.isObjectVisable = true;\r\n\t\tthis.isObjectSelected = true;\r\n\t\tthis.drawable = drawable;\r\n\t\tthis.position = position;\r\n\t}\r\n\t\r\n\tpublic isAnimated(): boolean { return(this.isObjectAnimated); }\r\n\tpublic isSelected(): boolean { return(this.isObjectSelected); }\r\n\tpublic isVisable():boolean { return(this.isObjectVisable); }\r\n\tpublic getWorldId(): WorldId { return(this.worldId); }\r\n\tpublic getOptions(): any { return(this.objectOptions); }\r\n\r\n\tpublic setAnimated(animated:boolean):void { this.isObjectAnimated = animated; }\r\n\tpublic setSelected(selected:boolean): void { this.isObjectSelected = selected; }\r\n\tpublic setVisable(visable:boolean):void { this.isObjectVisable = visable; }\r\n\t\r\n\t\r\n    public getWorldPosition():WorldPosition {\r\n\t\treturn(this.position );\r\n\t}\r\n\r\n\tpublic translate(worldPosition:WorldPosition):void {\r\n\t\t//this.position.x = worldPosition.x;\r\n\t\t//this.position.y = worldPosition.y;\r\n\t\tthis.position.translate(worldPosition);\r\n\t\t\r\n\t}\r\n\r\n\t\r\n\tpublic setWorldPosition(worldPosition:WorldPosition):void {\r\n\t\t//this.position.x = worldPosition.x;\r\n\t\t//this.position.y = worldPosition.y;\r\n\t\tthis.position.setWorldPosition(worldPosition);\r\n\t}\r\n\r\n\tpublic abstract containsWorldPosition(worldPosition:WorldPosition):boolean;\r\n\r\n    public getDrawable():Drawable {\r\n        return(this.drawable);\r\n    }\r\n\r\n\r\n\tpublic get drawable(): Drawable {\r\n\t\treturn this._drawable;\r\n\t}\r\n\r\n\tpublic set drawable(value: Drawable) {\r\n\t\tthis._drawable = value;\r\n\t}\r\n    \r\n\r\n\tpublic get position(): WorldPosition {\r\n\t\treturn this._position;\r\n\t}\r\n\r\n\tpublic set position(value: WorldPosition) {\r\n\t\tthis._position = value;\r\n\t}\r\n\r\n\tpublic get worldId(): WorldId {\r\n\t\treturn this._worldId;\r\n\t}\r\n\r\n\tpublic set worldId(value: WorldId) {\r\n\t\tthis._worldId = value;\r\n\t}\r\n\r\n\tpublic get isObjectAnimated(): boolean {\r\n\t\treturn this._isObjectAnimated;\r\n\t}\r\n\r\n\tpublic set isObjectAnimated(value: boolean) {\r\n\t\tthis._isObjectAnimated = value;\r\n\t}\r\n\r\n\tpublic get isObjectVisable(): boolean {\r\n\t\treturn this._isObjectVisable;\r\n\t}\r\n\r\n\tpublic set isObjectVisable(value: boolean) {\r\n\t\tthis._isObjectVisable = value;\r\n\t}\r\n\r\n\tpublic get isObjectSelected(): boolean {\r\n\t\treturn this._isObjectSelected;\r\n\t}\r\n\r\n\tpublic set isObjectSelected(value: boolean) {\r\n\t\tthis._isObjectSelected = value;\r\n\t}\r\n\r\n\tpublic get objectOptions(): any {\r\n\t\treturn this._objectOptions;\r\n\t}\r\n\r\n\tpublic set objectOptions(value: any) {\r\n\t\tthis._objectOptions = value;\r\n\t}\r\n\r\n}\r\n","import { CanvasHolderHTML } from \"./display/canvas/canvasholderhtml\";\r\nimport { MockEngine } from \"./engine/mockengine/mockengine\";\r\nimport { WorldOfWorldObjects } from \"./world/worldofworldobjects\";\r\nimport { CircleDisplayShape } from \"./display/drawableshapes/circledisplayshape\";\r\nimport { WorldPosition } from \"./world/worldposition\";\r\nimport { WorldId } from \"./world/worldid\";\r\nimport { CircleEngineShape } from \"./engine/shapes/circleengineshape\";\r\nimport { RectangleEngineShape } from \"./engine/shapes/rectangleengineshape\";\r\nimport { RectangleDisplayShape } from \"./display/drawableshapes/rectangledisplayshape\";\r\nimport { PolygonEngineShape } from \"./engine/shapes/polygonengineshape\";\r\nimport { PolygonDisplayShape } from \"./display/drawableshapes/polygondisplayshape\";\r\n\r\n\r\nlet mockEngine = new MockEngine();\r\nlet world:WorldOfWorldObjects = new WorldOfWorldObjects(mockEngine);\r\nlet canvasHolder:CanvasHolderHTML = new CanvasHolderHTML(\"worldCanvas\",world);\r\n\r\nlet circle1:CircleEngineShape = world.worldEngine.createCircle(\r\n  new WorldId(\"circle1\"),\r\n  new CircleDisplayShape(),\r\n  30,8,\r\n  new WorldPosition(400,400),\r\n  {}\r\n);\r\n\r\nlet circle2:CircleEngineShape = world.worldEngine.createCircle(\r\n  new WorldId(\"circle1\"),\r\n  new CircleDisplayShape(),\r\n  40,8,\r\n  new WorldPosition(300,300),\r\n  {}\r\n);\r\n\r\nlet rectangle1:RectangleEngineShape = world.worldEngine.createRectangle(\r\n  new WorldId(\"rectangle1\"),\r\n  new RectangleDisplayShape(),\r\n  40,40,\r\n  new WorldPosition(100,100),\r\n  {}\r\n);\r\n      \r\n\r\nlet polygon1:PolygonEngineShape = world.worldEngine.createPolygon(\r\n  new WorldId(\"polygon1\"),\r\n  new PolygonDisplayShape(),\r\n  5,40,\r\n  new WorldPosition(400,100),\r\n  {}\r\n);\r\n      \r\nworld.worldObjectArray.push(circle1);\r\nworld.worldObjectArray.push(circle2);\r\nworld.worldObjectArray.push(rectangle1);\r\nworld.worldObjectArray.push(polygon1);\r\nworld.worldObjectArray.push(world.worldEngine.getMouseAnchor());\r\n\r\n\r\n\r\n\r\nlet interval:number = 1000/30; //one millisecond over beat per second\r\n\r\nconsole.log(\"drawing every : \"+interval+\"ms\");\r\n\r\nsetInterval(doDraw,interval);\r\n\r\nfunction doDraw()\r\n{\r\n  world.drawWorld(canvasHolder);\t\r\n}\r\n\r\n\r\n\r\n","//import { MatterTools } from \"../matterengine/mattertools\";\r\n//import { World } from \"../walkerworld/world\";\r\n//import { MatterEvent } from \"../matterengine/matterevent\";\r\n//import { MatterCollisionEvent } from \"../matterengine/mattercollisionevent\";\r\n//import { DisplayHolder } from \"../display/displayholder\";\r\nimport { WorldEngine } from \"../engine/worldengine\";\r\nimport { WorldPosition } from \"./worldposition\";\r\nimport { WorldObject } from \"./worldobject\";\r\nimport { CanvasHolder } from \"../display/canvas/canvasholder\";\r\n\r\n\r\nexport abstract class World {\r\n\r\n   // private _displayHolder:DisplayHolder;\r\n\tprivate _worldEngine:WorldEngine;\r\n\r\n    constructor(worldEngine:WorldEngine){\r\n\t\tthis.worldEngine = worldEngine;\r\n\t}\r\n\t\r\n\tpublic abstract getWorldObjectContainingPosition(worldPosition:WorldPosition):WorldObject;\r\n\r\n\tpublic abstract drawWorld(canvasHolder:CanvasHolder):void;\r\n\r\n\tpublic get worldEngine(): WorldEngine {\r\n\t\treturn this._worldEngine;\r\n\t}\r\n\r\n\tpublic set worldEngine(value: WorldEngine) {\r\n\t\tthis._worldEngine = value;\r\n\t}\r\n    \r\n}","\r\nexport class WorldId {\r\n    private _id:string;\r\n\r\n    public constructor(woldObjectId:string) {\r\n        this.id = woldObjectId;\r\n    }\r\n\r\n\tpublic get id(): string {\r\n\t\treturn this._id;\r\n\t}\r\n\r\n\tpublic set id(value: string) {\r\n\t\tthis._id = value;\r\n\t}\r\n\r\n}","import { WorldEngine } from \"../engine/worldengine\";\r\nimport { WorldObject } from \"./worldobject\";\r\nimport { World } from \"./world\";\r\nimport { CanvasHolder } from \"../display/canvas/canvasholder\";\r\nimport { WorldPosition } from \"./worldposition\";\r\n\r\n\r\nexport class WorldOfWorldObjects extends World{\r\n\r\n    private _worldObjectArray:Array<WorldObject>;\r\n\r\n    constructor(worldEngine:WorldEngine){\r\n        super(worldEngine);\r\n        this.worldObjectArray = new Array<WorldObject>();\r\n\t}\r\n\t\r\n\t\r\n\tpublic drawWorld(canvasHolder:CanvasHolder):void {\r\n        let context = canvasHolder.getContext();\r\n        canvasHolder.clearCanvas();\r\n        for(let i=0;i<this.worldObjectArray.length;i++) {\r\n            let worldObject:WorldObject = this.worldObjectArray[i];\r\n            worldObject.getDrawable().draw(context);\r\n        }\r\n    }\r\n\r\n    public getWorldObjectContainingPosition(worldPosition:WorldPosition):WorldObject {\r\n        let foundObject:WorldObject = null;\r\n        for(let i=0;i<this.worldObjectArray.length;i++) {\r\n            ////console.log(\"this.worldObjectArray.length=\"+this.worldObjectArray.length+\":i=\"+i);\r\n            let worldObject:WorldObject = this.worldObjectArray[i];\r\n            ////console.log(\"    worldObject.position=\"+worldObject.getWorldPosition());\r\n            if(worldObject.containsWorldPosition(worldPosition) && worldObject!=this.worldEngine.getMouseAnchor()) foundObject = worldObject;\r\n        }\r\n        return(foundObject);\r\n    }\r\n\r\n\r\n\tpublic get worldObjectArray(): Array<WorldObject> {\r\n\t\treturn this._worldObjectArray;\r\n\t}\r\n\r\n\tpublic set worldObjectArray(value: Array<WorldObject>) {\r\n\t\tthis._worldObjectArray = value;\r\n\t}\r\n\r\n    \r\n}","import { WorldObject } from \"./worldobject\";\r\n\r\n\r\nexport class WorldPosition {\r\n    private _x:number;\r\n    private _y:number;\r\n\r\n    public constructor(x:number,y:number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n\tpublic get x(): number {\r\n\t\treturn this._x;\r\n\t}\r\n\r\n\tpublic set x(value: number) {\r\n\t\tthis._x = value;\r\n\t}\r\n\r\n\tpublic get y(): number {\r\n\t\treturn this._y;\r\n\t}\r\n\r\n\tpublic set y(value: number) {\r\n\t\tthis._y = value;\r\n\t}\r\n\r\n\tpublic clone():WorldPosition {\r\n\t\treturn(new WorldPosition(this.x,this.y));\r\n\t}\r\n\r\n\tpublic translate(worldPosition:WorldPosition):void {\r\n\t\t//this.x = this.x + worldPosition.x;\r\n\t\t//this.y = this.y + worldPosition.y;\r\n\t\tthis.x = worldPosition.x;\r\n\t\tthis.y = worldPosition.y;\r\n\t}\r\n\r\n\tpublic setWorldPosition(worldPosition:WorldPosition):void {\r\n\t\tthis.x = worldPosition.x;\r\n\t\tthis.y = worldPosition.y;\r\n\t\t\r\n\t}\r\n\r\n\tpublic getDeltaY(worldPosition:WorldPosition):number\r\n\t{\r\n\t\t\treturn(this.y-worldPosition.y);\r\n\t}\r\n\r\n\tpublic getDeltaX(worldPosition:WorldPosition):number\r\n\t{\r\n\t\t\treturn(this.x-worldPosition.x);\r\n\t}\r\n\r\n\tpublic getDelta(worldPosition:WorldPosition):WorldPosition\r\n\t{\r\n\t\t\treturn(new WorldPosition(this.getDeltaX(worldPosition),this.getDeltaY(worldPosition)));\r\n\t}\r\n\r\n\tpublic equals(worldPosition:WorldPosition):boolean\r\n\t{\r\n\t\treturn( (this.x==worldPosition.x) && (this.y==worldPosition.y) ) ;\r\n\t}\r\n\r\n\tpublic getDistance(worldPosition:WorldPosition):number\r\n\t{\r\n\t\treturn (Math.sqrt(Math.pow(this.getDeltaX(worldPosition), 2) + Math.pow(this.getDeltaY(worldPosition), 2)));\r\n\t}\r\n\r\n\tpublic static getAveragePostionFromWorldPositionList(positionList:Array<WorldPosition>):WorldPosition\r\n\t{\r\n\t\tlet x = 0.0;\r\n\t\tlet y = 0.0;\r\n\t\tfor(let i=0;i<positionList.length;i++)\r\n\t\t{\r\n\t\t\tlet p = positionList[i];\r\n\t\t\tx += p.x;\r\n\t\t\ty += p.y;\r\n\t\t}\r\n\t\tx = x / positionList.length;\r\n\t\ty = y / positionList.length;\r\n\t\treturn(new WorldPosition(x,y));\r\n\t}\r\n\r\n\tpublic static getAveragePostionFromWorldObjectList(worldObjectList:Array<WorldObject>):WorldPosition\r\n\t{\r\n\t  let x = 0.0;\r\n\t  let y = 0.0;\r\n\t  for(var i=0;i<worldObjectList.length;i++)\r\n\t  {\r\n\t\t  var p = worldObjectList[i].getWorldPosition();\r\n\t\t  x += p.x;\r\n\t\t  y += p.y;\r\n\t  }\r\n\t  x = x / worldObjectList.length;\r\n\t  y = y / worldObjectList.length;\r\n\t  return(new WorldPosition(x,y));\r\n\t}\r\n\r\n\tpublic static getPostionListFromNodeList(worldObjectList:Array<WorldObject>):Array<WorldPosition>\r\n\t{\r\n\t\tvar positions = new Array<WorldPosition>();\r\n\t\tfor (var i = 0; i < worldObjectList.length; i++)\r\n\t\t{\r\n\t\t\tpositions.push(worldObjectList[i].getWorldPosition());\r\n\t\t}\r\n\t\treturn(positions);\r\n\t}\r\n\r\n\r\n}"]}