{"version":3,"sources":["node_modules/browser-pack/_prelude.js","source/display/canvas/canvasholderhtml.ts","source/display/canvas/canvasmouse.ts","source/display/canvas/mouseeventhandlerworldobject.ts","source/display/canvas/mousestatus.ts","source/display/drawableshapes/circledisplayshape.ts","source/display/drawableshapes/polygondisplayshape.ts","source/display/drawableshapes/rectangledisplayshape.ts","source/display/worlddisplay.ts","source/engine/mockengine/mockengine.ts","source/engine/mockengine/shapes/mockcircle.ts","source/engine/mockengine/shapes/mockpolygon.ts","source/engine/mockengine/shapes/mockrectangle.ts","source/engine/mockengine/shapes/mockshape.ts","source/main_mock.ts","source/world/world.ts","source/world/worldid.ts","source/world/worldofworldobjects.ts","source/world/worldposition.ts"],"names":["f","exports","module","define","amd","g","window","global","self","this","test_mock","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","canvasmouse_1","mouseeventhandlerworldobject_1","worlddisplay_1","CanvasHolderHTML","canvasName","world","isVisable","isDrawable","canvas","document","getElementById","context","getContext","canvasMouse","CanvasMouse","MouseEventHandlerWorldObject","prototype","clearCanvas","clearRect","getWidth","getHeight","fillStyle","WorldDisplay","getColorFromString","fillRect","getCanvas","isCanvasVisable","_isVisable","isCanvasDrawable","_isDrawable","Object","defineProperty","_canvasName","value","_canvas","_context","_canvasMouse","worldposition_1","canvasholderHTML","mouseEventHandler","offset","getCanvasOffset","addEventListener","event","pointerDownEvent","pointerMoveEvent","pointerUpEvent","offsetLeft","offsetTop","object","isNaN","element","offsetParent","hasOwnProperty","WorldPosition","_offset","_mouseEventHandler","mousestatus_1","mouseStatus","MouseStatus","currentWorldObject","lastWorldObject","getMouseStatus","worldObjectSelected","wWorldObject","worldObjectDeselected","getCurrentWorldObject","eventPosition","getWorldPositionFromMouseEvent","console","log","JSON","stringify","isDown","startPosition","position","setAnimated","setSelected","clickWorldObject","getWorldObjectContainingPosition","getWorldId","id","clone","clickOffset","getWorldPosition","getDelta","worldEngine","pointerDownEngineEvent","pointerMoveEngineEvent","pointerUpEngineEvent","_mouseStatus","_currentWorldObject","_lastWorldObject","_isDown","_startPosition","_position","_clickOffset","CircleDisplayShape","circleEngineShape","init","options","_circleEngineShape","draw","strokeStyle","beginPath","arc","x","y","getRadius","Math","PI","closePath","fill","lineWidth","stroke","PolygonDisplayShape","polygonEngineShape","_polygonEngineShape","drawOutlinedShape","getPolygonPoints","RectangleDisplayShape","rectangleEngineShape","_rectangleEngineShape","getShapePoints","colorString","parseInt","substring","pageX","pageY","startAngle","numberOfSides","radius","polygonPointArray","Array","angle","angleIncrement","push","cos","sin","worldPositionArray","point","moveTo","lineTo","getAveragePostionFromPositionList","positionList","p","getCirclePositionList","curvePoints","pointList","angleInc","rads","getTrianglePositionList","width","height","getRectanglePositionList","getArcPositionList","endAngle","abs","angle_1","fillTextMutipleLines","text","lineHeight","splitChar","lines","split","fillText","metricsTextMutipleLines","maxWidth","totalHeight","metrics","measureText","roundedRect","w","h","borderWitdh","borderColor","rectColor","arcTo","mockcircle_1","mockrectangle_1","mockpolygon_1","MockEngine","createCircle","worldId","drawable","worldPosition","MockCircle","createRectangle","MockRectangle","createPolygon","MockPolygon","deltaPosition","newX","newY","setWorldPosition","mockshape_1","_super","mockEngine","_this","__extends","containsWorldPosition","getDistance","_curvePoints","_radius","MockShape","j","c","pi","pj","getNumberOfSides","getPointList","translate","_polygonPointArray","_numberOfSides","_width","_height","isObjectAnimated","isObjectVisable","isObjectSelected","isAnimated","isSelected","getOptions","animated","selected","setVisable","visable","getDrawable","_drawable","_worldId","_isObjectAnimated","_isObjectVisable","_isObjectSelected","_objectOptions","doDraw","drawWorld","canvasHolder","canvasholderhtml_1","mockengine_1","worldofworldobjects_1","circledisplayshape_1","worldid_1","rectangledisplayshape_1","polygondisplayshape_1","WorldOfWorldObjects","circle1","WorldId","circle2","rectangle1","polygon1","worldObjectArray","setInterval","World","_worldEngine","woldObjectId","_id","world_1","foundObject","worldObject","_worldObjectArray","_x","_y","getDeltaY","getDeltaX","equals","sqrt","pow","getAveragePostionFromWorldPositionList","getAveragePostionFromWorldObjectList","worldObjectList","getPostionListFromNodeList","positions"],"mappings":"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","file":"test_mock.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import { CanvasHolder } from \"./canvasholder\";\nimport { World } from \"../../world/world\";\nimport { CanvasMouse } from \"./canvasmouse\";\nimport { MouseEventHandlerWorldObject } from \"./mouseeventhandlerworldobject\";\nimport { WorldDisplay } from \"../worlddisplay\";\n\n\nexport class CanvasHolderHTML implements CanvasHolder\n{\n\tprivate _isVisable:boolean;\n\tprivate _isDrawable:boolean;\n\tprivate _canvasName:string;\n\tprivate _canvas:HTMLCanvasElement;\n\tprivate _context:CanvasRenderingContext2D;\n\tprivate _canvasMouse:CanvasMouse;\n\t\n\tconstructor(canvasName:string,world:World)\n\t{\n\t\tthis.canvasName = canvasName;\n\t\tthis.isVisable = true;\n\t\tthis.isDrawable = true;\n\t\tthis.canvas = <HTMLCanvasElement>document.getElementById(this.canvasName);\t\t\t\n\t\tthis.context = this.canvas.getContext(\"2d\");\n\t\tthis.canvasMouse = new CanvasMouse(world,this,new MouseEventHandlerWorldObject());\n\t\t/*if (typeof document !== 'undefined')\n\t\t{\n\t\t\tthis.canvas = document.getElementById(this.canvasName);\t\t\t\n\t\t\tthis.context = this.canvas.getContext('2d');\n\t\t}*/\n\t}\n\n\tpublic clearCanvas():void {\n\t\tif(this.isVisable && this.isDrawable)\n\t\t{\n\t\t\tthis.context.clearRect(0, 0, this.getWidth(), this.getHeight());\n\t\t\tthis.context.fillStyle = WorldDisplay.getColorFromString(\"ffffff\"+\"ff\");\n\t\t\tthis.context.fillRect(0, 0, this.getWidth(), this.getHeight());\n\t\t}\n\t}\n\n\tpublic getCanvas():HTMLCanvasElement {\n\t\treturn(this.canvas);\n\t}\n\n\tpublic getContext():CanvasRenderingContext2D {\n\t\treturn(this.context);\n\t}\n\t\n\tpublic getWidth():number\n\t{\n\t\treturn(this.canvas.width);\n\t}\n\t\n\tpublic getHeight():number\n\t{\n\t\treturn(this.canvas.height);\n\t}\n\n\tpublic isCanvasVisable(): boolean {\n\t\treturn this._isVisable;\n\t}\n\n\tpublic isCanvasDrawable(): boolean {\n\t\treturn this._isDrawable;\n\t}\n\n\tpublic get canvasName(): string {\n\t\treturn this._canvasName;\n\t}\n\n\tpublic set canvasName(value: string) {\n\t\tthis._canvasName = value;\n\t}\n\n\n\tpublic get canvas(): HTMLCanvasElement {\n\t\treturn this._canvas;\n\t}\n\n\tpublic set canvas(value: HTMLCanvasElement) {\n\t\tthis._canvas = value;\n\t}\n\n\tpublic get context(): CanvasRenderingContext2D {\n\t\treturn this._context;\n\t}\n\n\tpublic set context(value: CanvasRenderingContext2D) {\n\t\tthis._context = value;\n\t}\n\n\tpublic get isVisable(): boolean {\n\t\treturn this._isVisable;\n\t}\n\n\tpublic set isVisable(value: boolean) {\n\t\tthis._isVisable = value;\n\t}\n\n\tpublic get isDrawable(): boolean {\n\t\treturn this._isDrawable;\n\t}\n\n\tpublic set isDrawable(value: boolean) {\n\t\tthis._isDrawable = value;\n\t}\n\n\tpublic get canvasMouse(): CanvasMouse {\n\t\treturn this._canvasMouse;\n\t}\n\n\tpublic set canvasMouse(value: CanvasMouse) {\n\t\tthis._canvasMouse = value;\n\t}\n\t\n\t\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t/*\n\tstatic createCanvasHolderFromClientJson(worldDef,json)\n\t{\n\t  var canvasHolder = new CanvasHolder(json.canavsName,worldDef);\n\t  return(canvasHolder);\n\t}\n\t*/\n\t/*\n\t  getClientJson()\n\t  {\n\t\t  var json = {};\n\t\t  \n\t\t  \n\t\t  json.canvasName = this.canvasName;\n\t\t  json.origin = this.origin;\n\t\t  json.width = this.getWidth();\n\t\t  json.height = this.getHeight();\n\t\t  json.worldDef = this.worldDef;\n\t\t  \n\t\t  JSON.stringify(json);\n\t\t  return(json)\n\t  }\n\t*/\n\n\t/*  \n\tgetConnector(connectorDefKey,name)\n\t{\n\t\tvar connector = this.getConnectorDef(connectorDefKey)(this.worldDef,name);\n\t\tconnector.connectorDefKey = connectorDefKey;\n\t\treturn(connector);\n\t}\n\t*/\n\n\t/*\n\tgetConnectorDef(connectorDefKey)\n\t{\n\t\tvar connectorDef = this.worldDef.worldDisplay.connectorDefs[\"generic\"];\n\t\t\n\t\tvar foundConnectorDef = false;\n\t\tif(this.worldDef.worldDisplay.connectorDefs.hasOwnProperty(connectorDefKey))\n\t\t{\n\t\t\tconnectorDef = this.worldDef.worldDisplay.connectorDefs[connectorDefKey];\n\t\t\tfoundConnectorDef = true;\n\t\t}\n\t\tif(!foundConnectorDef) console.trace(\"CanvasHolder:getConnectorDef:connectorDefKey=\\\"\"+connectorDefKey+ \"\\\" was not found using generic\");\n\t\telse console.log(\"found connector display :\"+connectorDefKey);\n\t\tconnectorDef.connectorDefKey = connectorDefKey;\n\t\treturn(connectorDef);\n\t}\n\t*/\n\n\t/*\n\tgetConnectorDisplay(connectorDisplayKey)\n\t{\n\t\tvar connectorDisplay = this.worldDef.worldDisplay.connectorDisplay[\"generic\"];\n\t\t\n\t\tvar foundConnectorDisplay = false;\n\t\tif(this.worldDef.worldDisplay.connectorDisplay.hasOwnProperty(connectorDisplayKey))\n\t\t{\n\t\t\tconnectorDisplay = this.worldDef.worldDisplay.connectorDisplay[connectorDisplayKey];\n\t\t\tfoundConnectorDisplay = true;\n\t\t}\n\t\tif(!foundConnectorDisplay) console.trace(\"CanvasHolder:getConnectorDisplay:connectorDisplayKey=\\\"\"+connectorDisplayKey+ \"\\\" was not found using generic\");\n\t\tconnectorDisplay.connectorDisplayKey = connectorDisplayKey;\n\t\treturn(connectorDisplay);\n\t}\n\t*/\n\n\t/*\n\tgetGraphData(graphDataKey)\n\t{\n\t\tvar graphData = this.worldDef.worldDisplay.nodeDisplay[\"generic\"];\t\n\t\tvar foundGraphData = false;\n\t\tif(this.worldDef.worldDisplay.nodeDisplay.hasOwnProperty(graphDataKey))\n\t\t{\n\t\t\tgraphData = this.worldDef.worldDisplay.nodeDisplay[graphDataKey];\n\t\t\tfoundGraphData = true;\n\t\t}\n\t\tif(!foundGraphData) console.trace(\"CanvasHolder:getGraphData:graphDataKey=\\\"\"+graphDataKey+ \"\\\" was not found using generic\")\n\t\t//console.trace(\"CanvasHolder:getGraphData:graphDataKey=\\\"\"+graphDataKey+ \"\\\" was not found using generic\")\n\t\t//console.log(\"FOR:\"+graphDataKey+Common.toString(graphData));\n\t\t//console.log(\"getGraphData:graphDataKey=\"+graphDataKey+\":clone=\"+graphData.nodeDisplay.displayInfo.clone);\n\n\t\t//if(graphData.nodeDisplay.displayInfo.clone)\n\t\tif(graphData.nodeDisplayFunction)\n\t\t{\n\t\t\t//console.log(\"getGraphData:graphDataKey:FOUND A FUNCTION:\"+graphDataKey);\n\t\t\tgraphData = Object.create(graphData);\n\t\t\tgraphData.nodeDisplay = graphData.nodeDisplayFunction();\n\t\t\t//console.log(\"CLONING:\"+graphDataKey+Common.toString(graphData));\n\t\t\t//graphData.nodeDisplay.displayInfo = Object.create(graphData.nodeDisplay.displayInfo);\n\t\t\t//graphData.nodeDisplay.displayInfo  = JSON.parse(JSON.stringify(graphData.nodeDisplay.displayInfo));\n\t\t\t//graphData.nodeDisplay.displayInfo  = JSON.parse(JSON.stringify(graphData.nodeDisplay.displayInfo));\n\t\t\t//graphData = Object.create(graphData);\n\t\t\t//graphData.nodeDisplay.displayInfo.ts = new Date().getTime();\n\n\n\t\t}\n\n\t\tgraphData.graphDataKey = graphDataKey;\n\t\treturn(graphData);\n\t}\n\t*/\n\t/*\n\tclone(origin)\n\t{\n\t\tvar canvasHolder = new CanvasHolderHTML(this.canvasName);\n\t\t//canvasHolder.origin = origin;\n\t\t\n\t\tvar canvasHolder = new Object();\n\t\tcanvasHolder.origin = origin;\n\t\t\n\t\tcanvasHolder.canvasName = this.canvasName;\n\t\tcanvasHolder.canvas = this.canvas;\n\t\tcanvasHolder.context = this.context;\n\t\tcanvasHolder.isCanvasVisable = this.isCanvasVisable;\n\t\tcanvasHolder.isCanvasDrawable = this.isCanvasDrawable;\n\t\tcanvasHolder.isDrawable = this.isDrawable;\n\t\tcanvasHolder.isVisable = this.isVisable;\n\t\tcanvasHolder.getWidth = this.getWidth;\n\t\tcanvasHolder.getHeight = this.getHeight;\n\t\tcanvasHolder.worldDef = this.worldDef;\n\t\tcanvasHolder.getGraphData = this.getGraphData;\n\t\t\n\t\t\n\t\treturn(canvasHolder);\n\t}\n\t*/","import { WorldPosition } from \"../../world/worldposition\";\nimport { CanvasHolderHTML } from \"./canvasholderhtml\";\nimport { MouseEventHandler } from \"./mouseeventhandler\";\nimport { World } from \"../../world/world\";\n\n\nexport class CanvasMouse\n{\n\tprivate _offset:WorldPosition;\n\tprivate canvasholderHTML:CanvasHolderHTML;\n\tprivate _mouseEventHandler:MouseEventHandler;\n\t\n\n\tconstructor(world:World,canvasholderHTML:CanvasHolderHTML,mouseEventHandler:MouseEventHandler)\n\t{\n\t\tthis.canvasholderHTML = canvasholderHTML;\n\t\tthis.mouseEventHandler = mouseEventHandler;\n\t\tif(canvasholderHTML.isCanvasVisable()) \n\t\t{\n\t\t\t//this.offset = NodeCanvasMouse.getCanvasOffset(this.canvasholder.canvas);\n\t\t\tthis.offset = this.getCanvasOffset();\t\t\n\t\t\tvar self = this;\n\t\t\tthis.canvasholderHTML.canvas.addEventListener(\"pointerdown\", function(event) { self.pointerDownEvent(world,self,event) }, false);\n\t\t\tthis.canvasholderHTML.canvas.addEventListener(\"pointermove\",function(event) { self.pointerMoveEvent(world,self,event) }, false);\n\t\t\tthis.canvasholderHTML.canvas.addEventListener(\"pointerup\",function(event) { self.pointerUpEvent(world,self,event) }, false);\n\t\t\t//this.nodeMouseMovment = {};\n\t\t}\n\t}\n\n\tprivate getCanvasOffset():WorldPosition\n\t{\n\t    let offsetLeft = 0;\n\t\tlet offsetTop = 0;\n\t\tlet object:HTMLElement = this.canvasholderHTML.canvas;\n\t    do\n\t    {\n\t      if (!isNaN(object.offsetLeft))\n\t      {\n\t          offsetLeft += object.offsetLeft;\n\t      }\n\t      if (!isNaN(object.offsetTop))\n\t      {\n\t          offsetTop += object.offsetTop;\n\t\t  }   \n\t\t let element:any = object.offsetParent;\n\t\t if(element.hasOwnProperty(\"offsetParent\")) object = element;\n\t\t else object = null;\n\t    }\n\t    while(object);\n\t    \n\t    return( new WorldPosition(offsetLeft,offsetTop) );\n\t}\n\n\tpublic pointerDownEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent) {\n\t\tthis.mouseEventHandler.pointerDownEvent(world,canvasMouse,event);\n\t}\n\t\n\tpublic pointerMoveEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent)\t{\n\t\tthis.mouseEventHandler.pointerMoveEvent(world,canvasMouse,event);\n\n\t}\n\t\n\tpublic pointerUpEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent)\n\t{\n\t\tthis.mouseEventHandler.pointerUpEvent(world,canvasMouse,event);\n\n\t}\n\t\n\n\t\n\tpublic get offset(): WorldPosition {\n\t\treturn this._offset;\n\t}\n\n\tpublic set offset(value: WorldPosition) {\n\t\tthis._offset = value;\n\t}\n\n\tpublic get mouseEventHandler(): MouseEventHandler {\n\t\treturn this._mouseEventHandler;\n\t}\n\n\tpublic set mouseEventHandler(value: MouseEventHandler) {\n\t\tthis._mouseEventHandler = value;\n\t}\n\n\n\tpublic get $canvasholderHTML(): CanvasHolderHTML {\n\t\treturn this.canvasholderHTML;\n\t}\n\n\tpublic set $canvasholderHTML(value: CanvasHolderHTML) {\n\t\tthis.canvasholderHTML = value;\n\t}\n\t\n\n}\n","import { MouseStatus } from \"./mousestatus\";\nimport { WorldObject } from \"../../world/worldobject\";\nimport { MouseEventHandler } from \"./mouseeventhandler\";\nimport { WorldPosition } from \"../../world/worldposition\";\nimport { World } from \"../../world/world\";\nimport { CanvasMouse } from \"./canvasmouse\";\nimport { WorldDisplay } from \"../worlddisplay\";\n\n\n\nexport class MouseEventHandlerWorldObject implements MouseEventHandler {\n   private _mouseStatus:MouseStatus;\n   private _currentWorldObject:WorldObject;\n   private _lastWorldObject:WorldObject;\n\n    constructor()\n    {\n        this.mouseStatus = new MouseStatus();\n        this.currentWorldObject = null;\n        this.lastWorldObject = null;\n\t}\n\t\n\tpublic getMouseStatus():MouseStatus {\n\t\treturn(this.mouseStatus);\n\t}\n\n    public worldObjectSelected(world:World,event:MouseEvent,wWorldObject:WorldObject):void {\n\n    }\n\n    public worldObjectDeselected(world:World,event:MouseEvent):void {\n\n\t}\n\n\tpublic getCurrentWorldObject():WorldObject {\n\t\treturn(this.currentWorldObject);\n\t}\n\t\n\t/*\n\tpublic getWorldPositionFromMouseEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent):WorldPosition {\n\t\tvar eventPosition:WorldPosition = new WorldPosition(event.pageX-canvasMouse.offset.x,event.pageY-canvasMouse.offset.y);\n\t\treturn(eventPosition);\n\t}\n\t*/\n   \n    public pointerDownEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent):void\n\t{\n\t\t//console.log(\"pointerDownEvent:\"+JSON.stringify(event));;\n\t\tvar eventPosition:WorldPosition = WorldDisplay.getWorldPositionFromMouseEvent(world,canvasMouse,event);\n\t\t//this.hideCurrentNodeInfo();\n\t\tconsole.log(\"pointerDownEvent:\"+JSON.stringify(eventPosition));;\n\n\t\tthis.mouseStatus.isDown = true;\n\t\tthis.mouseStatus.startPosition = eventPosition;\n\t\tthis.mouseStatus.position = eventPosition;\n\t\tif(this.currentWorldObject!=null)\n\t\t{\n\t\t\tthis.currentWorldObject.setAnimated(true);\n\t\t\tthis.currentWorldObject.setSelected(false);\n\t\t\tthis.currentWorldObject = null;\n\t\t}\n\t\t\n\t\tlet clickWorldObject:WorldObject =  world.getWorldObjectContainingPosition(eventPosition);\n\t\n\t\tif(clickWorldObject!=null && clickWorldObject!=this.lastWorldObject)\n\t\t{\n\t\t\tconsole.log(\"pointerDownEvent:clickWorldObject=\"+clickWorldObject.getWorldId().id);\n\n\t\t\tthis.currentWorldObject = clickWorldObject;\n\n\t\t\tthis.mouseStatus.startPosition = eventPosition.clone();\n\n\t\t\tthis.currentWorldObject.setSelected(true);\n\t\t\tthis.mouseStatus.clickOffset = this.currentWorldObject.getWorldPosition().getDelta(eventPosition);\n\t\t\tthis.currentWorldObject.setAnimated(false);\n\t\t\t/////////////////this.mouseStatus.clickOffset = clickWorldObject.getWorldPosition().getDelta(eventPosition);\n\t\t\t//this.mouseEventHandler.pointerDown(this.mouseStatus);\t\t\t\n\t\t\tthis.worldObjectSelected(world,event,this.currentWorldObject);\t\t\t\n\t\t}\n\t\t\n\t\tif(clickWorldObject==null)\n\t\t{\n\t\t\tthis.worldObjectDeselected(world,event);\n\t\t}\n\t\t\n\t\tif(this.lastWorldObject)\n\t\t{\n\t\t\tthis.worldObjectDeselected(world,event);\n\t\t\tthis.lastWorldObject.setSelected(false);\n\t\t\tthis.lastWorldObject = null;\n\t\t}\n\n\t\tworld.worldEngine.pointerDownEngineEvent(world,canvasMouse,event,this);\n\t\t////////////this.updateObjectPosition(eventPosition);\n\n\t\t\n\t\t\n\t\n\t}\n/*\n\tprivate updateObjectPosition():void {\n\n\t\tif(this.currentWorldObject!=null)\n\t\t{\n\t\t\tthis.currentWorldObject.setAnimated(false);\n\t\t\tthis.mouseStatus.position = this.mouseStatus.position;;\n\t\t\tvar deltaPosition = this.mouseStatus.startPosition.getDelta(this.mouseStatus.position);\n\n\n\t\t\t\t\t\n\t\t\tlet newX = this.mouseStatus.startPosition.x-\n\t\t\t\t\tdeltaPosition.x+\n\t\t\t\t\tthis.mouseStatus.clickOffset.x;\n\t\t\t\n\t\t\tlet newY = this.mouseStatus.startPosition.y-\n\t\t\t\t\tdeltaPosition.y+\n\t\t\t\t\tthis.mouseStatus.clickOffset.y;\n\n\t\t\tthis.currentWorldObject.setWorldPosition( new WorldPosition(newX,newY));\n\t\t}\n\t}\n  */  \n    \n\n    public pointerMoveEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent):void {\n\t\tvar eventPosition:WorldPosition = WorldDisplay.getWorldPositionFromMouseEvent(world,canvasMouse,event);\n\t\tthis.mouseStatus.position = eventPosition;\n\t\t\n\t\tif(this.mouseStatus.isDown)\n\t\t{\n\t\t\t//var eventPosition:WorldPosition = WorldDisplay.getWorldPositionFromMouseEvent(world,canvasMouse,event);\n\t\t\t//this.mouseStatus.position = eventPosition;\n\t\t\t\n\t\t\t////////////console.log(\"pointerMoveEvent:\"+event);\n\n\t\t\tthis.worldObjectDeselected(world,event);\n\t\t\tif(this.currentWorldObject!=null) this.currentWorldObject.setAnimated(false);\n\t\t\tthis.mouseStatus.position = this.mouseStatus.position;;\n\t\t\t\n\t\t\t//this.updateObjectPosition(eventPosition);\n\t\t\t/*\n\t\t\tif(this.currentWorldObject!=null)\n\t\t\t{\n\t\t\t\tthis.currentWorldObject.setAnimated(false);\n\t\t\t\tthis.mouseStatus.position = eventPosition;\n\t\t\t\tvar deltaPosition = this.mouseStatus.startPosition.getDelta(eventPosition);\n\n\n\t\t\t\t\t\t\n\t\t\t\tlet newX = this.mouseStatus.startPosition.x-\n\t\t\t\t\t\tdeltaPosition.x+\n\t\t\t\t\t\tthis.mouseStatus.clickOffset.x;\n\t\t\t\t\n\t\t\t\tlet newY = this.mouseStatus.startPosition.y-\n\t\t\t\t\t\tdeltaPosition.y+\n\t\t\t\t\t\tthis.mouseStatus.clickOffset.y;\n\n\t\t\t\tthis.currentWorldObject.setWorldPosition( new WorldPosition(newX,newY));\n\t\t\t}\n\t\t\t*/\n\t\t}\n\t\tworld.worldEngine.pointerMoveEngineEvent(world,canvasMouse,event,this);\n    }\n            \n\n    public pointerUpEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent):void \t{\n\t\t//console.log(\"pointerUpEvent:\"+JSON.stringify(event));\n\t\t//var eventPosition:WorldPosition = this.getWorldPositionFromMouseEvent(world,canvasMouse,event);\n\t\tvar eventPosition:WorldPosition = WorldDisplay.getWorldPositionFromMouseEvent(world,canvasMouse,event);\n\t\tthis.mouseStatus.position = eventPosition;\n\t\t\n\t\tif(this.currentWorldObject!=null)\n\t\t{\n\t\t\t///this.nodeCanvas.pointerUp(this.mouseStatus.node);\n\t\t\tthis.currentWorldObject.setAnimated(true);\n\t\t\t//this.mouseStatus.node.isSelected = false;\n\t\t\tthis.lastWorldObject = this.currentWorldObject;\n\t\n\t\t\tthis.currentWorldObject = null;\n\t\t}\n\t\tthis.mouseStatus.isDown = false;\n\t\tworld.worldEngine.pointerUpEngineEvent(world,canvasMouse,event,this);\n\t\t\n\t}\n\n\tpublic get mouseStatus(): MouseStatus {\n\t\treturn this._mouseStatus;\n\t}\n\n\tpublic set mouseStatus(value: MouseStatus) {\n\t\tthis._mouseStatus = value;\n\t}\n\n\n\tpublic get currentWorldObject(): WorldObject {\n\t\treturn this._currentWorldObject;\n\t}\n\n\tpublic set currentWorldObject(value: WorldObject) {\n\t\tthis._currentWorldObject = value;\n\t}\n\n\n\tpublic get lastWorldObject(): WorldObject {\n\t\treturn this._lastWorldObject;\n\t}\n\n\tpublic set lastWorldObject(value: WorldObject) {\n\t\tthis._lastWorldObject = value;\n\t}\n    \n}","import { WorldPosition } from \"../../world/worldposition\";\n\nexport class MouseStatus\n{\n\tprivate _isDown:boolean;\n\tprivate _startPosition:WorldPosition;\n\tprivate _position:WorldPosition;\n\t//private _worldObject:WorldObject;\n\t//private _objectStartPosition:WorldPosition;\n\tprivate _clickOffset:WorldPosition;\n\t//private _lastWorldObject:WorldObject;\n\t\n\t\n\t\n\n\tconstructor()\n\t{\n\t\tthis.isDown = false;\n\t\tthis.startPosition = new WorldPosition(0,0);\n\t\tthis.position = new WorldPosition(0,0);\n\t\tthis.clickOffset = new WorldPosition(0,0);\n\n\t\t//this.objectStartPosition = null\n\t}\n// \t\t\tnodeCanvasMouse.mouseStatus = new MouseStatus(false,new Position(0,0),new Position(0,0),null,null);\n\n\n\tpublic get isDown(): boolean {\n\t\treturn this._isDown;\n\t}\n\n\tpublic set isDown(value: boolean) {\n\t\tthis._isDown = value;\n\t}\n\n\tpublic get startPosition(): WorldPosition {\n\t\treturn this._startPosition;\n\t}\n\n\tpublic set startPosition(value: WorldPosition) {\n\t\tthis._startPosition = value;\n\t}\n\t\n\n\tpublic get position(): WorldPosition {\n\t\treturn this._position;\n\t}\n\n\tpublic set position(value: WorldPosition) {\n\t\tthis._position = value;\n\t}\n\n\tpublic get clickOffset(): WorldPosition {\n\t\treturn this._clickOffset;\n\t}\n\n\tpublic set clickOffset(value: WorldPosition) {\n\t\tthis._clickOffset = value;\n\t}\n\n\n\n\t\n}\n","import { Drawable } from \"../drawable\";\nimport { WorldPosition } from \"../../world/worldposition\";\n//import { WalkerWorld } from \"../../walkers/walkerworld/walkerworld\";\nimport { WorldDisplay } from \"../worlddisplay\";\nimport { CircleEngineShape } from \"../../engine/shapes/circleengineshape\";\n//import { WalkerEngine } from \"../../walkerworld/walkerengine\";\n\n\nexport class CircleDisplayShape implements Drawable\n{\n\tprivate _circleEngineShape:CircleEngineShape;\n\n\tconstructor()\n\t{\n\t\tthis.circleEngineShape = null;\n\t}\n\n\tpublic init(circleEngineShape:CircleEngineShape,options:any):void {\n\t\tthis.circleEngineShape = circleEngineShape;\t\t\n\t}\n\t\n\n\tpublic get circleEngineShape(): CircleEngineShape {\n\t\treturn this._circleEngineShape;\n\t}\n\n\tpublic set circleEngineShape(value: CircleEngineShape) {\n\t\tthis._circleEngineShape = value;\n\t}\n\t\n\t\n\tpublic draw(context:CanvasRenderingContext2D):void\n\t{\n\t\tif(!this.circleEngineShape) throw Error(\"CircleDisplayShape:CircleEngineShape is not set, was init called?\")\n\t\t//super.drawConnector(canvasHolder,node);\n\t\t/*\n\t\tsuper.drawNode(canvasHolder,node);\n\n\t\t*/\n\t\t//console.log(\"CircleDisplayShape.drawShape\");\n\n\t\tcontext.fillStyle = WorldDisplay.getColorFromString(\"ff0000ff\");\n\t\tcontext.strokeStyle = WorldDisplay.getColorFromString(\"0000ffff\");\n\t\tlet position:WorldPosition = this.circleEngineShape.getWorldPosition();\n\t\t\n\t    context.beginPath();\n\t    context.arc(position.x,position.y,this.circleEngineShape.getRadius(),0,Math.PI * 2, false);\n\t    context.closePath();\n\t    context.fill();\n\t    context.lineWidth = 2;\n\t\tcontext.stroke();\n\t}\n}\n","import { Drawable } from \"../drawable\";\nimport { PolygonEngineShape } from \"../../engine/shapes/polygonengineshape\";\nimport { WorldDisplay } from \"../worlddisplay\";\n\nexport class PolygonDisplayShape implements Drawable\n{\n\tprivate _polygonEngineShape:PolygonEngineShape;\n\n\tconstructor()\n\t{\n\t\tthis.polygonEngineShape = null;\n\t}\n\n\tpublic init(polygonEngineShape:PolygonEngineShape,options:any):void {\n\t\tthis.polygonEngineShape = polygonEngineShape;\t\t\n\t}\n\n\tpublic get polygonEngineShape(): PolygonEngineShape {\n\t\treturn this._polygonEngineShape;\n\t}\n\n\tpublic set polygonEngineShape(value: PolygonEngineShape) {\n\t\tthis._polygonEngineShape = value;\n\t}\n\n\t\n\t\n\tpublic draw(context:CanvasRenderingContext2D):void\n\t{\n\t\tif(!this.polygonEngineShape) throw Error(\"PolygonDisplayShape:PolygonEngineShape is not set, was init called?\")\n\n\t\tcontext.fillStyle = WorldDisplay.getColorFromString(\"ff0000ff\");\n\t\tcontext.strokeStyle = WorldDisplay.getColorFromString(\"0000ffff\");\n        context.lineWidth = 2;\n        \n        WorldDisplay.drawOutlinedShape(context,this.polygonEngineShape.getPolygonPoints());\n\t\t\n\t}\n}\n","import { Drawable } from \"../drawable\";\nimport { WorldDisplay } from \"../worlddisplay\";\nimport { RectangleEngineShape } from \"../../engine/shapes/rectangleengineshape\";\n\nexport class RectangleDisplayShape implements Drawable\n{\n\tprivate _rectangleEngineShape:RectangleEngineShape;\n\n\tconstructor()\n\t{\n\t\tthis.rectangleEngineShape = null;\n\t}\n\n\tpublic init(rectangleEngineShape:RectangleEngineShape,options:any):void {\n\t\tthis.rectangleEngineShape = rectangleEngineShape;\t\t\n\t}\n\n\tpublic get rectangleEngineShape(): RectangleEngineShape {\n\t\treturn this._rectangleEngineShape;\n\t}\n\n\tpublic set rectangleEngineShape(value: RectangleEngineShape) {\n\t\tthis._rectangleEngineShape = value;\n\t}\n\t\n\t\n\t\n\tpublic draw(context:CanvasRenderingContext2D):void\n\t{\n\t\tif(!this.rectangleEngineShape) throw Error(\"RectangleDisplayShape:rectangleEngineShape is not set, was init called?\")\n\t\t//super.drawConnector(canvasHolder,node);\n\t\t/*\n\t\tsuper.drawNode(canvasHolder,node);\n\n\t\t*/\n\t\t//console.log(\"CircleDisplayShape.drawShape\");\n\n\t\tcontext.fillStyle = WorldDisplay.getColorFromString(\"ff0000ff\");\n\t\tcontext.strokeStyle = WorldDisplay.getColorFromString(\"0000ffff\");\n\n        context.lineWidth = 2;\n        \n        WorldDisplay.drawOutlinedShape(context,this.rectangleEngineShape.getShapePoints());\n\n\t\t/*\n\n\t\tlet position:WorldPosition = this.rectangleEngineShape.getWorldPosition();\n\n\n\t\tcontext.fillRect( \n\t\t\t(position.x-this.rectangleEngineShape.getWidth()/2),\n\t\t\t(position.y-this.rectangleEngineShape.getHeight()/2),\n\t\t\tthis.rectangleEngineShape.getWidth(),\n\t\t\tthis.rectangleEngineShape.getHeight());\n\t\t\tcontext.lineWidth = 2;\n\t\tcontext.strokeRect( \n\t\t\t(position.x-this.rectangleEngineShape.getWidth()/2), \n\t\t\t(position.y-this.rectangleEngineShape.getHeight()/2), \n\t\t\tthis.rectangleEngineShape.getWidth(), \n\t\t\tthis.rectangleEngineShape.getHeight());\n\t\t*/\n\n\t}\n}\n","\nimport { WorldPosition } from \"../world/worldposition\";\nimport { World } from \"../world/world\";\nimport { CanvasMouse } from \"./canvas/canvasmouse\";\n\nexport class WorldDisplay  {\n    /*\n    static world(render:Matter.Render) {\n\n        Matter.Render.world(render);\n        console.log(\"doing some redering...\");\n    }\n    */    \n    public static getColorFromString(colorString:string):string\n    {\n      if(colorString.length==6)\n      {\n        colorString += \"ff\";\n      }\n      \n      let color = \"rgba(\"+\n          parseInt(colorString.substring(0,2), 16)+\",\"+\n          parseInt(colorString.substring(2,4), 16)+\",\"+\n          parseInt(colorString.substring(4,6), 16)+\",\"+\n          parseInt(colorString.substring(6,8), 16)/255.0+\")\";\n      \n      return(color);\n\t}\n\n\tpublic static getWorldPositionFromMouseEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent):WorldPosition {\n\t\tvar eventPosition:WorldPosition = new WorldPosition(event.pageX-canvasMouse.offset.x,event.pageY-canvasMouse.offset.y);\n\t\treturn(eventPosition);\n\t}\n\n\n\tpublic static getPolygonPoints(startAngle:number,numberOfSides:number,radius:number,position:WorldPosition):Array<WorldPosition> {\n\t\tlet polygonPointArray = Array<WorldPosition>();\t\n        let angle = 0\n        let angleIncrement = 2 * Math.PI / numberOfSides;\n    \n        for(let i=0;i < numberOfSides;i++) {\n            polygonPointArray.push(new WorldPosition(\n                position.x  + radius * Math.cos(angle),\n                position.y  + radius * Math.sin(angle)\n            ));\n            angle = angle + angleIncrement;\n                \n\t\t}\n\t\treturn(polygonPointArray);\n\t}\n\t/**\n\t * Draws an outlined shape from an Array of WorldPosition objects. It is assumed that the fill color, \n\t * stroek color and line width for the context have been set before the call is made\n\t * \n\t * @static\n\t * @param {CanvasRenderingContext2D} context \n\t * @param {Array<WorldPosition>} worldPositionArray \n\t * @memberof WorldDisplay\n\t */\n\tpublic static drawOutlinedShape(context:CanvasRenderingContext2D,worldPositionArray:Array<WorldPosition>):void\n\t{\t    \n\t    context.beginPath();\n\t    for(let i=0;i<worldPositionArray.length;i++)\n\t    {   \t\n\t\t\tvar point = worldPositionArray[i];\n\t    \tif(i==0) context.moveTo(point.x,point.y);\n\t    \telse context.lineTo(point.x,point.y);\n\t    }\n\t    context.closePath();\n\t    \n\t    context.fill();\n\t    //context.lineWidth = displayInfo.borderWidth;\n\t    context.stroke();\n\t}\n\n\tpublic static getAveragePostionFromPositionList(positionList:Array<WorldPosition>):WorldPosition\n\t{\n\t  let x = 0.0;\n\t  let y = 0.0;\n\t  for(let i=0;i<positionList.length;i++)\n\t  {\n\t\t  let p = positionList[i];\n\t\t  x += p.x;\n\t\t  y += p.y;\n\t  }\n\t  x = x / positionList.length;\n\t  y = y / positionList.length;\n\t  return(new WorldPosition(x,y));\n\t}\n\t\t  \n\n    public static getCirclePositionList(radius:number,curvePoints:number):Array<WorldPosition> {\n\t\tlet pointList = new Array<WorldPosition>();\n\t\t\n\t\tlet angleInc = 360 / curvePoints;\n\t\tfor(let angle=0;angle<=360;angle=angle+angleInc)\n\t\t{\n\t\t\tlet rads = angle * (Math.PI/180);\n\t\t\tpointList.push(\n\t\t\t\t\tnew WorldPosition(\n\t\t\t\t\t\t\tradius*Math.cos(rads),\n\t\t\t\t\t\t\tradius*Math.sin(rads))\n\t\t\t\t\t);\t\n\t\t}\n\t\t\n\t\treturn(pointList);\n\t}\n\n\tpublic static getTrianglePositionList(width:number,height:number):Array<WorldPosition> {\n\t\tlet pointList = new Array<WorldPosition>();\n\t\t\n\t\tpointList.push(new WorldPosition(0,-(height/2)));\n\t\tpointList.push(new WorldPosition(width/2,height/2));\n\t\tpointList.push(new WorldPosition(-(width/2),height/2));\n\t\tpointList.push(new WorldPosition(0,-(height/2)));\n\t\t\n\t\treturn(pointList);;\n\t}\n\t\n\tpublic static getRectanglePositionList(width:number,height:number):Array<WorldPosition> {\n\t\tlet pointList = new Array<WorldPosition>();\n\t\t\n\t\tpointList.push(new WorldPosition(-(width/2),-(height/2)));\n\t\tpointList.push(new WorldPosition((width/2),-(height/2)));\n\t\tpointList.push(new WorldPosition((width/2),(height/2)));\n\t\tpointList.push(new WorldPosition(-(width/2),(height/2)));\t\n\t\tpointList.push(new WorldPosition(-(width/2),-(height/2)));\n\t\n\t\treturn(pointList);;\n\t}\n\n\tpublic static getArcPositionList(endAngle:number,startAngle:number,radius:number,curvePoints:number):Array<WorldPosition> {\n\t\tlet pointList = new Array<WorldPosition>();\n\t\t\n\t\t// bug durring the port to javascript... it was just expecting one arg so probably endAngle was used\n\t\tlet angle:number = Math.abs(endAngle-startAngle);\n\t\tlet angleInc:number = angle / curvePoints;\n\t\t\n\t\tpointList.push(new WorldPosition(0,0));\n\t\tfor(let angle=startAngle;\n\t\t\tangle<=endAngle && angleInc>0;\n\t\t\tangle=angle+angleInc)\n\t\t{\n\t\t\tif( (angle+angleInc) > endAngle )\n\t\t\t{\n\t\t\t\tif(angle!=endAngle) angle = endAngle ;\n\t\t\t}\n\t\t\tvar rads = angle * (Math.PI/180);\n\t\t\tpointList.push(\n\t\t\t\t\tnew WorldPosition(\n\t\t\t\t\t\t\tradius*Math.cos(rads),\n\t\t\t\t\t\t\tradius*Math.sin(rads))\n\t\t\t\t\t);\t\n\t\t}\n\t\t\n\t\tpointList.push(new WorldPosition(0,0));\n\t\t\n\t\treturn(pointList);\n\t}\n\n    public static fillTextMutipleLines(context:CanvasRenderingContext2D,text:string,x:number,y:number,lineHeight:number,splitChar:string)\n\t{\n\t\tlet lines:Array<string> = text.split(splitChar);\n\t    let line:string = '';\n\t\n\t    for(let n = 0; n < lines.length; n++)\n\t    {\n\t      //let metrics:TextMetrics = context.measureText(lines[n]);\n\t      context.fillText(lines[n], x, y);\n\t      y = y+lineHeight; \n\t    }\n\t    context.fillText(line, x, y);\n\t }\n\t\n    public static metricsTextMutipleLines(context:CanvasRenderingContext2D,text:string,lineHeight:number,splitChar:string)\n\t{\n\t\tlet lines:Array<string> = text.split(splitChar);\n\t    //let line:string = '';\n\t    let maxWidth:number = 0;\n\t    let totalHeight = 0;\n\t    for(var n = 0; n < lines.length; n++)\n\t    {\n            let metrics:TextMetrics = context.measureText(lines[n]);\n            if(metrics.width>maxWidth) maxWidth = metrics.width;\n            totalHeight = totalHeight + lineHeight;\n\t    }\n\t    return({width:maxWidth,height:totalHeight});\n\t }\n\t\n    public static roundedRect(context:CanvasRenderingContext2D,x:number,y:number,\n        w:number,h:number,r:number,borderWitdh:number,borderColor:string,rectColor:string):void\n\t{\n\t\t  if (w < 2 * r) r = w / 2;\n\t\t  if (h < 2 * r) r = h / 2;\n\t\t  context.beginPath();\n\t\t  context.moveTo(x+r, y);\n\t\t  context.arcTo(x+w, y,   x+w, y+h, r);\n\t\t  context.arcTo(x+w, y+h, x,   y+h, r);\n\t\t  context.arcTo(x,   y+h, x,   y,   r);\n\t\t  context.arcTo(x,   y,   x+w, y,   r);\n\t\t  context.closePath();\n\t\t/*\n\t    context.beginPath();\n\t    context.moveTo(x, y);\n\t    context.lineTo(x + width - cornerRadius, y);\n\t    context.arcTo(x + width, y, x + width, y + cornerRadius, cornerRadius);\n\t    context.lineTo(x + width, y + height);\n\t   */ \n\t    context.lineWidth = borderWitdh;\n\t    context.fillStyle = rectColor;\n\t    context.strokeStyle = borderColor;\n\t    \n\t    context.stroke();\n\t    context.fill();\n\t\n\t}\n}\n","import { WorldEngine } from \"../worldengine\";\nimport { Drawable } from \"../../display/drawable\";\nimport { WorldId } from \"../../world/worldid\";\nimport { WorldPosition } from \"../../world/worldposition\";\nimport { CircleEngineShape } from \"../shapes/circleengineshape\";\nimport { RectangleEngineShape } from \"../shapes/rectangleengineshape\";\nimport { MockCircle } from \"./shapes/mockcircle\";\nimport { MockRectangle } from \"./shapes/mockrectangle\";\nimport { MockPolygon } from \"./shapes/mockpolygon\";\nimport { PolygonEngineShape } from \"../shapes/polygonengineshape\";\nimport { World } from \"matter-js\";\nimport { CanvasMouse } from \"../../display/canvas/canvasmouse\";\nimport { MouseEventHandler } from \"../../display/canvas/mouseeventhandler\";\n\n\nexport class MockEngine implements WorldEngine {\n\n    public createCircle(worldId:WorldId,drawable:Drawable,radius:number,numberOfSides:number,worldPosition:WorldPosition,options:any):CircleEngineShape {\n        let circle:MockCircle = new MockCircle(\n          worldId,\n          drawable,\n          radius,numberOfSides,worldPosition,\n          options,\n          this\n        );\n        return(circle);  \n    }\n\n    public createRectangle(worldId:WorldId,drawable:Drawable,width:number,height:number,worldPosition:WorldPosition,options:any):RectangleEngineShape {\n      let rectangle:MockRectangle = new MockRectangle(\n        worldId,\n        drawable,\n        width,height,worldPosition,\n        options,\n        this\n      );\n      return(rectangle);\n    }\n    public createPolygon(worldId:WorldId,drawable:Drawable,numberOfSides:number,radius:number,worldPosition:WorldPosition,options:any):PolygonEngineShape {\n      let ploygon:PolygonEngineShape = new MockPolygon(\n        worldId,\n        drawable,\n        numberOfSides,\n        radius,\n        worldPosition,\n        options,\n        this); \n      return(ploygon);\n    }   \n\n    public pointerDownEngineEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent,mouseEventHandler:MouseEventHandler):void {\n      \n          }\n      \n    public pointerMoveEngineEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent,mouseEventHandler:MouseEventHandler):void {\n      if(mouseEventHandler.getCurrentWorldObject()!=null)\n      {\n        var deltaPosition = mouseEventHandler.getMouseStatus().startPosition.getDelta(mouseEventHandler.getMouseStatus().position);\n  \n  \n            \n        let newX = mouseEventHandler.getMouseStatus().startPosition.x-\n            deltaPosition.x+\n            mouseEventHandler.getMouseStatus().clickOffset.x;\n        \n        let newY = mouseEventHandler.getMouseStatus().startPosition.y-\n            deltaPosition.y+\n            mouseEventHandler.getMouseStatus().clickOffset.y;\n  \n            mouseEventHandler.getCurrentWorldObject().setWorldPosition( new WorldPosition(newX,newY));\n      }\n    }\n\n    public pointerUpEngineEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent,mouseEventHandler):void {\n\n    }\n       \n}","import { CircleEngineShape } from \"../../shapes/circleengineshape\";\nimport { WorldPosition } from \"../../../world/worldposition\";\nimport { Drawable } from \"../../../display/drawable\";\nimport { MockShape } from \"./mockshape\";\nimport { WorldId } from \"../../../world/worldid\";\nimport { MockEngine } from \"../mockengine\";\n\nexport class MockCircle extends MockShape implements CircleEngineShape\n{\n\tprivate _curvePoints:number;\n\tprivate _radius:number;\n\t\n\n\tconstructor(worldId:WorldId,drawable:Drawable,radius:number,curvePoints:number,position:WorldPosition,options:any,mockEngine:MockEngine)\n\t{\n\t\tsuper(worldId,drawable,position,options);\n\t\tthis.radius = radius;\n\t\tthis.curvePoints = curvePoints;\t\n\t\tdrawable.init(this,options);\n\t}\n\n\tpublic containsWorldPosition(worldPosition:WorldPosition):boolean {\n\t\tlet distance = this.getWorldPosition().getDistance(worldPosition);\n\t\treturn(distance<=this.radius);\n\t}\n\n\tpublic getRadius():number {\n\t\treturn(this.radius);\n\t}\n\n\tpublic getShapePoints():Array<WorldPosition> {\n\t\t//return( WorldDisplay.getPolygonPoints(Math.PI/4,4,this.getWidth()+this.get,this.getWorldPosition() ) ;\n\t\treturn(null);\n    }\n\n\tpublic get curvePoints(): number {\n\t\treturn this._curvePoints;\n\t}\n\n\tpublic set curvePoints(value: number) {\n\t\tthis._curvePoints = value;\n\t}\n\t\n\n\tpublic get radius(): number {\n\t\treturn this._radius;\n\t}\n\n\tpublic set radius(value: number) {\n\t\tthis._radius = value;\n\t}\n\n\n}\n","import { WorldPosition } from \"../../../world/worldposition\";\nimport { Drawable } from \"../../../display/drawable\";\nimport { MockShape } from \"./mockshape\";\nimport { WorldId } from \"../../../world/worldid\";\nimport { MockEngine } from \"../mockengine\";\nimport { PolygonEngineShape } from \"../../shapes/polygonengineshape\";\nimport { WorldDisplay } from \"../../../display/worlddisplay\";\n\n\nexport class MockPolygon extends MockShape implements PolygonEngineShape\n{\n    private _polygonPointArray:Array<WorldPosition>;\n    private _numberOfSides:number;\n    private _radius:number;\n    \n\n    constructor(worldId:WorldId,drawable:Drawable,numberOfSides:number,radius:number,worldPosition:WorldPosition,options:any,mockEngine:MockEngine)    \n\t{\n        super(worldId,drawable,worldPosition,options);\n        this.radius = radius;\n        this.numberOfSides = numberOfSides;\n        this.polygonPointArray = WorldDisplay.getPolygonPoints(0,numberOfSides,radius,worldPosition);\n\t\tdrawable.init(this,options);\n\t}\n\n\tpublic containsWorldPosition(worldPosition:WorldPosition):boolean {\n        //if(this.boundingBox.containsPosition(position,node)) return false;\n        \n        let i = 0;\n        let j = 0;\n        let c = false;\n        for(i=0,j=this.polygonPointArray.length-1;i< this.polygonPointArray.length;j=i++)\n        {\n            //\n            var pi = this.polygonPointArray[i];\n            var pj = this.polygonPointArray[j];\n                \n            if (\n                ((pi.y>worldPosition.y) != (pj.y>worldPosition.y)) &&\n                    (worldPosition.x < (pj.x-pi.x) *\n                    (worldPosition.y-pi.y) /\n                    (pj.y-pi.y) +\n                    pi.x) )\n                c = !c;\n        }\n        return c;\n    }\n\n    public getRadius():number {\n        return(this.radius);\n    }\n\n    public getNumberOfSides():number {\n        return(this.numberOfSides);\n    }\n\n    public \tgetShapePoints():Array<WorldPosition> {\n        return(this.polygonPointArray);\n    }    \n\n    public \tgetPointList():Array<WorldPosition> {\n        return(this.polygonPointArray);\n    }    \n\n    public translate(worldPosition:WorldPosition):void {\n        super.translate(worldPosition);\n        //this.polygonPointArray = WorldDisplay.getPolygonPoints(0,this.numberOfSides,this.radius,worldPosition);\n        \n            for(let i=0;i<this.polygonPointArray.length;i++) \n                this.polygonPointArray[i].translate(this.getWorldPosition());\n\t}\n\n\t\n\tpublic setWorldPosition(worldPosition:WorldPosition):void {\n       super.setWorldPosition(worldPosition);\n       this.polygonPointArray = WorldDisplay.getPolygonPoints(0,this.numberOfSides,this.radius,this.getWorldPosition());\n\n       // TODO this is not working becasue it moves all points to the same point... it should be getting the offset from the set\n       // position and moving each point by that amount\n      //  for(let i=0;i<this.polygonPointArray.length;i++) \n      //    this.polygonPointArray[i].setWorldPosition(this.getWorldPosition());\n\t}\n\n\n\t\n\n    public getPolygonPoints():Array<WorldPosition> {\n        return(this.polygonPointArray);\n\n    }\n    \n\n\tpublic get radius(): number {\n\t\treturn this._radius;\n\t}\n\n\tpublic set radius(value: number) {\n\t\tthis._radius = value;\n\t}\n    \n\n\n\tpublic get polygonPointArray(): Array<WorldPosition> {\n\t\treturn this._polygonPointArray;\n\t}\n\n\tpublic set polygonPointArray(value: Array<WorldPosition>) {\n\t\tthis._polygonPointArray = value;\n\t}\n\n\n\tpublic get numberOfSides(): number {\n\t\treturn this._numberOfSides;\n\t}\n\n\tpublic set numberOfSides(value: number) {\n\t\tthis._numberOfSides = value;\n\t}\n\n}\n","import { RectangleEngineShape } from \"../../shapes/rectangleengineshape\";\nimport { WorldPosition } from \"../../../world/worldposition\";\nimport { Drawable } from \"../../../display/drawable\";\nimport { MockShape } from \"./mockshape\";\nimport { WorldId } from \"../../../world/worldid\";\nimport { MockEngine } from \"../mockengine\";\n\nexport class MockRectangle extends MockShape implements RectangleEngineShape\n{\n\tprivate _width:number;\n\tprivate _height:number;\n\n\tconstructor(worldId:WorldId,drawable:Drawable,width:number,height:number,position:WorldPosition,options:any,mockEngine:MockEngine)\n\t{\n\t\tsuper(worldId,drawable,position,options);\n\t\tthis.width = width;\n\t\tthis.height = height;\t\n\t\tdrawable.init(this,options);\n\t}\n\n\tpublic containsWorldPosition(worldPosition:WorldPosition):boolean {\n\t\treturn(\n\t\t\t(\n\t\t\t\t\t\t\t(this.getWorldPosition().x-this.getWidth()/2)<=worldPosition.x &&\n\t\t\t\t\t\t\t(this.getWorldPosition().x+this.getWidth()/2)>=worldPosition.x &&\n\t\t\t\t\t\t\t(this.getWorldPosition().y-this.getHeight()/2)<=worldPosition.y &&\n\t\t\t\t\t\t\t(this.getWorldPosition().y+this.getHeight()/2)>=worldPosition.y\n\t\t\t)\n\t\t);\n\t}\n\n\tpublic getShapePoints():Array<WorldPosition> {\n\t\t//return( WorldDisplay.getPolygonPoints(Math.PI/4,4,this.getWidth()+this.get,this.getWorldPosition() ) ;\n\t\tlet polygonPointArray = Array<WorldPosition>();\t\n\n\n\t\tpolygonPointArray.push( new WorldPosition(\n\t\t\tthis.getWorldPosition().x+this.getWidth()/2,\n\t\t\tthis.getWorldPosition().y+this.getHeight()/2 ) );\n\n\t\tpolygonPointArray.push( new WorldPosition(\n\t\t\tthis.getWorldPosition().x+this.getWidth()/2,\n\t\t\tthis.getWorldPosition().y-this.getHeight()/2 ) );\n\n\t\tpolygonPointArray.push( new WorldPosition(\n\t\t\tthis.getWorldPosition().x-this.getWidth()/2,\n\t\t\tthis.getWorldPosition().y-this.getHeight()/2 ) );\n\n\t\tpolygonPointArray.push( new WorldPosition(\n\t\t\tthis.getWorldPosition().x-this.getWidth()/2,\n\t\t\tthis.getWorldPosition().y+this.getHeight()/2 ) );\n\n\t\treturn(polygonPointArray);    }\n\n\tpublic getWidth():number {\n\t\treturn(this.width);\n\t}\n\tpublic getHeight():number {\n\t\treturn(this.height);\n\t}\n\n\tpublic get width(): number {\n\t\treturn this._width;\n\t}\n\n\tpublic set width(value: number) {\n\t\tthis._width = value;\n\t}\n\n\tpublic get height(): number {\n\t\treturn this._height;\n\t}\n\n\tpublic set height(value: number) {\n\t\tthis._height = value;\n\t}\n\n\n\n}\n","import { WorldPosition } from \"../../../world/worldposition\";\nimport { Drawable } from \"../../../display/drawable\";\nimport { WorldObject } from \"../../../world/worldobject\";\nimport { WorldId } from \"../../../world/worldid\";\n\n//import { World } from \"../../walkerworld/world\";\n//import { WorldObjectDisplay } from \"../worldobjectdisplay\";\n\nexport abstract class MockShape implements WorldObject  \n{\n\tprivate _drawable:Drawable;\n\tprivate _worldId:WorldId;\n\tprivate _isObjectAnimated:boolean;\n\tprivate _isObjectVisable:boolean;\n\tprivate _isObjectSelected:boolean;\n\tprivate _objectOptions:any;\n\t\n\tprivate _position:WorldPosition; \n\n    constructor(worldId:WorldId,drawable:Drawable,position:WorldPosition,options:any) {\n\t\tthis.worldId = worldId;\n\t\tthis.drawable = drawable;\n\t\tthis.isObjectAnimated = true;\n\t\tthis.isObjectVisable = true;\n\t\tthis.isObjectSelected = true;\n\t\tthis.drawable = drawable;\n\t\tthis.position = position;\n\t}\n\t\n\tpublic isAnimated(): boolean { return(this.isObjectAnimated); }\n\tpublic isSelected(): boolean { return(this.isObjectSelected); }\n\tpublic isVisable():boolean { return(this.isObjectVisable); }\n\tpublic getWorldId(): WorldId { return(this.worldId); }\n\tpublic getOptions(): any { return(this.objectOptions); }\n\n\tpublic setAnimated(animated:boolean):void { this.isObjectAnimated = animated; }\n\tpublic setSelected(selected:boolean): void { this.isObjectSelected = selected; }\n\tpublic setVisable(visable:boolean):void { this.isObjectVisable = visable; }\n\t\n\t\n    public getWorldPosition():WorldPosition {\n\t\treturn(this.position );\n\t}\n\n\tpublic translate(worldPosition:WorldPosition):void {\n\t\t//this.position.x = worldPosition.x;\n\t\t//this.position.y = worldPosition.y;\n\t\tthis.position.translate(worldPosition);\n\t\t\n\t}\n\n\t\n\tpublic setWorldPosition(worldPosition:WorldPosition):void {\n\t\t//this.position.x = worldPosition.x;\n\t\t//this.position.y = worldPosition.y;\n\t\tthis.position.setWorldPosition(worldPosition);\n\t}\n\n\tpublic abstract containsWorldPosition(worldPosition:WorldPosition):boolean;\n\n    public getDrawable():Drawable {\n        return(this.drawable);\n    }\n\n\n\tpublic get drawable(): Drawable {\n\t\treturn this._drawable;\n\t}\n\n\tpublic set drawable(value: Drawable) {\n\t\tthis._drawable = value;\n\t}\n    \n\n\tpublic get position(): WorldPosition {\n\t\treturn this._position;\n\t}\n\n\tpublic set position(value: WorldPosition) {\n\t\tthis._position = value;\n\t}\n\n\tpublic get worldId(): WorldId {\n\t\treturn this._worldId;\n\t}\n\n\tpublic set worldId(value: WorldId) {\n\t\tthis._worldId = value;\n\t}\n\n\tpublic get isObjectAnimated(): boolean {\n\t\treturn this._isObjectAnimated;\n\t}\n\n\tpublic set isObjectAnimated(value: boolean) {\n\t\tthis._isObjectAnimated = value;\n\t}\n\n\tpublic get isObjectVisable(): boolean {\n\t\treturn this._isObjectVisable;\n\t}\n\n\tpublic set isObjectVisable(value: boolean) {\n\t\tthis._isObjectVisable = value;\n\t}\n\n\tpublic get isObjectSelected(): boolean {\n\t\treturn this._isObjectSelected;\n\t}\n\n\tpublic set isObjectSelected(value: boolean) {\n\t\tthis._isObjectSelected = value;\n\t}\n\n\tpublic get objectOptions(): any {\n\t\treturn this._objectOptions;\n\t}\n\n\tpublic set objectOptions(value: any) {\n\t\tthis._objectOptions = value;\n\t}\n\n}\n","import { CanvasHolderHTML } from \"./display/canvas/canvasholderhtml\";\nimport { MockEngine } from \"./engine/mockengine/mockengine\";\nimport { WorldOfWorldObjects } from \"./world/worldofworldobjects\";\nimport { CircleDisplayShape } from \"./display/drawableshapes/circledisplayshape\";\nimport { WorldPosition } from \"./world/worldposition\";\nimport { WorldId } from \"./world/worldid\";\nimport { CircleEngineShape } from \"./engine/shapes/circleengineshape\";\nimport { RectangleEngineShape } from \"./engine/shapes/rectangleengineshape\";\nimport { RectangleDisplayShape } from \"./display/drawableshapes/rectangledisplayshape\";\nimport { PolygonEngineShape } from \"./engine/shapes/polygonengineshape\";\nimport { PolygonDisplayShape } from \"./display/drawableshapes/polygondisplayshape\";\n\n\nlet mockEngine = new MockEngine();\nlet world:WorldOfWorldObjects = new WorldOfWorldObjects(mockEngine);\nlet canvasHolder:CanvasHolderHTML = new CanvasHolderHTML(\"worldCanvas\",world);\n\nlet circle1:CircleEngineShape = world.worldEngine.createCircle(\n  new WorldId(\"circle1\"),\n  new CircleDisplayShape(),\n  30,8,\n  new WorldPosition(400,400),\n  {}\n);\n\nlet circle2:CircleEngineShape = world.worldEngine.createCircle(\n  new WorldId(\"circle1\"),\n  new CircleDisplayShape(),\n  40,8,\n  new WorldPosition(300,300),\n  {}\n);\n\nlet rectangle1:RectangleEngineShape = world.worldEngine.createRectangle(\n  new WorldId(\"rectangle1\"),\n  new RectangleDisplayShape(),\n  40,40,\n  new WorldPosition(100,100),\n  {}\n);\n      \n\nlet polygon1:PolygonEngineShape = world.worldEngine.createPolygon(\n  new WorldId(\"polygon1\"),\n  new PolygonDisplayShape(),\n  5,40,\n  new WorldPosition(400,100),\n  {}\n);\n      \nworld.worldObjectArray.push(circle1);\nworld.worldObjectArray.push(circle2);\nworld.worldObjectArray.push(rectangle1);\nworld.worldObjectArray.push(polygon1);\n\n\n\nlet interval:number = 1000/30; //one millisecond over beat per second\n\nconsole.log(\"drawing every : \"+interval+\"ms\");\n\nsetInterval(doDraw,interval);\n\nfunction doDraw()\n{\n  world.drawWorld(canvasHolder);\t\n}\n\n\n\n","//import { MatterTools } from \"../matterengine/mattertools\";\n//import { World } from \"../walkerworld/world\";\n//import { MatterEvent } from \"../matterengine/matterevent\";\n//import { MatterCollisionEvent } from \"../matterengine/mattercollisionevent\";\n//import { DisplayHolder } from \"../display/displayholder\";\nimport { WorldEngine } from \"../engine/worldengine\";\nimport { WorldPosition } from \"./worldposition\";\nimport { WorldObject } from \"./worldobject\";\nimport { CanvasHolder } from \"../display/canvas/canvasholder\";\n\n\nexport abstract class World {\n\n   // private _displayHolder:DisplayHolder;\n\tprivate _worldEngine:WorldEngine;\n\n    constructor(worldEngine:WorldEngine){\n\t\tthis.worldEngine = worldEngine;\n\t}\n\t\n\tpublic abstract getWorldObjectContainingPosition(worldPosition:WorldPosition):WorldObject;\n\n\tpublic abstract drawWorld(canvasHolder:CanvasHolder):void;\n\n\tpublic get worldEngine(): WorldEngine {\n\t\treturn this._worldEngine;\n\t}\n\n\tpublic set worldEngine(value: WorldEngine) {\n\t\tthis._worldEngine = value;\n\t}\n    \n}","\nexport class WorldId {\n    private _id:string;\n\n    public constructor(woldObjectId:string) {\n        this.id = woldObjectId;\n    }\n\n\tpublic get id(): string {\n\t\treturn this._id;\n\t}\n\n\tpublic set id(value: string) {\n\t\tthis._id = value;\n\t}\n\n}","//import { MatterTools } from \"../matterengine/mattertools\";\n//import { World } from \"../walkerworld/world\";\n//import { MatterEvent } from \"../matterengine/matterevent\";\n//import { MatterCollisionEvent } from \"../matterengine/mattercollisionevent\";\n//import { DisplayHolder } from \"../display/displayholder\";\nimport { WorldEngine } from \"../engine/worldengine\";\nimport { WorldObject } from \"./worldobject\";\nimport { World } from \"./world\";\nimport { CanvasHolder } from \"../display/canvas/canvasholder\";\nimport { WorldPosition } from \"./worldposition\";\n\n\nexport class WorldOfWorldObjects extends World{\n\n    private _worldObjectArray:Array<WorldObject>;\n\n    constructor(worldEngine:WorldEngine){\n        super(worldEngine);\n        this.worldObjectArray = new Array<WorldObject>();\n\t}\n\t\n\t\n\tpublic drawWorld(canvasHolder:CanvasHolder):void {\n        let context = canvasHolder.getContext();\n        canvasHolder.clearCanvas();\n        for(let i=0;i<this.worldObjectArray.length;i++) {\n            let worldObject:WorldObject = this.worldObjectArray[i];\n            worldObject.getDrawable().draw(context);\n        }\n    }\n\n    public getWorldObjectContainingPosition(worldPosition:WorldPosition):WorldObject {\n        let foundObject:WorldObject = null;\n        for(let i=0;i<this.worldObjectArray.length;i++) {\n            ////console.log(\"this.worldObjectArray.length=\"+this.worldObjectArray.length+\":i=\"+i);\n            let worldObject:WorldObject = this.worldObjectArray[i];\n            ////console.log(\"    worldObject.position=\"+worldObject.getWorldPosition());\n            if(worldObject.containsWorldPosition(worldPosition)) foundObject = worldObject;\n        }\n        return(foundObject);\n    }\n\n\n\tpublic get worldObjectArray(): Array<WorldObject> {\n\t\treturn this._worldObjectArray;\n\t}\n\n\tpublic set worldObjectArray(value: Array<WorldObject>) {\n\t\tthis._worldObjectArray = value;\n\t}\n\n    \n}","import { WorldObject } from \"./worldobject\";\n\n\nexport class WorldPosition {\n    private _x:number;\n    private _y:number;\n\n    public constructor(x:number,y:number) {\n        this.x = x;\n        this.y = y;\n    }\n\n\tpublic get x(): number {\n\t\treturn this._x;\n\t}\n\n\tpublic set x(value: number) {\n\t\tthis._x = value;\n\t}\n\n\tpublic get y(): number {\n\t\treturn this._y;\n\t}\n\n\tpublic set y(value: number) {\n\t\tthis._y = value;\n\t}\n\n\tpublic clone():WorldPosition {\n\t\treturn(new WorldPosition(this.x,this.y));\n\t}\n\n\tpublic translate(worldPosition:WorldPosition):void {\n\t\t//this.x = this.x + worldPosition.x;\n\t\t//this.y = this.y + worldPosition.y;\n\t\tthis.x = worldPosition.x;\n\t\tthis.y = worldPosition.y;\n\t}\n\n\tpublic setWorldPosition(worldPosition:WorldPosition):void {\n\t\tthis.x = worldPosition.x;\n\t\tthis.y = worldPosition.y;\n\t\t\n\t}\n\n\tpublic getDeltaY(worldPosition:WorldPosition):number\n\t{\n\t\t\treturn(this.y-worldPosition.y);\n\t}\n\n\tpublic getDeltaX(worldPosition:WorldPosition):number\n\t{\n\t\t\treturn(this.x-worldPosition.x);\n\t}\n\n\tpublic getDelta(worldPosition:WorldPosition):WorldPosition\n\t{\n\t\t\treturn(new WorldPosition(this.getDeltaX(worldPosition),this.getDeltaY(worldPosition)));\n\t}\n\n\tpublic equals(worldPosition:WorldPosition):boolean\n\t{\n\t\treturn( (this.x==worldPosition.x) && (this.y==worldPosition.y) ) ;\n\t}\n\n\tpublic getDistance(worldPosition:WorldPosition):number\n\t{\n\t\treturn (Math.sqrt(Math.pow(this.getDeltaX(worldPosition), 2) + Math.pow(this.getDeltaY(worldPosition), 2)));\n\t}\n\n\tpublic static getAveragePostionFromWorldPositionList(positionList:Array<WorldPosition>):WorldPosition\n\t{\n\t\tlet x = 0.0;\n\t\tlet y = 0.0;\n\t\tfor(let i=0;i<positionList.length;i++)\n\t\t{\n\t\t\tlet p = positionList[i];\n\t\t\tx += p.x;\n\t\t\ty += p.y;\n\t\t}\n\t\tx = x / positionList.length;\n\t\ty = y / positionList.length;\n\t\treturn(new WorldPosition(x,y));\n\t}\n\n\tpublic static getAveragePostionFromWorldObjectList(worldObjectList:Array<WorldObject>):WorldPosition\n\t{\n\t  let x = 0.0;\n\t  let y = 0.0;\n\t  for(var i=0;i<worldObjectList.length;i++)\n\t  {\n\t\t  var p = worldObjectList[i].getWorldPosition();\n\t\t  x += p.x;\n\t\t  y += p.y;\n\t  }\n\t  x = x / worldObjectList.length;\n\t  y = y / worldObjectList.length;\n\t  return(new WorldPosition(x,y));\n\t}\n\n\tpublic static getPostionListFromNodeList(worldObjectList:Array<WorldObject>):Array<WorldPosition>\n\t{\n\t\tvar positions = new Array<WorldPosition>();\n\t\tfor (var i = 0; i < worldObjectList.length; i++)\n\t\t{\n\t\t\tpositions.push(worldObjectList[i].getWorldPosition());\n\t\t}\n\t\treturn(positions);\n\t}\n\n\n}"]}