{"version":3,"sources":["node_modules/browser-pack/_prelude.js","source/display/canvas/canvasholderhtml.ts","source/display/canvas/canvasmouse.ts","source/display/canvas/mouseeventhandlerworldobject.ts","source/display/canvas/mousestatus.ts","source/display/drawableshapes/circledisplayshape.ts","source/display/drawableshapes/polygondisplayshape.ts","source/display/drawableshapes/rectangledisplayshape.ts","source/display/drawableshapes/textdisplayshape.ts","source/display/worlddisplay.ts","source/engine/mockengine/mockengine.ts","source/engine/mockengine/shapes/mockcircle.ts","source/engine/mockengine/shapes/mockpolygon.ts","source/engine/mockengine/shapes/mockrectangle.ts","source/engine/mockengine/shapes/mockrectangletext.ts","source/engine/mockengine/shapes/mockshape.ts","source/main_mock.ts","source/test1.ts","source/world/world.ts","source/world/worldid.ts","source/world/worldofworldobjects.ts","source/world/worldposition.ts"],"names":["f","exports","module","define","amd","g","window","global","self","this","test_mock","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","canvasmouse_1","mouseeventhandlerworldobject_1","worlddisplay_1","CanvasHolderHTML","canvasName","world","isVisable","isDrawable","canvas","document","getElementById","context","getContext","canvasMouse","CanvasMouse","MouseEventHandlerWorldObject","prototype","clearCanvas","clearRect","getWidth","getHeight","fillStyle","WorldDisplay","getColorFromString","fillRect","getCanvas","isCanvasVisable","_isVisable","isCanvasDrawable","_isDrawable","Object","defineProperty","_canvasName","value","_canvas","_context","_canvasMouse","worldposition_1","canvasholderHTML","mouseEventHandler","offset","getCanvasOffset","addEventListener","event","pointerDownEvent","pointerMoveEvent","pointerUpEvent","offsetLeft","offsetTop","object","isNaN","element","offsetParent","hasOwnProperty","WorldPosition","_offset","_mouseEventHandler","mousestatus_1","mouseStatus","MouseStatus","currentWorldObject","lastWorldObject","getMouseStatus","worldObjectSelected","wWorldObject","worldObjectDeselected","getCurrentWorldObject","eventPosition","getWorldPositionFromMouseEvent","console","log","JSON","stringify","isDown","startPosition","position","setAnimated","setSelected","clickWorldObject","getWorldObjectContainingPosition","getWorldId","id","clone","clickOffset","getWorldPosition","getDelta","getWorldObjectEventHandler","worldEngine","pointerDownEngineEvent","pointerMoveEngineEvent","pointerUpEngineEvent","_mouseStatus","_currentWorldObject","_lastWorldObject","_isDown","_startPosition","_position","_clickOffset","CircleDisplayShape","circleEngineShape","init","options","_circleEngineShape","draw","strokeStyle","beginPath","arc","x","y","getRadius","Math","PI","closePath","fill","lineWidth","stroke","PolygonDisplayShape","polygonEngineShape","_polygonEngineShape","drawOutlinedShape","getPolygonPoints","RectangleDisplayShape","rectangleEngineShape","_rectangleEngineShape","getShapePoints","TextDisplayShape","rectangleDisplayShape","displayText","textImageData","getText","setText","woe","width","height","setWorldObjectEventHandler","_textImageData","_rectangleDisplayShape","_displayText","needsARedraw","setContextFont","textSize","metricsTextMutipleLines","Size","hPadding","vPadding","setSize","drawTextMutipleLines","getImageData","putImageData","stopRotation","fontStyle","fontFace","fontPixelHeight","fontColor","font","textAlign","_width","_height","text","lineHeight","splitChar","lines","split","fillText","maxWidth","totalHeight","metrics","measureText","colorString","parseInt","substring","pageX","pageY","startAngle","numberOfSides","radius","polygonPointArray","Array","angle","angleIncrement","push","cos","sin","worldPositionArray","point","moveTo","lineTo","getAveragePostionFromPositionList","positionList","p","getCirclePositionList","curvePoints","pointList","angleInc","rads","getTrianglePositionList","getRectanglePositionList","getArcPositionList","endAngle","abs","angle_1","fillTextMutipleLines","roundedRect","w","h","borderWitdh","borderColor","rectColor","arcTo","worldid_1","mockcircle_1","mockrectangle_1","mockpolygon_1","circledisplayshape_1","mockrectangletext_1","MockEngine","mouseAnchor","MockCircle","WorldId","restitution","isSensor","getMouseAnchor","createBounds","startEngine","createCircle","worldId","drawable","worldPosition","createRectangle","MockRectangle","createTextBox","textDisplayShape","MockRectangleText","createPolygon","MockPolygon","newPosition","translate","deltaPosition","newX","newY","setWorldPosition","_mouseAnchor","mockshape_1","_super","mockEngine","_this","__extends","containsWorldPosition","getDistance","_curvePoints","_radius","MockShape","j","c","pi","pj","getNumberOfSides","getPointList","_polygonPointArray","_numberOfSides","drawableText","_drawableText","isObjectAnimated","isObjectVisable","isObjectSelected","worldObjectEventHandler","createMouseEventHandler","isAnimated","isSelected","getOptions","animated","selected","setVisable","visable","scaleShape","scaleX","scaleY","error","_worldObjectEventHandler","getDrawable","_drawable","_worldId","_isObjectAnimated","_isObjectVisable","_isObjectSelected","_objectOptions","canvasholderhtml_1","mockengine_1","worldofworldobjects_1","test1_1","WorldOfWorldObjects","canvasHolder","test1","Test1","rectangledisplayshape_1","textdisplayshape_1","polygondisplayshape_1","doDraw","drawWorld","circle1","circle2","rectangle1","polygon1","textBox1","textBox2","textBox3","addWorldObject","setInterval","World","_worldEngine","woldObjectId","matches","_id","world_1","worldObjectArray","worldObject","getWorldObjectMatchingWorldId","foundObject","_worldObjectArray","_x","_y","getDeltaY","getDeltaX","equals","sqrt","pow","getAveragePostionFromWorldPositionList","getAveragePostionFromWorldObjectList","worldObjectList","getPostionListFromNodeList","positions"],"mappings":"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","file":"test_mock.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import { CanvasHolder } from \"./canvasholder\";\nimport { World } from \"../../world/world\";\nimport { CanvasMouse } from \"./canvasmouse\";\nimport { MouseEventHandlerWorldObject } from \"./mouseeventhandlerworldobject\";\nimport { WorldDisplay } from \"../worlddisplay\";\n\n\nexport class CanvasHolderHTML implements CanvasHolder\n{\n\tprivate _isVisable:boolean;\n\tprivate _isDrawable:boolean;\n\tprivate _canvasName:string;\n\tprivate _canvas:HTMLCanvasElement;\n\tprivate _context:CanvasRenderingContext2D;\n\tprivate _canvasMouse:CanvasMouse;\n\t\n\tconstructor(canvasName:string,world:World)\n\t{\n\t\tthis.canvasName = canvasName;\n\t\tthis.isVisable = true;\n\t\tthis.isDrawable = true;\n\t\tthis.canvas = <HTMLCanvasElement>document.getElementById(this.canvasName);\t\t\t\n\t\tthis.context = this.canvas.getContext(\"2d\");\n\t\tthis.canvasMouse = new CanvasMouse(world,this,new MouseEventHandlerWorldObject());\n\t\t/*if (typeof document !== 'undefined')\n\t\t{\n\t\t\tthis.canvas = document.getElementById(this.canvasName);\t\t\t\n\t\t\tthis.context = this.canvas.getContext('2d');\n\t\t}*/\n\t}\n\n\tpublic clearCanvas():void {\n\t\tif(this.isVisable && this.isDrawable)\n\t\t{\n\t\t\tthis.context.clearRect(0, 0, this.getWidth(), this.getHeight());\n\t\t\tthis.context.fillStyle = WorldDisplay.getColorFromString(\"ffffff\"+\"ff\");\n\t\t\tthis.context.fillRect(0, 0, this.getWidth(), this.getHeight());\n\t\t}\n\t}\n\n\tpublic getCanvas():HTMLCanvasElement {\n\t\treturn(this.canvas);\n\t}\n\n\tpublic getContext():CanvasRenderingContext2D {\n\t\treturn(this.context);\n\t}\n\t\n\tpublic getWidth():number\n\t{\n\t\treturn(this.canvas.width);\n\t}\n\t\n\tpublic getHeight():number\n\t{\n\t\treturn(this.canvas.height);\n\t}\n\n\tpublic isCanvasVisable(): boolean {\n\t\treturn this._isVisable;\n\t}\n\n\tpublic isCanvasDrawable(): boolean {\n\t\treturn this._isDrawable;\n\t}\n\n\tpublic get canvasName(): string {\n\t\treturn this._canvasName;\n\t}\n\n\tpublic set canvasName(value: string) {\n\t\tthis._canvasName = value;\n\t}\n\n\n\tpublic get canvas(): HTMLCanvasElement {\n\t\treturn this._canvas;\n\t}\n\n\tpublic set canvas(value: HTMLCanvasElement) {\n\t\tthis._canvas = value;\n\t}\n\n\tpublic get context(): CanvasRenderingContext2D {\n\t\treturn this._context;\n\t}\n\n\tpublic set context(value: CanvasRenderingContext2D) {\n\t\tthis._context = value;\n\t}\n\n\tpublic get isVisable(): boolean {\n\t\treturn this._isVisable;\n\t}\n\n\tpublic set isVisable(value: boolean) {\n\t\tthis._isVisable = value;\n\t}\n\n\tpublic get isDrawable(): boolean {\n\t\treturn this._isDrawable;\n\t}\n\n\tpublic set isDrawable(value: boolean) {\n\t\tthis._isDrawable = value;\n\t}\n\n\tpublic get canvasMouse(): CanvasMouse {\n\t\treturn this._canvasMouse;\n\t}\n\n\tpublic set canvasMouse(value: CanvasMouse) {\n\t\tthis._canvasMouse = value;\n\t}\n\t\n\t\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t/*\n\tstatic createCanvasHolderFromClientJson(worldDef,json)\n\t{\n\t  var canvasHolder = new CanvasHolder(json.canavsName,worldDef);\n\t  return(canvasHolder);\n\t}\n\t*/\n\t/*\n\t  getClientJson()\n\t  {\n\t\t  var json = {};\n\t\t  \n\t\t  \n\t\t  json.canvasName = this.canvasName;\n\t\t  json.origin = this.origin;\n\t\t  json.width = this.getWidth();\n\t\t  json.height = this.getHeight();\n\t\t  json.worldDef = this.worldDef;\n\t\t  \n\t\t  JSON.stringify(json);\n\t\t  return(json)\n\t  }\n\t*/\n\n\t/*  \n\tgetConnector(connectorDefKey,name)\n\t{\n\t\tvar connector = this.getConnectorDef(connectorDefKey)(this.worldDef,name);\n\t\tconnector.connectorDefKey = connectorDefKey;\n\t\treturn(connector);\n\t}\n\t*/\n\n\t/*\n\tgetConnectorDef(connectorDefKey)\n\t{\n\t\tvar connectorDef = this.worldDef.worldDisplay.connectorDefs[\"generic\"];\n\t\t\n\t\tvar foundConnectorDef = false;\n\t\tif(this.worldDef.worldDisplay.connectorDefs.hasOwnProperty(connectorDefKey))\n\t\t{\n\t\t\tconnectorDef = this.worldDef.worldDisplay.connectorDefs[connectorDefKey];\n\t\t\tfoundConnectorDef = true;\n\t\t}\n\t\tif(!foundConnectorDef) console.trace(\"CanvasHolder:getConnectorDef:connectorDefKey=\\\"\"+connectorDefKey+ \"\\\" was not found using generic\");\n\t\telse console.log(\"found connector display :\"+connectorDefKey);\n\t\tconnectorDef.connectorDefKey = connectorDefKey;\n\t\treturn(connectorDef);\n\t}\n\t*/\n\n\t/*\n\tgetConnectorDisplay(connectorDisplayKey)\n\t{\n\t\tvar connectorDisplay = this.worldDef.worldDisplay.connectorDisplay[\"generic\"];\n\t\t\n\t\tvar foundConnectorDisplay = false;\n\t\tif(this.worldDef.worldDisplay.connectorDisplay.hasOwnProperty(connectorDisplayKey))\n\t\t{\n\t\t\tconnectorDisplay = this.worldDef.worldDisplay.connectorDisplay[connectorDisplayKey];\n\t\t\tfoundConnectorDisplay = true;\n\t\t}\n\t\tif(!foundConnectorDisplay) console.trace(\"CanvasHolder:getConnectorDisplay:connectorDisplayKey=\\\"\"+connectorDisplayKey+ \"\\\" was not found using generic\");\n\t\tconnectorDisplay.connectorDisplayKey = connectorDisplayKey;\n\t\treturn(connectorDisplay);\n\t}\n\t*/\n\n\t/*\n\tgetGraphData(graphDataKey)\n\t{\n\t\tvar graphData = this.worldDef.worldDisplay.nodeDisplay[\"generic\"];\t\n\t\tvar foundGraphData = false;\n\t\tif(this.worldDef.worldDisplay.nodeDisplay.hasOwnProperty(graphDataKey))\n\t\t{\n\t\t\tgraphData = this.worldDef.worldDisplay.nodeDisplay[graphDataKey];\n\t\t\tfoundGraphData = true;\n\t\t}\n\t\tif(!foundGraphData) console.trace(\"CanvasHolder:getGraphData:graphDataKey=\\\"\"+graphDataKey+ \"\\\" was not found using generic\")\n\t\t//console.trace(\"CanvasHolder:getGraphData:graphDataKey=\\\"\"+graphDataKey+ \"\\\" was not found using generic\")\n\t\t//console.log(\"FOR:\"+graphDataKey+Common.toString(graphData));\n\t\t//console.log(\"getGraphData:graphDataKey=\"+graphDataKey+\":clone=\"+graphData.nodeDisplay.displayInfo.clone);\n\n\t\t//if(graphData.nodeDisplay.displayInfo.clone)\n\t\tif(graphData.nodeDisplayFunction)\n\t\t{\n\t\t\t//console.log(\"getGraphData:graphDataKey:FOUND A FUNCTION:\"+graphDataKey);\n\t\t\tgraphData = Object.create(graphData);\n\t\t\tgraphData.nodeDisplay = graphData.nodeDisplayFunction();\n\t\t\t//console.log(\"CLONING:\"+graphDataKey+Common.toString(graphData));\n\t\t\t//graphData.nodeDisplay.displayInfo = Object.create(graphData.nodeDisplay.displayInfo);\n\t\t\t//graphData.nodeDisplay.displayInfo  = JSON.parse(JSON.stringify(graphData.nodeDisplay.displayInfo));\n\t\t\t//graphData.nodeDisplay.displayInfo  = JSON.parse(JSON.stringify(graphData.nodeDisplay.displayInfo));\n\t\t\t//graphData = Object.create(graphData);\n\t\t\t//graphData.nodeDisplay.displayInfo.ts = new Date().getTime();\n\n\n\t\t}\n\n\t\tgraphData.graphDataKey = graphDataKey;\n\t\treturn(graphData);\n\t}\n\t*/\n\t/*\n\tclone(origin)\n\t{\n\t\tvar canvasHolder = new CanvasHolderHTML(this.canvasName);\n\t\t//canvasHolder.origin = origin;\n\t\t\n\t\tvar canvasHolder = new Object();\n\t\tcanvasHolder.origin = origin;\n\t\t\n\t\tcanvasHolder.canvasName = this.canvasName;\n\t\tcanvasHolder.canvas = this.canvas;\n\t\tcanvasHolder.context = this.context;\n\t\tcanvasHolder.isCanvasVisable = this.isCanvasVisable;\n\t\tcanvasHolder.isCanvasDrawable = this.isCanvasDrawable;\n\t\tcanvasHolder.isDrawable = this.isDrawable;\n\t\tcanvasHolder.isVisable = this.isVisable;\n\t\tcanvasHolder.getWidth = this.getWidth;\n\t\tcanvasHolder.getHeight = this.getHeight;\n\t\tcanvasHolder.worldDef = this.worldDef;\n\t\tcanvasHolder.getGraphData = this.getGraphData;\n\t\t\n\t\t\n\t\treturn(canvasHolder);\n\t}\n\t*/","import { WorldPosition } from \"../../world/worldposition\";\nimport { CanvasHolderHTML } from \"./canvasholderhtml\";\nimport { MouseEventHandler } from \"./mouseeventhandler\";\nimport { World } from \"../../world/world\";\n\n\nexport class CanvasMouse\n{\n\tprivate _offset:WorldPosition;\n\tprivate canvasholderHTML:CanvasHolderHTML;\n\tprivate _mouseEventHandler:MouseEventHandler;\n\t\n\n\tconstructor(world:World,canvasholderHTML:CanvasHolderHTML,mouseEventHandler:MouseEventHandler)\n\t{\n\t\tthis.canvasholderHTML = canvasholderHTML;\n\t\tthis.mouseEventHandler = mouseEventHandler;\n\t\tif(canvasholderHTML.isCanvasVisable()) \n\t\t{\n\t\t\t//this.offset = NodeCanvasMouse.getCanvasOffset(this.canvasholder.canvas);\n\t\t\tthis.offset = this.getCanvasOffset();\t\t\n\t\t\tvar self = this;\n\t\t\tthis.canvasholderHTML.canvas.addEventListener(\"pointerdown\", function(event) { self.pointerDownEvent(world,self,event) }, false);\n\t\t\tthis.canvasholderHTML.canvas.addEventListener(\"pointermove\",function(event) { self.pointerMoveEvent(world,self,event) }, false);\n\t\t\tthis.canvasholderHTML.canvas.addEventListener(\"pointerup\",function(event) { self.pointerUpEvent(world,self,event) }, false);\n\t\t\t//this.nodeMouseMovment = {};\n\t\t}\n\t}\n\n\tprivate getCanvasOffset():WorldPosition\n\t{\n\t    let offsetLeft = 0;\n\t\tlet offsetTop = 0;\n\t\tlet object:HTMLElement = this.canvasholderHTML.canvas;\n\t    do\n\t    {\n\t      if (!isNaN(object.offsetLeft))\n\t      {\n\t          offsetLeft += object.offsetLeft;\n\t      }\n\t      if (!isNaN(object.offsetTop))\n\t      {\n\t          offsetTop += object.offsetTop;\n\t\t  }   \n\t\t let element:any = object.offsetParent;\n\t\t if(element.hasOwnProperty(\"offsetParent\")) object = element;\n\t\t else object = null;\n\t    }\n\t    while(object);\n\t    \n\t    return( new WorldPosition(offsetLeft,offsetTop) );\n\t}\n\n\tpublic pointerDownEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent) {\n\t\tthis.mouseEventHandler.pointerDownEvent(world,canvasMouse,event);\n\t}\n\t\n\tpublic pointerMoveEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent)\t{\n\t\tthis.mouseEventHandler.pointerMoveEvent(world,canvasMouse,event);\n\n\t}\n\t\n\tpublic pointerUpEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent)\n\t{\n\t\tthis.mouseEventHandler.pointerUpEvent(world,canvasMouse,event);\n\n\t}\n\t\n\n\t\n\tpublic get offset(): WorldPosition {\n\t\treturn this._offset;\n\t}\n\n\tpublic set offset(value: WorldPosition) {\n\t\tthis._offset = value;\n\t}\n\n\tpublic get mouseEventHandler(): MouseEventHandler {\n\t\treturn this._mouseEventHandler;\n\t}\n\n\tpublic set mouseEventHandler(value: MouseEventHandler) {\n\t\tthis._mouseEventHandler = value;\n\t}\n\n\n\tpublic get $canvasholderHTML(): CanvasHolderHTML {\n\t\treturn this.canvasholderHTML;\n\t}\n\n\tpublic set $canvasholderHTML(value: CanvasHolderHTML) {\n\t\tthis.canvasholderHTML = value;\n\t}\n\t\n\n}\n","import { MouseStatus } from \"./mousestatus\";\nimport { WorldObject } from \"../../world/worldobject\";\nimport { MouseEventHandler } from \"./mouseeventhandler\";\nimport { WorldPosition } from \"../../world/worldposition\";\nimport { World } from \"../../world/world\";\nimport { CanvasMouse } from \"./canvasmouse\";\nimport { WorldDisplay } from \"../worlddisplay\";\n\n\n\nexport class MouseEventHandlerWorldObject implements MouseEventHandler {\n   private _mouseStatus:MouseStatus;\n   private _currentWorldObject:WorldObject;\n   private _lastWorldObject:WorldObject;\n\n    constructor()\n    {\n        this.mouseStatus = new MouseStatus();\n        this.currentWorldObject = null;\n        this.lastWorldObject = null;\n\t}\n\t\n\tpublic getMouseStatus():MouseStatus {\n\t\treturn(this.mouseStatus);\n\t}\n\n    public worldObjectSelected(world:World,event:MouseEvent,wWorldObject:WorldObject):void {\n\n    }\n\n    public worldObjectDeselected(world:World,event:MouseEvent):void {\n\n\t}\n\n\tpublic getCurrentWorldObject():WorldObject {\n\t\treturn(this.currentWorldObject);\n\t}\n\t\n\t/*\n\tpublic getWorldPositionFromMouseEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent):WorldPosition {\n\t\tvar eventPosition:WorldPosition = new WorldPosition(event.pageX-canvasMouse.offset.x,event.pageY-canvasMouse.offset.y);\n\t\treturn(eventPosition);\n\t}\n\t*/\n   \n    public pointerDownEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent):void\n\t{\n\t\t//console.log(\"pointerDownEvent:\"+JSON.stringify(event));;\n\t\tvar eventPosition:WorldPosition = WorldDisplay.getWorldPositionFromMouseEvent(world,canvasMouse,event);\n\t\t//this.hideCurrentNodeInfo();\n\t\tconsole.log(\"pointerDownEvent:\"+JSON.stringify(eventPosition));;\n\n\t\tthis.mouseStatus.isDown = true;\n\t\tthis.mouseStatus.startPosition = eventPosition;\n\t\tthis.mouseStatus.position = eventPosition;\n\t\tif(this.currentWorldObject!=null)\n\t\t{\n\t\t\tthis.currentWorldObject.setAnimated(true);\n\t\t\tthis.currentWorldObject.setSelected(false);\n\t\t\tthis.currentWorldObject = null;\n\t\t}\n\t\t\n\t\tlet clickWorldObject:WorldObject =  world.getWorldObjectContainingPosition(eventPosition);\n\t\n\t\tif(clickWorldObject!=null && clickWorldObject!=this.lastWorldObject)\n\t\t{\n\t\t\tconsole.log(\"pointerDownEvent:clickWorldObject=\"+clickWorldObject.getWorldId().id);\n\n\t\t\tthis.currentWorldObject = clickWorldObject;\n\n\t\t\tthis.mouseStatus.startPosition = eventPosition.clone();\n\n\t\t\tthis.currentWorldObject.setSelected(true);\n\t\t\tthis.mouseStatus.clickOffset = this.currentWorldObject.getWorldPosition().getDelta(eventPosition);\n\t\t\tthis.currentWorldObject.setAnimated(false);\n\t\t\t/////////////////this.mouseStatus.clickOffset = clickWorldObject.getWorldPosition().getDelta(eventPosition);\n\t\t\t//this.mouseEventHandler.pointerDown(this.mouseStatus);\t\t\t\n\t\t\tthis.worldObjectSelected(world,event,this.currentWorldObject);\t\n\t\t\tthis.currentWorldObject.getWorldObjectEventHandler().pointerDownEvent(world,canvasMouse,event);\t\t\n\t\t}\n\t\t\n\t\tif(clickWorldObject==null)\n\t\t{\n\t\t\tthis.worldObjectDeselected(world,event);\n\t\t}\n\t\t\n\t\tif(this.lastWorldObject)\n\t\t{\n\t\t\tthis.worldObjectDeselected(world,event);\n\t\t\tthis.lastWorldObject.setSelected(false);\n\t\t\tthis.lastWorldObject = null;\n\t\t}\n\n\t\tworld.worldEngine.pointerDownEngineEvent(world,canvasMouse,event,this);\n\t\t////////////this.updateObjectPosition(eventPosition);\n\n\t\t\n\t\t\n\t\n\t}\n/*\n\tprivate updateObjectPosition():void {\n\n\t\tif(this.currentWorldObject!=null)\n\t\t{\n\t\t\tthis.currentWorldObject.setAnimated(false);\n\t\t\tthis.mouseStatus.position = this.mouseStatus.position;;\n\t\t\tvar deltaPosition = this.mouseStatus.startPosition.getDelta(this.mouseStatus.position);\n\n\n\t\t\t\t\t\n\t\t\tlet newX = this.mouseStatus.startPosition.x-\n\t\t\t\t\tdeltaPosition.x+\n\t\t\t\t\tthis.mouseStatus.clickOffset.x;\n\t\t\t\n\t\t\tlet newY = this.mouseStatus.startPosition.y-\n\t\t\t\t\tdeltaPosition.y+\n\t\t\t\t\tthis.mouseStatus.clickOffset.y;\n\n\t\t\tthis.currentWorldObject.setWorldPosition( new WorldPosition(newX,newY));\n\t\t}\n\t}\n  */  \n    \n\n    public pointerMoveEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent):void {\n\t\tvar eventPosition:WorldPosition = WorldDisplay.getWorldPositionFromMouseEvent(world,canvasMouse,event);\n\t\tthis.mouseStatus.position = eventPosition;\n\t\t\n\t\tif(this.mouseStatus.isDown)\n\t\t{\n\t\t\t//var eventPosition:WorldPosition = WorldDisplay.getWorldPositionFromMouseEvent(world,canvasMouse,event);\n\t\t\t//this.mouseStatus.position = eventPosition;\n\t\t\t\n\t\t\t////////////console.log(\"pointerMoveEvent:\"+event);\n\n\t\t\tthis.worldObjectDeselected(world,event);\n\t\t\tif(this.currentWorldObject!=null)\n\t\t\t{\n\t\t\t\tthis.currentWorldObject.setAnimated(false);\n\t\t\t\tthis.currentWorldObject.getWorldObjectEventHandler().pointerMoveEvent(world,canvasMouse,event);\t\t\n\n\t\t\t}\n\t\t\tthis.mouseStatus.position = this.mouseStatus.position;;\n\t\t\t\n\n\n\t\t\t//this.updateObjectPosition(eventPosition);\n\t\t\t/*\n\t\t\tif(this.currentWorldObject!=null)\n\t\t\t{\n\t\t\t\tthis.currentWorldObject.setAnimated(false);\n\t\t\t\tthis.mouseStatus.position = eventPosition;\n\t\t\t\tvar deltaPosition = this.mouseStatus.startPosition.getDelta(eventPosition);\n\n\n\t\t\t\t\t\t\n\t\t\t\tlet newX = this.mouseStatus.startPosition.x-\n\t\t\t\t\t\tdeltaPosition.x+\n\t\t\t\t\t\tthis.mouseStatus.clickOffset.x;\n\t\t\t\t\n\t\t\t\tlet newY = this.mouseStatus.startPosition.y-\n\t\t\t\t\t\tdeltaPosition.y+\n\t\t\t\t\t\tthis.mouseStatus.clickOffset.y;\n\n\t\t\t\tthis.currentWorldObject.setWorldPosition( new WorldPosition(newX,newY));\n\t\t\t}\n\t\t\t*/\n\t\t}\n\t\tworld.worldEngine.pointerMoveEngineEvent(world,canvasMouse,event,this);\n    }\n            \n\n    public pointerUpEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent):void \t{\n\t\t//console.log(\"pointerUpEvent:\"+JSON.stringify(event));\n\t\t//var eventPosition:WorldPosition = this.getWorldPositionFromMouseEvent(world,canvasMouse,event);\n\t\tvar eventPosition:WorldPosition = WorldDisplay.getWorldPositionFromMouseEvent(world,canvasMouse,event);\n\t\tthis.mouseStatus.position = eventPosition;\n\t\t\n\t\tif(this.currentWorldObject!=null)\n\t\t{\n\t\t\t///this.nodeCanvas.pointerUp(this.mouseStatus.node);\n\t\t\tthis.currentWorldObject.setAnimated(true);\n\t\t\t//this.mouseStatus.node.isSelected = false;\n\t\t\tthis.lastWorldObject = this.currentWorldObject;\n\t\n\t\t\tthis.currentWorldObject.getWorldObjectEventHandler().pointerUpEvent(world,canvasMouse,event);\t\t\n\n\t\t\tthis.currentWorldObject = null;\n\t\t}\n\t\tthis.mouseStatus.isDown = false;\n\t\tworld.worldEngine.pointerUpEngineEvent(world,canvasMouse,event,this);\n\t\t\n\t}\n\n\tpublic get mouseStatus(): MouseStatus {\n\t\treturn this._mouseStatus;\n\t}\n\n\tpublic set mouseStatus(value: MouseStatus) {\n\t\tthis._mouseStatus = value;\n\t}\n\n\n\tpublic get currentWorldObject(): WorldObject {\n\t\treturn this._currentWorldObject;\n\t}\n\n\tpublic set currentWorldObject(value: WorldObject) {\n\t\tthis._currentWorldObject = value;\n\t}\n\n\n\tpublic get lastWorldObject(): WorldObject {\n\t\treturn this._lastWorldObject;\n\t}\n\n\tpublic set lastWorldObject(value: WorldObject) {\n\t\tthis._lastWorldObject = value;\n\t}\n    \n}","import { WorldPosition } from \"../../world/worldposition\";\n\nexport class MouseStatus\n{\n\tprivate _isDown:boolean;\n\tprivate _startPosition:WorldPosition;\n\tprivate _position:WorldPosition;\n\t//private _worldObject:WorldObject;\n\t//private _objectStartPosition:WorldPosition;\n\tprivate _clickOffset:WorldPosition;\n\t//private _lastWorldObject:WorldObject;\n\t\n\t\n\t\n\n\tconstructor()\n\t{\n\t\tthis.isDown = false;\n\t\tthis.startPosition = new WorldPosition(0,0);\n\t\tthis.position = new WorldPosition(0,0);\n\t\tthis.clickOffset = new WorldPosition(0,0);\n\n\t\t//this.objectStartPosition = null\n\t}\n// \t\t\tnodeCanvasMouse.mouseStatus = new MouseStatus(false,new Position(0,0),new Position(0,0),null,null);\n\n\n\tpublic get isDown(): boolean {\n\t\treturn this._isDown;\n\t}\n\n\tpublic set isDown(value: boolean) {\n\t\tthis._isDown = value;\n\t}\n\n\tpublic get startPosition(): WorldPosition {\n\t\treturn this._startPosition;\n\t}\n\n\tpublic set startPosition(value: WorldPosition) {\n\t\tthis._startPosition = value;\n\t}\n\t\n\n\tpublic get position(): WorldPosition {\n\t\treturn this._position;\n\t}\n\n\tpublic set position(value: WorldPosition) {\n\t\tthis._position = value;\n\t}\n\n\tpublic get clickOffset(): WorldPosition {\n\t\treturn this._clickOffset;\n\t}\n\n\tpublic set clickOffset(value: WorldPosition) {\n\t\tthis._clickOffset = value;\n\t}\n\n\n\n\t\n}\n","import { Drawable } from \"../drawable\";\nimport { WorldPosition } from \"../../world/worldposition\";\n//import { WalkerWorld } from \"../../walkers/walkerworld/walkerworld\";\nimport { WorldDisplay } from \"../worlddisplay\";\nimport { CircleEngineShape } from \"../../engine/shapes/circleengineshape\";\n//import { WalkerEngine } from \"../../walkerworld/walkerengine\";\n\n\nexport class CircleDisplayShape implements Drawable\n{\n\tprivate _circleEngineShape:CircleEngineShape;\n\n\tconstructor()\n\t{\n\t\tthis.circleEngineShape = null;\n\t}\n\n\tpublic init(circleEngineShape:CircleEngineShape,options:any):void {\n\t\tthis.circleEngineShape = circleEngineShape;\t\t\n\t}\n\t\n\n\tpublic get circleEngineShape(): CircleEngineShape {\n\t\treturn this._circleEngineShape;\n\t}\n\n\tpublic set circleEngineShape(value: CircleEngineShape) {\n\t\tthis._circleEngineShape = value;\n\t}\n\t\n\t\n\tpublic draw(context:CanvasRenderingContext2D):void\n\t{\n\t\tif(!this.circleEngineShape) throw Error(\"CircleDisplayShape:CircleEngineShape is not set, was init called?\")\n\t\t//super.drawConnector(canvasHolder,node);\n\t\t/*\n\t\tsuper.drawNode(canvasHolder,node);\n\n\t\t*/\n\t\t//console.log(\"CircleDisplayShape.drawShape\");\n\n\t\tcontext.fillStyle = WorldDisplay.getColorFromString(\"ff0000ff\");\n\t\tcontext.strokeStyle = WorldDisplay.getColorFromString(\"0000ffff\");\n\t\tlet position:WorldPosition = this.circleEngineShape.getWorldPosition();\n\t\t\n\t    context.beginPath();\n\t    context.arc(position.x,position.y,this.circleEngineShape.getRadius(),0,Math.PI * 2, false);\n\t    context.closePath();\n\t    context.fill();\n\t    context.lineWidth = 2;\n\t\tcontext.stroke();\n\t}\n}\n","import { Drawable } from \"../drawable\";\nimport { PolygonEngineShape } from \"../../engine/shapes/polygonengineshape\";\nimport { WorldDisplay } from \"../worlddisplay\";\n\nexport class PolygonDisplayShape implements Drawable\n{\n\tprivate _polygonEngineShape:PolygonEngineShape;\n\n\tconstructor()\n\t{\n\t\tthis.polygonEngineShape = null;\n\t}\n\n\tpublic init(polygonEngineShape:PolygonEngineShape,options:any):void {\n\t\tthis.polygonEngineShape = polygonEngineShape;\t\t\n\t}\n\n\tpublic get polygonEngineShape(): PolygonEngineShape {\n\t\treturn this._polygonEngineShape;\n\t}\n\n\tpublic set polygonEngineShape(value: PolygonEngineShape) {\n\t\tthis._polygonEngineShape = value;\n\t}\n\n\t\n\t\n\tpublic draw(context:CanvasRenderingContext2D):void\n\t{\n\t\tif(!this.polygonEngineShape) throw Error(\"PolygonDisplayShape:PolygonEngineShape is not set, was init called?\")\n\n\t\tcontext.fillStyle = WorldDisplay.getColorFromString(\"ff0000ff\");\n\t\tcontext.strokeStyle = WorldDisplay.getColorFromString(\"0000ffff\");\n        context.lineWidth = 2;\n        \n        WorldDisplay.drawOutlinedShape(context,this.polygonEngineShape.getPolygonPoints());\n\t\t\n\t}\n}\n","import { Drawable } from \"../drawable\";\nimport { WorldDisplay } from \"../worlddisplay\";\nimport { RectangleEngineShape } from \"../../engine/shapes/rectangleengineshape\";\n\nexport class RectangleDisplayShape implements Drawable\n{\n\tprivate _rectangleEngineShape:RectangleEngineShape;\n\n\tconstructor()\n\t{\n\t\tthis.rectangleEngineShape = null;\n\t}\n\n\tpublic init(rectangleEngineShape:RectangleEngineShape,options:any):void {\n\t\tthis.rectangleEngineShape = rectangleEngineShape;\t\t\n\t}\n\n\tpublic get rectangleEngineShape(): RectangleEngineShape {\n\t\treturn this._rectangleEngineShape;\n\t}\n\n\tpublic set rectangleEngineShape(value: RectangleEngineShape) {\n\t\tthis._rectangleEngineShape = value;\n\t}\n\t\n\t\n\t\n\tpublic draw(context:CanvasRenderingContext2D):void\n\t{\n\t\tif(!this.rectangleEngineShape) throw Error(\"RectangleDisplayShape:rectangleEngineShape is not set, was init called?\")\n\t\t//super.drawConnector(canvasHolder,node);\n\t\t/*\n\t\tsuper.drawNode(canvasHolder,node);\n\n\t\t*/\n\t\t//console.log(\"CircleDisplayShape.drawShape\");\n\n\t\tcontext.fillStyle = WorldDisplay.getColorFromString(\"ff0000ff\");\n\t\tcontext.strokeStyle = WorldDisplay.getColorFromString(\"0000ffff\");\n\n        context.lineWidth = 2;\n        \n        WorldDisplay.drawOutlinedShape(context,this.rectangleEngineShape.getShapePoints());\n\n\t\t/*\n\n\t\tlet position:WorldPosition = this.rectangleEngineShape.getWorldPosition();\n\n\n\t\tcontext.fillRect( \n\t\t\t(position.x-this.rectangleEngineShape.getWidth()/2),\n\t\t\t(position.y-this.rectangleEngineShape.getHeight()/2),\n\t\t\tthis.rectangleEngineShape.getWidth(),\n\t\t\tthis.rectangleEngineShape.getHeight());\n\t\t\tcontext.lineWidth = 2;\n\t\tcontext.strokeRect( \n\t\t\t(position.x-this.rectangleEngineShape.getWidth()/2), \n\t\t\t(position.y-this.rectangleEngineShape.getHeight()/2), \n\t\t\tthis.rectangleEngineShape.getWidth(), \n\t\t\tthis.rectangleEngineShape.getHeight());\n\t\t*/\n\n\t}\n}\n","import { Drawable } from \"../drawable\";\nimport { WorldDisplay, Size } from \"../worlddisplay\";\nimport { RectangleEngineShape } from \"../../engine/shapes/rectangleengineshape\";\nimport { RectangleDisplayShape } from \"./rectangledisplayshape\";\nimport { World } from \"../../world/world\";\nimport { CanvasMouse } from \"../canvas/canvasmouse\";\nimport { WorldObjectEventHandler } from \"../../world/worldobjecteventhandler\";\nimport { DrawableText } from \"./drawabletext\";\n\n\nexport class TextDisplayShape implements DrawableText\n{\n    private _rectangleDisplayShape:RectangleDisplayShape;\n    private _displayText:string;\n\tprivate _rectangleEngineShape:RectangleEngineShape;\n\tprivate _textImageData:ImageData;\n\n\tconstructor(rectangleDisplayShape:RectangleDisplayShape,displayText:string)\n\t{\n\t\tthis.rectangleEngineShape = null;\n\t\tthis.rectangleDisplayShape = rectangleDisplayShape;\n\t\tthis.displayText = displayText;\n\t\tthis.textImageData = null;\n\n\t}\n\n\tpublic getText():string\n\t{\n\t\treturn(this.displayText);\n\t}\n\n\tpublic setText(displayText:string):void\n\t{\n\t\tthis.textImageData = null;\n\t\tthis.displayText = displayText;\n\t}\n\n\tpublic init(rectangleEngineShape:RectangleEngineShape,options:any):void {\n\t\tthis.rectangleEngineShape = rectangleEngineShape;\t\n\t\tthis.rectangleDisplayShape.init(this.rectangleEngineShape,options);\n\n\t\tlet woe:WorldObjectEventHandler = \n\t\t{\n\t\t\tpointerDownEvent : function (world:World,canvasMouse:CanvasMouse,event:MouseEvent):void\n\t\t\t{\n\t\t\t\tconsole.log(\"LOOOOOLZZZZZ! HEY FELLA XXXXXXX\");\n\t\t\t\tconsole.log(\"setSize:\"+JSON.stringify({\"width\":this.width,\"height\":this.height}))\n\n\n\t\t\t},\n\t\t\tpointerMoveEvent : function (world:World,canvasMouse:CanvasMouse,event:MouseEvent):void {},\n\t\t\tpointerUpEvent : function (world:World,canvasMouse:CanvasMouse,event:MouseEvent):void {}\n\t\t};\n\t\n\t\tthis.rectangleEngineShape.setWorldObjectEventHandler(woe);\n\t\t/*\n\t\tthis.rectangleEngineShape.getWorldObjectEventHandler().pointerMoveEvent = \n\t\t\tfunction(world:World,canvasMouse:CanvasMouse,event:MouseEvent)\n\t\t\t{\n\t\t\t\tthis.rectangleEngineShape.getWorldObjectEventHandler().pointerMoveEvent(world,canvasMouse,event);\n\t\t\t\tconsole.log(\"QQQQQQQQQQQQQQQQQQQ click on text box:\"+JSON.stringify({\"cw\":this.width,\"ch\":this.height}));\n\n\t\t\t};\n\t\t\t*/\n\t}\n\n\n    /**\n     * Getter textImageData\n     * @return {ImageData}\n     */\n\tpublic get textImageData(): ImageData {\n\t\treturn this._textImageData;\n\t}\n\n    /**\n     * Setter textImageData\n     * @param {ImageData} value\n     */\n\tpublic set textImageData(value: ImageData) {\n\t\tthis._textImageData = value;\n\t}\n\n\tpublic get rectangleEngineShape(): RectangleEngineShape {\n\t\treturn this._rectangleEngineShape;\n\t}\n\n\tpublic set rectangleEngineShape(value: RectangleEngineShape) {\n\t\tthis._rectangleEngineShape = value;\n    }\n    \n    /**\n     * Getter rectangleDisplayShape\n     * @return {RectangleDisplayShape}\n     */\n\tpublic get rectangleDisplayShape(): RectangleDisplayShape {\n\t\treturn this._rectangleDisplayShape;\n\t}\n\n    /**\n     * Setter rectangleDisplayShape\n     * @param {RectangleDisplayShape} value\n     */\n\tpublic set rectangleDisplayShape(value: RectangleDisplayShape) {\n\t\tthis._rectangleDisplayShape = value;\n\t}\n\n    /**\n     * Getter displayText\n     * @return {string}\n     */\n\tpublic get displayText(): string {\n\t\treturn this._displayText;\n\t}\n\n    /**\n     * Setter displayText\n     * @param {string} value\n     */\n\tpublic set displayText(value: string) {\n\t\tthis._displayText = value;\n\t}\n\t\n\t\n\n\t\n\tpublic draw(context:CanvasRenderingContext2D):void\n\t{\n\t\tif(!this.rectangleEngineShape) throw Error(\"RectangleDisplayShape:rectangleEngineShape is not set, was init called?\")\n\t\t\n\t\tlet fitContentToText:boolean = true;\n\t\t// DRAW TEXT\n\t\t// IF FITTING CONTAINER SIZE TO CONTENT THEN :\n\t\t// ---\n\t\t// ---\n\t\t// ---\n\t\t// ---\n\t\t// IF FITTING TEXT SIZE TO CONTAINER THEN :\n\t\tlet x = this.rectangleEngineShape.getWorldPosition().x;\n\t\tlet y = this.rectangleEngineShape.getWorldPosition().y;\n\n\t\tif(fitContentToText)\n\t\t{\n\t\t\tlet needsARedraw:boolean = false;\n\t\t\tif(this.textImageData==null) needsARedraw = true;\n\t\t\t\n\t\t\tif(needsARedraw)\n\t\t\t{\n\t\t\t\tlet hPadding:number = 5;\n\t\t\t\tlet vPadding:number = 5;\t\n\t\t\t\tlet fontPixelHeight:number = 15;\n\t\t\t\tthis.setContextFont(context,\"bold\",\"Arial\",15,\"000000ff\");\n\n\t\t\t\tlet textSize:Size = WorldDisplay.metricsTextMutipleLines(context,\n\t\t\t\t\tthis.displayText,\n\t\t\t\t\tfontPixelHeight,\n\t\t\t\t\t\"\\n\");\n\n\t\t\t\tlet containerSize = new Size(textSize.width+hPadding*2,textSize.height+vPadding*2);\n\t\t\t\t\n\t\t\t\tthis.rectangleEngineShape.setSize(textSize.width+hPadding*2,textSize.height+vPadding*2);\n\t\t\t\tthis.rectangleDisplayShape.draw(context);\n\n\t\t\t\t// the rectangle may have reset our color\n\t\t\t\tthis.setContextFont(context,\"bold\",\"Arial\",15,\"000000ff\");\n\n\t\t\t\tWorldDisplay.drawTextMutipleLines(context,\n\t\t\t\t\tthis.displayText,\n\t\t\t\t\tx,\n\t\t\t\t\ty-textSize.height/2+fontPixelHeight,\n\t\t\t\t\tfontPixelHeight,\"\\n\");\n\n\t\t\t\tthis.textImageData = context.getImageData(\n\t\t\t\t\tx-textSize.width/2,\n\t\t\t\t\ty-textSize.height/2,\n\t\t\t\t\ttextSize.width,\n\t\t\t\t\ttextSize.height);\n\t\t\t}\t\t\t\n\n\t\t\tthis.rectangleDisplayShape.draw(context);\n\t\t\tcontext.putImageData(\n\t\t\t\t\tthis.textImageData,\n\t\t\t\t\tx-this.textImageData.width/2,\n\t\t\t\t\ty-this.textImageData.height/2\n\t\t\t\n\t\t\t\t);\n\t\t}\n\n\t\tthis.rectangleEngineShape.stopRotation();\n\t}\n\n\t/*\n\tprivate drawTextMutipleLines(context:CanvasRenderingContext2D,text:string,x:number,y:number,lineHeight:number,splitChar:string):void\n\t{\n\t\tlet lines:string[] = text.split(splitChar);\n\t\n\t    for(let n = 0; n < lines.length; n++)\n\t    {\n\t\t\tcontext.fillText(lines[n], x, y);\n\t\t\ty = y+lineHeight;\n\t    }\n\t }\n\t\n\tprivate metricsTextMutipleLines(context:CanvasRenderingContext2D,text:string,lineHeight:number,splitChar:string):Size\n\t{\n\t\tlet lines = text.split(splitChar);\n\t    let maxWidth = 0;\n\t    let totalHeight = lineHeight/2;\n\t    for(let n = 0; n < lines.length; n++)\n\t    {\n\t\t\tlet metrics = context.measureText(lines[n]);\n\t     \tif(metrics.width>maxWidth) maxWidth = metrics.width;\n\t\t\ttotalHeight = totalHeight + lineHeight;\n \t\t}\n\t\t// TODO for some reason maxWidth is always 1 short, how come??!?! (coincidentally I think the java image libraries have the same issue)\n\n\t    return(new Size(maxWidth+1,totalHeight));\n\t }\n*/\n\tsetContextFont(context:CanvasRenderingContext2D,fontStyle:string,fontFace:string,fontPixelHeight:number,fontColor:string)\n\t{\n\t\t//context.fillStyle = WorldDisplay.getColorFromString(\"ffffffff\");\n\t\t\t//context.strokeStyle = WorldDisplay.getColorFromString(\"0000ffff\");\n\n\t\tcontext.font=fontStyle+\" \"+fontPixelHeight+\"px \"+fontFace; \n\t\tcontext.textAlign=\"center\";\n\t\tcontext.fillStyle=WorldDisplay.getColorFromString(fontColor);\n\t}\n\n\t\n\n\n\n/*************************\n\n\troundedRect(context,x,y,w,h,r,borderWitdh,borderColor,rectColor)\n\t{\n\t\t  if (w < 2 * r) r = w / 2;\n\t\t  if (h < 2 * r) r = h / 2;\n\t\t  context.beginPath();\n\t\t  context.moveTo(x+r, y);\n\t\t  context.arcTo(x+w, y,   x+w, y+h, r);\n\t\t  context.arcTo(x+w, y+h, x,   y+h, r);\n\t\t  context.arcTo(x,   y+h, x,   y,   r);\n\t\t  context.arcTo(x,   y,   x+w, y,   r);\n\t\t  context.closePath();\n\t\t\n\t    //context.beginPath();\n\t    //context.moveTo(x, y);\n\t    //context.lineTo(x + width - cornerRadius, y);\n\t    //context.arcTo(x + width, y, x + width, y + cornerRadius, cornerRadius);\n\t    //context.lineTo(x + width, y + height);\n\t    \n\t  context.lineWidth = borderWitdh;\n\t  context.fillStyle = rectColor;\n\t  context.strokeStyle = borderColor;\n\t  \n\t  context.stroke();\n\t  context.fill();\n  }\n*****************/\n\n/*******\n * \n * context.font = '14pt Verdana';\n * \n function measureTextHeight(fontSizeFace) {\n    // create a temp canvas\n    var width=1000;\n    var height=60;\n    var canvas=document.createElement(\"canvas\");\n    canvas.width=width;\n    canvas.height=height;\n    var ctx=canvas.getContext(\"2d\");\n\n    // Draw the entire a-z/A-Z alphabet in the canvas\n    var text=\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    ctx.save();\n    ctx.font=fontSizeFace;\n    ctx.clearRect(0,0,width,height);\n    ctx.fillText(text, 0, 40);\n    ctx.restore();\n\n    // Get the pixel data from the canvas\n    var data = ctx.getImageData(0,0,width,height).data,\n        first = false, \n        last = false,\n        r = height,\n        c = 0;\n\n    // Find the last line with a non-transparent pixel\n    while(!last && r) {\n        r--;\n        for(c = 0; c < width; c++) {\n            if(data[r * width * 4 + c * 4 + 3]) {\n                last = r;\n                break;\n            }\n        }\n    }\n\n    // Find the first line with a non-transparent pixel\n    while(r) {\n        r--;\n        for(c = 0; c < width; c++) {\n            if(data[r * width * 4 + c * 4 + 3]) {\n                first = r;\n                break;\n            }\n        }\n\n        // If we've got it then return the height\n        if(first != r) return last - first;\n    }\n\n    // error condition if we get here\n    return 0;\n}\n\n */\n}\n\n\n\n\n\n\n\n\n","\nimport { WorldPosition } from \"../world/worldposition\";\nimport { World } from \"../world/world\";\nimport { CanvasMouse } from \"./canvas/canvasmouse\";\n\nexport class Size {\n\tprivate _width:number;\n\tprivate _height:number;\n\n\tconstructor(width:number,height:number)\n\t{\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t}\n\tpublic get width(): number {\n\t\treturn this._width;\n\t}\n\n\tpublic set width(value: number) {\n\t\tthis._width = value;\n\t}\n\tpublic get height(): number {\n\t\treturn this._height;\n\t}\n\n\tpublic set height(value: number) {\n\t\tthis._height = value;\n\t}\n}\n\nexport class WorldDisplay  {\n    /*\n    static world(render:Matter.Render) {\n\n        Matter.Render.world(render);\n        console.log(\"doing some redering...\");\n    }\n    */    \n\n   public static  drawTextMutipleLines(context:CanvasRenderingContext2D,text:string,x:number,y:number,lineHeight:number,splitChar:string):void\n   {\n\t   let lines:string[] = text.split(splitChar);\n   \n\t   for(let n = 0; n < lines.length; n++)\n\t   {\n\t\t   context.fillText(lines[n], x, y);\n\t\t   y = y+lineHeight;\n\t   }\n\t}\n   \n\tpublic static  metricsTextMutipleLines(context:CanvasRenderingContext2D,text:string,lineHeight:number,splitChar:string):Size\n   {\n\t   let lines = text.split(splitChar);\n\t   let maxWidth = 0;\n\t   let totalHeight = lineHeight/2;\n\t   for(let n = 0; n < lines.length; n++)\n\t   {\n\t\t   let metrics = context.measureText(lines[n]);\n\t\t\tif(metrics.width>maxWidth) maxWidth = metrics.width;\n\t\t   totalHeight = totalHeight + lineHeight;\n\t\t}\n\t   // TODO for some reason maxWidth is always 1 short, how come??!?! (coincidentally I think the java image libraries have the same issue)\n\n\t   return(new Size(maxWidth+1,totalHeight));\n\t}\n\n\t/*\n\tpublic static metricsTextMutipleLines(context:CanvasRenderingContext2D,text:string,lineHeight:number,splitChar:string)\n\t{\n\t\tlet lines:Array<string> = text.split(splitChar);\n\t    //let line:string = '';\n\t    let maxWidth:number = 0;\n\t    let totalHeight = 0;\n\t    for(var n = 0; n < lines.length; n++)\n\t    {\n            let metrics:TextMetrics = context.measureText(lines[n]);\n            if(metrics.width>maxWidth) maxWidth = metrics.width;\n            totalHeight = totalHeight + lineHeight;\n\t    }\n\t    return({width:maxWidth,height:totalHeight});\n\t }\n\t */\n\n    public static getColorFromString(colorString:string):string\n    {\n      if(colorString.length==6)\n      {\n        colorString += \"ff\";\n      }\n      \n      let color = \"rgba(\"+\n          parseInt(colorString.substring(0,2), 16)+\",\"+\n          parseInt(colorString.substring(2,4), 16)+\",\"+\n          parseInt(colorString.substring(4,6), 16)+\",\"+\n          parseInt(colorString.substring(6,8), 16)/255.0+\")\";\n      \n      return(color);\n\t}\n\n\tpublic static getWorldPositionFromMouseEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent):WorldPosition {\n\t\tvar eventPosition:WorldPosition = new WorldPosition(event.pageX-canvasMouse.offset.x,event.pageY-canvasMouse.offset.y);\n\t\treturn(eventPosition);\n\t}\n\n\n\tpublic static getPolygonPoints(startAngle:number,numberOfSides:number,radius:number,position:WorldPosition):Array<WorldPosition> {\n\t\tlet polygonPointArray = Array<WorldPosition>();\t\n        let angle = 0\n        let angleIncrement = 2 * Math.PI / numberOfSides;\n    \n        for(let i=0;i < numberOfSides;i++) {\n            polygonPointArray.push(new WorldPosition(\n                position.x  + radius * Math.cos(angle),\n                position.y  + radius * Math.sin(angle)\n            ));\n            angle = angle + angleIncrement;\n                \n\t\t}\n\t\treturn(polygonPointArray);\n\t}\n\t/**\n\t * Draws an outlined shape from an Array of WorldPosition objects. It is assumed that the fill color, \n\t * stroek color and line width for the context have been set before the call is made\n\t * \n\t * @static\n\t * @param {CanvasRenderingContext2D} context \n\t * @param {Array<WorldPosition>} worldPositionArray \n\t * @memberof WorldDisplay\n\t */\n\tpublic static drawOutlinedShape(context:CanvasRenderingContext2D,worldPositionArray:Array<WorldPosition>):void\n\t{\t    \n\t    context.beginPath();\n\t    for(let i=0;i<worldPositionArray.length;i++)\n\t    {   \t\n\t\t\tvar point = worldPositionArray[i];\n\t    \tif(i==0) context.moveTo(point.x,point.y);\n\t    \telse context.lineTo(point.x,point.y);\n\t    }\n\t    context.closePath();\n\t    \n\t    context.fill();\n\t    //context.lineWidth = displayInfo.borderWidth;\n\t    context.stroke();\n\t}\n\n\tpublic static getAveragePostionFromPositionList(positionList:Array<WorldPosition>):WorldPosition\n\t{\n\t  let x = 0.0;\n\t  let y = 0.0;\n\t  for(let i=0;i<positionList.length;i++)\n\t  {\n\t\t  let p = positionList[i];\n\t\t  x += p.x;\n\t\t  y += p.y;\n\t  }\n\t  x = x / positionList.length;\n\t  y = y / positionList.length;\n\t  return(new WorldPosition(x,y));\n\t}\n\t\t  \n\n    public static getCirclePositionList(radius:number,curvePoints:number):Array<WorldPosition> {\n\t\tlet pointList = new Array<WorldPosition>();\n\t\t\n\t\tlet angleInc = 360 / curvePoints;\n\t\tfor(let angle=0;angle<=360;angle=angle+angleInc)\n\t\t{\n\t\t\tlet rads = angle * (Math.PI/180);\n\t\t\tpointList.push(\n\t\t\t\t\tnew WorldPosition(\n\t\t\t\t\t\t\tradius*Math.cos(rads),\n\t\t\t\t\t\t\tradius*Math.sin(rads))\n\t\t\t\t\t);\t\n\t\t}\n\t\t\n\t\treturn(pointList);\n\t}\n\n\tpublic static getTrianglePositionList(width:number,height:number):Array<WorldPosition> {\n\t\tlet pointList = new Array<WorldPosition>();\n\t\t\n\t\tpointList.push(new WorldPosition(0,-(height/2)));\n\t\tpointList.push(new WorldPosition(width/2,height/2));\n\t\tpointList.push(new WorldPosition(-(width/2),height/2));\n\t\tpointList.push(new WorldPosition(0,-(height/2)));\n\t\t\n\t\treturn(pointList);;\n\t}\n\t\n\tpublic static getRectanglePositionList(width:number,height:number):Array<WorldPosition> {\n\t\tlet pointList = new Array<WorldPosition>();\n\t\t\n\t\tpointList.push(new WorldPosition(-(width/2),-(height/2)));\n\t\tpointList.push(new WorldPosition((width/2),-(height/2)));\n\t\tpointList.push(new WorldPosition((width/2),(height/2)));\n\t\tpointList.push(new WorldPosition(-(width/2),(height/2)));\t\n\t\tpointList.push(new WorldPosition(-(width/2),-(height/2)));\n\t\n\t\treturn(pointList);;\n\t}\n\n\tpublic static getArcPositionList(endAngle:number,startAngle:number,radius:number,curvePoints:number):Array<WorldPosition> {\n\t\tlet pointList = new Array<WorldPosition>();\n\t\t\n\t\t// bug durring the port to javascript... it was just expecting one arg so probably endAngle was used\n\t\tlet angle:number = Math.abs(endAngle-startAngle);\n\t\tlet angleInc:number = angle / curvePoints;\n\t\t\n\t\tpointList.push(new WorldPosition(0,0));\n\t\tfor(let angle=startAngle;\n\t\t\tangle<=endAngle && angleInc>0;\n\t\t\tangle=angle+angleInc)\n\t\t{\n\t\t\tif( (angle+angleInc) > endAngle )\n\t\t\t{\n\t\t\t\tif(angle!=endAngle) angle = endAngle ;\n\t\t\t}\n\t\t\tvar rads = angle * (Math.PI/180);\n\t\t\tpointList.push(\n\t\t\t\t\tnew WorldPosition(\n\t\t\t\t\t\t\tradius*Math.cos(rads),\n\t\t\t\t\t\t\tradius*Math.sin(rads))\n\t\t\t\t\t);\t\n\t\t}\n\t\t\n\t\tpointList.push(new WorldPosition(0,0));\n\t\t\n\t\treturn(pointList);\n\t}\n\n    public static fillTextMutipleLines(context:CanvasRenderingContext2D,text:string,x:number,y:number,lineHeight:number,splitChar:string)\n\t{\n\t\tlet lines:Array<string> = text.split(splitChar);\n\t    let line:string = '';\n\t\n\t    for(let n = 0; n < lines.length; n++)\n\t    {\n\t      //let metrics:TextMetrics = context.measureText(lines[n]);\n\t      context.fillText(lines[n], x, y);\n\t      y = y+lineHeight; \n\t    }\n\t    context.fillText(line, x, y);\n\t }\n\t\n   \n\t\n    public static roundedRect(context:CanvasRenderingContext2D,x:number,y:number,\n        w:number,h:number,r:number,borderWitdh:number,borderColor:string,rectColor:string):void\n\t{\n\t\t  if (w < 2 * r) r = w / 2;\n\t\t  if (h < 2 * r) r = h / 2;\n\t\t  context.beginPath();\n\t\t  context.moveTo(x+r, y);\n\t\t  context.arcTo(x+w, y,   x+w, y+h, r);\n\t\t  context.arcTo(x+w, y+h, x,   y+h, r);\n\t\t  context.arcTo(x,   y+h, x,   y,   r);\n\t\t  context.arcTo(x,   y,   x+w, y,   r);\n\t\t  context.closePath();\n\t\t/*\n\t    context.beginPath();\n\t    context.moveTo(x, y);\n\t    context.lineTo(x + width - cornerRadius, y);\n\t    context.arcTo(x + width, y, x + width, y + cornerRadius, cornerRadius);\n\t    context.lineTo(x + width, y + height);\n\t   */ \n\t    context.lineWidth = borderWitdh;\n\t    context.fillStyle = rectColor;\n\t    context.strokeStyle = borderColor;\n\t    \n\t    context.stroke();\n\t    context.fill();\n\t\n\t}\n}\n","import { WorldEngine } from \"../worldengine\";\nimport { Drawable } from \"../../display/drawable\";\nimport { WorldId } from \"../../world/worldid\";\nimport { WorldPosition } from \"../../world/worldposition\";\nimport { CircleEngineShape } from \"../shapes/circleengineshape\";\nimport { RectangleEngineShape } from \"../shapes/rectangleengineshape\";\nimport { MockCircle } from \"./shapes/mockcircle\";\nimport { MockRectangle } from \"./shapes/mockrectangle\";\nimport { MockPolygon } from \"./shapes/mockpolygon\";\nimport { PolygonEngineShape } from \"../shapes/polygonengineshape\";\nimport { CanvasMouse } from \"../../display/canvas/canvasmouse\";\nimport { MouseEventHandler } from \"../../display/canvas/mouseeventhandler\";\nimport { World } from \"../../world/world\";\nimport { CircleDisplayShape } from \"../../display/drawableshapes/circledisplayshape\";\nimport { EngineShape } from \"../shapes/engineshape\";\nimport { TextDisplayShape } from \"../../display/drawableshapes/textdisplayshape\";\nimport { TextEngineShape } from \"../shapes/textengineshape\";\nimport { MockRectangleText } from \"./shapes/mockrectangletext\";\n\nexport class MockEngine implements WorldEngine {\n  private _mouseAnchor: MockCircle;\n\n  public constructor() {\n    this.mouseAnchor = new MockCircle(\n      new WorldId(\"mouseAnchor\"),\n      new CircleDisplayShape(),\n      5,\n      8,\n      new WorldPosition(-10,-10),\n      { restitution: 0.9, isSensor: true },\n      this\n    );\n  }\n  public getMouseAnchor(): EngineShape {\n    return this.mouseAnchor;\n  }\n\n  public createBounds(width:number,height:number,options:any):void {\n  }\n\n  public startEngine():void {\n  }\n\n  public createCircle(\n    worldId: WorldId,\n    drawable: Drawable,\n    radius: number,\n    numberOfSides: number,\n    worldPosition: WorldPosition,\n    options: any\n  ): CircleEngineShape {\n    let circle: MockCircle = new MockCircle(\n      worldId,\n      drawable,\n      radius,\n      numberOfSides,\n      worldPosition,\n      options,\n      this\n    );\n    return circle;\n  }\n\n  public createRectangle(\n    worldId: WorldId,\n    drawable: Drawable,\n    width: number,\n    height: number,\n    worldPosition: WorldPosition,\n    options: any\n  ): RectangleEngineShape {\n    let rectangle: MockRectangle = new MockRectangle(\n      worldId,\n      drawable,\n      width,\n      height,\n      worldPosition,\n      options,\n      this\n    );\n    return rectangle;\n  }\n\n  public createTextBox(worldId:WorldId,textDisplayShape:TextDisplayShape,width:number,height:number,worldPosition:WorldPosition,options:any):TextEngineShape {\n  //createTextBox(worldId:WorldId,textDisplayShape:TextDisplayShape,width:number,height:number,worldPosition:WorldPosition,options:any):RectangleEngineShape {\n    let rectangleText:MockRectangleText = new MockRectangleText (\n      worldId,\n      textDisplayShape,\n      width,height,worldPosition,\n      options,\n      this\n    );\n    return(rectangleText);\n  }\n\n  public createPolygon(\n    worldId: WorldId,\n    drawable: Drawable,\n    numberOfSides: number,\n    radius: number,\n    worldPosition: WorldPosition,\n    options: any\n  ): PolygonEngineShape {\n    let ploygon: PolygonEngineShape = new MockPolygon(\n      worldId,\n      drawable,\n      numberOfSides,\n      radius,\n      worldPosition,\n      options,\n      this\n    );\n    return ploygon;\n  }\n\n  public pointerDownEngineEvent(\n    world: World,\n    canvasMouse: CanvasMouse,\n    event: MouseEvent,\n    mouseEventHandler: MouseEventHandler\n  ): void {}\n\n  public pointerMoveEngineEvent(\n    world: World,\n    canvasMouse: CanvasMouse,\n    event: MouseEvent,\n    mouseEventHandler: MouseEventHandler\n  ): void {\n    var newPosition = new WorldPosition(\n      event.x - canvasMouse.offset.x,\n      event.y - canvasMouse.offset.y\n    );\n    this.mouseAnchor.translate(newPosition);\n\n    if (mouseEventHandler.getCurrentWorldObject() != null) {\n      var deltaPosition = mouseEventHandler\n        .getMouseStatus()\n        .startPosition.getDelta(mouseEventHandler.getMouseStatus().position);\n\n      let newX =\n        mouseEventHandler.getMouseStatus().startPosition.x -\n        deltaPosition.x +\n        mouseEventHandler.getMouseStatus().clickOffset.x;\n\n      let newY =\n        mouseEventHandler.getMouseStatus().startPosition.y -\n        deltaPosition.y +\n        mouseEventHandler.getMouseStatus().clickOffset.y;\n\n      mouseEventHandler\n        .getCurrentWorldObject()\n        .setWorldPosition(new WorldPosition(newX, newY));\n    }\n  }\n\n  public pointerUpEngineEvent(\n    world: World,\n    canvasMouse: CanvasMouse,\n    event: MouseEvent,\n    mouseEventHandler: MouseEventHandler\n  ): void {}\n\n  public get mouseAnchor(): MockCircle {\n    return this._mouseAnchor;\n  }\n\n  public set mouseAnchor(value: MockCircle) {\n    this._mouseAnchor = value;\n  }\n}\n","import { CircleEngineShape } from \"../../shapes/circleengineshape\";\nimport { WorldPosition } from \"../../../world/worldposition\";\nimport { Drawable } from \"../../../display/drawable\";\nimport { MockShape } from \"./mockshape\";\nimport { WorldId } from \"../../../world/worldid\";\nimport { MockEngine } from \"../mockengine\";\n\nexport class MockCircle extends MockShape implements CircleEngineShape\n{\n\tprivate _curvePoints:number;\n\tprivate _radius:number;\n\t\n\n\tconstructor(worldId:WorldId,drawable:Drawable,radius:number,curvePoints:number,position:WorldPosition,options:any,mockEngine:MockEngine)\n\t{\n\t\tsuper(worldId,drawable,position,options);\n\t\tthis.radius = radius;\n\t\tthis.curvePoints = curvePoints;\t\n\t\tdrawable.init(this,options);\n\t}\n\n\tpublic containsWorldPosition(worldPosition:WorldPosition):boolean {\n\t\tlet distance = this.getWorldPosition().getDistance(worldPosition);\n\t\treturn(distance<=this.radius);\n\t}\n\n\tpublic getRadius():number {\n\t\treturn(this.radius);\n\t}\n\n\tpublic getShapePoints():Array<WorldPosition> {\n\t\t//return( WorldDisplay.getPolygonPoints(Math.PI/4,4,this.getWidth()+this.get,this.getWorldPosition() ) ;\n\t\treturn(null);\n    }\n\n\tpublic get curvePoints(): number {\n\t\treturn this._curvePoints;\n\t}\n\n\tpublic set curvePoints(value: number) {\n\t\tthis._curvePoints = value;\n\t}\n\t\n\n\tpublic get radius(): number {\n\t\treturn this._radius;\n\t}\n\n\tpublic set radius(value: number) {\n\t\tthis._radius = value;\n\t}\n\n\n}\n","import { WorldPosition } from \"../../../world/worldposition\";\nimport { Drawable } from \"../../../display/drawable\";\nimport { MockShape } from \"./mockshape\";\nimport { WorldId } from \"../../../world/worldid\";\nimport { MockEngine } from \"../mockengine\";\nimport { PolygonEngineShape } from \"../../shapes/polygonengineshape\";\nimport { WorldDisplay } from \"../../../display/worlddisplay\";\n\n\nexport class MockPolygon extends MockShape implements PolygonEngineShape\n{\n    private _polygonPointArray:Array<WorldPosition>;\n    private _numberOfSides:number;\n    private _radius:number;\n    \n\n    constructor(worldId:WorldId,drawable:Drawable,numberOfSides:number,radius:number,worldPosition:WorldPosition,options:any,mockEngine:MockEngine)    \n\t{\n        super(worldId,drawable,worldPosition,options);\n        this.radius = radius;\n        this.numberOfSides = numberOfSides;\n        this.polygonPointArray = WorldDisplay.getPolygonPoints(0,numberOfSides,radius,worldPosition);\n\t\tdrawable.init(this,options);\n\t}\n\n\tpublic containsWorldPosition(worldPosition:WorldPosition):boolean {\n        //if(this.boundingBox.containsPosition(position,node)) return false;\n        \n        let i = 0;\n        let j = 0;\n        let c = false;\n        for(i=0,j=this.polygonPointArray.length-1;i< this.polygonPointArray.length;j=i++)\n        {\n            //\n            var pi = this.polygonPointArray[i];\n            var pj = this.polygonPointArray[j];\n                \n            if (\n                ((pi.y>worldPosition.y) != (pj.y>worldPosition.y)) &&\n                    (worldPosition.x < (pj.x-pi.x) *\n                    (worldPosition.y-pi.y) /\n                    (pj.y-pi.y) +\n                    pi.x) )\n                c = !c;\n        }\n        return c;\n    }\n\n    public getRadius():number {\n        return(this.radius);\n    }\n\n    public getNumberOfSides():number {\n        return(this.numberOfSides);\n    }\n\n    public \tgetShapePoints():Array<WorldPosition> {\n        return(this.polygonPointArray);\n    }    \n\n    public \tgetPointList():Array<WorldPosition> {\n        return(this.polygonPointArray);\n    }    \n\n    public translate(worldPosition:WorldPosition):void {\n        super.translate(worldPosition);\n        //this.polygonPointArray = WorldDisplay.getPolygonPoints(0,this.numberOfSides,this.radius,worldPosition);\n        \n            for(let i=0;i<this.polygonPointArray.length;i++) \n                this.polygonPointArray[i].translate(this.getWorldPosition());\n\t}\n\n\t\n\tpublic setWorldPosition(worldPosition:WorldPosition):void {\n       super.setWorldPosition(worldPosition);\n       this.polygonPointArray = WorldDisplay.getPolygonPoints(0,this.numberOfSides,this.radius,this.getWorldPosition());\n\n       // TODO this is not working becasue it moves all points to the same point... it should be getting the offset from the set\n       // position and moving each point by that amount\n      //  for(let i=0;i<this.polygonPointArray.length;i++) \n      //    this.polygonPointArray[i].setWorldPosition(this.getWorldPosition());\n\t}\n\n\n\t\n\n    public getPolygonPoints():Array<WorldPosition> {\n        return(this.polygonPointArray);\n\n    }\n    \n\n\tpublic get radius(): number {\n\t\treturn this._radius;\n\t}\n\n\tpublic set radius(value: number) {\n\t\tthis._radius = value;\n\t}\n    \n\n\n\tpublic get polygonPointArray(): Array<WorldPosition> {\n\t\treturn this._polygonPointArray;\n\t}\n\n\tpublic set polygonPointArray(value: Array<WorldPosition>) {\n\t\tthis._polygonPointArray = value;\n\t}\n\n\n\tpublic get numberOfSides(): number {\n\t\treturn this._numberOfSides;\n\t}\n\n\tpublic set numberOfSides(value: number) {\n\t\tthis._numberOfSides = value;\n\t}\n\n}\n","import { RectangleEngineShape } from \"../../shapes/rectangleengineshape\";\nimport { WorldPosition } from \"../../../world/worldposition\";\nimport { Drawable } from \"../../../display/drawable\";\nimport { MockShape } from \"./mockshape\";\nimport { WorldId } from \"../../../world/worldid\";\nimport { MockEngine } from \"../mockengine\";\n\nexport class MockRectangle extends MockShape implements RectangleEngineShape\n{\n\tprivate _width:number;\n\tprivate _height:number;\n\n\tconstructor(worldId:WorldId,drawable:Drawable,width:number,height:number,position:WorldPosition,options:any,mockEngine:MockEngine)\n\t{\n\t\tsuper(worldId,drawable,position,options);\n\t\tthis.width = width;\n\t\tthis.height = height;\t\n\t\tdrawable.init(this,options);\n\t}\n\n\tpublic setSize(width:number,height:number) {\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t}\n\n\tpublic containsWorldPosition(worldPosition:WorldPosition):boolean {\n\t\treturn(\n\t\t\t(\n\t\t\t\t\t\t\t(this.getWorldPosition().x-this.getWidth()/2)<=worldPosition.x &&\n\t\t\t\t\t\t\t(this.getWorldPosition().x+this.getWidth()/2)>=worldPosition.x &&\n\t\t\t\t\t\t\t(this.getWorldPosition().y-this.getHeight()/2)<=worldPosition.y &&\n\t\t\t\t\t\t\t(this.getWorldPosition().y+this.getHeight()/2)>=worldPosition.y\n\t\t\t)\n\t\t);\n\t}\n\n\tpublic getShapePoints():Array<WorldPosition> {\n\t\t//return( WorldDisplay.getPolygonPoints(Math.PI/4,4,this.getWidth()+this.get,this.getWorldPosition() ) ;\n\t\tlet polygonPointArray = Array<WorldPosition>();\t\n\n\n\t\tpolygonPointArray.push( new WorldPosition(\n\t\t\tthis.getWorldPosition().x+this.getWidth()/2,\n\t\t\tthis.getWorldPosition().y+this.getHeight()/2 ) );\n\n\t\tpolygonPointArray.push( new WorldPosition(\n\t\t\tthis.getWorldPosition().x+this.getWidth()/2,\n\t\t\tthis.getWorldPosition().y-this.getHeight()/2 ) );\n\n\t\tpolygonPointArray.push( new WorldPosition(\n\t\t\tthis.getWorldPosition().x-this.getWidth()/2,\n\t\t\tthis.getWorldPosition().y-this.getHeight()/2 ) );\n\n\t\tpolygonPointArray.push( new WorldPosition(\n\t\t\tthis.getWorldPosition().x-this.getWidth()/2,\n\t\t\tthis.getWorldPosition().y+this.getHeight()/2 ) );\n\n\t\treturn(polygonPointArray);    }\n\n\tpublic getWidth():number {\n\t\treturn(this.width);\n\t}\n\tpublic getHeight():number {\n\t\treturn(this.height);\n\t}\n\n\tpublic get width(): number {\n\t\treturn this._width;\n\t}\n\n\tpublic set width(value: number) {\n\t\tthis._width = value;\n\t}\n\n\tpublic get height(): number {\n\t\treturn this._height;\n\t}\n\n\tpublic set height(value: number) {\n\t\tthis._height = value;\n\t}\n\n\n\n}\n","import { RectangleEngineShape } from \"../../shapes/rectangleengineshape\";\nimport { WorldPosition } from \"../../../world/worldposition\";\nimport { Drawable } from \"../../../display/drawable\";\nimport { MockShape } from \"./mockshape\";\nimport { WorldId } from \"../../../world/worldid\";\nimport { MockEngine } from \"../mockengine\";\nimport { MockRectangle } from \"./mockrectangle\";\nimport { TextEngineShape } from \"../../shapes/textengineshape\";\nimport { DrawableText } from \"../../../display/drawableshapes/drawabletext\";\n\nexport class MockRectangleText extends MockRectangle implements TextEngineShape\n{\n    private _drawableText:DrawableText;\n\n\n\tconstructor(worldId:WorldId,drawableText:DrawableText,width:number,height:number,position:WorldPosition,options:any,mockEngine:MockEngine)\n\t{\n        super(worldId,drawableText,width,height,position,options,mockEngine);\n        this.drawableText = drawableText;\n\n/*\n\t\tsuper(worldId,drawable,position,options);\n\t\tthis.width = width;\n\t\tthis.height = height;\t\n        drawable.init(this,options);\n        */\n\t}\n    public setText(displayText:string):void {\n        this.drawableText.setText(displayText);\n    }\n\n\tpublic getText():string {\n        return(this.drawableText.getText());\n    }\n\n    /**\n     * Getter drawableText\n     * @return {DrawableText}\n     */\n\tpublic get drawableText(): DrawableText {\n\t\treturn this._drawableText;\n\t}\n\n    /**\n     * Setter drawableText\n     * @param {DrawableText} value\n     */\n\tpublic set drawableText(value: DrawableText) {\n\t\tthis._drawableText = value;\n\t}\n\n\n\n}\n","import { WorldPosition } from \"../../../world/worldposition\";\nimport { Drawable } from \"../../../display/drawable\";\nimport { WorldObject } from \"../../../world/worldobject\";\nimport { WorldId } from \"../../../world/worldid\";\nimport { WorldObjectEventHandler } from \"../../../world/worldobjecteventhandler\";\nimport { World } from \"../../../world/world\";\nimport { CanvasMouse } from \"../../../display/canvas/canvasmouse\";\n\n//import { World } from \"../../walkerworld/world\";\n//import { WorldObjectDisplay } from \"../worldobjectdisplay\";\n\nexport abstract class MockShape implements WorldObject  \n{\n\tprivate _drawable:Drawable;\n\tprivate _worldId:WorldId;\n\tprivate _isObjectAnimated:boolean;\n\tprivate _isObjectVisable:boolean;\n\tprivate _isObjectSelected:boolean;\n\tprivate _objectOptions:any;\n\tprivate _worldObjectEventHandler:WorldObjectEventHandler;\n\n\tprivate _position:WorldPosition; \n\n    constructor(worldId:WorldId,drawable:Drawable,position:WorldPosition,options:any) {\n\t\tthis.worldId = worldId;\n\t\tthis.drawable = drawable;\n\t\tthis.isObjectAnimated = true;\n\t\tthis.isObjectVisable = true;\n\t\tthis.isObjectSelected = true;\n\t\tthis.drawable = drawable;\n\t\tthis.position = position;\n\t\tthis.worldObjectEventHandler = this.createMouseEventHandler();\n\t}\n\n\tpublic stopRotation():void {\n\t\t// its a mock engine, nothng to do here :)\n\t}\n\n\n\tpublic \tcreateMouseEventHandler():WorldObjectEventHandler {\n\t\tlet woe:WorldObjectEventHandler = \n\t   {\n\t\t   pointerDownEvent : function (world:World,canvasMouse:CanvasMouse,event:MouseEvent):void {},\n\t\t   pointerMoveEvent : function (world:World,canvasMouse:CanvasMouse,event:MouseEvent):void {},\n\t\t   pointerUpEvent : function (world:World,canvasMouse:CanvasMouse,event:MouseEvent):void {}\n\t   }\n\t   return(woe);\n   }\n   public getWorldObjectEventHandler():WorldObjectEventHandler {\n\treturn(this.worldObjectEventHandler);\n\n   }\n\n   public setWorldObjectEventHandler(worldObjectEventHandler:WorldObjectEventHandler):void {\n\tthis.worldObjectEventHandler = worldObjectEventHandler;\n\t}\n\t\n\tpublic isAnimated(): boolean { return(this.isObjectAnimated); }\n\tpublic isSelected(): boolean { return(this.isObjectSelected); }\n\tpublic isVisable():boolean { return(this.isObjectVisable); }\n\tpublic getWorldId(): WorldId { return(this.worldId); }\n\tpublic getOptions(): any { return(this.objectOptions); }\n\n\tpublic setAnimated(animated:boolean):void { this.isObjectAnimated = animated; }\n\tpublic setSelected(selected:boolean): void { this.isObjectSelected = selected; }\n\tpublic setVisable(visable:boolean):void { this.isObjectVisable = visable; }\n\t\n\tpublic scaleShape(scaleX:number,scaleY:number):void {\n\t\tconsole.error(\"scaleShape NOT IMPLMENTED\");\n\t\t\n\t}\n    public getWorldPosition():WorldPosition {\n\t\treturn(this.position );\n\t}\n\n\tpublic translate(worldPosition:WorldPosition):void {\n\t\t//this.position.x = worldPosition.x;\n\t\t//this.position.y = worldPosition.y;\n\t\tthis.position.translate(worldPosition);\n\t\t\n\t}\n\n    /**\n     * Getter worldObjectEventHandler\n     * @return {WorldObjectEventHandler}\n     */\n\tpublic get worldObjectEventHandler(): WorldObjectEventHandler {\n\t\treturn this._worldObjectEventHandler;\n\t}\n\n    /**\n     * Setter worldObjectEventHandler\n     * @param {WorldObjectEventHandler} value\n     */\n\tpublic set worldObjectEventHandler(value: WorldObjectEventHandler) {\n\t\tthis._worldObjectEventHandler = value;\n\t}\n\n\t\n\tpublic setWorldPosition(worldPosition:WorldPosition):void {\n\t\t//this.position.x = worldPosition.x;\n\t\t//this.position.y = worldPosition.y;\n\t\tthis.position.setWorldPosition(worldPosition);\n\t}\n\n\tpublic abstract containsWorldPosition(worldPosition:WorldPosition):boolean;\n\n    public getDrawable():Drawable {\n        return(this.drawable);\n    }\n\n\n\tpublic get drawable(): Drawable {\n\t\treturn this._drawable;\n\t}\n\n\tpublic set drawable(value: Drawable) {\n\t\tthis._drawable = value;\n\t}\n    \n\n\tpublic get position(): WorldPosition {\n\t\treturn this._position;\n\t}\n\n\tpublic set position(value: WorldPosition) {\n\t\tthis._position = value;\n\t}\n\n\tpublic get worldId(): WorldId {\n\t\treturn this._worldId;\n\t}\n\n\tpublic set worldId(value: WorldId) {\n\t\tthis._worldId = value;\n\t}\n\n\tpublic get isObjectAnimated(): boolean {\n\t\treturn this._isObjectAnimated;\n\t}\n\n\tpublic set isObjectAnimated(value: boolean) {\n\t\tthis._isObjectAnimated = value;\n\t}\n\n\tpublic get isObjectVisable(): boolean {\n\t\treturn this._isObjectVisable;\n\t}\n\n\tpublic set isObjectVisable(value: boolean) {\n\t\tthis._isObjectVisable = value;\n\t}\n\n\tpublic get isObjectSelected(): boolean {\n\t\treturn this._isObjectSelected;\n\t}\n\n\tpublic set isObjectSelected(value: boolean) {\n\t\tthis._isObjectSelected = value;\n\t}\n\n\tpublic get objectOptions(): any {\n\t\treturn this._objectOptions;\n\t}\n\n\tpublic set objectOptions(value: any) {\n\t\tthis._objectOptions = value;\n\t}\n\n}\n","import { CanvasHolderHTML } from \"./display/canvas/canvasholderhtml\";\nimport { MockEngine } from \"./engine/mockengine/mockengine\";\nimport { WorldOfWorldObjects } from \"./world/worldofworldobjects\";\nimport { CircleDisplayShape } from \"./display/drawableshapes/circledisplayshape\";\nimport { WorldPosition } from \"./world/worldposition\";\nimport { WorldId } from \"./world/worldid\";\nimport { CircleEngineShape } from \"./engine/shapes/circleengineshape\";\nimport { RectangleEngineShape } from \"./engine/shapes/rectangleengineshape\";\nimport { RectangleDisplayShape } from \"./display/drawableshapes/rectangledisplayshape\";\nimport { PolygonEngineShape } from \"./engine/shapes/polygonengineshape\";\nimport { PolygonDisplayShape } from \"./display/drawableshapes/polygondisplayshape\";\nimport { TextDisplayShape } from \"./display/drawableshapes/textdisplayshape\";\nimport { Test1 } from \"./test1\";\n\n\nexport let mockEngine = new MockEngine();\nexport let world:WorldOfWorldObjects = new WorldOfWorldObjects(mockEngine);\nexport let canvasHolder:CanvasHolderHTML = new CanvasHolderHTML(\"worldCanvas\",world);\nexport let test1 = new Test1(mockEngine,world,canvasHolder);\n\n","import { CanvasHolderHTML } from \"./display/canvas/canvasholderhtml\";\nimport { WorldOfWorldObjects } from \"./world/worldofworldobjects\";\nimport { CircleDisplayShape } from \"./display/drawableshapes/circledisplayshape\";\nimport { WorldPosition } from \"./world/worldposition\";\nimport { WorldId } from \"./world/worldid\";\nimport { CircleEngineShape } from \"./engine/shapes/circleengineshape\";\nimport { RectangleEngineShape } from \"./engine/shapes/rectangleengineshape\";\nimport { RectangleDisplayShape } from \"./display/drawableshapes/rectangledisplayshape\";\nimport { TextDisplayShape } from \"./display/drawableshapes/textdisplayshape\";\nimport { PolygonDisplayShape } from \"./display/drawableshapes/polygondisplayshape\";\nimport { PolygonEngineShape } from \"./engine/shapes/polygonengineshape\";\nimport { TextEngineShape } from \"./engine/shapes/textengineshape\";\nimport { WorldEngine } from \"./engine/worldengine\";\nimport { World } from \"./world/world\";\n\nexport class Test1 {\n\n    constructor(worldEngine:WorldEngine,world:World,canvasHolder:CanvasHolderHTML) {\n\n        let circle1:CircleEngineShape = world.worldEngine.createCircle(\n            new WorldId(\"circle1\"),\n            new CircleDisplayShape(),\n            30,8,\n            new WorldPosition(400,400),\n            {restitution:0.9}\n          );\n          \n      let circle2:CircleEngineShape = world.worldEngine.createCircle(\n        new WorldId(\"circle2\"),\n        new CircleDisplayShape(),\n        40,8,\n        new WorldPosition(300,300),\n        {restitution:0.9}\n      );\n      \n        \n      let rectangle1:RectangleEngineShape = world.worldEngine.createRectangle(\n        new WorldId(\"rectangle1\"),\n        new RectangleDisplayShape(),\n        40,40,\n        new WorldPosition(100,100),\n        {}\n      );\n      \n      let polygon1:PolygonEngineShape = world.worldEngine.createPolygon(\n        new WorldId(\"polygon1\"),\n        new PolygonDisplayShape(),\n        5,40,\n        new WorldPosition(400,100),\n        {}\n      );\n      \n      \n      let textBox1:TextEngineShape = world.worldEngine.createTextBox(\n        new WorldId(\"textbox1\"),\n        new TextDisplayShape(\n          new RectangleDisplayShape(),\n          \"SomeText Mg\\nAnd more text Mg\"),\n        100,100,\n        new WorldPosition(550,550),\n        {}\n      );\n            \n      \n      \n      let textBox2:TextEngineShape = world.worldEngine.createTextBox(\n        new WorldId(\"textbox2\"),\n        new TextDisplayShape(\n          new RectangleDisplayShape(),\n          \"hey there friend Mg\"),\n        //80,20,\n        100,100,\n        new WorldPosition(150,550),\n        {}\n      );\n      \n      let textBox3:TextEngineShape = world.worldEngine.createTextBox(\n        new WorldId(\"textbox3\"),\n        new TextDisplayShape(\n          new RectangleDisplayShape(),\n          \"SomeText Mg\\nAnd more text Mg\\nSomeText Mg\\nAnd more text Mg\\nSomeText Mg\\nAnd more text Mg\\nSomeText Mg\\nAnd MOOORE text Mg\"),\n          100,100,\n          new WorldPosition(550,250),\n        {}\n      );\n      \n      \n      \n      world.addWorldObject(circle1);\n      world.addWorldObject(circle2);\n      world.addWorldObject(rectangle1);\n      world.addWorldObject(polygon1);\n      world.addWorldObject(textBox1);\n      world.addWorldObject(textBox2);\n      world.addWorldObject(textBox3);\n      world.addWorldObject(world.worldEngine.getMouseAnchor());\n      \n      \n      worldEngine.createBounds(canvasHolder.getWidth(),canvasHolder.getHeight(),{restitution:0.9});\n      let interval:number = 1000/30; //one millisecond over beat per second\n      console.log(\"drawing every : \"+interval+\"ms\");\n      setInterval(doDraw,interval);\n      \n      worldEngine.startEngine();\n      function doDraw()\n      {\n        world.drawWorld(canvasHolder);\t\n      }\n    }\n\n}","//import { MatterTools } from \"../matterengine/mattertools\";\n//import { World } from \"../walkerworld/world\";\n//import { MatterEvent } from \"../matterengine/matterevent\";\n//import { MatterCollisionEvent } from \"../matterengine/mattercollisionevent\";\n//import { DisplayHolder } from \"../display/displayholder\";\nimport { WorldEngine } from \"../engine/worldengine\";\nimport { WorldPosition } from \"./worldposition\";\nimport { WorldObject } from \"./worldobject\";\nimport { CanvasHolder } from \"../display/canvas/canvasholder\";\nimport { WorldId } from \"./worldid\";\n\n\nexport abstract class World {\n\n   // private _displayHolder:DisplayHolder;\n\tprivate _worldEngine:WorldEngine;\n\n    constructor(worldEngine:WorldEngine){\n\t\tthis.worldEngine = worldEngine;\n\t}\n\n\tpublic abstract addWorldObject(worldObject:WorldObject):void;\n\n    public abstract getWorldObjectMatchingWorldId(worldId:WorldId):WorldObject;\n\t\n\tpublic abstract getWorldObjectContainingPosition(worldPosition:WorldPosition):WorldObject;\n\n\tpublic abstract drawWorld(canvasHolder:CanvasHolder):void;\n\n\tpublic get worldEngine(): WorldEngine {\n\t\treturn this._worldEngine;\n\t}\n\n\tpublic set worldEngine(value: WorldEngine) {\n\t\tthis._worldEngine = value;\n\t}\n    \n}","\nexport class WorldId {\n    private _id:string;\n\n    public constructor(woldObjectId:string) {\n        this.id = woldObjectId;\n\t}\n\t\n\tpublic matches(worldId:WorldId):boolean {\n\t\treturn(this.id==worldId.id);\n\t}\n\n\tpublic get id(): string {\n\t\treturn this._id;\n\t}\n\n\tpublic set id(value: string) {\n\t\tthis._id = value;\n\t}\n\n}","import { WorldEngine } from \"../engine/worldengine\";\nimport { WorldObject } from \"./worldobject\";\nimport { World } from \"./world\";\nimport { CanvasHolder } from \"../display/canvas/canvasholder\";\nimport { WorldPosition } from \"./worldposition\";\nimport { WorldId } from \"./worldid\";\n\n\nexport class WorldOfWorldObjects extends World{\n\n    private _worldObjectArray:Array<WorldObject>;\n\n    constructor(worldEngine:WorldEngine){\n        super(worldEngine);\n        this.worldObjectArray = new Array<WorldObject>();\n\t}\n\t\n\t\n\tpublic drawWorld(canvasHolder:CanvasHolder):void {\n        let context = canvasHolder.getContext();\n        canvasHolder.clearCanvas();\n        for(let i=0;i<this.worldObjectArray.length;i++) {\n            let worldObject:WorldObject = this.worldObjectArray[i];\n            worldObject.getDrawable().draw(context);\n        }\n    }\n\n    public addWorldObject(worldObject:WorldObject):void {\n        this.worldObjectArray.push(worldObject);\n    }\n\n\n    public getWorldObjectMatchingWorldId(worldId:WorldId):WorldObject {\n        let foundObject:WorldObject = null;\n        for(let i=0;i<this.worldObjectArray.length;i++) {\n            ////console.log(\"this.worldObjectArray.length=\"+this.worldObjectArray.length+\":i=\"+i);\n            let worldObject:WorldObject = this.worldObjectArray[i];\n            ////console.log(\"    worldObject.position=\"+worldObject.getWorldPosition());\n            if(worldObject.getWorldId().matches(worldId)) foundObject = worldObject;\n        }\n        return(foundObject);\n    }\n\n\n    public getWorldObjectContainingPosition(worldPosition:WorldPosition):WorldObject {\n        let foundObject:WorldObject = null;\n        for(let i=0;i<this.worldObjectArray.length;i++) {\n            ////console.log(\"this.worldObjectArray.length=\"+this.worldObjectArray.length+\":i=\"+i);\n            let worldObject:WorldObject = this.worldObjectArray[i];\n            ////console.log(\"    worldObject.position=\"+worldObject.getWorldPosition());\n            if(worldObject.containsWorldPosition(worldPosition) && worldObject!=this.worldEngine.getMouseAnchor()) foundObject = worldObject;\n        }\n        return(foundObject);\n    }\n\n    /**\n     * Getter worldObjectArray\n     * @return {Array<WorldObject>}\n     */\n\tpublic get worldObjectArray(): Array<WorldObject> {\n\t\treturn this._worldObjectArray;\n\t}\n\n    /**\n     * Setter worldObjectArray\n     * @param {Array<WorldObject>} value\n     */\n\tpublic set worldObjectArray(value: Array<WorldObject>) {\n\t\tthis._worldObjectArray = value;\n\t}\n    \n}","import { WorldObject } from \"./worldobject\";\n\n\nexport class WorldPosition {\n    private _x:number;\n    private _y:number;\n\n    public constructor(x:number,y:number) {\n        this.x = x;\n        this.y = y;\n    }\n\n\tpublic get x(): number {\n\t\treturn this._x;\n\t}\n\n\tpublic set x(value: number) {\n\t\tthis._x = value;\n\t}\n\n\tpublic get y(): number {\n\t\treturn this._y;\n\t}\n\n\tpublic set y(value: number) {\n\t\tthis._y = value;\n\t}\n\n\tpublic clone():WorldPosition {\n\t\treturn(new WorldPosition(this.x,this.y));\n\t}\n\n\tpublic translate(worldPosition:WorldPosition):void {\n\t\t//this.x = this.x + worldPosition.x;\n\t\t//this.y = this.y + worldPosition.y;\n\t\tthis.x = worldPosition.x;\n\t\tthis.y = worldPosition.y;\n\t}\n\n\tpublic setWorldPosition(worldPosition:WorldPosition):void {\n\t\tthis.x = worldPosition.x;\n\t\tthis.y = worldPosition.y;\n\t\t\n\t}\n\n\tpublic getDeltaY(worldPosition:WorldPosition):number\n\t{\n\t\t\treturn(this.y-worldPosition.y);\n\t}\n\n\tpublic getDeltaX(worldPosition:WorldPosition):number\n\t{\n\t\t\treturn(this.x-worldPosition.x);\n\t}\n\n\tpublic getDelta(worldPosition:WorldPosition):WorldPosition\n\t{\n\t\t\treturn(new WorldPosition(this.getDeltaX(worldPosition),this.getDeltaY(worldPosition)));\n\t}\n\n\tpublic equals(worldPosition:WorldPosition):boolean\n\t{\n\t\treturn( (this.x==worldPosition.x) && (this.y==worldPosition.y) ) ;\n\t}\n\n\tpublic getDistance(worldPosition:WorldPosition):number\n\t{\n\t\treturn (Math.sqrt(Math.pow(this.getDeltaX(worldPosition), 2) + Math.pow(this.getDeltaY(worldPosition), 2)));\n\t}\n\n\tpublic static getAveragePostionFromWorldPositionList(positionList:Array<WorldPosition>):WorldPosition\n\t{\n\t\tlet x = 0.0;\n\t\tlet y = 0.0;\n\t\tfor(let i=0;i<positionList.length;i++)\n\t\t{\n\t\t\tlet p = positionList[i];\n\t\t\tx += p.x;\n\t\t\ty += p.y;\n\t\t}\n\t\tx = x / positionList.length;\n\t\ty = y / positionList.length;\n\t\treturn(new WorldPosition(x,y));\n\t}\n\n\tpublic static getAveragePostionFromWorldObjectList(worldObjectList:Array<WorldObject>):WorldPosition\n\t{\n\t  let x = 0.0;\n\t  let y = 0.0;\n\t  for(var i=0;i<worldObjectList.length;i++)\n\t  {\n\t\t  var p = worldObjectList[i].getWorldPosition();\n\t\t  x += p.x;\n\t\t  y += p.y;\n\t  }\n\t  x = x / worldObjectList.length;\n\t  y = y / worldObjectList.length;\n\t  return(new WorldPosition(x,y));\n\t}\n\n\tpublic static getPostionListFromNodeList(worldObjectList:Array<WorldObject>):Array<WorldPosition>\n\t{\n\t\tvar positions = new Array<WorldPosition>();\n\t\tfor (var i = 0; i < worldObjectList.length; i++)\n\t\t{\n\t\t\tpositions.push(worldObjectList[i].getWorldPosition());\n\t\t}\n\t\treturn(positions);\n\t}\n\n\n}"]}