{"version":3,"sources":["node_modules/browser-pack/_prelude.js","source/display/canvas/canvasholderhtml.ts","source/display/canvas/canvasmouse.ts","source/display/canvas/mouseeventhandlerworldobject.ts","source/display/canvas/mousestatus.ts","source/display/drawableshapes/circledisplayshape.ts","source/display/drawableshapes/lineconnectordisplay.ts","source/display/drawableshapes/polygondisplayshape.ts","source/display/drawableshapes/rectangledisplayshape.ts","source/display/drawableshapes/textdisplayshape.ts","source/display/worlddisplay.ts","source/engine/connectors/connectorpositioners/positionerlockx.ts","source/engine/connectors/connectorpositioners/positionerlockxy.ts","source/engine/connectors/engineconnectordef.ts","source/engine/mockengine/mockengine.ts","source/engine/mockengine/shapes/mockcircle.ts","source/engine/mockengine/shapes/mockconnector.ts","source/engine/mockengine/shapes/mockconnectordef.ts","source/engine/mockengine/shapes/mockpolygon.ts","source/engine/mockengine/shapes/mockrectangle.ts","source/engine/mockengine/shapes/mockrectangletext.ts","source/engine/mockengine/shapes/mockshape.ts","source/main_mock.ts","source/test1.ts","source/world/world.ts","source/world/worldid.ts","source/world/worldofworldobjects.ts","source/world/worldposition.ts"],"names":["f","exports","module","define","amd","g","window","global","self","this","test_mock","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","canvasmouse_1","mouseeventhandlerworldobject_1","worlddisplay_1","CanvasHolderHTML","canvasName","world","isVisable","isDrawable","canvas","document","getElementById","context","getContext","canvasMouse","CanvasMouse","MouseEventHandlerWorldObject","prototype","clearCanvas","clearRect","getWidth","getHeight","fillStyle","WorldDisplay","getColorFromString","fillRect","getCanvas","isCanvasVisable","_isVisable","isCanvasDrawable","_isDrawable","Object","defineProperty","_canvasName","value","_canvas","_context","_canvasMouse","worldposition_1","canvasholderHTML","mouseEventHandler","offset","getCanvasOffset","addEventListener","event","pointerDownEvent","pointerMoveEvent","pointerUpEvent","offsetLeft","offsetTop","object","isNaN","element","offsetParent","hasOwnProperty","WorldPosition","_offset","_mouseEventHandler","mousestatus_1","mouseStatus","MouseStatus","currentWorldObject","lastWorldObject","getMouseStatus","worldObjectSelected","wWorldObject","worldObjectDeselected","getCurrentWorldObject","eventPosition","getWorldPositionFromMouseEvent","console","log","JSON","stringify","isDown","startPosition","position","setAnimated","setSelected","clickWorldObject","getWorldObjectContainingPosition","getWorldId","id","clone","clickOffset","getWorldPosition","getDelta","getWorldObjectEventHandler","worldEngine","pointerDownEngineEvent","pointerMoveEngineEvent","pointerUpEngineEvent","_mouseStatus","_currentWorldObject","_lastWorldObject","_isDown","_startPosition","_position","_clickOffset","CircleDisplayShape","circleEngineShape","init","options","_circleEngineShape","draw","strokeStyle","beginPath","arc","x","y","getRadius","Math","PI","closePath","fill","lineWidth","stroke","LineConnectorDisplay","engineConnector","getEngineConnectorDefArray","drawConnectedLine","engineShape","_engineConnector","PolygonDisplayShape","polygonEngineShape","_polygonEngineShape","drawOutlinedShape","getPolygonPoints","RectangleDisplayShape","rectangleEngineShape","_rectangleEngineShape","getShapePoints","TextDisplayShape","rectangleDisplayShape","displayText","textImageData","getText","setText","woe","width","height","setWorldObjectEventHandler","_textImageData","_rectangleDisplayShape","_displayText","needsARedraw","setContextFont","textSize","metricsTextMutipleLines","Size","hPadding","vPadding","setSize","drawTextMutipleLines","getImageData","putImageData","stopRotation","fontStyle","fontFace","fontPixelHeight","fontColor","font","textAlign","_width","_height","getWorldPositionArrayFromObjects","worldObjectArray","worldPositionArray","Array","push","text","lineHeight","splitChar","lines","split","fillText","maxWidth","totalHeight","metrics","measureText","colorString","parseInt","substring","pageX","pageY","startAngle","numberOfSides","radius","polygonPointArray","angle","angleIncrement","cos","sin","point","moveTo","lineTo","getAveragePostionFromPositionList","positionList","getCirclePositionList","curvePoints","pointList","angleInc","rads","getTrianglePositionList","getRectanglePositionList","getArcPositionList","endAngle","abs","angle_1","fillTextMutipleLines","roundedRect","w","h","borderWitdh","borderColor","rectColor","arcTo","PositionerLockX","positionConnectorShape","engineConnectorDef","isSelected","setWorldPosition","PositionerLockY","EngineConnectorDef","connectorPositioner","stiffness","getWorldPositionArrayFromEngineDefs","engineConnectorDefArray","_connectorPositioner","_length","_stiffness","_engineShape","worldid_1","mockcircle_1","mockrectangle_1","mockpolygon_1","circledisplayshape_1","mockrectangletext_1","mockconnectordef_1","mockconnector_1","MockEngine","mouseAnchor","MockCircle","WorldId","restitution","isSensor","connectorArray","getMouseAnchor","createBounds","startEngine","setInterval","connector","j","connectorDef","createCircle","worldId","drawable","worldPosition","createRectangle","MockRectangle","createConnector","drawableConnector","connectorShape","mockConnectorDefArrayDef","MockConnectorDef","MockConnector","createTextBox","textDisplayShape","MockRectangleText","createPolygon","MockPolygon","newPosition","translate","deltaPosition","newX","newY","_mouseAnchor","_connectorArray","mockshape_1","_super","mockEngine","_this","__extends","containsWorldPosition","getDistance","_curvePoints","_radius","MockShape","mockConnectorDefArray","getDrawable","_mockConnectorDefArray","_connectorShape","_drawableConnector","engineconnectordef_1","_mockShape","pi","pj","getNumberOfSides","getPointList","_polygonPointArray","_numberOfSides","drawableText","_drawableText","isObjectAnimated","isObjectVisable","isObjectSelected","worldObjectEventHandler","createMouseEventHandler","isAnimated","getOptions","animated","selected","setVisable","visable","scaleShape","scaleX","scaleY","error","_worldObjectEventHandler","_drawable","_worldId","_isObjectAnimated","_isObjectVisable","_isObjectSelected","_objectOptions","canvasholderhtml_1","mockengine_1","worldofworldobjects_1","test1_1","WorldOfWorldObjects","canvasHolder","test1","Test1","rectangledisplayshape_1","textdisplayshape_1","polygondisplayshape_1","lineconnectordisplay_1","positionerlockx_1","positionerlockxy_1","doDraw","drawWorld","circle1","circle2","rectangle1","polygon1","textBox1","textBox2","textBox3","c1A","c1B","c1Circle","connector1","addWorldObject","World","_worldEngine","woldObjectId","matches","_id","world_1","worldObject","getWorldObjectMatchingWorldId","foundObject","_worldObjectArray","_x","_y","getDeltaY","getDeltaX","equals","sqrt","pow","getAveragePostionFromWorldPositionList","getAveragePostionFromWorldObjectList","worldObjectList","getPostionListFromNodeList","positions"],"mappings":"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","file":"test_mock.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import { CanvasHolder } from \"./canvasholder\";\r\nimport { World } from \"../../world/world\";\r\nimport { CanvasMouse } from \"./canvasmouse\";\r\nimport { MouseEventHandlerWorldObject } from \"./mouseeventhandlerworldobject\";\r\nimport { WorldDisplay } from \"../worlddisplay\";\r\n\r\n\r\nexport class CanvasHolderHTML implements CanvasHolder\r\n{\r\n\tprivate _isVisable:boolean;\r\n\tprivate _isDrawable:boolean;\r\n\tprivate _canvasName:string;\r\n\tprivate _canvas:HTMLCanvasElement;\r\n\tprivate _context:CanvasRenderingContext2D;\r\n\tprivate _canvasMouse:CanvasMouse;\r\n\t\r\n\tconstructor(canvasName:string,world:World)\r\n\t{\r\n\t\tthis.canvasName = canvasName;\r\n\t\tthis.isVisable = true;\r\n\t\tthis.isDrawable = true;\r\n\t\tthis.canvas = <HTMLCanvasElement>document.getElementById(this.canvasName);\t\t\t\r\n\t\tthis.context = this.canvas.getContext(\"2d\");\r\n\t\tthis.canvasMouse = new CanvasMouse(world,this,new MouseEventHandlerWorldObject());\r\n\t\t/*if (typeof document !== 'undefined')\r\n\t\t{\r\n\t\t\tthis.canvas = document.getElementById(this.canvasName);\t\t\t\r\n\t\t\tthis.context = this.canvas.getContext('2d');\r\n\t\t}*/\r\n\t}\r\n\r\n\tpublic clearCanvas():void {\r\n\t\tif(this.isVisable && this.isDrawable)\r\n\t\t{\r\n\t\t\tthis.context.clearRect(0, 0, this.getWidth(), this.getHeight());\r\n\t\t\tthis.context.fillStyle = WorldDisplay.getColorFromString(\"ffffff\"+\"ff\");\r\n\t\t\tthis.context.fillRect(0, 0, this.getWidth(), this.getHeight());\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getCanvas():HTMLCanvasElement {\r\n\t\treturn(this.canvas);\r\n\t}\r\n\r\n\tpublic getContext():CanvasRenderingContext2D {\r\n\t\treturn(this.context);\r\n\t}\r\n\t\r\n\tpublic getWidth():number\r\n\t{\r\n\t\treturn(this.canvas.width);\r\n\t}\r\n\t\r\n\tpublic getHeight():number\r\n\t{\r\n\t\treturn(this.canvas.height);\r\n\t}\r\n\r\n\tpublic isCanvasVisable(): boolean {\r\n\t\treturn this._isVisable;\r\n\t}\r\n\r\n\tpublic isCanvasDrawable(): boolean {\r\n\t\treturn this._isDrawable;\r\n\t}\r\n\r\n\tpublic get canvasName(): string {\r\n\t\treturn this._canvasName;\r\n\t}\r\n\r\n\tpublic set canvasName(value: string) {\r\n\t\tthis._canvasName = value;\r\n\t}\r\n\r\n\r\n\tpublic get canvas(): HTMLCanvasElement {\r\n\t\treturn this._canvas;\r\n\t}\r\n\r\n\tpublic set canvas(value: HTMLCanvasElement) {\r\n\t\tthis._canvas = value;\r\n\t}\r\n\r\n\tpublic get context(): CanvasRenderingContext2D {\r\n\t\treturn this._context;\r\n\t}\r\n\r\n\tpublic set context(value: CanvasRenderingContext2D) {\r\n\t\tthis._context = value;\r\n\t}\r\n\r\n\tpublic get isVisable(): boolean {\r\n\t\treturn this._isVisable;\r\n\t}\r\n\r\n\tpublic set isVisable(value: boolean) {\r\n\t\tthis._isVisable = value;\r\n\t}\r\n\r\n\tpublic get isDrawable(): boolean {\r\n\t\treturn this._isDrawable;\r\n\t}\r\n\r\n\tpublic set isDrawable(value: boolean) {\r\n\t\tthis._isDrawable = value;\r\n\t}\r\n\r\n\tpublic get canvasMouse(): CanvasMouse {\r\n\t\treturn this._canvasMouse;\r\n\t}\r\n\r\n\tpublic set canvasMouse(value: CanvasMouse) {\r\n\t\tthis._canvasMouse = value;\r\n\t}\r\n\t\r\n\t\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t/*\r\n\tstatic createCanvasHolderFromClientJson(worldDef,json)\r\n\t{\r\n\t  var canvasHolder = new CanvasHolder(json.canavsName,worldDef);\r\n\t  return(canvasHolder);\r\n\t}\r\n\t*/\r\n\t/*\r\n\t  getClientJson()\r\n\t  {\r\n\t\t  var json = {};\r\n\t\t  \r\n\t\t  \r\n\t\t  json.canvasName = this.canvasName;\r\n\t\t  json.origin = this.origin;\r\n\t\t  json.width = this.getWidth();\r\n\t\t  json.height = this.getHeight();\r\n\t\t  json.worldDef = this.worldDef;\r\n\t\t  \r\n\t\t  JSON.stringify(json);\r\n\t\t  return(json)\r\n\t  }\r\n\t*/\r\n\r\n\t/*  \r\n\tgetConnector(connectorDefKey,name)\r\n\t{\r\n\t\tvar connector = this.getConnectorDef(connectorDefKey)(this.worldDef,name);\r\n\t\tconnector.connectorDefKey = connectorDefKey;\r\n\t\treturn(connector);\r\n\t}\r\n\t*/\r\n\r\n\t/*\r\n\tgetConnectorDef(connectorDefKey)\r\n\t{\r\n\t\tvar connectorDef = this.worldDef.worldDisplay.connectorDefs[\"generic\"];\r\n\t\t\r\n\t\tvar foundConnectorDef = false;\r\n\t\tif(this.worldDef.worldDisplay.connectorDefs.hasOwnProperty(connectorDefKey))\r\n\t\t{\r\n\t\t\tconnectorDef = this.worldDef.worldDisplay.connectorDefs[connectorDefKey];\r\n\t\t\tfoundConnectorDef = true;\r\n\t\t}\r\n\t\tif(!foundConnectorDef) console.trace(\"CanvasHolder:getConnectorDef:connectorDefKey=\\\"\"+connectorDefKey+ \"\\\" was not found using generic\");\r\n\t\telse console.log(\"found connector display :\"+connectorDefKey);\r\n\t\tconnectorDef.connectorDefKey = connectorDefKey;\r\n\t\treturn(connectorDef);\r\n\t}\r\n\t*/\r\n\r\n\t/*\r\n\tgetConnectorDisplay(connectorDisplayKey)\r\n\t{\r\n\t\tvar connectorDisplay = this.worldDef.worldDisplay.connectorDisplay[\"generic\"];\r\n\t\t\r\n\t\tvar foundConnectorDisplay = false;\r\n\t\tif(this.worldDef.worldDisplay.connectorDisplay.hasOwnProperty(connectorDisplayKey))\r\n\t\t{\r\n\t\t\tconnectorDisplay = this.worldDef.worldDisplay.connectorDisplay[connectorDisplayKey];\r\n\t\t\tfoundConnectorDisplay = true;\r\n\t\t}\r\n\t\tif(!foundConnectorDisplay) console.trace(\"CanvasHolder:getConnectorDisplay:connectorDisplayKey=\\\"\"+connectorDisplayKey+ \"\\\" was not found using generic\");\r\n\t\tconnectorDisplay.connectorDisplayKey = connectorDisplayKey;\r\n\t\treturn(connectorDisplay);\r\n\t}\r\n\t*/\r\n\r\n\t/*\r\n\tgetGraphData(graphDataKey)\r\n\t{\r\n\t\tvar graphData = this.worldDef.worldDisplay.nodeDisplay[\"generic\"];\t\r\n\t\tvar foundGraphData = false;\r\n\t\tif(this.worldDef.worldDisplay.nodeDisplay.hasOwnProperty(graphDataKey))\r\n\t\t{\r\n\t\t\tgraphData = this.worldDef.worldDisplay.nodeDisplay[graphDataKey];\r\n\t\t\tfoundGraphData = true;\r\n\t\t}\r\n\t\tif(!foundGraphData) console.trace(\"CanvasHolder:getGraphData:graphDataKey=\\\"\"+graphDataKey+ \"\\\" was not found using generic\")\r\n\t\t//console.trace(\"CanvasHolder:getGraphData:graphDataKey=\\\"\"+graphDataKey+ \"\\\" was not found using generic\")\r\n\t\t//console.log(\"FOR:\"+graphDataKey+Common.toString(graphData));\r\n\t\t//console.log(\"getGraphData:graphDataKey=\"+graphDataKey+\":clone=\"+graphData.nodeDisplay.displayInfo.clone);\r\n\r\n\t\t//if(graphData.nodeDisplay.displayInfo.clone)\r\n\t\tif(graphData.nodeDisplayFunction)\r\n\t\t{\r\n\t\t\t//console.log(\"getGraphData:graphDataKey:FOUND A FUNCTION:\"+graphDataKey);\r\n\t\t\tgraphData = Object.create(graphData);\r\n\t\t\tgraphData.nodeDisplay = graphData.nodeDisplayFunction();\r\n\t\t\t//console.log(\"CLONING:\"+graphDataKey+Common.toString(graphData));\r\n\t\t\t//graphData.nodeDisplay.displayInfo = Object.create(graphData.nodeDisplay.displayInfo);\r\n\t\t\t//graphData.nodeDisplay.displayInfo  = JSON.parse(JSON.stringify(graphData.nodeDisplay.displayInfo));\r\n\t\t\t//graphData.nodeDisplay.displayInfo  = JSON.parse(JSON.stringify(graphData.nodeDisplay.displayInfo));\r\n\t\t\t//graphData = Object.create(graphData);\r\n\t\t\t//graphData.nodeDisplay.displayInfo.ts = new Date().getTime();\r\n\r\n\r\n\t\t}\r\n\r\n\t\tgraphData.graphDataKey = graphDataKey;\r\n\t\treturn(graphData);\r\n\t}\r\n\t*/\r\n\t/*\r\n\tclone(origin)\r\n\t{\r\n\t\tvar canvasHolder = new CanvasHolderHTML(this.canvasName);\r\n\t\t//canvasHolder.origin = origin;\r\n\t\t\r\n\t\tvar canvasHolder = new Object();\r\n\t\tcanvasHolder.origin = origin;\r\n\t\t\r\n\t\tcanvasHolder.canvasName = this.canvasName;\r\n\t\tcanvasHolder.canvas = this.canvas;\r\n\t\tcanvasHolder.context = this.context;\r\n\t\tcanvasHolder.isCanvasVisable = this.isCanvasVisable;\r\n\t\tcanvasHolder.isCanvasDrawable = this.isCanvasDrawable;\r\n\t\tcanvasHolder.isDrawable = this.isDrawable;\r\n\t\tcanvasHolder.isVisable = this.isVisable;\r\n\t\tcanvasHolder.getWidth = this.getWidth;\r\n\t\tcanvasHolder.getHeight = this.getHeight;\r\n\t\tcanvasHolder.worldDef = this.worldDef;\r\n\t\tcanvasHolder.getGraphData = this.getGraphData;\r\n\t\t\r\n\t\t\r\n\t\treturn(canvasHolder);\r\n\t}\r\n\t*/","import { WorldPosition } from \"../../world/worldposition\";\r\nimport { CanvasHolderHTML } from \"./canvasholderhtml\";\r\nimport { MouseEventHandler } from \"./mouseeventhandler\";\r\nimport { World } from \"../../world/world\";\r\n\r\n\r\nexport class CanvasMouse\r\n{\r\n\tprivate _offset:WorldPosition;\r\n\tprivate canvasholderHTML:CanvasHolderHTML;\r\n\tprivate _mouseEventHandler:MouseEventHandler;\r\n\t\r\n\r\n\tconstructor(world:World,canvasholderHTML:CanvasHolderHTML,mouseEventHandler:MouseEventHandler)\r\n\t{\r\n\t\tthis.canvasholderHTML = canvasholderHTML;\r\n\t\tthis.mouseEventHandler = mouseEventHandler;\r\n\t\tif(canvasholderHTML.isCanvasVisable()) \r\n\t\t{\r\n\t\t\t//this.offset = NodeCanvasMouse.getCanvasOffset(this.canvasholder.canvas);\r\n\t\t\tthis.offset = this.getCanvasOffset();\t\t\r\n\t\t\tvar self = this;\r\n\t\t\tthis.canvasholderHTML.canvas.addEventListener(\"pointerdown\", function(event) { self.pointerDownEvent(world,self,event) }, false);\r\n\t\t\tthis.canvasholderHTML.canvas.addEventListener(\"pointermove\",function(event) { self.pointerMoveEvent(world,self,event) }, false);\r\n\t\t\tthis.canvasholderHTML.canvas.addEventListener(\"pointerup\",function(event) { self.pointerUpEvent(world,self,event) }, false);\r\n\t\t\t//this.nodeMouseMovment = {};\r\n\t\t}\r\n\t}\r\n\r\n\tprivate getCanvasOffset():WorldPosition\r\n\t{\r\n\t    let offsetLeft = 0;\r\n\t\tlet offsetTop = 0;\r\n\t\tlet object:HTMLElement = this.canvasholderHTML.canvas;\r\n\t    do\r\n\t    {\r\n\t      if (!isNaN(object.offsetLeft))\r\n\t      {\r\n\t          offsetLeft += object.offsetLeft;\r\n\t      }\r\n\t      if (!isNaN(object.offsetTop))\r\n\t      {\r\n\t          offsetTop += object.offsetTop;\r\n\t\t  }   \r\n\t\t let element:any = object.offsetParent;\r\n\t\t if(element.hasOwnProperty(\"offsetParent\")) object = element;\r\n\t\t else object = null;\r\n\t    }\r\n\t    while(object);\r\n\t    \r\n\t    return( new WorldPosition(offsetLeft,offsetTop) );\r\n\t}\r\n\r\n\tpublic pointerDownEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent) {\r\n\t\tthis.mouseEventHandler.pointerDownEvent(world,canvasMouse,event);\r\n\t}\r\n\t\r\n\tpublic pointerMoveEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent)\t{\r\n\t\tthis.mouseEventHandler.pointerMoveEvent(world,canvasMouse,event);\r\n\r\n\t}\r\n\t\r\n\tpublic pointerUpEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent)\r\n\t{\r\n\t\tthis.mouseEventHandler.pointerUpEvent(world,canvasMouse,event);\r\n\r\n\t}\r\n\t\r\n\r\n\t\r\n\tpublic get offset(): WorldPosition {\r\n\t\treturn this._offset;\r\n\t}\r\n\r\n\tpublic set offset(value: WorldPosition) {\r\n\t\tthis._offset = value;\r\n\t}\r\n\r\n\tpublic get mouseEventHandler(): MouseEventHandler {\r\n\t\treturn this._mouseEventHandler;\r\n\t}\r\n\r\n\tpublic set mouseEventHandler(value: MouseEventHandler) {\r\n\t\tthis._mouseEventHandler = value;\r\n\t}\r\n\r\n\r\n\tpublic get $canvasholderHTML(): CanvasHolderHTML {\r\n\t\treturn this.canvasholderHTML;\r\n\t}\r\n\r\n\tpublic set $canvasholderHTML(value: CanvasHolderHTML) {\r\n\t\tthis.canvasholderHTML = value;\r\n\t}\r\n\t\r\n\r\n}\r\n","import { MouseStatus } from \"./mousestatus\";\r\nimport { WorldObject } from \"../../world/worldobject\";\r\nimport { MouseEventHandler } from \"./mouseeventhandler\";\r\nimport { WorldPosition } from \"../../world/worldposition\";\r\nimport { World } from \"../../world/world\";\r\nimport { CanvasMouse } from \"./canvasmouse\";\r\nimport { WorldDisplay } from \"../worlddisplay\";\r\n\r\n\r\n\r\nexport class MouseEventHandlerWorldObject implements MouseEventHandler {\r\n   private _mouseStatus:MouseStatus;\r\n   private _currentWorldObject:WorldObject;\r\n   private _lastWorldObject:WorldObject;\r\n\r\n    constructor()\r\n    {\r\n        this.mouseStatus = new MouseStatus();\r\n        this.currentWorldObject = null;\r\n        this.lastWorldObject = null;\r\n\t}\r\n\t\r\n\tpublic getMouseStatus():MouseStatus {\r\n\t\treturn(this.mouseStatus);\r\n\t}\r\n\r\n    public worldObjectSelected(world:World,event:MouseEvent,wWorldObject:WorldObject):void {\r\n\r\n    }\r\n\r\n    public worldObjectDeselected(world:World,event:MouseEvent):void {\r\n\r\n\t}\r\n\r\n\tpublic getCurrentWorldObject():WorldObject {\r\n\t\treturn(this.currentWorldObject);\r\n\t}\r\n\t\r\n\t/*\r\n\tpublic getWorldPositionFromMouseEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent):WorldPosition {\r\n\t\tvar eventPosition:WorldPosition = new WorldPosition(event.pageX-canvasMouse.offset.x,event.pageY-canvasMouse.offset.y);\r\n\t\treturn(eventPosition);\r\n\t}\r\n\t*/\r\n   \r\n    public pointerDownEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent):void\r\n\t{\r\n\t\t//console.log(\"pointerDownEvent:\"+JSON.stringify(event));;\r\n\t\tvar eventPosition:WorldPosition = WorldDisplay.getWorldPositionFromMouseEvent(world,canvasMouse,event);\r\n\t\t//this.hideCurrentNodeInfo();\r\n\t\tconsole.log(\"pointerDownEvent:\"+JSON.stringify(eventPosition));;\r\n\r\n\t\tthis.mouseStatus.isDown = true;\r\n\t\tthis.mouseStatus.startPosition = eventPosition;\r\n\t\tthis.mouseStatus.position = eventPosition;\r\n\t\tif(this.currentWorldObject!=null)\r\n\t\t{\r\n\t\t\tthis.currentWorldObject.setAnimated(true);\r\n\t\t\tthis.currentWorldObject.setSelected(false);\r\n\t\t\tthis.currentWorldObject = null;\r\n\t\t}\r\n\t\t\r\n\t\tlet clickWorldObject:WorldObject =  world.getWorldObjectContainingPosition(eventPosition);\r\n\t\r\n\t\tif(clickWorldObject!=null && clickWorldObject!=this.lastWorldObject)\r\n\t\t{\r\n\t\t\tconsole.log(\"pointerDownEvent:clickWorldObject=\"+clickWorldObject.getWorldId().id);\r\n\r\n\t\t\tthis.currentWorldObject = clickWorldObject;\r\n\r\n\t\t\tthis.mouseStatus.startPosition = eventPosition.clone();\r\n\r\n\t\t\tthis.currentWorldObject.setSelected(true);\r\n\t\t\tthis.mouseStatus.clickOffset = this.currentWorldObject.getWorldPosition().getDelta(eventPosition);\r\n\t\t\tthis.currentWorldObject.setAnimated(false);\r\n\t\t\t/////////////////this.mouseStatus.clickOffset = clickWorldObject.getWorldPosition().getDelta(eventPosition);\r\n\t\t\t//this.mouseEventHandler.pointerDown(this.mouseStatus);\t\t\t\r\n\t\t\tthis.worldObjectSelected(world,event,this.currentWorldObject);\t\r\n\t\t\tthis.currentWorldObject.getWorldObjectEventHandler().pointerDownEvent(world,canvasMouse,event);\t\t\r\n\t\t}\r\n\t\t\r\n\t\tif(clickWorldObject==null)\r\n\t\t{\r\n\t\t\tthis.worldObjectDeselected(world,event);\r\n\t\t}\r\n\t\t\r\n\t\tif(this.lastWorldObject)\r\n\t\t{\r\n\t\t\tthis.worldObjectDeselected(world,event);\r\n\t\t\tthis.lastWorldObject.setSelected(false);\r\n\t\t\tthis.lastWorldObject = null;\r\n\t\t}\r\n\r\n\t\tworld.worldEngine.pointerDownEngineEvent(world,canvasMouse,event,this);\r\n\t\t////////////this.updateObjectPosition(eventPosition);\r\n\r\n\t\t\r\n\t\t\r\n\t\r\n\t}\r\n/*\r\n\tprivate updateObjectPosition():void {\r\n\r\n\t\tif(this.currentWorldObject!=null)\r\n\t\t{\r\n\t\t\tthis.currentWorldObject.setAnimated(false);\r\n\t\t\tthis.mouseStatus.position = this.mouseStatus.position;;\r\n\t\t\tvar deltaPosition = this.mouseStatus.startPosition.getDelta(this.mouseStatus.position);\r\n\r\n\r\n\t\t\t\t\t\r\n\t\t\tlet newX = this.mouseStatus.startPosition.x-\r\n\t\t\t\t\tdeltaPosition.x+\r\n\t\t\t\t\tthis.mouseStatus.clickOffset.x;\r\n\t\t\t\r\n\t\t\tlet newY = this.mouseStatus.startPosition.y-\r\n\t\t\t\t\tdeltaPosition.y+\r\n\t\t\t\t\tthis.mouseStatus.clickOffset.y;\r\n\r\n\t\t\tthis.currentWorldObject.setWorldPosition( new WorldPosition(newX,newY));\r\n\t\t}\r\n\t}\r\n  */  \r\n    \r\n\r\n    public pointerMoveEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent):void {\r\n\t\tvar eventPosition:WorldPosition = WorldDisplay.getWorldPositionFromMouseEvent(world,canvasMouse,event);\r\n\t\tthis.mouseStatus.position = eventPosition;\r\n\t\t\r\n\t\tif(this.mouseStatus.isDown)\r\n\t\t{\r\n\t\t\t//var eventPosition:WorldPosition = WorldDisplay.getWorldPositionFromMouseEvent(world,canvasMouse,event);\r\n\t\t\t//this.mouseStatus.position = eventPosition;\r\n\t\t\t\r\n\t\t\t////////////console.log(\"pointerMoveEvent:\"+event);\r\n\r\n\t\t\tthis.worldObjectDeselected(world,event);\r\n\t\t\tif(this.currentWorldObject!=null)\r\n\t\t\t{\r\n\t\t\t\tthis.currentWorldObject.setAnimated(false);\r\n\t\t\t\tthis.currentWorldObject.getWorldObjectEventHandler().pointerMoveEvent(world,canvasMouse,event);\t\t\r\n\r\n\t\t\t}\r\n\t\t\tthis.mouseStatus.position = this.mouseStatus.position;;\r\n\t\t\t\r\n\r\n\r\n\t\t\t//this.updateObjectPosition(eventPosition);\r\n\t\t\t/*\r\n\t\t\tif(this.currentWorldObject!=null)\r\n\t\t\t{\r\n\t\t\t\tthis.currentWorldObject.setAnimated(false);\r\n\t\t\t\tthis.mouseStatus.position = eventPosition;\r\n\t\t\t\tvar deltaPosition = this.mouseStatus.startPosition.getDelta(eventPosition);\r\n\r\n\r\n\t\t\t\t\t\t\r\n\t\t\t\tlet newX = this.mouseStatus.startPosition.x-\r\n\t\t\t\t\t\tdeltaPosition.x+\r\n\t\t\t\t\t\tthis.mouseStatus.clickOffset.x;\r\n\t\t\t\t\r\n\t\t\t\tlet newY = this.mouseStatus.startPosition.y-\r\n\t\t\t\t\t\tdeltaPosition.y+\r\n\t\t\t\t\t\tthis.mouseStatus.clickOffset.y;\r\n\r\n\t\t\t\tthis.currentWorldObject.setWorldPosition( new WorldPosition(newX,newY));\r\n\t\t\t}\r\n\t\t\t*/\r\n\t\t}\r\n\t\tworld.worldEngine.pointerMoveEngineEvent(world,canvasMouse,event,this);\r\n    }\r\n            \r\n\r\n    public pointerUpEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent):void \t{\r\n\t\t//console.log(\"pointerUpEvent:\"+JSON.stringify(event));\r\n\t\t//var eventPosition:WorldPosition = this.getWorldPositionFromMouseEvent(world,canvasMouse,event);\r\n\t\tvar eventPosition:WorldPosition = WorldDisplay.getWorldPositionFromMouseEvent(world,canvasMouse,event);\r\n\t\tthis.mouseStatus.position = eventPosition;\r\n\t\t\r\n\t\tif(this.currentWorldObject!=null)\r\n\t\t{\r\n\t\t\t///this.nodeCanvas.pointerUp(this.mouseStatus.node);\r\n\t\t\tthis.currentWorldObject.setAnimated(true);\r\n\t\t\t//this.mouseStatus.node.isSelected = false;\r\n\t\t\tthis.lastWorldObject = this.currentWorldObject;\r\n\t\r\n\t\t\tthis.currentWorldObject.getWorldObjectEventHandler().pointerUpEvent(world,canvasMouse,event);\t\t\r\n\r\n\t\t\tthis.currentWorldObject = null;\r\n\t\t}\r\n\t\tthis.mouseStatus.isDown = false;\r\n\t\tworld.worldEngine.pointerUpEngineEvent(world,canvasMouse,event,this);\r\n\t\t\r\n\t}\r\n\r\n\tpublic get mouseStatus(): MouseStatus {\r\n\t\treturn this._mouseStatus;\r\n\t}\r\n\r\n\tpublic set mouseStatus(value: MouseStatus) {\r\n\t\tthis._mouseStatus = value;\r\n\t}\r\n\r\n\r\n\tpublic get currentWorldObject(): WorldObject {\r\n\t\treturn this._currentWorldObject;\r\n\t}\r\n\r\n\tpublic set currentWorldObject(value: WorldObject) {\r\n\t\tthis._currentWorldObject = value;\r\n\t}\r\n\r\n\r\n\tpublic get lastWorldObject(): WorldObject {\r\n\t\treturn this._lastWorldObject;\r\n\t}\r\n\r\n\tpublic set lastWorldObject(value: WorldObject) {\r\n\t\tthis._lastWorldObject = value;\r\n\t}\r\n    \r\n}","import { WorldPosition } from \"../../world/worldposition\";\r\n\r\nexport class MouseStatus\r\n{\r\n\tprivate _isDown:boolean;\r\n\tprivate _startPosition:WorldPosition;\r\n\tprivate _position:WorldPosition;\r\n\t//private _worldObject:WorldObject;\r\n\t//private _objectStartPosition:WorldPosition;\r\n\tprivate _clickOffset:WorldPosition;\r\n\t//private _lastWorldObject:WorldObject;\r\n\t\r\n\t\r\n\t\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tthis.isDown = false;\r\n\t\tthis.startPosition = new WorldPosition(0,0);\r\n\t\tthis.position = new WorldPosition(0,0);\r\n\t\tthis.clickOffset = new WorldPosition(0,0);\r\n\r\n\t\t//this.objectStartPosition = null\r\n\t}\r\n// \t\t\tnodeCanvasMouse.mouseStatus = new MouseStatus(false,new Position(0,0),new Position(0,0),null,null);\r\n\r\n\r\n\tpublic get isDown(): boolean {\r\n\t\treturn this._isDown;\r\n\t}\r\n\r\n\tpublic set isDown(value: boolean) {\r\n\t\tthis._isDown = value;\r\n\t}\r\n\r\n\tpublic get startPosition(): WorldPosition {\r\n\t\treturn this._startPosition;\r\n\t}\r\n\r\n\tpublic set startPosition(value: WorldPosition) {\r\n\t\tthis._startPosition = value;\r\n\t}\r\n\t\r\n\r\n\tpublic get position(): WorldPosition {\r\n\t\treturn this._position;\r\n\t}\r\n\r\n\tpublic set position(value: WorldPosition) {\r\n\t\tthis._position = value;\r\n\t}\r\n\r\n\tpublic get clickOffset(): WorldPosition {\r\n\t\treturn this._clickOffset;\r\n\t}\r\n\r\n\tpublic set clickOffset(value: WorldPosition) {\r\n\t\tthis._clickOffset = value;\r\n\t}\r\n\r\n\r\n\r\n\t\r\n}\r\n","import { Drawable } from \"../drawable\";\r\nimport { WorldPosition } from \"../../world/worldposition\";\r\n//import { WalkerWorld } from \"../../walkers/walkerworld/walkerworld\";\r\nimport { WorldDisplay } from \"../worlddisplay\";\r\nimport { CircleEngineShape } from \"../../engine/shapes/circleengineshape\";\r\n//import { WalkerEngine } from \"../../walkerworld/walkerengine\";\r\n\r\n\r\nexport class CircleDisplayShape implements Drawable\r\n{\r\n\tprivate _circleEngineShape:CircleEngineShape;\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tthis.circleEngineShape = null;\r\n\t}\r\n\r\n\tpublic init(circleEngineShape:CircleEngineShape,options:any):void {\r\n\t\tthis.circleEngineShape = circleEngineShape;\t\t\r\n\t}\r\n\t\r\n\r\n\tpublic get circleEngineShape(): CircleEngineShape {\r\n\t\treturn this._circleEngineShape;\r\n\t}\r\n\r\n\tpublic set circleEngineShape(value: CircleEngineShape) {\r\n\t\tthis._circleEngineShape = value;\r\n\t}\r\n\t\r\n\t\r\n\tpublic draw(context:CanvasRenderingContext2D):void\r\n\t{\r\n\t\tif(!this.circleEngineShape) throw Error(\"CircleDisplayShape:CircleEngineShape is not set, was init called?\")\r\n\t\t//super.drawConnector(canvasHolder,node);\r\n\t\t/*\r\n\t\tsuper.drawNode(canvasHolder,node);\r\n\r\n\t\t*/\r\n\t\t//console.log(\"CircleDisplayShape.drawShape\");\r\n\r\n\t\tcontext.fillStyle = WorldDisplay.getColorFromString(\"ff0000ff\");\r\n\t\tcontext.strokeStyle = WorldDisplay.getColorFromString(\"0000ffff\");\r\n\t\tlet position:WorldPosition = this.circleEngineShape.getWorldPosition();\r\n\t\t\r\n\t    context.beginPath();\r\n\t    context.arc(position.x,position.y,this.circleEngineShape.getRadius(),0,Math.PI * 2, false);\r\n\t    context.closePath();\r\n\t    context.fill();\r\n\t    context.lineWidth = 2;\r\n\t\tcontext.stroke();\r\n\t}\r\n}\r\n","import { Drawable } from \"../drawable\";\r\nimport { WorldDisplay, Size } from \"../worlddisplay\";\r\nimport { RectangleEngineShape } from \"../../engine/shapes/rectangleengineshape\";\r\nimport { RectangleDisplayShape } from \"./rectangledisplayshape\";\r\nimport { World } from \"../../world/world\";\r\nimport { CanvasMouse } from \"../canvas/canvasmouse\";\r\nimport { WorldObjectEventHandler } from \"../../world/worldobjecteventhandler\";\r\nimport { DrawableText } from \"./drawabletext\";\r\nimport { DrawableConnector } from \"./drawableconnector\";\r\nimport { EngineConnector } from \"../../engine/connectors/engineconnector\";\r\nimport { EngineConnectorDef } from \"../../engine/connectors/engineconnectordef\";\r\n\r\n\r\nexport class LineConnectorDisplay implements DrawableConnector\r\n{\r\n    private _engineConnector:EngineConnector;\r\n\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tthis.engineConnector = null;\r\n\t}\r\n\r\n\tpublic init(engineConnector:EngineConnector,options:any):void {\r\n\t\tthis.engineConnector = engineConnector;\t\r\n\t}\r\n\r\n\t\r\n\tpublic draw(context:CanvasRenderingContext2D):void\r\n\t{\r\n        context.fillStyle = WorldDisplay.getColorFromString(\"ff0000ff\");\r\n\t\tcontext.strokeStyle = WorldDisplay.getColorFromString(\"0000ffff\");\r\n\r\n\r\n        context.lineWidth = 2;\r\n        for(let i=0;i<this.engineConnector.getEngineConnectorDefArray().length;i++)\r\n        {\r\n\t\t\tWorldDisplay.drawConnectedLine(context,\r\n\t\t\t[\r\n                this.engineConnector.getEngineConnectorDefArray()[i].engineShape.getWorldPosition(),\r\n                this.engineConnector.getWorldPosition()\r\n            ]);\r\n        }\r\n\r\n\t}\r\n\r\n    /**\r\n     * Getter engineConnector\r\n     * @return {EngineConnector}\r\n     */\r\n\tpublic get engineConnector(): EngineConnector {\r\n\t\treturn this._engineConnector;\r\n\t}\r\n\r\n    /**\r\n     * Setter engineConnector\r\n     * @param {EngineConnector} value\r\n     */\r\n\tpublic set engineConnector(value: EngineConnector) {\r\n\t\tthis._engineConnector = value;\r\n\t}\r\n\r\n\t\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import { Drawable } from \"../drawable\";\r\nimport { PolygonEngineShape } from \"../../engine/shapes/polygonengineshape\";\r\nimport { WorldDisplay } from \"../worlddisplay\";\r\n\r\nexport class PolygonDisplayShape implements Drawable\r\n{\r\n\tprivate _polygonEngineShape:PolygonEngineShape;\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tthis.polygonEngineShape = null;\r\n\t}\r\n\r\n\tpublic init(polygonEngineShape:PolygonEngineShape,options:any):void {\r\n\t\tthis.polygonEngineShape = polygonEngineShape;\t\t\r\n\t}\r\n\r\n\tpublic get polygonEngineShape(): PolygonEngineShape {\r\n\t\treturn this._polygonEngineShape;\r\n\t}\r\n\r\n\tpublic set polygonEngineShape(value: PolygonEngineShape) {\r\n\t\tthis._polygonEngineShape = value;\r\n\t}\r\n\r\n\t\r\n\t\r\n\tpublic draw(context:CanvasRenderingContext2D):void\r\n\t{\r\n\t\tif(!this.polygonEngineShape) throw Error(\"PolygonDisplayShape:PolygonEngineShape is not set, was init called?\")\r\n\r\n\t\tcontext.fillStyle = WorldDisplay.getColorFromString(\"ff0000ff\");\r\n\t\tcontext.strokeStyle = WorldDisplay.getColorFromString(\"0000ffff\");\r\n        context.lineWidth = 2;\r\n        \r\n        WorldDisplay.drawOutlinedShape(context,this.polygonEngineShape.getPolygonPoints());\r\n\t\t\r\n\t}\r\n}\r\n","import { Drawable } from \"../drawable\";\r\nimport { WorldDisplay } from \"../worlddisplay\";\r\nimport { RectangleEngineShape } from \"../../engine/shapes/rectangleengineshape\";\r\n\r\nexport class RectangleDisplayShape implements Drawable\r\n{\r\n\tprivate _rectangleEngineShape:RectangleEngineShape;\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tthis.rectangleEngineShape = null;\r\n\t}\r\n\r\n\tpublic init(rectangleEngineShape:RectangleEngineShape,options:any):void {\r\n\t\tthis.rectangleEngineShape = rectangleEngineShape;\t\t\r\n\t}\r\n\r\n\tpublic get rectangleEngineShape(): RectangleEngineShape {\r\n\t\treturn this._rectangleEngineShape;\r\n\t}\r\n\r\n\tpublic set rectangleEngineShape(value: RectangleEngineShape) {\r\n\t\tthis._rectangleEngineShape = value;\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\tpublic draw(context:CanvasRenderingContext2D):void\r\n\t{\r\n\t\tif(!this.rectangleEngineShape) throw Error(\"RectangleDisplayShape:rectangleEngineShape is not set, was init called?\")\r\n\t\t//super.drawConnector(canvasHolder,node);\r\n\t\t/*\r\n\t\tsuper.drawNode(canvasHolder,node);\r\n\r\n\t\t*/\r\n\t\t//console.log(\"CircleDisplayShape.drawShape\");\r\n\r\n\t\tcontext.fillStyle = WorldDisplay.getColorFromString(\"ff0000ff\");\r\n\t\tcontext.strokeStyle = WorldDisplay.getColorFromString(\"0000ffff\");\r\n\r\n        context.lineWidth = 2;\r\n        \r\n        WorldDisplay.drawOutlinedShape(context,this.rectangleEngineShape.getShapePoints());\r\n\r\n\t\t/*\r\n\r\n\t\tlet position:WorldPosition = this.rectangleEngineShape.getWorldPosition();\r\n\r\n\r\n\t\tcontext.fillRect( \r\n\t\t\t(position.x-this.rectangleEngineShape.getWidth()/2),\r\n\t\t\t(position.y-this.rectangleEngineShape.getHeight()/2),\r\n\t\t\tthis.rectangleEngineShape.getWidth(),\r\n\t\t\tthis.rectangleEngineShape.getHeight());\r\n\t\t\tcontext.lineWidth = 2;\r\n\t\tcontext.strokeRect( \r\n\t\t\t(position.x-this.rectangleEngineShape.getWidth()/2), \r\n\t\t\t(position.y-this.rectangleEngineShape.getHeight()/2), \r\n\t\t\tthis.rectangleEngineShape.getWidth(), \r\n\t\t\tthis.rectangleEngineShape.getHeight());\r\n\t\t*/\r\n\r\n\t}\r\n}\r\n","import { Drawable } from \"../drawable\";\r\nimport { WorldDisplay, Size } from \"../worlddisplay\";\r\nimport { RectangleEngineShape } from \"../../engine/shapes/rectangleengineshape\";\r\nimport { RectangleDisplayShape } from \"./rectangledisplayshape\";\r\nimport { World } from \"../../world/world\";\r\nimport { CanvasMouse } from \"../canvas/canvasmouse\";\r\nimport { WorldObjectEventHandler } from \"../../world/worldobjecteventhandler\";\r\nimport { DrawableText } from \"./drawabletext\";\r\n\r\n\r\nexport class TextDisplayShape implements DrawableText\r\n{\r\n    private _rectangleDisplayShape:RectangleDisplayShape;\r\n    private _displayText:string;\r\n\tprivate _rectangleEngineShape:RectangleEngineShape;\r\n\tprivate _textImageData:ImageData;\r\n\r\n\tconstructor(rectangleDisplayShape:RectangleDisplayShape,displayText:string)\r\n\t{\r\n\t\tthis.rectangleEngineShape = null;\r\n\t\tthis.rectangleDisplayShape = rectangleDisplayShape;\r\n\t\tthis.displayText = displayText;\r\n\t\tthis.textImageData = null;\r\n\r\n\t}\r\n\r\n\tpublic getText():string\r\n\t{\r\n\t\treturn(this.displayText);\r\n\t}\r\n\r\n\tpublic setText(displayText:string):void\r\n\t{\r\n\t\tthis.textImageData = null;\r\n\t\tthis.displayText = displayText;\r\n\t}\r\n\r\n\tpublic init(rectangleEngineShape:RectangleEngineShape,options:any):void {\r\n\t\tthis.rectangleEngineShape = rectangleEngineShape;\t\r\n\t\tthis.rectangleDisplayShape.init(this.rectangleEngineShape,options);\r\n\r\n\t\tlet woe:WorldObjectEventHandler = \r\n\t\t{\r\n\t\t\tpointerDownEvent : function (world:World,canvasMouse:CanvasMouse,event:MouseEvent):void\r\n\t\t\t{\r\n\t\t\t\tconsole.log(\"LOOOOOLZZZZZ! HEY FELLA XXXXXXX\");\r\n\t\t\t\tconsole.log(\"setSize:\"+JSON.stringify({\"width\":this.width,\"height\":this.height}))\r\n\r\n\r\n\t\t\t},\r\n\t\t\tpointerMoveEvent : function (world:World,canvasMouse:CanvasMouse,event:MouseEvent):void {},\r\n\t\t\tpointerUpEvent : function (world:World,canvasMouse:CanvasMouse,event:MouseEvent):void {}\r\n\t\t};\r\n\t\tthis.rectangleEngineShape.setWorldObjectEventHandler(woe);\r\n\t}\r\n\r\n\r\n    /**\r\n     * Getter textImageData\r\n     * @return {ImageData}\r\n     */\r\n\tpublic get textImageData(): ImageData {\r\n\t\treturn this._textImageData;\r\n\t}\r\n\r\n    /**\r\n     * Setter textImageData\r\n     * @param {ImageData} value\r\n     */\r\n\tpublic set textImageData(value: ImageData) {\r\n\t\tthis._textImageData = value;\r\n\t}\r\n\r\n\tpublic get rectangleEngineShape(): RectangleEngineShape {\r\n\t\treturn this._rectangleEngineShape;\r\n\t}\r\n\r\n\tpublic set rectangleEngineShape(value: RectangleEngineShape) {\r\n\t\tthis._rectangleEngineShape = value;\r\n    }\r\n    \r\n    /**\r\n     * Getter rectangleDisplayShape\r\n     * @return {RectangleDisplayShape}\r\n     */\r\n\tpublic get rectangleDisplayShape(): RectangleDisplayShape {\r\n\t\treturn this._rectangleDisplayShape;\r\n\t}\r\n\r\n    /**\r\n     * Setter rectangleDisplayShape\r\n     * @param {RectangleDisplayShape} value\r\n     */\r\n\tpublic set rectangleDisplayShape(value: RectangleDisplayShape) {\r\n\t\tthis._rectangleDisplayShape = value;\r\n\t}\r\n\r\n    /**\r\n     * Getter displayText\r\n     * @return {string}\r\n     */\r\n\tpublic get displayText(): string {\r\n\t\treturn this._displayText;\r\n\t}\r\n\r\n    /**\r\n     * Setter displayText\r\n     * @param {string} value\r\n     */\r\n\tpublic set displayText(value: string) {\r\n\t\tthis._displayText = value;\r\n\t}\r\n\t\r\n\t\r\n\r\n\t\r\n\tpublic draw(context:CanvasRenderingContext2D):void\r\n\t{\r\n\t\tif(!this.rectangleEngineShape) throw Error(\"RectangleDisplayShape:rectangleEngineShape is not set, was init called?\")\r\n\t\t\r\n\t\tlet fitContentToText:boolean = true;\r\n\t\t// DRAW TEXT\r\n\t\t// IF FITTING CONTAINER SIZE TO CONTENT THEN :\r\n\t\t// ---\r\n\t\t// ---\r\n\t\t// ---\r\n\t\t// ---\r\n\t\t// IF FITTING TEXT SIZE TO CONTAINER THEN :\r\n\t\tlet x = this.rectangleEngineShape.getWorldPosition().x;\r\n\t\tlet y = this.rectangleEngineShape.getWorldPosition().y;\r\n\r\n\t\tif(fitContentToText)\r\n\t\t{\r\n\t\t\tlet needsARedraw:boolean = false;\r\n\t\t\tif(this.textImageData==null) needsARedraw = true;\r\n\t\t\t\r\n\t\t\tif(needsARedraw)\r\n\t\t\t{\r\n\t\t\t\tlet hPadding:number = 5;\r\n\t\t\t\tlet vPadding:number = 5;\t\r\n\t\t\t\tlet fontPixelHeight:number = 15;\r\n\t\t\t\tthis.setContextFont(context,\"bold\",\"Arial\",15,\"000000ff\");\r\n\r\n\t\t\t\tlet textSize:Size = WorldDisplay.metricsTextMutipleLines(context,\r\n\t\t\t\t\tthis.displayText,\r\n\t\t\t\t\tfontPixelHeight,\r\n\t\t\t\t\t\"\\n\");\r\n\r\n\t\t\t\tlet containerSize = new Size(textSize.width+hPadding*2,textSize.height+vPadding*2);\r\n\t\t\t\t\r\n\t\t\t\tthis.rectangleEngineShape.setSize(textSize.width+hPadding*2,textSize.height+vPadding*2);\r\n\t\t\t\tthis.rectangleDisplayShape.draw(context);\r\n\r\n\t\t\t\t// the rectangle may have reset our color\r\n\t\t\t\tthis.setContextFont(context,\"bold\",\"Arial\",15,\"000000ff\");\r\n\r\n\t\t\t\tWorldDisplay.drawTextMutipleLines(context,\r\n\t\t\t\t\tthis.displayText,\r\n\t\t\t\t\tx,\r\n\t\t\t\t\ty-textSize.height/2+fontPixelHeight,\r\n\t\t\t\t\tfontPixelHeight,\"\\n\");\r\n\r\n\t\t\t\tthis.textImageData = context.getImageData(\r\n\t\t\t\t\tx-textSize.width/2,\r\n\t\t\t\t\ty-textSize.height/2,\r\n\t\t\t\t\ttextSize.width,\r\n\t\t\t\t\ttextSize.height);\r\n\t\t\t}\t\t\t\r\n\r\n\t\t\tthis.rectangleDisplayShape.draw(context);\r\n\t\t\tcontext.putImageData(\r\n\t\t\t\t\tthis.textImageData,\r\n\t\t\t\t\tx-this.textImageData.width/2,\r\n\t\t\t\t\ty-this.textImageData.height/2\r\n\t\t\t\r\n\t\t\t\t);\r\n\t\t}\r\n\r\n\t\tthis.rectangleEngineShape.stopRotation();\r\n\t}\r\n\r\n\tsetContextFont(context:CanvasRenderingContext2D,fontStyle:string,fontFace:string,fontPixelHeight:number,fontColor:string)\r\n\t{\r\n\t\t//context.fillStyle = WorldDisplay.getColorFromString(\"ffffffff\");\r\n\t\t\t//context.strokeStyle = WorldDisplay.getColorFromString(\"0000ffff\");\r\n\r\n\t\tcontext.font=fontStyle+\" \"+fontPixelHeight+\"px \"+fontFace; \r\n\t\tcontext.textAlign=\"center\";\r\n\t\tcontext.fillStyle=WorldDisplay.getColorFromString(fontColor);\r\n\t}\r\n\r\n\t\r\n\r\n\r\n\r\n/*************************\r\n\r\n\troundedRect(context,x,y,w,h,r,borderWitdh,borderColor,rectColor)\r\n\t{\r\n\t\t  if (w < 2 * r) r = w / 2;\r\n\t\t  if (h < 2 * r) r = h / 2;\r\n\t\t  context.beginPath();\r\n\t\t  context.moveTo(x+r, y);\r\n\t\t  context.arcTo(x+w, y,   x+w, y+h, r);\r\n\t\t  context.arcTo(x+w, y+h, x,   y+h, r);\r\n\t\t  context.arcTo(x,   y+h, x,   y,   r);\r\n\t\t  context.arcTo(x,   y,   x+w, y,   r);\r\n\t\t  context.closePath();\r\n\t\t\r\n\t    //context.beginPath();\r\n\t    //context.moveTo(x, y);\r\n\t    //context.lineTo(x + width - cornerRadius, y);\r\n\t    //context.arcTo(x + width, y, x + width, y + cornerRadius, cornerRadius);\r\n\t    //context.lineTo(x + width, y + height);\r\n\t    \r\n\t  context.lineWidth = borderWitdh;\r\n\t  context.fillStyle = rectColor;\r\n\t  context.strokeStyle = borderColor;\r\n\t  \r\n\t  context.stroke();\r\n\t  context.fill();\r\n  }\r\n*****************/\r\n\r\n/*******\r\n * \r\n * context.font = '14pt Verdana';\r\n * \r\n function measureTextHeight(fontSizeFace) {\r\n    // create a temp canvas\r\n    var width=1000;\r\n    var height=60;\r\n    var canvas=document.createElement(\"canvas\");\r\n    canvas.width=width;\r\n    canvas.height=height;\r\n    var ctx=canvas.getContext(\"2d\");\r\n\r\n    // Draw the entire a-z/A-Z alphabet in the canvas\r\n    var text=\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\n    ctx.save();\r\n    ctx.font=fontSizeFace;\r\n    ctx.clearRect(0,0,width,height);\r\n    ctx.fillText(text, 0, 40);\r\n    ctx.restore();\r\n\r\n    // Get the pixel data from the canvas\r\n    var data = ctx.getImageData(0,0,width,height).data,\r\n        first = false, \r\n        last = false,\r\n        r = height,\r\n        c = 0;\r\n\r\n    // Find the last line with a non-transparent pixel\r\n    while(!last && r) {\r\n        r--;\r\n        for(c = 0; c < width; c++) {\r\n            if(data[r * width * 4 + c * 4 + 3]) {\r\n                last = r;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Find the first line with a non-transparent pixel\r\n    while(r) {\r\n        r--;\r\n        for(c = 0; c < width; c++) {\r\n            if(data[r * width * 4 + c * 4 + 3]) {\r\n                first = r;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // If we've got it then return the height\r\n        if(first != r) return last - first;\r\n    }\r\n\r\n    // error condition if we get here\r\n    return 0;\r\n}\r\n\r\n */\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","\r\nimport { WorldPosition } from \"../world/worldposition\";\r\nimport { World } from \"../world/world\";\r\nimport { CanvasMouse } from \"./canvas/canvasmouse\";\r\nimport { WorldObject } from \"../world/worldobject\";\r\n\r\nexport class Size {\r\n\tprivate _width:number;\r\n\tprivate _height:number;\r\n\r\n\tconstructor(width:number,height:number)\r\n\t{\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\r\n\t}\r\n\tpublic get width(): number {\r\n\t\treturn this._width;\r\n\t}\r\n\r\n\tpublic set width(value: number) {\r\n\t\tthis._width = value;\r\n\t}\r\n\tpublic get height(): number {\r\n\t\treturn this._height;\r\n\t}\r\n\r\n\tpublic set height(value: number) {\r\n\t\tthis._height = value;\r\n\t}\r\n}\r\n\r\nexport class WorldDisplay  {\r\n    /*\r\n    static world(render:Matter.Render) {\r\n\r\n        Matter.Render.world(render);\r\n        console.log(\"doing some redering...\");\r\n    }\r\n    */    \r\n\r\n   public static getWorldPositionArrayFromObjects(worldObjectArray:Array<WorldObject>):Array<WorldPosition> {\r\n\t\tlet worldPositionArray:Array<WorldPosition> = new Array<WorldPosition>();\r\n\t\tfor(let n = 0; n < worldObjectArray.length; n++)\r\n\t\t{\r\n\t\t\tworldPositionArray.push(worldObjectArray[n].getWorldPosition());\r\n\t\t}\r\n\t\treturn(worldPositionArray);\r\n   }\r\n\r\n   public static  drawTextMutipleLines(context:CanvasRenderingContext2D,text:string,x:number,y:number,lineHeight:number,splitChar:string):void\r\n   {\r\n\t   let lines:string[] = text.split(splitChar);\r\n   \r\n\t   for(let n = 0; n < lines.length; n++)\r\n\t   {\r\n\t\t   context.fillText(lines[n], x, y);\r\n\t\t   y = y+lineHeight;\r\n\t   }\r\n\t}\r\n   \r\n\tpublic static  metricsTextMutipleLines(context:CanvasRenderingContext2D,text:string,lineHeight:number,splitChar:string):Size\r\n   {\r\n\t   let lines = text.split(splitChar);\r\n\t   let maxWidth = 0;\r\n\t   let totalHeight = lineHeight/2;\r\n\t   for(let n = 0; n < lines.length; n++)\r\n\t   {\r\n\t\t   let metrics = context.measureText(lines[n]);\r\n\t\t\tif(metrics.width>maxWidth) maxWidth = metrics.width;\r\n\t\t   totalHeight = totalHeight + lineHeight;\r\n\t\t}\r\n\t   // TODO for some reason maxWidth is always 1 short, how come??!?! (coincidentally I think the java image libraries have the same issue)\r\n\r\n\t   return(new Size(maxWidth+1,totalHeight));\r\n\t}\r\n\r\n\t/*\r\n\tpublic static metricsTextMutipleLines(context:CanvasRenderingContext2D,text:string,lineHeight:number,splitChar:string)\r\n\t{\r\n\t\tlet lines:Array<string> = text.split(splitChar);\r\n\t    //let line:string = '';\r\n\t    let maxWidth:number = 0;\r\n\t    let totalHeight = 0;\r\n\t    for(var n = 0; n < lines.length; n++)\r\n\t    {\r\n            let metrics:TextMetrics = context.measureText(lines[n]);\r\n            if(metrics.width>maxWidth) maxWidth = metrics.width;\r\n            totalHeight = totalHeight + lineHeight;\r\n\t    }\r\n\t    return({width:maxWidth,height:totalHeight});\r\n\t }\r\n\t */\r\n\r\n    public static getColorFromString(colorString:string):string\r\n    {\r\n      if(colorString.length==6)\r\n      {\r\n        colorString += \"ff\";\r\n      }\r\n      \r\n      let color = \"rgba(\"+\r\n          parseInt(colorString.substring(0,2), 16)+\",\"+\r\n          parseInt(colorString.substring(2,4), 16)+\",\"+\r\n          parseInt(colorString.substring(4,6), 16)+\",\"+\r\n          parseInt(colorString.substring(6,8), 16)/255.0+\")\";\r\n      \r\n      return(color);\r\n\t}\r\n\r\n\tpublic static getWorldPositionFromMouseEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent):WorldPosition {\r\n\t\tvar eventPosition:WorldPosition = new WorldPosition(event.pageX-canvasMouse.offset.x,event.pageY-canvasMouse.offset.y);\r\n\t\treturn(eventPosition);\r\n\t}\r\n\r\n\r\n\tpublic static getPolygonPoints(startAngle:number,numberOfSides:number,radius:number,position:WorldPosition):Array<WorldPosition> {\r\n\t\tlet polygonPointArray = Array<WorldPosition>();\t\r\n        let angle = 0\r\n        let angleIncrement = 2 * Math.PI / numberOfSides;\r\n    \r\n        for(let i=0;i < numberOfSides;i++) {\r\n            polygonPointArray.push(new WorldPosition(\r\n                position.x  + radius * Math.cos(angle),\r\n                position.y  + radius * Math.sin(angle)\r\n            ));\r\n            angle = angle + angleIncrement;\r\n                \r\n\t\t}\r\n\t\treturn(polygonPointArray);\r\n\t}\r\n\r\n/**\r\n\t * Draws an outlined shape from an Array of WorldPosition objects. It is assumed that the fill color, \r\n\t * stroek color and line width for the context have been set before the call is made\r\n\t * \r\n\t * @static\r\n\t * @param {CanvasRenderingContext2D} context \r\n\t * @param {Array<WorldPosition>} worldPositionArray \r\n\t * @memberof WorldDisplay\r\n\t */\r\n\tpublic static drawConnectedLine(context:CanvasRenderingContext2D,worldPositionArray:Array<WorldPosition>):void\r\n\t{\t    \r\n\t    context.beginPath();\r\n\t    for(let i=0;i<worldPositionArray.length;i++)\r\n\t    {   \t\r\n\t\t\tvar point = worldPositionArray[i];\r\n\t    \tif(i==0) context.moveTo(point.x,point.y);\r\n\t    \telse context.lineTo(point.x,point.y);\r\n\t    }\r\n\t    //context.closePath();\r\n\t    \r\n\t    //context.fill();\r\n\t    //context.lineWidth = displayInfo.borderWidth;\r\n\t    context.stroke();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws an outlined shape from an Array of WorldPosition objects. It is assumed that the fill color, \r\n\t * stroek color and line width for the context have been set before the call is made\r\n\t * \r\n\t * @static\r\n\t * @param {CanvasRenderingContext2D} context \r\n\t * @param {Array<WorldPosition>} worldPositionArray \r\n\t * @memberof WorldDisplay\r\n\t */\r\n\tpublic static drawOutlinedShape(context:CanvasRenderingContext2D,worldPositionArray:Array<WorldPosition>):void\r\n\t{\t    \r\n\t    context.beginPath();\r\n\t    for(let i=0;i<worldPositionArray.length;i++)\r\n\t    {   \t\r\n\t\t\tvar point = worldPositionArray[i];\r\n\t    \tif(i==0) context.moveTo(point.x,point.y);\r\n\t    \telse context.lineTo(point.x,point.y);\r\n\t    }\r\n\t    context.closePath();\r\n\t    \r\n\t    context.fill();\r\n\t    //context.lineWidth = displayInfo.borderWidth;\r\n\t    context.stroke();\r\n\t}\r\n\r\n\tpublic static getAveragePostionFromPositionList(positionList:Array<WorldPosition>):WorldPosition\r\n\t{\r\n\t  let x = 0.0;\r\n\t  let y = 0.0;\r\n\t  for(let i=0;i<positionList.length;i++)\r\n\t  {\r\n\t\t  let p = positionList[i];\r\n\t\t  x += p.x;\r\n\t\t  y += p.y;\r\n\t  }\r\n\t  x = x / positionList.length;\r\n\t  y = y / positionList.length;\r\n\t  return(new WorldPosition(x,y));\r\n\t}\r\n\t\t  \r\n\r\n    public static getCirclePositionList(radius:number,curvePoints:number):Array<WorldPosition> {\r\n\t\tlet pointList = new Array<WorldPosition>();\r\n\t\t\r\n\t\tlet angleInc = 360 / curvePoints;\r\n\t\tfor(let angle=0;angle<=360;angle=angle+angleInc)\r\n\t\t{\r\n\t\t\tlet rads = angle * (Math.PI/180);\r\n\t\t\tpointList.push(\r\n\t\t\t\t\tnew WorldPosition(\r\n\t\t\t\t\t\t\tradius*Math.cos(rads),\r\n\t\t\t\t\t\t\tradius*Math.sin(rads))\r\n\t\t\t\t\t);\t\r\n\t\t}\r\n\t\t\r\n\t\treturn(pointList);\r\n\t}\r\n\r\n\tpublic static getTrianglePositionList(width:number,height:number):Array<WorldPosition> {\r\n\t\tlet pointList = new Array<WorldPosition>();\r\n\t\t\r\n\t\tpointList.push(new WorldPosition(0,-(height/2)));\r\n\t\tpointList.push(new WorldPosition(width/2,height/2));\r\n\t\tpointList.push(new WorldPosition(-(width/2),height/2));\r\n\t\tpointList.push(new WorldPosition(0,-(height/2)));\r\n\t\t\r\n\t\treturn(pointList);;\r\n\t}\r\n\t\r\n\tpublic static getRectanglePositionList(width:number,height:number):Array<WorldPosition> {\r\n\t\tlet pointList = new Array<WorldPosition>();\r\n\t\t\r\n\t\tpointList.push(new WorldPosition(-(width/2),-(height/2)));\r\n\t\tpointList.push(new WorldPosition((width/2),-(height/2)));\r\n\t\tpointList.push(new WorldPosition((width/2),(height/2)));\r\n\t\tpointList.push(new WorldPosition(-(width/2),(height/2)));\t\r\n\t\tpointList.push(new WorldPosition(-(width/2),-(height/2)));\r\n\t\r\n\t\treturn(pointList);;\r\n\t}\r\n\r\n\tpublic static getArcPositionList(endAngle:number,startAngle:number,radius:number,curvePoints:number):Array<WorldPosition> {\r\n\t\tlet pointList = new Array<WorldPosition>();\r\n\t\t\r\n\t\t// bug durring the port to javascript... it was just expecting one arg so probably endAngle was used\r\n\t\tlet angle:number = Math.abs(endAngle-startAngle);\r\n\t\tlet angleInc:number = angle / curvePoints;\r\n\t\t\r\n\t\tpointList.push(new WorldPosition(0,0));\r\n\t\tfor(let angle=startAngle;\r\n\t\t\tangle<=endAngle && angleInc>0;\r\n\t\t\tangle=angle+angleInc)\r\n\t\t{\r\n\t\t\tif( (angle+angleInc) > endAngle )\r\n\t\t\t{\r\n\t\t\t\tif(angle!=endAngle) angle = endAngle ;\r\n\t\t\t}\r\n\t\t\tvar rads = angle * (Math.PI/180);\r\n\t\t\tpointList.push(\r\n\t\t\t\t\tnew WorldPosition(\r\n\t\t\t\t\t\t\tradius*Math.cos(rads),\r\n\t\t\t\t\t\t\tradius*Math.sin(rads))\r\n\t\t\t\t\t);\t\r\n\t\t}\r\n\t\t\r\n\t\tpointList.push(new WorldPosition(0,0));\r\n\t\t\r\n\t\treturn(pointList);\r\n\t}\r\n\r\n    public static fillTextMutipleLines(context:CanvasRenderingContext2D,text:string,x:number,y:number,lineHeight:number,splitChar:string)\r\n\t{\r\n\t\tlet lines:Array<string> = text.split(splitChar);\r\n\t    let line:string = '';\r\n\t\r\n\t    for(let n = 0; n < lines.length; n++)\r\n\t    {\r\n\t      //let metrics:TextMetrics = context.measureText(lines[n]);\r\n\t      context.fillText(lines[n], x, y);\r\n\t      y = y+lineHeight; \r\n\t    }\r\n\t    context.fillText(line, x, y);\r\n\t }\r\n\t\r\n   \r\n\t\r\n    public static roundedRect(context:CanvasRenderingContext2D,x:number,y:number,\r\n        w:number,h:number,r:number,borderWitdh:number,borderColor:string,rectColor:string):void\r\n\t{\r\n\t\t  if (w < 2 * r) r = w / 2;\r\n\t\t  if (h < 2 * r) r = h / 2;\r\n\t\t  context.beginPath();\r\n\t\t  context.moveTo(x+r, y);\r\n\t\t  context.arcTo(x+w, y,   x+w, y+h, r);\r\n\t\t  context.arcTo(x+w, y+h, x,   y+h, r);\r\n\t\t  context.arcTo(x,   y+h, x,   y,   r);\r\n\t\t  context.arcTo(x,   y,   x+w, y,   r);\r\n\t\t  context.closePath();\r\n\t\t/*\r\n\t    context.beginPath();\r\n\t    context.moveTo(x, y);\r\n\t    context.lineTo(x + width - cornerRadius, y);\r\n\t    context.arcTo(x + width, y, x + width, y + cornerRadius, cornerRadius);\r\n\t    context.lineTo(x + width, y + height);\r\n\t   */ \r\n\t    context.lineWidth = borderWitdh;\r\n\t    context.fillStyle = rectColor;\r\n\t    context.strokeStyle = borderColor;\r\n\t    \r\n\t    context.stroke();\r\n\t    context.fill();\r\n\t\r\n\t}\r\n}\r\n","import { EngineConnector } from \"../engineconnector\";\r\nimport { EngineConnectorDef } from \"../engineconnectordef\";\r\nimport { ConnectorPositioner } from \"./connectorpositioner\";\r\nimport { WorldPosition } from \"../../../world/worldposition\";\r\n\r\n\r\nexport class PositionerLockX implements ConnectorPositioner {\r\n\r\n\r\n\r\n    constructor() {\r\n    }\r\n\r\n    public positionConnectorShape(engineConnector:EngineConnector,engineConnectorDef:EngineConnectorDef):void {\r\n        if(engineConnectorDef.engineShape.isSelected())\r\n        {\r\n            engineConnector.setWorldPosition(\r\n                new WorldPosition(\r\n                    engineConnectorDef.engineShape.getWorldPosition().x,\r\n                    engineConnector.getWorldPosition().y)\r\n                );\r\n        }\r\n        else\r\n        {\r\n            engineConnectorDef.engineShape.setWorldPosition(\r\n                new WorldPosition(\r\n                    engineConnector.getWorldPosition().x,\r\n                    engineConnectorDef.engineShape.getWorldPosition().y)\r\n                );\r\n        }\r\n\r\n    }\r\n\r\n}","import { EngineConnector } from \"../engineconnector\";\r\nimport { EngineConnectorDef } from \"../engineconnectordef\";\r\nimport { ConnectorPositioner } from \"./connectorpositioner\";\r\nimport { WorldPosition } from \"../../../world/worldposition\";\r\n\r\n\r\nexport class PositionerLockY implements ConnectorPositioner {\r\n\r\n\r\n\r\n    constructor() {\r\n    }\r\n\r\n    public positionConnectorShape(engineConnector:EngineConnector,engineConnectorDef:EngineConnectorDef):void {\r\n        if(engineConnectorDef.engineShape.isSelected())\r\n        {\r\n            engineConnector.setWorldPosition(\r\n                new WorldPosition(\r\n                    engineConnector.getWorldPosition().x,\r\n                    engineConnectorDef.engineShape.getWorldPosition().y)\r\n                );\r\n        }\r\n        else\r\n        {\r\n            engineConnectorDef.engineShape.setWorldPosition(\r\n                new WorldPosition(\r\n                    engineConnectorDef.engineShape.getWorldPosition().x,\r\n                    engineConnector.getWorldPosition().y)\r\n                );\r\n        }\r\n\r\n    }\r\n\r\n}","import { EngineShape } from \"../shapes/engineshape\";\r\nimport { WorldPosition } from \"../../world/worldposition\";\r\nimport { ConnectorPositioner } from \"./connectorpositioners/connectorpositioner\";\r\n\r\nexport class EngineConnectorDef {\r\n    private _engineShape:EngineShape;\r\n    private _length:number;\r\n    private _stiffness:number;    \r\n\r\n    private _connectorPositioner:ConnectorPositioner;\r\n\r\n    constructor(engineShape:EngineShape,connectorPositioner:ConnectorPositioner,length:number,stiffness:number) {\r\n        this.engineShape = engineShape;\r\n        this.connectorPositioner = connectorPositioner;\r\n        this.length = length;\r\n        this.stiffness = stiffness;\r\n    }\r\n\r\n    public static getWorldPositionArrayFromEngineDefs(engineConnectorDefArray:Array<EngineConnectorDef>):Array<WorldPosition> {\r\n\t\tlet worldPositionArray:Array<WorldPosition> = new Array<WorldPosition>();\r\n\t\tfor(let n = 0; n < engineConnectorDefArray.length; n++)\r\n\t\t{\r\n\t\t\tworldPositionArray.push(engineConnectorDefArray[n].engineShape.getWorldPosition());\r\n\t\t}\r\n\t\treturn(worldPositionArray);\r\n   }\r\n\r\n\r\n    /**\r\n     * Getter connectorPositioner\r\n     * @return {ConnectorPositioner}\r\n     */\r\n\tpublic get connectorPositioner(): ConnectorPositioner {\r\n\t\treturn this._connectorPositioner;\r\n\t}\r\n\r\n    /**\r\n     * Setter connectorPositioner\r\n     * @param {ConnectorPositioner} value\r\n     */\r\n\tpublic set connectorPositioner(value: ConnectorPositioner) {\r\n\t\tthis._connectorPositioner = value;\r\n\t}\r\n\r\n    /**\r\n     * Getter length\r\n     * @return {number}\r\n     */\r\n\tpublic get length(): number {\r\n\t\treturn this._length;\r\n\t}\r\n\r\n    /**\r\n     * Setter length\r\n     * @param {number} value\r\n     */\r\n\tpublic set length(value: number) {\r\n\t\tthis._length = value;\r\n\t}\r\n\r\n    /**\r\n     * Getter stiffness\r\n     * @return {number}\r\n     */\r\n\tpublic get stiffness(): number {\r\n\t\treturn this._stiffness;\r\n\t}\r\n\r\n    /**\r\n     * Setter stiffness\r\n     * @param {number} value\r\n     */\r\n\tpublic set stiffness(value: number) {\r\n\t\tthis._stiffness = value;\r\n\t}\r\n    \r\n\r\n    /**\r\n     * Getter engineShape\r\n     * @return {EngineShape}\r\n     */\r\n\tpublic get engineShape(): EngineShape {\r\n\t\treturn this._engineShape;\r\n\t}\r\n\r\n    /**\r\n     * Setter engineShape\r\n     * @param {EngineShape} value\r\n     */\r\n\tpublic set engineShape(value: EngineShape) {\r\n\t\tthis._engineShape = value;\r\n\t}\r\n}","import { WorldEngine } from \"../worldengine\";\r\nimport { Drawable } from \"../../display/drawable\";\r\nimport { WorldId } from \"../../world/worldid\";\r\nimport { WorldPosition } from \"../../world/worldposition\";\r\nimport { CircleEngineShape } from \"../shapes/circleengineshape\";\r\nimport { RectangleEngineShape } from \"../shapes/rectangleengineshape\";\r\nimport { MockCircle } from \"./shapes/mockcircle\";\r\nimport { MockRectangle } from \"./shapes/mockrectangle\";\r\nimport { MockPolygon } from \"./shapes/mockpolygon\";\r\nimport { PolygonEngineShape } from \"../shapes/polygonengineshape\";\r\nimport { CanvasMouse } from \"../../display/canvas/canvasmouse\";\r\nimport { MouseEventHandler } from \"../../display/canvas/mouseeventhandler\";\r\nimport { World } from \"../../world/world\";\r\nimport { CircleDisplayShape } from \"../../display/drawableshapes/circledisplayshape\";\r\nimport { EngineShape } from \"../shapes/engineshape\";\r\nimport { TextDisplayShape } from \"../../display/drawableshapes/textdisplayshape\";\r\nimport { TextEngineShape } from \"../shapes/textengineshape\";\r\nimport { MockRectangleText } from \"./shapes/mockrectangletext\";\r\nimport { DrawableConnector } from \"../../display/drawableshapes/drawableconnector\";\r\nimport { EngineConnectorDef } from \"../connectors/engineconnectordef\";\r\nimport { EngineConnector } from \"../connectors/engineconnector\";\r\nimport { MockConnectorDef } from \"./shapes/mockconnectordef\";\r\nimport { MockConnector } from \"./shapes/mockconnector\";\r\n\r\nexport class MockEngine implements WorldEngine {\r\n  private _mouseAnchor: MockCircle;\r\n  private _connectorArray:Array<MockConnector>;\r\n\r\n  public constructor() {\r\n    this.mouseAnchor = new MockCircle(\r\n      new WorldId(\"mouseAnchor\"),\r\n      new CircleDisplayShape(),\r\n      5,\r\n      8,\r\n      new WorldPosition(-10,-10),\r\n      { restitution: 0.9, isSensor: true },\r\n      this\r\n    );\r\n    this.connectorArray = new Array<MockConnector>();\r\n  }\r\n  public getMouseAnchor(): EngineShape {\r\n    return this.mouseAnchor;\r\n  }\r\n\r\n  public createBounds(width:number,height:number,options:any):void {\r\n  }\r\n\r\n  public startEngine():void {\r\n    let self = this;\r\n\r\n    setInterval(\r\n      function() {\r\n        for(let i=0;i<self.connectorArray.length;i++) {\r\n          let connector = self.connectorArray[i];\r\n          for(let j=0;j<connector.getEngineConnectorDefArray().length;j++) {\r\n            let connectorDef = connector.getEngineConnectorDefArray()[j];\r\n            connectorDef.connectorPositioner.positionConnectorShape(connector,connectorDef);\r\n          }\r\n        }\r\n      },\r\n      1000/30);\r\n\r\n    \r\n  }\r\n\r\n  public createCircle(\r\n    worldId: WorldId,\r\n    drawable: Drawable,\r\n    radius: number,\r\n    numberOfSides: number,\r\n    worldPosition: WorldPosition,\r\n    options: any\r\n  ): CircleEngineShape {\r\n    let circle: MockCircle = new MockCircle(\r\n      worldId,\r\n      drawable,\r\n      radius,\r\n      numberOfSides,\r\n      worldPosition,\r\n      options,\r\n      this\r\n    );\r\n    return circle;\r\n  }\r\n\r\n  public createRectangle(\r\n    worldId: WorldId,\r\n    drawable: Drawable,\r\n    width: number,\r\n    height: number,\r\n    worldPosition: WorldPosition,\r\n    options: any\r\n  ): RectangleEngineShape {\r\n    let rectangle: MockRectangle = new MockRectangle(\r\n      worldId,\r\n      drawable,\r\n      width,\r\n      height,\r\n      worldPosition,\r\n      options,\r\n      this\r\n    );\r\n    return rectangle;\r\n  }\r\n\r\n  public createConnector(worldId:WorldId,drawableConnector:DrawableConnector,connectorShape:EngineShape,\r\n    engineConnectorDefArray:Array<EngineConnectorDef>,\r\n    options:any):EngineConnector {\r\n\r\n      let mockConnectorDefArrayDef:Array<MockConnectorDef> = new Array<MockConnectorDef>();\r\n      \r\n      for(let i=0;i<engineConnectorDefArray.length;i++) \r\n        mockConnectorDefArrayDef.push(new MockConnectorDef(this,engineConnectorDefArray[i]));\r\n      \r\n      let connector = new MockConnector(\r\n        worldId,\r\n        drawableConnector,\r\n        connectorShape,\r\n        mockConnectorDefArrayDef,\r\n        options,\r\n        this);\r\n        this.connectorArray.push(connector);\r\n    return(connector);\r\n  }\r\n\r\n  public createTextBox(worldId:WorldId,textDisplayShape:TextDisplayShape,width:number,height:number,worldPosition:WorldPosition,options:any):TextEngineShape {\r\n  //createTextBox(worldId:WorldId,textDisplayShape:TextDisplayShape,width:number,height:number,worldPosition:WorldPosition,options:any):RectangleEngineShape {\r\n    let rectangleText:MockRectangleText = new MockRectangleText (\r\n      worldId,\r\n      textDisplayShape,\r\n      width,height,worldPosition,\r\n      options,\r\n      this\r\n    );\r\n    return(rectangleText);\r\n  }\r\n\r\n  public createPolygon(\r\n    worldId: WorldId,\r\n    drawable: Drawable,\r\n    numberOfSides: number,\r\n    radius: number,\r\n    worldPosition: WorldPosition,\r\n    options: any\r\n  ): PolygonEngineShape {\r\n    let ploygon: PolygonEngineShape = new MockPolygon(\r\n      worldId,\r\n      drawable,\r\n      numberOfSides,\r\n      radius,\r\n      worldPosition,\r\n      options,\r\n      this\r\n    );\r\n    return ploygon;\r\n  }\r\n\r\n  public pointerDownEngineEvent(\r\n    world: World,\r\n    canvasMouse: CanvasMouse,\r\n    event: MouseEvent,\r\n    mouseEventHandler: MouseEventHandler\r\n  ): void {}\r\n\r\n  public pointerMoveEngineEvent(\r\n    world: World,\r\n    canvasMouse: CanvasMouse,\r\n    event: MouseEvent,\r\n    mouseEventHandler: MouseEventHandler\r\n  ): void {\r\n    var newPosition = new WorldPosition(\r\n      event.x - canvasMouse.offset.x,\r\n      event.y - canvasMouse.offset.y\r\n    );\r\n    this.mouseAnchor.translate(newPosition);\r\n\r\n    if (mouseEventHandler.getCurrentWorldObject() != null) {\r\n      var deltaPosition = mouseEventHandler\r\n        .getMouseStatus()\r\n        .startPosition.getDelta(mouseEventHandler.getMouseStatus().position);\r\n\r\n      let newX =\r\n        mouseEventHandler.getMouseStatus().startPosition.x -\r\n        deltaPosition.x +\r\n        mouseEventHandler.getMouseStatus().clickOffset.x;\r\n\r\n      let newY =\r\n        mouseEventHandler.getMouseStatus().startPosition.y -\r\n        deltaPosition.y +\r\n        mouseEventHandler.getMouseStatus().clickOffset.y;\r\n\r\n      mouseEventHandler\r\n        .getCurrentWorldObject()\r\n        .setWorldPosition(new WorldPosition(newX, newY));\r\n    }\r\n  }\r\n\r\n  public pointerUpEngineEvent(\r\n    world: World,\r\n    canvasMouse: CanvasMouse,\r\n    event: MouseEvent,\r\n    mouseEventHandler: MouseEventHandler\r\n  ): void {}\r\n\r\n  public get mouseAnchor(): MockCircle {\r\n    return this._mouseAnchor;\r\n  }\r\n\r\n  public set mouseAnchor(value: MockCircle) {\r\n    this._mouseAnchor = value;\r\n  }\r\n\r\n\r\n    /**\r\n     * Getter connectorArray\r\n     * @return {Array<MockConnector>}\r\n     */\r\n\tpublic get connectorArray(): Array<MockConnector> {\r\n\t\treturn this._connectorArray;\r\n\t}\r\n\r\n    /**\r\n     * Setter connectorArray\r\n     * @param {Array<MockConnector>} value\r\n     */\r\n\tpublic set connectorArray(value: Array<MockConnector>) {\r\n\t\tthis._connectorArray = value;\r\n\t}\r\n\r\n\r\n}\r\n","import { CircleEngineShape } from \"../../shapes/circleengineshape\";\r\nimport { WorldPosition } from \"../../../world/worldposition\";\r\nimport { Drawable } from \"../../../display/drawable\";\r\nimport { MockShape } from \"./mockshape\";\r\nimport { WorldId } from \"../../../world/worldid\";\r\nimport { MockEngine } from \"../mockengine\";\r\nimport { WorldDisplay } from \"../../../display/worlddisplay\";\r\n\r\nexport class MockCircle extends MockShape implements CircleEngineShape\r\n{\r\n\tprivate _curvePoints:number;\r\n\tprivate _radius:number;\r\n\t\r\n\r\n\tconstructor(worldId:WorldId,drawable:Drawable,radius:number,curvePoints:number,position:WorldPosition,options:any,mockEngine:MockEngine)\r\n\t{\r\n\t\tsuper(worldId,drawable,position,options);\r\n\t\tthis.radius = radius;\r\n\t\tthis.curvePoints = curvePoints;\t\r\n\t\tdrawable.init(this,options);\r\n\t}\r\n\r\n\tpublic containsWorldPosition(worldPosition:WorldPosition):boolean {\r\n\t\tlet distance = this.getWorldPosition().getDistance(worldPosition);\r\n\t\treturn(distance<=this.radius);\r\n\t}\r\n\r\n\tpublic getRadius():number {\r\n\t\treturn(this.radius);\r\n\t}\r\n\r\n\tpublic getShapePoints():Array<WorldPosition> {\r\n\t\t//return( WorldDisplay.getPolygonPoints(Math.PI/4,4,this.getWidth()+this.get,this.getWorldPosition() ) ;\r\n\t\t//WorldDisplay.getCirclePositionList(this.radius,this.curvePoints);\r\n\t\treturn(WorldDisplay.getCirclePositionList(this.radius,this.curvePoints));\r\n    }\r\n\r\n\tpublic get curvePoints(): number {\r\n\t\treturn this._curvePoints;\r\n\t}\r\n\r\n\tpublic set curvePoints(value: number) {\r\n\t\tthis._curvePoints = value;\r\n\t}\r\n\t\r\n\r\n\tpublic get radius(): number {\r\n\t\treturn this._radius;\r\n\t}\r\n\r\n\tpublic set radius(value: number) {\r\n\t\tthis._radius = value;\r\n\t}\r\n\r\n\r\n}\r\n","import { WorldPosition } from \"../../../world/worldposition\";\r\nimport { Drawable } from \"../../../display/drawable\";\r\nimport { WorldId } from \"../../../world/worldid\";\r\nimport { EngineConnector } from \"../../connectors/engineconnector\";\r\nimport { DrawableConnector } from \"../../../display/drawableshapes/drawableconnector\";\r\nimport { EngineConnectorDef } from \"../../connectors/engineconnectordef\";\r\nimport { WorldDisplay } from \"../../../display/worlddisplay\";\r\nimport { EngineShape } from \"../../shapes/engineshape\";\r\nimport { MockShape } from \"./mockshape\";\r\nimport { MockEngine } from \"../mockengine\";\r\nimport { MockCircle } from \"./mockcircle\";\r\nimport { CircleDisplayShape } from \"../../../display/drawableshapes/circledisplayshape\";\r\nimport { MockConnectorDef } from \"./mockconnectordef\";\r\n\r\nexport class MockConnector extends MockShape implements EngineConnector\r\n{\r\n    private _drawableConnector:DrawableConnector;\r\n    private _mockConnectorDefArray:Array<MockConnectorDef>;\r\n\r\n\r\n    \r\n\tprivate _connectorShape:EngineShape;\r\n    constructor(\r\n        worldId:WorldId,\r\n        drawableConnector:DrawableConnector,\r\n        connectorShape:EngineShape,\r\n        mockConnectorDefArray:Array<MockConnectorDef>,\r\n        options:any,\r\n        mockEngine:MockEngine)\r\n\t{\r\n       super(worldId,drawableConnector,connectorShape.getWorldPosition(),options);\r\n       this.drawableConnector = drawableConnector;\r\n       this.mockConnectorDefArray = mockConnectorDefArray;\r\n\r\n       \r\n       this.connectorShape = connectorShape;\r\n\r\n       connectorShape.getDrawable().init(connectorShape,options);\r\n\r\n    \r\n       /*\r\n       this.connectorCircleBody = new MockCircle(\r\n            new WorldId(this.worldId+\"-connector-circle\"),\r\n            new CircleDisplayShape(),\r\n            this.connectorCircleRadius,this.connectorCircleCurvePoints,\r\n            this.getWorldPosition(),\r\n            {},\r\n            mockEngine\r\n            );\r\n      \t*/\r\n       //this.circleBody.collisionFilter.category = MatterEngine.boundsFilter;\r\n       //matterEngine.addMatterShape(this);\r\n        \r\n       drawableConnector.init(this,options);\r\n\r\n       /*\r\n       for(let i=0;i<this.matterConnectorDefArray.length;i++) {\r\n        let connectorDef:MatterConnectorDef = matterConnectorDefArray[i];\r\n        let matterConstraint = Matter.Constraint.create(\r\n            {\r\n                bodyA: this.connectorCircleBody,\r\n                bodyB: connectorDef.matterShape.getBody(),\r\n                pointA: { x: -0, y: -0 },\r\n                pointB: { x: -0, y: -0 },\r\n                length:connectorDef.length,\r\n                stiffness:connectorDef.stiffness\r\n            });\r\n        connectorDef.init(matterConstraint);\r\n       }\r\n       matterEngine.addMatterConnector(this);\r\n       */\r\n    }\r\n\r\n\r\n    public getShapePoints():Array<WorldPosition> {\r\n        //return( WorldDisplay.getPolygonPoints(Math.PI/4,4,this.getWidth()+this.get,this.getWorldPosition() ) ;\r\n        //return(this.connectorCircleBody.getShapePoints());\r\n        return( this.connectorShape.getShapePoints());\r\n    }\r\n\r\n\r\n    /**\r\n     * Getter mockConnectorDefArray\r\n     * @return {Array<MockConnectorDef>}\r\n     */\r\n\tpublic get mockConnectorDefArray(): Array<MockConnectorDef> {\r\n\t\treturn this._mockConnectorDefArray;\r\n\t}\r\n\r\n    /**\r\n     * Setter mockConnectorDefArray\r\n     * @param {Array<MockConnectorDef>} value\r\n     */\r\n\tpublic set mockConnectorDefArray(value: Array<MockConnectorDef>) {\r\n\t\tthis._mockConnectorDefArray = value;\r\n\t}\r\n\r\n\r\n    public getEngineConnectorDefArray():Array<EngineConnectorDef> {\r\n        return(this.mockConnectorDefArray);\r\n    }\r\n\r\n/*\r\n    public getMiddleWorldPosition():WorldPosition {\r\n        let positions = new Array<WorldPosition>();\r\n        for(let i=0;i<this.mockConnectorDefArray.length;i++) positions.push(this.mockConnectorDefArray[i].engineShape.getWorldPosition());\r\n        let middle:WorldPosition = WorldDisplay.getAveragePostionFromPositionList(positions);\r\n        return(middle);\r\n    }\r\n*/\r\n\r\n    /**\r\n     * Getter connectorShape\r\n     * @return {EngineShape}\r\n     */\r\n\tpublic get connectorShape(): EngineShape {\r\n\t\treturn this._connectorShape;\r\n\t}\r\n\r\n    /**\r\n     * Setter connectorShape\r\n     * @param {EngineShape} value\r\n     */\r\n\tpublic set connectorShape(value: EngineShape) {\r\n\t\tthis._connectorShape = value;\r\n\t}\r\n\r\n\r\n    public containsWorldPosition(worldPosition:WorldPosition):boolean {\r\n        //return(this.connectorShape.containsWorldPosition(worldPosition));\r\n        return(false);\r\n    }\r\n\r\n    /*\r\n    public getWorldPosition():WorldPosition {\r\n        //return(this.getMiddleWorldPosition());\r\n        return(super.getWorldPosition());\r\n\r\n    }\r\n\r\n\tpublic translate(worldPosition:WorldPosition):void {\r\n    }\r\n\r\n\tpublic setWorldPosition(worldPosition:WorldPosition):void {\r\n    }\r\n\r\n    public containsWorldPosition(worldPosition:WorldPosition):boolean {\r\n        return(false);\r\n    }\r\n\r\n\tpublic getDrawable():Drawable {\r\n        return(this.drawableConnector);\r\n     }\r\n\r\n*/\r\n\r\n\r\n\r\n    /**\r\n     * Getter drawableConnector\r\n     * @return {DrawableConnector}\r\n     */\r\n\tpublic get drawableConnector(): DrawableConnector {\r\n\t\treturn this._drawableConnector;\r\n\t}\r\n\r\n    /**\r\n     * Setter drawableConnector\r\n     * @param {DrawableConnector} value\r\n     */\r\n\tpublic set drawableConnector(value: DrawableConnector) {\r\n\t\tthis._drawableConnector = value;\r\n\t}\r\n\r\n\r\n    /**\r\n     * Getter connectorCircleBody\r\n     * @return {Matter.Body}\r\n     *\r\n\tpublic get connectorCircleBody(): MockCircle {\r\n\t\treturn this._connectorCircleBody;\r\n\t}\r\n\r\n    /**\r\n     * Setter connectorCircleBody\r\n     * @param {Matter.Body} value\r\n     *\r\n\tpublic set connectorCircleBody(value: MockCircle) {\r\n\t\tthis._connectorCircleBody = value;\r\n\t}\r\n*/\r\n\r\n    \r\n\r\n}\r\n","import { EngineConnectorDef } from \"../../connectors/engineconnectordef\";\r\nimport { MockShape } from \"./mockshape\";\r\nimport { MockEngine } from \"../mockengine\";\r\n\r\nexport class MockConnectorDef extends EngineConnectorDef {\r\n    private _mockShape:MockShape;\r\n    private _matterConstraint:Matter.Constraint;\r\n\r\n    /*\r\n    constructor(matterShape:MatterShape,length:number,stiffness:number) {\r\n        super(matterShape,length,stiffness);\r\n        this.matterShape = matterShape; \r\n        this.matterConstraint = null;\r\n    }\r\n    */\r\n\r\n    constructor(mockEngine:MockEngine,engineConnectorDef:EngineConnectorDef) {\r\n\r\n        super(engineConnectorDef.engineShape,engineConnectorDef.connectorPositioner,engineConnectorDef.length,engineConnectorDef.stiffness);\r\n        /*\r\n        if(!mockEngine.has(engineConnectorDef.engineShape.getWorldId()))\r\n            throw new Error(\"Error creating MatterConnectorDef, matterShape not found.  WorldId is : \"+\r\n            engineConnectorDef.engineShape.getWorldId().id);\r\n        this.matterShape = mockEngine.matterShapes.get(engineConnectorDef.engineShape.getWorldId()); \r\n        this.matterConstraint = null;\r\n        */\r\n    }\r\n\r\n    public init():void {\r\n    }\r\n\r\n    /**\r\n     * Getter mockShape\r\n     * @return {MockShape}\r\n     */\r\n\tpublic get mockShape(): MockShape {\r\n\t\treturn this._mockShape;\r\n\t}\r\n\r\n    /**\r\n     * Setter mockShape\r\n     * @param {MockShape} value\r\n     */\r\n\tpublic set mockShape(value: MockShape) {\r\n\t\tthis._mockShape = value;\r\n\t}\r\n\r\n\r\n}","import { WorldPosition } from \"../../../world/worldposition\";\r\nimport { Drawable } from \"../../../display/drawable\";\r\nimport { MockShape } from \"./mockshape\";\r\nimport { WorldId } from \"../../../world/worldid\";\r\nimport { MockEngine } from \"../mockengine\";\r\nimport { PolygonEngineShape } from \"../../shapes/polygonengineshape\";\r\nimport { WorldDisplay } from \"../../../display/worlddisplay\";\r\n\r\n\r\nexport class MockPolygon extends MockShape implements PolygonEngineShape\r\n{\r\n    private _polygonPointArray:Array<WorldPosition>;\r\n    private _numberOfSides:number;\r\n    private _radius:number;\r\n    \r\n\r\n    constructor(worldId:WorldId,drawable:Drawable,numberOfSides:number,radius:number,worldPosition:WorldPosition,options:any,mockEngine:MockEngine)    \r\n\t{\r\n        super(worldId,drawable,worldPosition,options);\r\n        this.radius = radius;\r\n        this.numberOfSides = numberOfSides;\r\n        this.polygonPointArray = WorldDisplay.getPolygonPoints(0,numberOfSides,radius,worldPosition);\r\n\t\tdrawable.init(this,options);\r\n\t}\r\n\r\n\tpublic containsWorldPosition(worldPosition:WorldPosition):boolean {\r\n        //if(this.boundingBox.containsPosition(position,node)) return false;\r\n        \r\n        let i = 0;\r\n        let j = 0;\r\n        let c = false;\r\n        for(i=0,j=this.polygonPointArray.length-1;i< this.polygonPointArray.length;j=i++)\r\n        {\r\n            //\r\n            var pi = this.polygonPointArray[i];\r\n            var pj = this.polygonPointArray[j];\r\n                \r\n            if (\r\n                ((pi.y>worldPosition.y) != (pj.y>worldPosition.y)) &&\r\n                    (worldPosition.x < (pj.x-pi.x) *\r\n                    (worldPosition.y-pi.y) /\r\n                    (pj.y-pi.y) +\r\n                    pi.x) )\r\n                c = !c;\r\n        }\r\n        return c;\r\n    }\r\n\r\n    public getRadius():number {\r\n        return(this.radius);\r\n    }\r\n\r\n    public getNumberOfSides():number {\r\n        return(this.numberOfSides);\r\n    }\r\n\r\n    public \tgetShapePoints():Array<WorldPosition> {\r\n        return(this.polygonPointArray);\r\n    }    \r\n\r\n    public \tgetPointList():Array<WorldPosition> {\r\n        return(this.polygonPointArray);\r\n    }    \r\n\r\n    public translate(worldPosition:WorldPosition):void {\r\n        super.translate(worldPosition);\r\n        //this.polygonPointArray = WorldDisplay.getPolygonPoints(0,this.numberOfSides,this.radius,worldPosition);\r\n        \r\n            for(let i=0;i<this.polygonPointArray.length;i++) \r\n                this.polygonPointArray[i].translate(this.getWorldPosition());\r\n\t}\r\n\r\n\t\r\n\tpublic setWorldPosition(worldPosition:WorldPosition):void {\r\n       super.setWorldPosition(worldPosition);\r\n       this.polygonPointArray = WorldDisplay.getPolygonPoints(0,this.numberOfSides,this.radius,this.getWorldPosition());\r\n\r\n       // TODO this is not working becasue it moves all points to the same point... it should be getting the offset from the set\r\n       // position and moving each point by that amount\r\n      //  for(let i=0;i<this.polygonPointArray.length;i++) \r\n      //    this.polygonPointArray[i].setWorldPosition(this.getWorldPosition());\r\n\t}\r\n\r\n\r\n\t\r\n\r\n    public getPolygonPoints():Array<WorldPosition> {\r\n        return(this.polygonPointArray);\r\n\r\n    }\r\n    \r\n\r\n\tpublic get radius(): number {\r\n\t\treturn this._radius;\r\n\t}\r\n\r\n\tpublic set radius(value: number) {\r\n\t\tthis._radius = value;\r\n\t}\r\n    \r\n\r\n\r\n\tpublic get polygonPointArray(): Array<WorldPosition> {\r\n\t\treturn this._polygonPointArray;\r\n\t}\r\n\r\n\tpublic set polygonPointArray(value: Array<WorldPosition>) {\r\n\t\tthis._polygonPointArray = value;\r\n\t}\r\n\r\n\r\n\tpublic get numberOfSides(): number {\r\n\t\treturn this._numberOfSides;\r\n\t}\r\n\r\n\tpublic set numberOfSides(value: number) {\r\n\t\tthis._numberOfSides = value;\r\n\t}\r\n\r\n}\r\n","import { RectangleEngineShape } from \"../../shapes/rectangleengineshape\";\r\nimport { WorldPosition } from \"../../../world/worldposition\";\r\nimport { Drawable } from \"../../../display/drawable\";\r\nimport { MockShape } from \"./mockshape\";\r\nimport { WorldId } from \"../../../world/worldid\";\r\nimport { MockEngine } from \"../mockengine\";\r\n\r\nexport class MockRectangle extends MockShape implements RectangleEngineShape\r\n{\r\n\tprivate _width:number;\r\n\tprivate _height:number;\r\n\r\n\tconstructor(worldId:WorldId,drawable:Drawable,width:number,height:number,position:WorldPosition,options:any,mockEngine:MockEngine)\r\n\t{\r\n\t\tsuper(worldId,drawable,position,options);\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\t\r\n\t\tdrawable.init(this,options);\r\n\t}\r\n\r\n\tpublic setSize(width:number,height:number) {\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\r\n\t}\r\n\r\n\tpublic containsWorldPosition(worldPosition:WorldPosition):boolean {\r\n\t\treturn(\r\n\t\t\t(\r\n\t\t\t\t\t\t\t(this.getWorldPosition().x-this.getWidth()/2)<=worldPosition.x &&\r\n\t\t\t\t\t\t\t(this.getWorldPosition().x+this.getWidth()/2)>=worldPosition.x &&\r\n\t\t\t\t\t\t\t(this.getWorldPosition().y-this.getHeight()/2)<=worldPosition.y &&\r\n\t\t\t\t\t\t\t(this.getWorldPosition().y+this.getHeight()/2)>=worldPosition.y\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\tpublic getShapePoints():Array<WorldPosition> {\r\n\t\t//return( WorldDisplay.getPolygonPoints(Math.PI/4,4,this.getWidth()+this.get,this.getWorldPosition() ) ;\r\n\t\tlet polygonPointArray = Array<WorldPosition>();\t\r\n\r\n\r\n\t\tpolygonPointArray.push( new WorldPosition(\r\n\t\t\tthis.getWorldPosition().x+this.getWidth()/2,\r\n\t\t\tthis.getWorldPosition().y+this.getHeight()/2 ) );\r\n\r\n\t\tpolygonPointArray.push( new WorldPosition(\r\n\t\t\tthis.getWorldPosition().x+this.getWidth()/2,\r\n\t\t\tthis.getWorldPosition().y-this.getHeight()/2 ) );\r\n\r\n\t\tpolygonPointArray.push( new WorldPosition(\r\n\t\t\tthis.getWorldPosition().x-this.getWidth()/2,\r\n\t\t\tthis.getWorldPosition().y-this.getHeight()/2 ) );\r\n\r\n\t\tpolygonPointArray.push( new WorldPosition(\r\n\t\t\tthis.getWorldPosition().x-this.getWidth()/2,\r\n\t\t\tthis.getWorldPosition().y+this.getHeight()/2 ) );\r\n\r\n\t\treturn(polygonPointArray);    }\r\n\r\n\tpublic getWidth():number {\r\n\t\treturn(this.width);\r\n\t}\r\n\tpublic getHeight():number {\r\n\t\treturn(this.height);\r\n\t}\r\n\r\n\tpublic get width(): number {\r\n\t\treturn this._width;\r\n\t}\r\n\r\n\tpublic set width(value: number) {\r\n\t\tthis._width = value;\r\n\t}\r\n\r\n\tpublic get height(): number {\r\n\t\treturn this._height;\r\n\t}\r\n\r\n\tpublic set height(value: number) {\r\n\t\tthis._height = value;\r\n\t}\r\n\r\n\r\n\r\n}\r\n","import { RectangleEngineShape } from \"../../shapes/rectangleengineshape\";\r\nimport { WorldPosition } from \"../../../world/worldposition\";\r\nimport { Drawable } from \"../../../display/drawable\";\r\nimport { MockShape } from \"./mockshape\";\r\nimport { WorldId } from \"../../../world/worldid\";\r\nimport { MockEngine } from \"../mockengine\";\r\nimport { MockRectangle } from \"./mockrectangle\";\r\nimport { TextEngineShape } from \"../../shapes/textengineshape\";\r\nimport { DrawableText } from \"../../../display/drawableshapes/drawabletext\";\r\n\r\nexport class MockRectangleText extends MockRectangle implements TextEngineShape\r\n{\r\n    private _drawableText:DrawableText;\r\n\r\n\r\n\tconstructor(worldId:WorldId,drawableText:DrawableText,width:number,height:number,position:WorldPosition,options:any,mockEngine:MockEngine)\r\n\t{\r\n        super(worldId,drawableText,width,height,position,options,mockEngine);\r\n        this.drawableText = drawableText;\r\n\r\n/*\r\n\t\tsuper(worldId,drawable,position,options);\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\t\r\n        drawable.init(this,options);\r\n        */\r\n\t}\r\n    public setText(displayText:string):void {\r\n        this.drawableText.setText(displayText);\r\n    }\r\n\r\n\tpublic getText():string {\r\n        return(this.drawableText.getText());\r\n    }\r\n\r\n    /**\r\n     * Getter drawableText\r\n     * @return {DrawableText}\r\n     */\r\n\tpublic get drawableText(): DrawableText {\r\n\t\treturn this._drawableText;\r\n\t}\r\n\r\n    /**\r\n     * Setter drawableText\r\n     * @param {DrawableText} value\r\n     */\r\n\tpublic set drawableText(value: DrawableText) {\r\n\t\tthis._drawableText = value;\r\n\t}\r\n\r\n\r\n\r\n}\r\n","import { WorldPosition } from \"../../../world/worldposition\";\r\nimport { Drawable } from \"../../../display/drawable\";\r\nimport { WorldObject } from \"../../../world/worldobject\";\r\nimport { WorldId } from \"../../../world/worldid\";\r\nimport { WorldObjectEventHandler } from \"../../../world/worldobjecteventhandler\";\r\nimport { World } from \"../../../world/world\";\r\nimport { CanvasMouse } from \"../../../display/canvas/canvasmouse\";\r\n\r\n//import { World } from \"../../walkerworld/world\";\r\n//import { WorldObjectDisplay } from \"../worldobjectdisplay\";\r\n\r\nexport abstract class MockShape implements WorldObject  \r\n{\r\n\tprivate _drawable:Drawable;\r\n\tprivate _worldId:WorldId;\r\n\tprivate _isObjectAnimated:boolean;\r\n\tprivate _isObjectVisable:boolean;\r\n\tprivate _isObjectSelected:boolean;\r\n\tprivate _objectOptions:any;\r\n\tprivate _worldObjectEventHandler:WorldObjectEventHandler;\r\n\r\n\tprivate _position:WorldPosition; \r\n\r\n    constructor(worldId:WorldId,drawable:Drawable,position:WorldPosition,options:any) {\r\n\t\tthis.worldId = worldId;\r\n\t\tthis.drawable = drawable;\r\n\t\tthis.isObjectAnimated = true;\r\n\t\tthis.isObjectVisable = true;\r\n\t\tthis.isObjectSelected = true;\r\n\t\tthis.drawable = drawable;\r\n\t\tthis.position = position;\r\n\t\tthis.worldObjectEventHandler = this.createMouseEventHandler();\r\n\t}\r\n\r\n\tpublic stopRotation():void {\r\n\t\t// its a mock engine, nothng to do here :)\r\n\t}\r\n\r\n\r\n\tpublic \tcreateMouseEventHandler():WorldObjectEventHandler {\r\n\t\tlet woe:WorldObjectEventHandler = \r\n\t   {\r\n\t\t   pointerDownEvent : function (world:World,canvasMouse:CanvasMouse,event:MouseEvent):void {},\r\n\t\t   pointerMoveEvent : function (world:World,canvasMouse:CanvasMouse,event:MouseEvent):void {},\r\n\t\t   pointerUpEvent : function (world:World,canvasMouse:CanvasMouse,event:MouseEvent):void {}\r\n\t   }\r\n\t   return(woe);\r\n   }\r\n   public getWorldObjectEventHandler():WorldObjectEventHandler {\r\n\treturn(this.worldObjectEventHandler);\r\n\r\n   }\r\n\r\n   public setWorldObjectEventHandler(worldObjectEventHandler:WorldObjectEventHandler):void {\r\n\tthis.worldObjectEventHandler = worldObjectEventHandler;\r\n\t}\r\n\t\r\n\tpublic isAnimated(): boolean { return(this.isObjectAnimated); }\r\n\tpublic isSelected(): boolean { return(this.isObjectSelected); }\r\n\tpublic isVisable():boolean { return(this.isObjectVisable); }\r\n\tpublic getWorldId(): WorldId { return(this.worldId); }\r\n\tpublic getOptions(): any { return(this.objectOptions); }\r\n\r\n\tpublic setAnimated(animated:boolean):void { this.isObjectAnimated = animated; }\r\n\tpublic setSelected(selected:boolean): void { this.isObjectSelected = selected; }\r\n\tpublic setVisable(visable:boolean):void { this.isObjectVisable = visable; }\r\n\t\r\n\tpublic scaleShape(scaleX:number,scaleY:number):void {\r\n\t\tconsole.error(\"scaleShape NOT IMPLMENTED\");\r\n\t\t\r\n\t}\r\n    public getWorldPosition():WorldPosition {\r\n\t\treturn(this.position );\r\n\t}\r\n\r\n\tpublic setWorldPosition(worldPosition:WorldPosition):void {\r\n\t\t//this.position.x = worldPosition.x;\r\n\t\t//this.position.y = worldPosition.y;\r\n\t\tthis.position.setWorldPosition(worldPosition);\r\n\t}\r\n\r\n\tpublic translate(worldPosition:WorldPosition):void {\r\n\t\t//this.position.x = worldPosition.x;\r\n\t\t//this.position.y = worldPosition.y;\r\n\t\tthis.position.translate(worldPosition);\r\n\t\t\r\n\t}\r\n\r\n    /**\r\n     * Getter worldObjectEventHandler\r\n     * @return {WorldObjectEventHandler}\r\n     */\r\n\tpublic get worldObjectEventHandler(): WorldObjectEventHandler {\r\n\t\treturn this._worldObjectEventHandler;\r\n\t}\r\n\r\n    /**\r\n     * Setter worldObjectEventHandler\r\n     * @param {WorldObjectEventHandler} value\r\n     */\r\n\tpublic set worldObjectEventHandler(value: WorldObjectEventHandler) {\r\n\t\tthis._worldObjectEventHandler = value;\r\n\t}\r\n\r\n\tpublic abstract containsWorldPosition(worldPosition:WorldPosition):boolean;\r\n\r\n    public getDrawable():Drawable {\r\n        return(this.drawable);\r\n    }\r\n\r\n\r\n\tpublic get drawable(): Drawable {\r\n\t\treturn this._drawable;\r\n\t}\r\n\r\n\tpublic set drawable(value: Drawable) {\r\n\t\tthis._drawable = value;\r\n\t}\r\n    \r\n\r\n\tpublic get position(): WorldPosition {\r\n\t\treturn this._position;\r\n\t}\r\n\r\n\tpublic set position(value: WorldPosition) {\r\n\t\tthis._position = value;\r\n\t}\r\n\r\n\tpublic get worldId(): WorldId {\r\n\t\treturn this._worldId;\r\n\t}\r\n\r\n\tpublic set worldId(value: WorldId) {\r\n\t\tthis._worldId = value;\r\n\t}\r\n\r\n\tpublic get isObjectAnimated(): boolean {\r\n\t\treturn this._isObjectAnimated;\r\n\t}\r\n\r\n\tpublic set isObjectAnimated(value: boolean) {\r\n\t\tthis._isObjectAnimated = value;\r\n\t}\r\n\r\n\tpublic get isObjectVisable(): boolean {\r\n\t\treturn this._isObjectVisable;\r\n\t}\r\n\r\n\tpublic set isObjectVisable(value: boolean) {\r\n\t\tthis._isObjectVisable = value;\r\n\t}\r\n\r\n\tpublic get isObjectSelected(): boolean {\r\n\t\treturn this._isObjectSelected;\r\n\t}\r\n\r\n\tpublic set isObjectSelected(value: boolean) {\r\n\t\tthis._isObjectSelected = value;\r\n\t}\r\n\r\n\tpublic get objectOptions(): any {\r\n\t\treturn this._objectOptions;\r\n\t}\r\n\r\n\tpublic set objectOptions(value: any) {\r\n\t\tthis._objectOptions = value;\r\n\t}\r\n\r\n}\r\n","import { CanvasHolderHTML } from \"./display/canvas/canvasholderhtml\";\r\nimport { MockEngine } from \"./engine/mockengine/mockengine\";\r\nimport { WorldOfWorldObjects } from \"./world/worldofworldobjects\";\r\nimport { CircleDisplayShape } from \"./display/drawableshapes/circledisplayshape\";\r\nimport { WorldPosition } from \"./world/worldposition\";\r\nimport { WorldId } from \"./world/worldid\";\r\nimport { CircleEngineShape } from \"./engine/shapes/circleengineshape\";\r\nimport { RectangleEngineShape } from \"./engine/shapes/rectangleengineshape\";\r\nimport { RectangleDisplayShape } from \"./display/drawableshapes/rectangledisplayshape\";\r\nimport { PolygonEngineShape } from \"./engine/shapes/polygonengineshape\";\r\nimport { PolygonDisplayShape } from \"./display/drawableshapes/polygondisplayshape\";\r\nimport { TextDisplayShape } from \"./display/drawableshapes/textdisplayshape\";\r\nimport { Test1 } from \"./test1\";\r\n\r\n\r\nexport let mockEngine = new MockEngine();\r\nexport let world:WorldOfWorldObjects = new WorldOfWorldObjects(mockEngine);\r\nexport let canvasHolder:CanvasHolderHTML = new CanvasHolderHTML(\"worldCanvas\",world);\r\nexport let test1 = new Test1(mockEngine,world,canvasHolder);\r\n\r\n","import { CanvasHolderHTML } from \"./display/canvas/canvasholderhtml\";\r\nimport { WorldOfWorldObjects } from \"./world/worldofworldobjects\";\r\nimport { CircleDisplayShape } from \"./display/drawableshapes/circledisplayshape\";\r\nimport { WorldPosition } from \"./world/worldposition\";\r\nimport { WorldId } from \"./world/worldid\";\r\nimport { CircleEngineShape } from \"./engine/shapes/circleengineshape\";\r\nimport { RectangleEngineShape } from \"./engine/shapes/rectangleengineshape\";\r\nimport { RectangleDisplayShape } from \"./display/drawableshapes/rectangledisplayshape\";\r\nimport { TextDisplayShape } from \"./display/drawableshapes/textdisplayshape\";\r\nimport { PolygonDisplayShape } from \"./display/drawableshapes/polygondisplayshape\";\r\nimport { PolygonEngineShape } from \"./engine/shapes/polygonengineshape\";\r\nimport { TextEngineShape } from \"./engine/shapes/textengineshape\";\r\nimport { WorldEngine } from \"./engine/worldengine\";\r\nimport { World } from \"./world/world\";\r\nimport { EngineConnector } from \"./engine/connectors/engineconnector\";\r\nimport { EngineConnectorDef } from \"./engine/connectors/engineconnectordef\";\r\nimport { LineConnectorDisplay } from \"./display/drawableshapes/lineconnectordisplay\";\r\nimport { PositionerFree } from \"./engine/connectors/connectorpositioners/positionerfree\";\r\nimport { PositionerLockX } from \"./engine/connectors/connectorpositioners/positionerlockx\";\r\nimport { PositionerLockY } from \"./engine/connectors/connectorpositioners/positionerlockxy\";\r\n\r\nexport class Test1 {\r\n\r\n    constructor(worldEngine:WorldEngine,world:World,canvasHolder:CanvasHolderHTML) {\r\n\r\n       let circle1:CircleEngineShape = world.worldEngine.createCircle(\r\n          new WorldId(\"circle1\"),\r\n          new CircleDisplayShape(),\r\n          30,8,\r\n          new WorldPosition(400,400),\r\n          {restitution:0.9}\r\n        );\r\n        \r\n      let circle2:CircleEngineShape = world.worldEngine.createCircle(\r\n        new WorldId(\"circle2\"),\r\n        new CircleDisplayShape(),\r\n        40,8,\r\n        new WorldPosition(300,300),\r\n        {restitution:0.9}\r\n      );\r\n      \r\n        \r\n      let rectangle1:RectangleEngineShape = world.worldEngine.createRectangle(\r\n        new WorldId(\"rectangle1\"),\r\n        new RectangleDisplayShape(),\r\n        40,40,\r\n        new WorldPosition(100,100),\r\n        {}\r\n      );\r\n      \r\n      let polygon1:PolygonEngineShape = world.worldEngine.createPolygon(\r\n        new WorldId(\"polygon1\"),\r\n        new PolygonDisplayShape(),\r\n        5,40,\r\n        new WorldPosition(400,100),\r\n        {}\r\n      );\r\n      \r\n      \r\n      let textBox1:TextEngineShape = world.worldEngine.createTextBox(\r\n        new WorldId(\"textbox1\"),\r\n        new TextDisplayShape(\r\n          new RectangleDisplayShape(),\r\n          \"SomeText Mg\\nAnd more text Mg\"),\r\n        100,100,\r\n        new WorldPosition(550,550),\r\n        {}\r\n      );\r\n            \r\n      \r\n      \r\n      let textBox2:TextEngineShape = world.worldEngine.createTextBox(\r\n        new WorldId(\"textbox2\"),\r\n        new TextDisplayShape(\r\n          new RectangleDisplayShape(),\r\n          \"hey there friend Mg\"),\r\n        //80,20,\r\n        100,100,\r\n        new WorldPosition(150,550),\r\n        {}\r\n      );\r\n      \r\n      let textBox3:TextEngineShape = world.worldEngine.createTextBox(\r\n        new WorldId(\"textbox3\"),\r\n        new TextDisplayShape(\r\n          new RectangleDisplayShape(),\r\n          \"SomeText Mg\\nAnd more text Mg\\nSomeText Mg\\nAnd more text Mg\\nSomeText Mg\\nAnd more text Mg\\nSomeText Mg\\nAnd MOOORE text Mg\"),\r\n          100,100,\r\n          new WorldPosition(550,250),\r\n        {}\r\n      );\r\n      \r\n      let c1A:EngineConnectorDef = new EngineConnectorDef(textBox1,new PositionerLockX(),200,0.1);\r\n      let c1B:EngineConnectorDef = new EngineConnectorDef(textBox2,new PositionerLockY(),200,1);\r\n\r\n      let c1Circle:CircleEngineShape = world.worldEngine.createCircle(\r\n        new WorldId(\"c1Circle\"),\r\n        new CircleDisplayShape(),\r\n        40,8,\r\n        new WorldPosition(300,300),\r\n        {restitution:0.9}\r\n      );\r\n      \r\n      let connector1:EngineConnector = world.worldEngine.createConnector(\r\n        new WorldId(\"connector1\"),\r\n        new LineConnectorDisplay(),//drawableConnector:DrawableConnector,\r\n        c1Circle,//connectorShape:EngineShape,\r\n        [c1A,c1B],\r\n        {}\r\n      );\r\n\r\n      \r\n      world.addWorldObject(circle1);\r\n      world.addWorldObject(circle2);\r\n      world.addWorldObject(rectangle1);\r\n      world.addWorldObject(polygon1);\r\n      world.addWorldObject(textBox1);\r\n      world.addWorldObject(textBox2);\r\n      world.addWorldObject(textBox3);\r\n      world.addWorldObject(connector1);\r\n\r\n      world.addWorldObject(c1Circle);\r\n\r\n      world.addWorldObject(world.worldEngine.getMouseAnchor());\r\n      \r\n      \r\n      worldEngine.createBounds(canvasHolder.getWidth(),canvasHolder.getHeight(),{restitution:0.9});\r\n      let interval:number = 1000/30; //one millisecond over beat per second\r\n      console.log(\"drawing every : \"+interval+\"ms\");\r\n      setInterval(doDraw,interval);\r\n      \r\n      worldEngine.startEngine();\r\n      function doDraw()\r\n      {\r\n        world.drawWorld(canvasHolder);\t\r\n      }\r\n    }\r\n\r\n}","//import { MatterTools } from \"../matterengine/mattertools\";\r\n//import { World } from \"../walkerworld/world\";\r\n//import { MatterEvent } from \"../matterengine/matterevent\";\r\n//import { MatterCollisionEvent } from \"../matterengine/mattercollisionevent\";\r\n//import { DisplayHolder } from \"../display/displayholder\";\r\nimport { WorldEngine } from \"../engine/worldengine\";\r\nimport { WorldPosition } from \"./worldposition\";\r\nimport { WorldObject } from \"./worldobject\";\r\nimport { CanvasHolder } from \"../display/canvas/canvasholder\";\r\nimport { WorldId } from \"./worldid\";\r\n\r\n\r\nexport abstract class World {\r\n\r\n   // private _displayHolder:DisplayHolder;\r\n\tprivate _worldEngine:WorldEngine;\r\n\r\n    constructor(worldEngine:WorldEngine){\r\n\t\tthis.worldEngine = worldEngine;\r\n\t}\r\n\r\n\tpublic abstract addWorldObject(worldObject:WorldObject):void;\r\n\r\n    public abstract getWorldObjectMatchingWorldId(worldId:WorldId):WorldObject;\r\n\t\r\n\tpublic abstract getWorldObjectContainingPosition(worldPosition:WorldPosition):WorldObject;\r\n\r\n\tpublic abstract drawWorld(canvasHolder:CanvasHolder):void;\r\n\r\n\tpublic get worldEngine(): WorldEngine {\r\n\t\treturn this._worldEngine;\r\n\t}\r\n\r\n\tpublic set worldEngine(value: WorldEngine) {\r\n\t\tthis._worldEngine = value;\r\n\t}\r\n    \r\n}","\r\nexport class WorldId {\r\n    private _id:string;\r\n\r\n    public constructor(woldObjectId:string) {\r\n        this.id = woldObjectId;\r\n\t}\r\n\t\r\n\tpublic matches(worldId:WorldId):boolean {\r\n\t\treturn(this.id==worldId.id);\r\n\t}\r\n\r\n\tpublic get id(): string {\r\n\t\treturn this._id;\r\n\t}\r\n\r\n\tpublic set id(value: string) {\r\n\t\tthis._id = value;\r\n\t}\r\n\r\n}","import { WorldEngine } from \"../engine/worldengine\";\r\nimport { WorldObject } from \"./worldobject\";\r\nimport { World } from \"./world\";\r\nimport { CanvasHolder } from \"../display/canvas/canvasholder\";\r\nimport { WorldPosition } from \"./worldposition\";\r\nimport { WorldId } from \"./worldid\";\r\n\r\n\r\nexport class WorldOfWorldObjects extends World{\r\n\r\n    private _worldObjectArray:Array<WorldObject>;\r\n\r\n    constructor(worldEngine:WorldEngine){\r\n        super(worldEngine);\r\n        this.worldObjectArray = new Array<WorldObject>();\r\n\t}\r\n\t\r\n\t\r\n\tpublic drawWorld(canvasHolder:CanvasHolder):void {\r\n        let context = canvasHolder.getContext();\r\n        canvasHolder.clearCanvas();\r\n        for(let i=0;i<this.worldObjectArray.length;i++) {\r\n            let worldObject:WorldObject = this.worldObjectArray[i];\r\n            worldObject.getDrawable().draw(context);\r\n        }\r\n    }\r\n\r\n    public addWorldObject(worldObject:WorldObject):void {\r\n        this.worldObjectArray.push(worldObject);\r\n    }\r\n\r\n\r\n    public getWorldObjectMatchingWorldId(worldId:WorldId):WorldObject {\r\n        let foundObject:WorldObject = null;\r\n        for(let i=0;i<this.worldObjectArray.length;i++) {\r\n            ////console.log(\"this.worldObjectArray.length=\"+this.worldObjectArray.length+\":i=\"+i);\r\n            let worldObject:WorldObject = this.worldObjectArray[i];\r\n            ////console.log(\"    worldObject.position=\"+worldObject.getWorldPosition());\r\n            if(worldObject.getWorldId().matches(worldId)) foundObject = worldObject;\r\n        }\r\n        return(foundObject);\r\n    }\r\n\r\n\r\n    public getWorldObjectContainingPosition(worldPosition:WorldPosition):WorldObject {\r\n        let foundObject:WorldObject = null;\r\n        for(let i=0;i<this.worldObjectArray.length;i++) {\r\n            ////console.log(\"this.worldObjectArray.length=\"+this.worldObjectArray.length+\":i=\"+i);\r\n            let worldObject:WorldObject = this.worldObjectArray[i];\r\n            ////console.log(\"    worldObject.position=\"+worldObject.getWorldPosition());\r\n            if(worldObject.containsWorldPosition(worldPosition) && worldObject!=this.worldEngine.getMouseAnchor()) foundObject = worldObject;\r\n        }\r\n        return(foundObject);\r\n    }\r\n\r\n    /**\r\n     * Getter worldObjectArray\r\n     * @return {Array<WorldObject>}\r\n     */\r\n\tpublic get worldObjectArray(): Array<WorldObject> {\r\n\t\treturn this._worldObjectArray;\r\n\t}\r\n\r\n    /**\r\n     * Setter worldObjectArray\r\n     * @param {Array<WorldObject>} value\r\n     */\r\n\tpublic set worldObjectArray(value: Array<WorldObject>) {\r\n\t\tthis._worldObjectArray = value;\r\n\t}\r\n    \r\n}","import { WorldObject } from \"./worldobject\";\r\n\r\n\r\nexport class WorldPosition {\r\n    private _x:number;\r\n    private _y:number;\r\n\r\n    public constructor(x:number,y:number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n\tpublic get x(): number {\r\n\t\treturn this._x;\r\n\t}\r\n\r\n\tpublic set x(value: number) {\r\n\t\tthis._x = value;\r\n\t}\r\n\r\n\tpublic get y(): number {\r\n\t\treturn this._y;\r\n\t}\r\n\r\n\tpublic set y(value: number) {\r\n\t\tthis._y = value;\r\n\t}\r\n\r\n\tpublic clone():WorldPosition {\r\n\t\treturn(new WorldPosition(this.x,this.y));\r\n\t}\r\n\r\n\tpublic translate(worldPosition:WorldPosition):void {\r\n\t\t//this.x = this.x + worldPosition.x;\r\n\t\t//this.y = this.y + worldPosition.y;\r\n\t\tthis.x = worldPosition.x;\r\n\t\tthis.y = worldPosition.y;\r\n\t}\r\n\r\n\tpublic setWorldPosition(worldPosition:WorldPosition):void {\r\n\t\tthis.x = worldPosition.x;\r\n\t\tthis.y = worldPosition.y;\r\n\t\t\r\n\t}\r\n\r\n\tpublic getDeltaY(worldPosition:WorldPosition):number\r\n\t{\r\n\t\t\treturn(this.y-worldPosition.y);\r\n\t}\r\n\r\n\tpublic getDeltaX(worldPosition:WorldPosition):number\r\n\t{\r\n\t\t\treturn(this.x-worldPosition.x);\r\n\t}\r\n\r\n\tpublic getDelta(worldPosition:WorldPosition):WorldPosition\r\n\t{\r\n\t\t\treturn(new WorldPosition(this.getDeltaX(worldPosition),this.getDeltaY(worldPosition)));\r\n\t}\r\n\r\n\tpublic equals(worldPosition:WorldPosition):boolean\r\n\t{\r\n\t\treturn( (this.x==worldPosition.x) && (this.y==worldPosition.y) ) ;\r\n\t}\r\n\r\n\tpublic getDistance(worldPosition:WorldPosition):number\r\n\t{\r\n\t\treturn (Math.sqrt(Math.pow(this.getDeltaX(worldPosition), 2) + Math.pow(this.getDeltaY(worldPosition), 2)));\r\n\t}\r\n\r\n\tpublic static getAveragePostionFromWorldPositionList(positionList:Array<WorldPosition>):WorldPosition\r\n\t{\r\n\t\tlet x = 0.0;\r\n\t\tlet y = 0.0;\r\n\t\tfor(let i=0;i<positionList.length;i++)\r\n\t\t{\r\n\t\t\tlet p = positionList[i];\r\n\t\t\tx += p.x;\r\n\t\t\ty += p.y;\r\n\t\t}\r\n\t\tx = x / positionList.length;\r\n\t\ty = y / positionList.length;\r\n\t\treturn(new WorldPosition(x,y));\r\n\t}\r\n\r\n\tpublic static getAveragePostionFromWorldObjectList(worldObjectList:Array<WorldObject>):WorldPosition\r\n\t{\r\n\t  let x = 0.0;\r\n\t  let y = 0.0;\r\n\t  for(var i=0;i<worldObjectList.length;i++)\r\n\t  {\r\n\t\t  var p = worldObjectList[i].getWorldPosition();\r\n\t\t  x += p.x;\r\n\t\t  y += p.y;\r\n\t  }\r\n\t  x = x / worldObjectList.length;\r\n\t  y = y / worldObjectList.length;\r\n\t  return(new WorldPosition(x,y));\r\n\t}\r\n\r\n\tpublic static getPostionListFromNodeList(worldObjectList:Array<WorldObject>):Array<WorldPosition>\r\n\t{\r\n\t\tvar positions = new Array<WorldPosition>();\r\n\t\tfor (var i = 0; i < worldObjectList.length; i++)\r\n\t\t{\r\n\t\t\tpositions.push(worldObjectList[i].getWorldPosition());\r\n\t\t}\r\n\t\treturn(positions);\r\n\t}\r\n\r\n\r\n}"]}