{"version":3,"sources":["node_modules/browser-pack/_prelude.js","source/display/canvas/canvasholderhtml.ts","source/display/canvas/canvasmouse.ts","source/display/canvas/mouseeventhandlerworldobject.ts","source/display/canvas/mousestatus.ts","source/display/drawableshapes/circledisplayshape.ts","source/display/drawableshapes/lineconnectordisplay.ts","source/display/drawableshapes/polygondisplayshape.ts","source/display/drawableshapes/rectangledisplayshape.ts","source/display/drawableshapes/textdisplayshape.ts","source/display/worlddisplay.ts","source/engine/mockengine/mockengine.ts","source/engine/mockengine/shapes/mockcircle.ts","source/engine/mockengine/shapes/mockconnector.ts","source/engine/mockengine/shapes/mockconnectordef.ts","source/engine/mockengine/shapes/mockpolygon.ts","source/engine/mockengine/shapes/mockrectangle.ts","source/engine/mockengine/shapes/mockrectangletext.ts","source/engine/mockengine/shapes/mockshape.ts","source/engine/shapes/engineconnectordef.ts","source/main_mock.ts","source/test1.ts","source/world/world.ts","source/world/worldid.ts","source/world/worldofworldobjects.ts","source/world/worldposition.ts"],"names":["f","exports","module","define","amd","g","window","global","self","this","test_mock","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","canvasmouse_1","mouseeventhandlerworldobject_1","worlddisplay_1","CanvasHolderHTML","canvasName","world","isVisable","isDrawable","canvas","document","getElementById","context","getContext","canvasMouse","CanvasMouse","MouseEventHandlerWorldObject","prototype","clearCanvas","clearRect","getWidth","getHeight","fillStyle","WorldDisplay","getColorFromString","fillRect","getCanvas","isCanvasVisable","_isVisable","isCanvasDrawable","_isDrawable","Object","defineProperty","_canvasName","value","_canvas","_context","_canvasMouse","worldposition_1","canvasholderHTML","mouseEventHandler","offset","getCanvasOffset","addEventListener","event","pointerDownEvent","pointerMoveEvent","pointerUpEvent","offsetLeft","offsetTop","object","isNaN","element","offsetParent","hasOwnProperty","WorldPosition","_offset","_mouseEventHandler","mousestatus_1","mouseStatus","MouseStatus","currentWorldObject","lastWorldObject","getMouseStatus","worldObjectSelected","wWorldObject","worldObjectDeselected","getCurrentWorldObject","eventPosition","getWorldPositionFromMouseEvent","console","log","JSON","stringify","isDown","startPosition","position","setAnimated","setSelected","clickWorldObject","getWorldObjectContainingPosition","getWorldId","id","clone","clickOffset","getWorldPosition","getDelta","getWorldObjectEventHandler","worldEngine","pointerDownEngineEvent","pointerMoveEngineEvent","pointerUpEngineEvent","_mouseStatus","_currentWorldObject","_lastWorldObject","_isDown","_startPosition","_position","_clickOffset","CircleDisplayShape","circleEngineShape","init","options","_circleEngineShape","draw","strokeStyle","beginPath","arc","x","y","getRadius","Math","PI","closePath","fill","lineWidth","stroke","LineConnectorDisplay","engineConnector","positionConnectorShape","getEngineConnectorDefArray","drawConnectedLine","engineShape","_engineConnector","PolygonDisplayShape","polygonEngineShape","_polygonEngineShape","drawOutlinedShape","getPolygonPoints","RectangleDisplayShape","rectangleEngineShape","_rectangleEngineShape","getShapePoints","TextDisplayShape","rectangleDisplayShape","displayText","textImageData","getText","setText","woe","width","height","setWorldObjectEventHandler","_textImageData","_rectangleDisplayShape","_displayText","needsARedraw","setContextFont","textSize","metricsTextMutipleLines","Size","hPadding","vPadding","setSize","drawTextMutipleLines","getImageData","putImageData","stopRotation","fontStyle","fontFace","fontPixelHeight","fontColor","font","textAlign","_width","_height","getWorldPositionArrayFromObjects","worldObjectArray","worldPositionArray","Array","push","text","lineHeight","splitChar","lines","split","fillText","maxWidth","totalHeight","metrics","measureText","colorString","parseInt","substring","pageX","pageY","startAngle","numberOfSides","radius","polygonPointArray","angle","angleIncrement","cos","sin","point","moveTo","lineTo","getAveragePostionFromPositionList","positionList","p","getCirclePositionList","curvePoints","pointList","angleInc","rads","getTrianglePositionList","getRectanglePositionList","getArcPositionList","endAngle","abs","angle_1","fillTextMutipleLines","roundedRect","w","h","borderWitdh","borderColor","rectColor","arcTo","worldid_1","mockcircle_1","mockrectangle_1","mockpolygon_1","circledisplayshape_1","mockrectangletext_1","mockconnectordef_1","mockconnector_1","MockEngine","mouseAnchor","MockCircle","WorldId","restitution","isSensor","getMouseAnchor","createBounds","startEngine","createCircle","worldId","drawable","worldPosition","createRectangle","MockRectangle","createConnector","drawableConnector","connectorShape","engineConnectorDefArray","mockConnectorDefArrayDef","MockConnectorDef","MockConnector","createTextBox","textDisplayShape","MockRectangleText","createPolygon","MockPolygon","newPosition","translate","deltaPosition","newX","newY","setWorldPosition","_mouseAnchor","mockshape_1","_super","mockEngine","_this","__extends","containsWorldPosition","getDistance","_curvePoints","_radius","MockShape","engineconnectordef_1","mockConnectorDefArray","getDrawable","isAnimated","EngineConnectorDef","getWorldPositionArrayFromEngineDefs","_mockConnectorDefArray","_connectorShape","_drawableConnector","engineConnectorDef","stiffness","_mockShape","j","c","pi","pj","getNumberOfSides","getPointList","_polygonPointArray","_numberOfSides","drawableText","_drawableText","isObjectAnimated","isObjectVisable","isObjectSelected","worldObjectEventHandler","createMouseEventHandler","isSelected","getOptions","animated","selected","setVisable","visable","scaleShape","scaleX","scaleY","error","_worldObjectEventHandler","_drawable","_worldId","_isObjectAnimated","_isObjectVisable","_isObjectSelected","_objectOptions","_engineShape","_length","_stiffness","canvasholderhtml_1","mockengine_1","worldofworldobjects_1","test1_1","WorldOfWorldObjects","canvasHolder","test1","Test1","rectangledisplayshape_1","textdisplayshape_1","polygondisplayshape_1","lineconnectordisplay_1","doDraw","drawWorld","circle1","circle2","rectangle1","polygon1","textBox1","textBox2","textBox3","c1A","c1B","c1Circle","connector1","addWorldObject","setInterval","World","_worldEngine","woldObjectId","matches","_id","world_1","worldObject","getWorldObjectMatchingWorldId","foundObject","_worldObjectArray","_x","_y","getDeltaY","getDeltaX","equals","sqrt","pow","getAveragePostionFromWorldPositionList","getAveragePostionFromWorldObjectList","worldObjectList","getPostionListFromNodeList","positions"],"mappings":"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","file":"test_mock.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import { CanvasHolder } from \"./canvasholder\";\nimport { World } from \"../../world/world\";\nimport { CanvasMouse } from \"./canvasmouse\";\nimport { MouseEventHandlerWorldObject } from \"./mouseeventhandlerworldobject\";\nimport { WorldDisplay } from \"../worlddisplay\";\n\n\nexport class CanvasHolderHTML implements CanvasHolder\n{\n\tprivate _isVisable:boolean;\n\tprivate _isDrawable:boolean;\n\tprivate _canvasName:string;\n\tprivate _canvas:HTMLCanvasElement;\n\tprivate _context:CanvasRenderingContext2D;\n\tprivate _canvasMouse:CanvasMouse;\n\t\n\tconstructor(canvasName:string,world:World)\n\t{\n\t\tthis.canvasName = canvasName;\n\t\tthis.isVisable = true;\n\t\tthis.isDrawable = true;\n\t\tthis.canvas = <HTMLCanvasElement>document.getElementById(this.canvasName);\t\t\t\n\t\tthis.context = this.canvas.getContext(\"2d\");\n\t\tthis.canvasMouse = new CanvasMouse(world,this,new MouseEventHandlerWorldObject());\n\t\t/*if (typeof document !== 'undefined')\n\t\t{\n\t\t\tthis.canvas = document.getElementById(this.canvasName);\t\t\t\n\t\t\tthis.context = this.canvas.getContext('2d');\n\t\t}*/\n\t}\n\n\tpublic clearCanvas():void {\n\t\tif(this.isVisable && this.isDrawable)\n\t\t{\n\t\t\tthis.context.clearRect(0, 0, this.getWidth(), this.getHeight());\n\t\t\tthis.context.fillStyle = WorldDisplay.getColorFromString(\"ffffff\"+\"ff\");\n\t\t\tthis.context.fillRect(0, 0, this.getWidth(), this.getHeight());\n\t\t}\n\t}\n\n\tpublic getCanvas():HTMLCanvasElement {\n\t\treturn(this.canvas);\n\t}\n\n\tpublic getContext():CanvasRenderingContext2D {\n\t\treturn(this.context);\n\t}\n\t\n\tpublic getWidth():number\n\t{\n\t\treturn(this.canvas.width);\n\t}\n\t\n\tpublic getHeight():number\n\t{\n\t\treturn(this.canvas.height);\n\t}\n\n\tpublic isCanvasVisable(): boolean {\n\t\treturn this._isVisable;\n\t}\n\n\tpublic isCanvasDrawable(): boolean {\n\t\treturn this._isDrawable;\n\t}\n\n\tpublic get canvasName(): string {\n\t\treturn this._canvasName;\n\t}\n\n\tpublic set canvasName(value: string) {\n\t\tthis._canvasName = value;\n\t}\n\n\n\tpublic get canvas(): HTMLCanvasElement {\n\t\treturn this._canvas;\n\t}\n\n\tpublic set canvas(value: HTMLCanvasElement) {\n\t\tthis._canvas = value;\n\t}\n\n\tpublic get context(): CanvasRenderingContext2D {\n\t\treturn this._context;\n\t}\n\n\tpublic set context(value: CanvasRenderingContext2D) {\n\t\tthis._context = value;\n\t}\n\n\tpublic get isVisable(): boolean {\n\t\treturn this._isVisable;\n\t}\n\n\tpublic set isVisable(value: boolean) {\n\t\tthis._isVisable = value;\n\t}\n\n\tpublic get isDrawable(): boolean {\n\t\treturn this._isDrawable;\n\t}\n\n\tpublic set isDrawable(value: boolean) {\n\t\tthis._isDrawable = value;\n\t}\n\n\tpublic get canvasMouse(): CanvasMouse {\n\t\treturn this._canvasMouse;\n\t}\n\n\tpublic set canvasMouse(value: CanvasMouse) {\n\t\tthis._canvasMouse = value;\n\t}\n\t\n\t\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t/*\n\tstatic createCanvasHolderFromClientJson(worldDef,json)\n\t{\n\t  var canvasHolder = new CanvasHolder(json.canavsName,worldDef);\n\t  return(canvasHolder);\n\t}\n\t*/\n\t/*\n\t  getClientJson()\n\t  {\n\t\t  var json = {};\n\t\t  \n\t\t  \n\t\t  json.canvasName = this.canvasName;\n\t\t  json.origin = this.origin;\n\t\t  json.width = this.getWidth();\n\t\t  json.height = this.getHeight();\n\t\t  json.worldDef = this.worldDef;\n\t\t  \n\t\t  JSON.stringify(json);\n\t\t  return(json)\n\t  }\n\t*/\n\n\t/*  \n\tgetConnector(connectorDefKey,name)\n\t{\n\t\tvar connector = this.getConnectorDef(connectorDefKey)(this.worldDef,name);\n\t\tconnector.connectorDefKey = connectorDefKey;\n\t\treturn(connector);\n\t}\n\t*/\n\n\t/*\n\tgetConnectorDef(connectorDefKey)\n\t{\n\t\tvar connectorDef = this.worldDef.worldDisplay.connectorDefs[\"generic\"];\n\t\t\n\t\tvar foundConnectorDef = false;\n\t\tif(this.worldDef.worldDisplay.connectorDefs.hasOwnProperty(connectorDefKey))\n\t\t{\n\t\t\tconnectorDef = this.worldDef.worldDisplay.connectorDefs[connectorDefKey];\n\t\t\tfoundConnectorDef = true;\n\t\t}\n\t\tif(!foundConnectorDef) console.trace(\"CanvasHolder:getConnectorDef:connectorDefKey=\\\"\"+connectorDefKey+ \"\\\" was not found using generic\");\n\t\telse console.log(\"found connector display :\"+connectorDefKey);\n\t\tconnectorDef.connectorDefKey = connectorDefKey;\n\t\treturn(connectorDef);\n\t}\n\t*/\n\n\t/*\n\tgetConnectorDisplay(connectorDisplayKey)\n\t{\n\t\tvar connectorDisplay = this.worldDef.worldDisplay.connectorDisplay[\"generic\"];\n\t\t\n\t\tvar foundConnectorDisplay = false;\n\t\tif(this.worldDef.worldDisplay.connectorDisplay.hasOwnProperty(connectorDisplayKey))\n\t\t{\n\t\t\tconnectorDisplay = this.worldDef.worldDisplay.connectorDisplay[connectorDisplayKey];\n\t\t\tfoundConnectorDisplay = true;\n\t\t}\n\t\tif(!foundConnectorDisplay) console.trace(\"CanvasHolder:getConnectorDisplay:connectorDisplayKey=\\\"\"+connectorDisplayKey+ \"\\\" was not found using generic\");\n\t\tconnectorDisplay.connectorDisplayKey = connectorDisplayKey;\n\t\treturn(connectorDisplay);\n\t}\n\t*/\n\n\t/*\n\tgetGraphData(graphDataKey)\n\t{\n\t\tvar graphData = this.worldDef.worldDisplay.nodeDisplay[\"generic\"];\t\n\t\tvar foundGraphData = false;\n\t\tif(this.worldDef.worldDisplay.nodeDisplay.hasOwnProperty(graphDataKey))\n\t\t{\n\t\t\tgraphData = this.worldDef.worldDisplay.nodeDisplay[graphDataKey];\n\t\t\tfoundGraphData = true;\n\t\t}\n\t\tif(!foundGraphData) console.trace(\"CanvasHolder:getGraphData:graphDataKey=\\\"\"+graphDataKey+ \"\\\" was not found using generic\")\n\t\t//console.trace(\"CanvasHolder:getGraphData:graphDataKey=\\\"\"+graphDataKey+ \"\\\" was not found using generic\")\n\t\t//console.log(\"FOR:\"+graphDataKey+Common.toString(graphData));\n\t\t//console.log(\"getGraphData:graphDataKey=\"+graphDataKey+\":clone=\"+graphData.nodeDisplay.displayInfo.clone);\n\n\t\t//if(graphData.nodeDisplay.displayInfo.clone)\n\t\tif(graphData.nodeDisplayFunction)\n\t\t{\n\t\t\t//console.log(\"getGraphData:graphDataKey:FOUND A FUNCTION:\"+graphDataKey);\n\t\t\tgraphData = Object.create(graphData);\n\t\t\tgraphData.nodeDisplay = graphData.nodeDisplayFunction();\n\t\t\t//console.log(\"CLONING:\"+graphDataKey+Common.toString(graphData));\n\t\t\t//graphData.nodeDisplay.displayInfo = Object.create(graphData.nodeDisplay.displayInfo);\n\t\t\t//graphData.nodeDisplay.displayInfo  = JSON.parse(JSON.stringify(graphData.nodeDisplay.displayInfo));\n\t\t\t//graphData.nodeDisplay.displayInfo  = JSON.parse(JSON.stringify(graphData.nodeDisplay.displayInfo));\n\t\t\t//graphData = Object.create(graphData);\n\t\t\t//graphData.nodeDisplay.displayInfo.ts = new Date().getTime();\n\n\n\t\t}\n\n\t\tgraphData.graphDataKey = graphDataKey;\n\t\treturn(graphData);\n\t}\n\t*/\n\t/*\n\tclone(origin)\n\t{\n\t\tvar canvasHolder = new CanvasHolderHTML(this.canvasName);\n\t\t//canvasHolder.origin = origin;\n\t\t\n\t\tvar canvasHolder = new Object();\n\t\tcanvasHolder.origin = origin;\n\t\t\n\t\tcanvasHolder.canvasName = this.canvasName;\n\t\tcanvasHolder.canvas = this.canvas;\n\t\tcanvasHolder.context = this.context;\n\t\tcanvasHolder.isCanvasVisable = this.isCanvasVisable;\n\t\tcanvasHolder.isCanvasDrawable = this.isCanvasDrawable;\n\t\tcanvasHolder.isDrawable = this.isDrawable;\n\t\tcanvasHolder.isVisable = this.isVisable;\n\t\tcanvasHolder.getWidth = this.getWidth;\n\t\tcanvasHolder.getHeight = this.getHeight;\n\t\tcanvasHolder.worldDef = this.worldDef;\n\t\tcanvasHolder.getGraphData = this.getGraphData;\n\t\t\n\t\t\n\t\treturn(canvasHolder);\n\t}\n\t*/","import { WorldPosition } from \"../../world/worldposition\";\nimport { CanvasHolderHTML } from \"./canvasholderhtml\";\nimport { MouseEventHandler } from \"./mouseeventhandler\";\nimport { World } from \"../../world/world\";\n\n\nexport class CanvasMouse\n{\n\tprivate _offset:WorldPosition;\n\tprivate canvasholderHTML:CanvasHolderHTML;\n\tprivate _mouseEventHandler:MouseEventHandler;\n\t\n\n\tconstructor(world:World,canvasholderHTML:CanvasHolderHTML,mouseEventHandler:MouseEventHandler)\n\t{\n\t\tthis.canvasholderHTML = canvasholderHTML;\n\t\tthis.mouseEventHandler = mouseEventHandler;\n\t\tif(canvasholderHTML.isCanvasVisable()) \n\t\t{\n\t\t\t//this.offset = NodeCanvasMouse.getCanvasOffset(this.canvasholder.canvas);\n\t\t\tthis.offset = this.getCanvasOffset();\t\t\n\t\t\tvar self = this;\n\t\t\tthis.canvasholderHTML.canvas.addEventListener(\"pointerdown\", function(event) { self.pointerDownEvent(world,self,event) }, false);\n\t\t\tthis.canvasholderHTML.canvas.addEventListener(\"pointermove\",function(event) { self.pointerMoveEvent(world,self,event) }, false);\n\t\t\tthis.canvasholderHTML.canvas.addEventListener(\"pointerup\",function(event) { self.pointerUpEvent(world,self,event) }, false);\n\t\t\t//this.nodeMouseMovment = {};\n\t\t}\n\t}\n\n\tprivate getCanvasOffset():WorldPosition\n\t{\n\t    let offsetLeft = 0;\n\t\tlet offsetTop = 0;\n\t\tlet object:HTMLElement = this.canvasholderHTML.canvas;\n\t    do\n\t    {\n\t      if (!isNaN(object.offsetLeft))\n\t      {\n\t          offsetLeft += object.offsetLeft;\n\t      }\n\t      if (!isNaN(object.offsetTop))\n\t      {\n\t          offsetTop += object.offsetTop;\n\t\t  }   \n\t\t let element:any = object.offsetParent;\n\t\t if(element.hasOwnProperty(\"offsetParent\")) object = element;\n\t\t else object = null;\n\t    }\n\t    while(object);\n\t    \n\t    return( new WorldPosition(offsetLeft,offsetTop) );\n\t}\n\n\tpublic pointerDownEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent) {\n\t\tthis.mouseEventHandler.pointerDownEvent(world,canvasMouse,event);\n\t}\n\t\n\tpublic pointerMoveEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent)\t{\n\t\tthis.mouseEventHandler.pointerMoveEvent(world,canvasMouse,event);\n\n\t}\n\t\n\tpublic pointerUpEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent)\n\t{\n\t\tthis.mouseEventHandler.pointerUpEvent(world,canvasMouse,event);\n\n\t}\n\t\n\n\t\n\tpublic get offset(): WorldPosition {\n\t\treturn this._offset;\n\t}\n\n\tpublic set offset(value: WorldPosition) {\n\t\tthis._offset = value;\n\t}\n\n\tpublic get mouseEventHandler(): MouseEventHandler {\n\t\treturn this._mouseEventHandler;\n\t}\n\n\tpublic set mouseEventHandler(value: MouseEventHandler) {\n\t\tthis._mouseEventHandler = value;\n\t}\n\n\n\tpublic get $canvasholderHTML(): CanvasHolderHTML {\n\t\treturn this.canvasholderHTML;\n\t}\n\n\tpublic set $canvasholderHTML(value: CanvasHolderHTML) {\n\t\tthis.canvasholderHTML = value;\n\t}\n\t\n\n}\n","import { MouseStatus } from \"./mousestatus\";\nimport { WorldObject } from \"../../world/worldobject\";\nimport { MouseEventHandler } from \"./mouseeventhandler\";\nimport { WorldPosition } from \"../../world/worldposition\";\nimport { World } from \"../../world/world\";\nimport { CanvasMouse } from \"./canvasmouse\";\nimport { WorldDisplay } from \"../worlddisplay\";\n\n\n\nexport class MouseEventHandlerWorldObject implements MouseEventHandler {\n   private _mouseStatus:MouseStatus;\n   private _currentWorldObject:WorldObject;\n   private _lastWorldObject:WorldObject;\n\n    constructor()\n    {\n        this.mouseStatus = new MouseStatus();\n        this.currentWorldObject = null;\n        this.lastWorldObject = null;\n\t}\n\t\n\tpublic getMouseStatus():MouseStatus {\n\t\treturn(this.mouseStatus);\n\t}\n\n    public worldObjectSelected(world:World,event:MouseEvent,wWorldObject:WorldObject):void {\n\n    }\n\n    public worldObjectDeselected(world:World,event:MouseEvent):void {\n\n\t}\n\n\tpublic getCurrentWorldObject():WorldObject {\n\t\treturn(this.currentWorldObject);\n\t}\n\t\n\t/*\n\tpublic getWorldPositionFromMouseEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent):WorldPosition {\n\t\tvar eventPosition:WorldPosition = new WorldPosition(event.pageX-canvasMouse.offset.x,event.pageY-canvasMouse.offset.y);\n\t\treturn(eventPosition);\n\t}\n\t*/\n   \n    public pointerDownEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent):void\n\t{\n\t\t//console.log(\"pointerDownEvent:\"+JSON.stringify(event));;\n\t\tvar eventPosition:WorldPosition = WorldDisplay.getWorldPositionFromMouseEvent(world,canvasMouse,event);\n\t\t//this.hideCurrentNodeInfo();\n\t\tconsole.log(\"pointerDownEvent:\"+JSON.stringify(eventPosition));;\n\n\t\tthis.mouseStatus.isDown = true;\n\t\tthis.mouseStatus.startPosition = eventPosition;\n\t\tthis.mouseStatus.position = eventPosition;\n\t\tif(this.currentWorldObject!=null)\n\t\t{\n\t\t\tthis.currentWorldObject.setAnimated(true);\n\t\t\tthis.currentWorldObject.setSelected(false);\n\t\t\tthis.currentWorldObject = null;\n\t\t}\n\t\t\n\t\tlet clickWorldObject:WorldObject =  world.getWorldObjectContainingPosition(eventPosition);\n\t\n\t\tif(clickWorldObject!=null && clickWorldObject!=this.lastWorldObject)\n\t\t{\n\t\t\tconsole.log(\"pointerDownEvent:clickWorldObject=\"+clickWorldObject.getWorldId().id);\n\n\t\t\tthis.currentWorldObject = clickWorldObject;\n\n\t\t\tthis.mouseStatus.startPosition = eventPosition.clone();\n\n\t\t\tthis.currentWorldObject.setSelected(true);\n\t\t\tthis.mouseStatus.clickOffset = this.currentWorldObject.getWorldPosition().getDelta(eventPosition);\n\t\t\tthis.currentWorldObject.setAnimated(false);\n\t\t\t/////////////////this.mouseStatus.clickOffset = clickWorldObject.getWorldPosition().getDelta(eventPosition);\n\t\t\t//this.mouseEventHandler.pointerDown(this.mouseStatus);\t\t\t\n\t\t\tthis.worldObjectSelected(world,event,this.currentWorldObject);\t\n\t\t\tthis.currentWorldObject.getWorldObjectEventHandler().pointerDownEvent(world,canvasMouse,event);\t\t\n\t\t}\n\t\t\n\t\tif(clickWorldObject==null)\n\t\t{\n\t\t\tthis.worldObjectDeselected(world,event);\n\t\t}\n\t\t\n\t\tif(this.lastWorldObject)\n\t\t{\n\t\t\tthis.worldObjectDeselected(world,event);\n\t\t\tthis.lastWorldObject.setSelected(false);\n\t\t\tthis.lastWorldObject = null;\n\t\t}\n\n\t\tworld.worldEngine.pointerDownEngineEvent(world,canvasMouse,event,this);\n\t\t////////////this.updateObjectPosition(eventPosition);\n\n\t\t\n\t\t\n\t\n\t}\n/*\n\tprivate updateObjectPosition():void {\n\n\t\tif(this.currentWorldObject!=null)\n\t\t{\n\t\t\tthis.currentWorldObject.setAnimated(false);\n\t\t\tthis.mouseStatus.position = this.mouseStatus.position;;\n\t\t\tvar deltaPosition = this.mouseStatus.startPosition.getDelta(this.mouseStatus.position);\n\n\n\t\t\t\t\t\n\t\t\tlet newX = this.mouseStatus.startPosition.x-\n\t\t\t\t\tdeltaPosition.x+\n\t\t\t\t\tthis.mouseStatus.clickOffset.x;\n\t\t\t\n\t\t\tlet newY = this.mouseStatus.startPosition.y-\n\t\t\t\t\tdeltaPosition.y+\n\t\t\t\t\tthis.mouseStatus.clickOffset.y;\n\n\t\t\tthis.currentWorldObject.setWorldPosition( new WorldPosition(newX,newY));\n\t\t}\n\t}\n  */  \n    \n\n    public pointerMoveEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent):void {\n\t\tvar eventPosition:WorldPosition = WorldDisplay.getWorldPositionFromMouseEvent(world,canvasMouse,event);\n\t\tthis.mouseStatus.position = eventPosition;\n\t\t\n\t\tif(this.mouseStatus.isDown)\n\t\t{\n\t\t\t//var eventPosition:WorldPosition = WorldDisplay.getWorldPositionFromMouseEvent(world,canvasMouse,event);\n\t\t\t//this.mouseStatus.position = eventPosition;\n\t\t\t\n\t\t\t////////////console.log(\"pointerMoveEvent:\"+event);\n\n\t\t\tthis.worldObjectDeselected(world,event);\n\t\t\tif(this.currentWorldObject!=null)\n\t\t\t{\n\t\t\t\tthis.currentWorldObject.setAnimated(false);\n\t\t\t\tthis.currentWorldObject.getWorldObjectEventHandler().pointerMoveEvent(world,canvasMouse,event);\t\t\n\n\t\t\t}\n\t\t\tthis.mouseStatus.position = this.mouseStatus.position;;\n\t\t\t\n\n\n\t\t\t//this.updateObjectPosition(eventPosition);\n\t\t\t/*\n\t\t\tif(this.currentWorldObject!=null)\n\t\t\t{\n\t\t\t\tthis.currentWorldObject.setAnimated(false);\n\t\t\t\tthis.mouseStatus.position = eventPosition;\n\t\t\t\tvar deltaPosition = this.mouseStatus.startPosition.getDelta(eventPosition);\n\n\n\t\t\t\t\t\t\n\t\t\t\tlet newX = this.mouseStatus.startPosition.x-\n\t\t\t\t\t\tdeltaPosition.x+\n\t\t\t\t\t\tthis.mouseStatus.clickOffset.x;\n\t\t\t\t\n\t\t\t\tlet newY = this.mouseStatus.startPosition.y-\n\t\t\t\t\t\tdeltaPosition.y+\n\t\t\t\t\t\tthis.mouseStatus.clickOffset.y;\n\n\t\t\t\tthis.currentWorldObject.setWorldPosition( new WorldPosition(newX,newY));\n\t\t\t}\n\t\t\t*/\n\t\t}\n\t\tworld.worldEngine.pointerMoveEngineEvent(world,canvasMouse,event,this);\n    }\n            \n\n    public pointerUpEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent):void \t{\n\t\t//console.log(\"pointerUpEvent:\"+JSON.stringify(event));\n\t\t//var eventPosition:WorldPosition = this.getWorldPositionFromMouseEvent(world,canvasMouse,event);\n\t\tvar eventPosition:WorldPosition = WorldDisplay.getWorldPositionFromMouseEvent(world,canvasMouse,event);\n\t\tthis.mouseStatus.position = eventPosition;\n\t\t\n\t\tif(this.currentWorldObject!=null)\n\t\t{\n\t\t\t///this.nodeCanvas.pointerUp(this.mouseStatus.node);\n\t\t\tthis.currentWorldObject.setAnimated(true);\n\t\t\t//this.mouseStatus.node.isSelected = false;\n\t\t\tthis.lastWorldObject = this.currentWorldObject;\n\t\n\t\t\tthis.currentWorldObject.getWorldObjectEventHandler().pointerUpEvent(world,canvasMouse,event);\t\t\n\n\t\t\tthis.currentWorldObject = null;\n\t\t}\n\t\tthis.mouseStatus.isDown = false;\n\t\tworld.worldEngine.pointerUpEngineEvent(world,canvasMouse,event,this);\n\t\t\n\t}\n\n\tpublic get mouseStatus(): MouseStatus {\n\t\treturn this._mouseStatus;\n\t}\n\n\tpublic set mouseStatus(value: MouseStatus) {\n\t\tthis._mouseStatus = value;\n\t}\n\n\n\tpublic get currentWorldObject(): WorldObject {\n\t\treturn this._currentWorldObject;\n\t}\n\n\tpublic set currentWorldObject(value: WorldObject) {\n\t\tthis._currentWorldObject = value;\n\t}\n\n\n\tpublic get lastWorldObject(): WorldObject {\n\t\treturn this._lastWorldObject;\n\t}\n\n\tpublic set lastWorldObject(value: WorldObject) {\n\t\tthis._lastWorldObject = value;\n\t}\n    \n}","import { WorldPosition } from \"../../world/worldposition\";\n\nexport class MouseStatus\n{\n\tprivate _isDown:boolean;\n\tprivate _startPosition:WorldPosition;\n\tprivate _position:WorldPosition;\n\t//private _worldObject:WorldObject;\n\t//private _objectStartPosition:WorldPosition;\n\tprivate _clickOffset:WorldPosition;\n\t//private _lastWorldObject:WorldObject;\n\t\n\t\n\t\n\n\tconstructor()\n\t{\n\t\tthis.isDown = false;\n\t\tthis.startPosition = new WorldPosition(0,0);\n\t\tthis.position = new WorldPosition(0,0);\n\t\tthis.clickOffset = new WorldPosition(0,0);\n\n\t\t//this.objectStartPosition = null\n\t}\n// \t\t\tnodeCanvasMouse.mouseStatus = new MouseStatus(false,new Position(0,0),new Position(0,0),null,null);\n\n\n\tpublic get isDown(): boolean {\n\t\treturn this._isDown;\n\t}\n\n\tpublic set isDown(value: boolean) {\n\t\tthis._isDown = value;\n\t}\n\n\tpublic get startPosition(): WorldPosition {\n\t\treturn this._startPosition;\n\t}\n\n\tpublic set startPosition(value: WorldPosition) {\n\t\tthis._startPosition = value;\n\t}\n\t\n\n\tpublic get position(): WorldPosition {\n\t\treturn this._position;\n\t}\n\n\tpublic set position(value: WorldPosition) {\n\t\tthis._position = value;\n\t}\n\n\tpublic get clickOffset(): WorldPosition {\n\t\treturn this._clickOffset;\n\t}\n\n\tpublic set clickOffset(value: WorldPosition) {\n\t\tthis._clickOffset = value;\n\t}\n\n\n\n\t\n}\n","import { Drawable } from \"../drawable\";\nimport { WorldPosition } from \"../../world/worldposition\";\n//import { WalkerWorld } from \"../../walkers/walkerworld/walkerworld\";\nimport { WorldDisplay } from \"../worlddisplay\";\nimport { CircleEngineShape } from \"../../engine/shapes/circleengineshape\";\n//import { WalkerEngine } from \"../../walkerworld/walkerengine\";\n\n\nexport class CircleDisplayShape implements Drawable\n{\n\tprivate _circleEngineShape:CircleEngineShape;\n\n\tconstructor()\n\t{\n\t\tthis.circleEngineShape = null;\n\t}\n\n\tpublic init(circleEngineShape:CircleEngineShape,options:any):void {\n\t\tthis.circleEngineShape = circleEngineShape;\t\t\n\t}\n\t\n\n\tpublic get circleEngineShape(): CircleEngineShape {\n\t\treturn this._circleEngineShape;\n\t}\n\n\tpublic set circleEngineShape(value: CircleEngineShape) {\n\t\tthis._circleEngineShape = value;\n\t}\n\t\n\t\n\tpublic draw(context:CanvasRenderingContext2D):void\n\t{\n\t\tif(!this.circleEngineShape) throw Error(\"CircleDisplayShape:CircleEngineShape is not set, was init called?\")\n\t\t//super.drawConnector(canvasHolder,node);\n\t\t/*\n\t\tsuper.drawNode(canvasHolder,node);\n\n\t\t*/\n\t\t//console.log(\"CircleDisplayShape.drawShape\");\n\n\t\tcontext.fillStyle = WorldDisplay.getColorFromString(\"ff0000ff\");\n\t\tcontext.strokeStyle = WorldDisplay.getColorFromString(\"0000ffff\");\n\t\tlet position:WorldPosition = this.circleEngineShape.getWorldPosition();\n\t\t\n\t    context.beginPath();\n\t    context.arc(position.x,position.y,this.circleEngineShape.getRadius(),0,Math.PI * 2, false);\n\t    context.closePath();\n\t    context.fill();\n\t    context.lineWidth = 2;\n\t\tcontext.stroke();\n\t}\n}\n","import { Drawable } from \"../drawable\";\nimport { WorldDisplay, Size } from \"../worlddisplay\";\nimport { RectangleEngineShape } from \"../../engine/shapes/rectangleengineshape\";\nimport { RectangleDisplayShape } from \"./rectangledisplayshape\";\nimport { World } from \"../../world/world\";\nimport { CanvasMouse } from \"../canvas/canvasmouse\";\nimport { WorldObjectEventHandler } from \"../../world/worldobjecteventhandler\";\nimport { DrawableText } from \"./drawabletext\";\nimport { DrawableConnector } from \"./drawableconnector\";\nimport { EngineConnector } from \"../../engine/shapes/engineconnector\";\nimport { EngineConnectorDef } from \"../../engine/shapes/engineconnectordef\";\n\n\nexport class LineConnectorDisplay implements DrawableConnector\n{\n    private _engineConnector:EngineConnector;\n\n\n\tconstructor()\n\t{\n\t\tthis.engineConnector = null;\n\t}\n\n\tpublic init(engineConnector:EngineConnector,options:any):void {\n\t\tthis.engineConnector = engineConnector;\t\n\t}\n\n\t\n\tpublic draw(context:CanvasRenderingContext2D):void\n\t{\n        context.fillStyle = WorldDisplay.getColorFromString(\"ff0000ff\");\n\t\tcontext.strokeStyle = WorldDisplay.getColorFromString(\"0000ffff\");\n\n\t\t\n        this.engineConnector.positionConnectorShape();\n\n\t\t//WorldDisplay.drawOutlinedShape(context,this.engineConnector.getShapePoints());\n\n\n\n        context.lineWidth = 2;\n        for(let i=0;i<this.engineConnector.getEngineConnectorDefArray().length;i++)\n        {\n\t\t\tWorldDisplay.drawConnectedLine(context,\n\t\t\t[\n                this.engineConnector.getEngineConnectorDefArray()[i].engineShape.getWorldPosition(),\n                this.engineConnector.getWorldPosition()\n            ]);\n        }\n\n\t}\n\n    /**\n     * Getter engineConnector\n     * @return {EngineConnector}\n     */\n\tpublic get engineConnector(): EngineConnector {\n\t\treturn this._engineConnector;\n\t}\n\n    /**\n     * Setter engineConnector\n     * @param {EngineConnector} value\n     */\n\tpublic set engineConnector(value: EngineConnector) {\n\t\tthis._engineConnector = value;\n\t}\n\n\t\n}\n\n\n\n\n\n\n\n\n","import { Drawable } from \"../drawable\";\nimport { PolygonEngineShape } from \"../../engine/shapes/polygonengineshape\";\nimport { WorldDisplay } from \"../worlddisplay\";\n\nexport class PolygonDisplayShape implements Drawable\n{\n\tprivate _polygonEngineShape:PolygonEngineShape;\n\n\tconstructor()\n\t{\n\t\tthis.polygonEngineShape = null;\n\t}\n\n\tpublic init(polygonEngineShape:PolygonEngineShape,options:any):void {\n\t\tthis.polygonEngineShape = polygonEngineShape;\t\t\n\t}\n\n\tpublic get polygonEngineShape(): PolygonEngineShape {\n\t\treturn this._polygonEngineShape;\n\t}\n\n\tpublic set polygonEngineShape(value: PolygonEngineShape) {\n\t\tthis._polygonEngineShape = value;\n\t}\n\n\t\n\t\n\tpublic draw(context:CanvasRenderingContext2D):void\n\t{\n\t\tif(!this.polygonEngineShape) throw Error(\"PolygonDisplayShape:PolygonEngineShape is not set, was init called?\")\n\n\t\tcontext.fillStyle = WorldDisplay.getColorFromString(\"ff0000ff\");\n\t\tcontext.strokeStyle = WorldDisplay.getColorFromString(\"0000ffff\");\n        context.lineWidth = 2;\n        \n        WorldDisplay.drawOutlinedShape(context,this.polygonEngineShape.getPolygonPoints());\n\t\t\n\t}\n}\n","import { Drawable } from \"../drawable\";\nimport { WorldDisplay } from \"../worlddisplay\";\nimport { RectangleEngineShape } from \"../../engine/shapes/rectangleengineshape\";\n\nexport class RectangleDisplayShape implements Drawable\n{\n\tprivate _rectangleEngineShape:RectangleEngineShape;\n\n\tconstructor()\n\t{\n\t\tthis.rectangleEngineShape = null;\n\t}\n\n\tpublic init(rectangleEngineShape:RectangleEngineShape,options:any):void {\n\t\tthis.rectangleEngineShape = rectangleEngineShape;\t\t\n\t}\n\n\tpublic get rectangleEngineShape(): RectangleEngineShape {\n\t\treturn this._rectangleEngineShape;\n\t}\n\n\tpublic set rectangleEngineShape(value: RectangleEngineShape) {\n\t\tthis._rectangleEngineShape = value;\n\t}\n\t\n\t\n\t\n\tpublic draw(context:CanvasRenderingContext2D):void\n\t{\n\t\tif(!this.rectangleEngineShape) throw Error(\"RectangleDisplayShape:rectangleEngineShape is not set, was init called?\")\n\t\t//super.drawConnector(canvasHolder,node);\n\t\t/*\n\t\tsuper.drawNode(canvasHolder,node);\n\n\t\t*/\n\t\t//console.log(\"CircleDisplayShape.drawShape\");\n\n\t\tcontext.fillStyle = WorldDisplay.getColorFromString(\"ff0000ff\");\n\t\tcontext.strokeStyle = WorldDisplay.getColorFromString(\"0000ffff\");\n\n        context.lineWidth = 2;\n        \n        WorldDisplay.drawOutlinedShape(context,this.rectangleEngineShape.getShapePoints());\n\n\t\t/*\n\n\t\tlet position:WorldPosition = this.rectangleEngineShape.getWorldPosition();\n\n\n\t\tcontext.fillRect( \n\t\t\t(position.x-this.rectangleEngineShape.getWidth()/2),\n\t\t\t(position.y-this.rectangleEngineShape.getHeight()/2),\n\t\t\tthis.rectangleEngineShape.getWidth(),\n\t\t\tthis.rectangleEngineShape.getHeight());\n\t\t\tcontext.lineWidth = 2;\n\t\tcontext.strokeRect( \n\t\t\t(position.x-this.rectangleEngineShape.getWidth()/2), \n\t\t\t(position.y-this.rectangleEngineShape.getHeight()/2), \n\t\t\tthis.rectangleEngineShape.getWidth(), \n\t\t\tthis.rectangleEngineShape.getHeight());\n\t\t*/\n\n\t}\n}\n","import { Drawable } from \"../drawable\";\nimport { WorldDisplay, Size } from \"../worlddisplay\";\nimport { RectangleEngineShape } from \"../../engine/shapes/rectangleengineshape\";\nimport { RectangleDisplayShape } from \"./rectangledisplayshape\";\nimport { World } from \"../../world/world\";\nimport { CanvasMouse } from \"../canvas/canvasmouse\";\nimport { WorldObjectEventHandler } from \"../../world/worldobjecteventhandler\";\nimport { DrawableText } from \"./drawabletext\";\n\n\nexport class TextDisplayShape implements DrawableText\n{\n    private _rectangleDisplayShape:RectangleDisplayShape;\n    private _displayText:string;\n\tprivate _rectangleEngineShape:RectangleEngineShape;\n\tprivate _textImageData:ImageData;\n\n\tconstructor(rectangleDisplayShape:RectangleDisplayShape,displayText:string)\n\t{\n\t\tthis.rectangleEngineShape = null;\n\t\tthis.rectangleDisplayShape = rectangleDisplayShape;\n\t\tthis.displayText = displayText;\n\t\tthis.textImageData = null;\n\n\t}\n\n\tpublic getText():string\n\t{\n\t\treturn(this.displayText);\n\t}\n\n\tpublic setText(displayText:string):void\n\t{\n\t\tthis.textImageData = null;\n\t\tthis.displayText = displayText;\n\t}\n\n\tpublic init(rectangleEngineShape:RectangleEngineShape,options:any):void {\n\t\tthis.rectangleEngineShape = rectangleEngineShape;\t\n\t\tthis.rectangleDisplayShape.init(this.rectangleEngineShape,options);\n\n\t\tlet woe:WorldObjectEventHandler = \n\t\t{\n\t\t\tpointerDownEvent : function (world:World,canvasMouse:CanvasMouse,event:MouseEvent):void\n\t\t\t{\n\t\t\t\tconsole.log(\"LOOOOOLZZZZZ! HEY FELLA XXXXXXX\");\n\t\t\t\tconsole.log(\"setSize:\"+JSON.stringify({\"width\":this.width,\"height\":this.height}))\n\n\n\t\t\t},\n\t\t\tpointerMoveEvent : function (world:World,canvasMouse:CanvasMouse,event:MouseEvent):void {},\n\t\t\tpointerUpEvent : function (world:World,canvasMouse:CanvasMouse,event:MouseEvent):void {}\n\t\t};\n\t\tthis.rectangleEngineShape.setWorldObjectEventHandler(woe);\n\t}\n\n\n    /**\n     * Getter textImageData\n     * @return {ImageData}\n     */\n\tpublic get textImageData(): ImageData {\n\t\treturn this._textImageData;\n\t}\n\n    /**\n     * Setter textImageData\n     * @param {ImageData} value\n     */\n\tpublic set textImageData(value: ImageData) {\n\t\tthis._textImageData = value;\n\t}\n\n\tpublic get rectangleEngineShape(): RectangleEngineShape {\n\t\treturn this._rectangleEngineShape;\n\t}\n\n\tpublic set rectangleEngineShape(value: RectangleEngineShape) {\n\t\tthis._rectangleEngineShape = value;\n    }\n    \n    /**\n     * Getter rectangleDisplayShape\n     * @return {RectangleDisplayShape}\n     */\n\tpublic get rectangleDisplayShape(): RectangleDisplayShape {\n\t\treturn this._rectangleDisplayShape;\n\t}\n\n    /**\n     * Setter rectangleDisplayShape\n     * @param {RectangleDisplayShape} value\n     */\n\tpublic set rectangleDisplayShape(value: RectangleDisplayShape) {\n\t\tthis._rectangleDisplayShape = value;\n\t}\n\n    /**\n     * Getter displayText\n     * @return {string}\n     */\n\tpublic get displayText(): string {\n\t\treturn this._displayText;\n\t}\n\n    /**\n     * Setter displayText\n     * @param {string} value\n     */\n\tpublic set displayText(value: string) {\n\t\tthis._displayText = value;\n\t}\n\t\n\t\n\n\t\n\tpublic draw(context:CanvasRenderingContext2D):void\n\t{\n\t\tif(!this.rectangleEngineShape) throw Error(\"RectangleDisplayShape:rectangleEngineShape is not set, was init called?\")\n\t\t\n\t\tlet fitContentToText:boolean = true;\n\t\t// DRAW TEXT\n\t\t// IF FITTING CONTAINER SIZE TO CONTENT THEN :\n\t\t// ---\n\t\t// ---\n\t\t// ---\n\t\t// ---\n\t\t// IF FITTING TEXT SIZE TO CONTAINER THEN :\n\t\tlet x = this.rectangleEngineShape.getWorldPosition().x;\n\t\tlet y = this.rectangleEngineShape.getWorldPosition().y;\n\n\t\tif(fitContentToText)\n\t\t{\n\t\t\tlet needsARedraw:boolean = false;\n\t\t\tif(this.textImageData==null) needsARedraw = true;\n\t\t\t\n\t\t\tif(needsARedraw)\n\t\t\t{\n\t\t\t\tlet hPadding:number = 5;\n\t\t\t\tlet vPadding:number = 5;\t\n\t\t\t\tlet fontPixelHeight:number = 15;\n\t\t\t\tthis.setContextFont(context,\"bold\",\"Arial\",15,\"000000ff\");\n\n\t\t\t\tlet textSize:Size = WorldDisplay.metricsTextMutipleLines(context,\n\t\t\t\t\tthis.displayText,\n\t\t\t\t\tfontPixelHeight,\n\t\t\t\t\t\"\\n\");\n\n\t\t\t\tlet containerSize = new Size(textSize.width+hPadding*2,textSize.height+vPadding*2);\n\t\t\t\t\n\t\t\t\tthis.rectangleEngineShape.setSize(textSize.width+hPadding*2,textSize.height+vPadding*2);\n\t\t\t\tthis.rectangleDisplayShape.draw(context);\n\n\t\t\t\t// the rectangle may have reset our color\n\t\t\t\tthis.setContextFont(context,\"bold\",\"Arial\",15,\"000000ff\");\n\n\t\t\t\tWorldDisplay.drawTextMutipleLines(context,\n\t\t\t\t\tthis.displayText,\n\t\t\t\t\tx,\n\t\t\t\t\ty-textSize.height/2+fontPixelHeight,\n\t\t\t\t\tfontPixelHeight,\"\\n\");\n\n\t\t\t\tthis.textImageData = context.getImageData(\n\t\t\t\t\tx-textSize.width/2,\n\t\t\t\t\ty-textSize.height/2,\n\t\t\t\t\ttextSize.width,\n\t\t\t\t\ttextSize.height);\n\t\t\t}\t\t\t\n\n\t\t\tthis.rectangleDisplayShape.draw(context);\n\t\t\tcontext.putImageData(\n\t\t\t\t\tthis.textImageData,\n\t\t\t\t\tx-this.textImageData.width/2,\n\t\t\t\t\ty-this.textImageData.height/2\n\t\t\t\n\t\t\t\t);\n\t\t}\n\n\t\tthis.rectangleEngineShape.stopRotation();\n\t}\n\n\tsetContextFont(context:CanvasRenderingContext2D,fontStyle:string,fontFace:string,fontPixelHeight:number,fontColor:string)\n\t{\n\t\t//context.fillStyle = WorldDisplay.getColorFromString(\"ffffffff\");\n\t\t\t//context.strokeStyle = WorldDisplay.getColorFromString(\"0000ffff\");\n\n\t\tcontext.font=fontStyle+\" \"+fontPixelHeight+\"px \"+fontFace; \n\t\tcontext.textAlign=\"center\";\n\t\tcontext.fillStyle=WorldDisplay.getColorFromString(fontColor);\n\t}\n\n\t\n\n\n\n/*************************\n\n\troundedRect(context,x,y,w,h,r,borderWitdh,borderColor,rectColor)\n\t{\n\t\t  if (w < 2 * r) r = w / 2;\n\t\t  if (h < 2 * r) r = h / 2;\n\t\t  context.beginPath();\n\t\t  context.moveTo(x+r, y);\n\t\t  context.arcTo(x+w, y,   x+w, y+h, r);\n\t\t  context.arcTo(x+w, y+h, x,   y+h, r);\n\t\t  context.arcTo(x,   y+h, x,   y,   r);\n\t\t  context.arcTo(x,   y,   x+w, y,   r);\n\t\t  context.closePath();\n\t\t\n\t    //context.beginPath();\n\t    //context.moveTo(x, y);\n\t    //context.lineTo(x + width - cornerRadius, y);\n\t    //context.arcTo(x + width, y, x + width, y + cornerRadius, cornerRadius);\n\t    //context.lineTo(x + width, y + height);\n\t    \n\t  context.lineWidth = borderWitdh;\n\t  context.fillStyle = rectColor;\n\t  context.strokeStyle = borderColor;\n\t  \n\t  context.stroke();\n\t  context.fill();\n  }\n*****************/\n\n/*******\n * \n * context.font = '14pt Verdana';\n * \n function measureTextHeight(fontSizeFace) {\n    // create a temp canvas\n    var width=1000;\n    var height=60;\n    var canvas=document.createElement(\"canvas\");\n    canvas.width=width;\n    canvas.height=height;\n    var ctx=canvas.getContext(\"2d\");\n\n    // Draw the entire a-z/A-Z alphabet in the canvas\n    var text=\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    ctx.save();\n    ctx.font=fontSizeFace;\n    ctx.clearRect(0,0,width,height);\n    ctx.fillText(text, 0, 40);\n    ctx.restore();\n\n    // Get the pixel data from the canvas\n    var data = ctx.getImageData(0,0,width,height).data,\n        first = false, \n        last = false,\n        r = height,\n        c = 0;\n\n    // Find the last line with a non-transparent pixel\n    while(!last && r) {\n        r--;\n        for(c = 0; c < width; c++) {\n            if(data[r * width * 4 + c * 4 + 3]) {\n                last = r;\n                break;\n            }\n        }\n    }\n\n    // Find the first line with a non-transparent pixel\n    while(r) {\n        r--;\n        for(c = 0; c < width; c++) {\n            if(data[r * width * 4 + c * 4 + 3]) {\n                first = r;\n                break;\n            }\n        }\n\n        // If we've got it then return the height\n        if(first != r) return last - first;\n    }\n\n    // error condition if we get here\n    return 0;\n}\n\n */\n}\n\n\n\n\n\n\n\n\n","\nimport { WorldPosition } from \"../world/worldposition\";\nimport { World } from \"../world/world\";\nimport { CanvasMouse } from \"./canvas/canvasmouse\";\nimport { WorldObject } from \"../world/worldobject\";\n\nexport class Size {\n\tprivate _width:number;\n\tprivate _height:number;\n\n\tconstructor(width:number,height:number)\n\t{\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t}\n\tpublic get width(): number {\n\t\treturn this._width;\n\t}\n\n\tpublic set width(value: number) {\n\t\tthis._width = value;\n\t}\n\tpublic get height(): number {\n\t\treturn this._height;\n\t}\n\n\tpublic set height(value: number) {\n\t\tthis._height = value;\n\t}\n}\n\nexport class WorldDisplay  {\n    /*\n    static world(render:Matter.Render) {\n\n        Matter.Render.world(render);\n        console.log(\"doing some redering...\");\n    }\n    */    \n\n   public static getWorldPositionArrayFromObjects(worldObjectArray:Array<WorldObject>):Array<WorldPosition> {\n\t\tlet worldPositionArray:Array<WorldPosition> = new Array<WorldPosition>();\n\t\tfor(let n = 0; n < worldObjectArray.length; n++)\n\t\t{\n\t\t\tworldPositionArray.push(worldObjectArray[n].getWorldPosition());\n\t\t}\n\t\treturn(worldPositionArray);\n   }\n\n   public static  drawTextMutipleLines(context:CanvasRenderingContext2D,text:string,x:number,y:number,lineHeight:number,splitChar:string):void\n   {\n\t   let lines:string[] = text.split(splitChar);\n   \n\t   for(let n = 0; n < lines.length; n++)\n\t   {\n\t\t   context.fillText(lines[n], x, y);\n\t\t   y = y+lineHeight;\n\t   }\n\t}\n   \n\tpublic static  metricsTextMutipleLines(context:CanvasRenderingContext2D,text:string,lineHeight:number,splitChar:string):Size\n   {\n\t   let lines = text.split(splitChar);\n\t   let maxWidth = 0;\n\t   let totalHeight = lineHeight/2;\n\t   for(let n = 0; n < lines.length; n++)\n\t   {\n\t\t   let metrics = context.measureText(lines[n]);\n\t\t\tif(metrics.width>maxWidth) maxWidth = metrics.width;\n\t\t   totalHeight = totalHeight + lineHeight;\n\t\t}\n\t   // TODO for some reason maxWidth is always 1 short, how come??!?! (coincidentally I think the java image libraries have the same issue)\n\n\t   return(new Size(maxWidth+1,totalHeight));\n\t}\n\n\t/*\n\tpublic static metricsTextMutipleLines(context:CanvasRenderingContext2D,text:string,lineHeight:number,splitChar:string)\n\t{\n\t\tlet lines:Array<string> = text.split(splitChar);\n\t    //let line:string = '';\n\t    let maxWidth:number = 0;\n\t    let totalHeight = 0;\n\t    for(var n = 0; n < lines.length; n++)\n\t    {\n            let metrics:TextMetrics = context.measureText(lines[n]);\n            if(metrics.width>maxWidth) maxWidth = metrics.width;\n            totalHeight = totalHeight + lineHeight;\n\t    }\n\t    return({width:maxWidth,height:totalHeight});\n\t }\n\t */\n\n    public static getColorFromString(colorString:string):string\n    {\n      if(colorString.length==6)\n      {\n        colorString += \"ff\";\n      }\n      \n      let color = \"rgba(\"+\n          parseInt(colorString.substring(0,2), 16)+\",\"+\n          parseInt(colorString.substring(2,4), 16)+\",\"+\n          parseInt(colorString.substring(4,6), 16)+\",\"+\n          parseInt(colorString.substring(6,8), 16)/255.0+\")\";\n      \n      return(color);\n\t}\n\n\tpublic static getWorldPositionFromMouseEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent):WorldPosition {\n\t\tvar eventPosition:WorldPosition = new WorldPosition(event.pageX-canvasMouse.offset.x,event.pageY-canvasMouse.offset.y);\n\t\treturn(eventPosition);\n\t}\n\n\n\tpublic static getPolygonPoints(startAngle:number,numberOfSides:number,radius:number,position:WorldPosition):Array<WorldPosition> {\n\t\tlet polygonPointArray = Array<WorldPosition>();\t\n        let angle = 0\n        let angleIncrement = 2 * Math.PI / numberOfSides;\n    \n        for(let i=0;i < numberOfSides;i++) {\n            polygonPointArray.push(new WorldPosition(\n                position.x  + radius * Math.cos(angle),\n                position.y  + radius * Math.sin(angle)\n            ));\n            angle = angle + angleIncrement;\n                \n\t\t}\n\t\treturn(polygonPointArray);\n\t}\n\n/**\n\t * Draws an outlined shape from an Array of WorldPosition objects. It is assumed that the fill color, \n\t * stroek color and line width for the context have been set before the call is made\n\t * \n\t * @static\n\t * @param {CanvasRenderingContext2D} context \n\t * @param {Array<WorldPosition>} worldPositionArray \n\t * @memberof WorldDisplay\n\t */\n\tpublic static drawConnectedLine(context:CanvasRenderingContext2D,worldPositionArray:Array<WorldPosition>):void\n\t{\t    \n\t    context.beginPath();\n\t    for(let i=0;i<worldPositionArray.length;i++)\n\t    {   \t\n\t\t\tvar point = worldPositionArray[i];\n\t    \tif(i==0) context.moveTo(point.x,point.y);\n\t    \telse context.lineTo(point.x,point.y);\n\t    }\n\t    //context.closePath();\n\t    \n\t    //context.fill();\n\t    //context.lineWidth = displayInfo.borderWidth;\n\t    context.stroke();\n\t}\n\n\t/**\n\t * Draws an outlined shape from an Array of WorldPosition objects. It is assumed that the fill color, \n\t * stroek color and line width for the context have been set before the call is made\n\t * \n\t * @static\n\t * @param {CanvasRenderingContext2D} context \n\t * @param {Array<WorldPosition>} worldPositionArray \n\t * @memberof WorldDisplay\n\t */\n\tpublic static drawOutlinedShape(context:CanvasRenderingContext2D,worldPositionArray:Array<WorldPosition>):void\n\t{\t    \n\t    context.beginPath();\n\t    for(let i=0;i<worldPositionArray.length;i++)\n\t    {   \t\n\t\t\tvar point = worldPositionArray[i];\n\t    \tif(i==0) context.moveTo(point.x,point.y);\n\t    \telse context.lineTo(point.x,point.y);\n\t    }\n\t    context.closePath();\n\t    \n\t    context.fill();\n\t    //context.lineWidth = displayInfo.borderWidth;\n\t    context.stroke();\n\t}\n\n\tpublic static getAveragePostionFromPositionList(positionList:Array<WorldPosition>):WorldPosition\n\t{\n\t  let x = 0.0;\n\t  let y = 0.0;\n\t  for(let i=0;i<positionList.length;i++)\n\t  {\n\t\t  let p = positionList[i];\n\t\t  x += p.x;\n\t\t  y += p.y;\n\t  }\n\t  x = x / positionList.length;\n\t  y = y / positionList.length;\n\t  return(new WorldPosition(x,y));\n\t}\n\t\t  \n\n    public static getCirclePositionList(radius:number,curvePoints:number):Array<WorldPosition> {\n\t\tlet pointList = new Array<WorldPosition>();\n\t\t\n\t\tlet angleInc = 360 / curvePoints;\n\t\tfor(let angle=0;angle<=360;angle=angle+angleInc)\n\t\t{\n\t\t\tlet rads = angle * (Math.PI/180);\n\t\t\tpointList.push(\n\t\t\t\t\tnew WorldPosition(\n\t\t\t\t\t\t\tradius*Math.cos(rads),\n\t\t\t\t\t\t\tradius*Math.sin(rads))\n\t\t\t\t\t);\t\n\t\t}\n\t\t\n\t\treturn(pointList);\n\t}\n\n\tpublic static getTrianglePositionList(width:number,height:number):Array<WorldPosition> {\n\t\tlet pointList = new Array<WorldPosition>();\n\t\t\n\t\tpointList.push(new WorldPosition(0,-(height/2)));\n\t\tpointList.push(new WorldPosition(width/2,height/2));\n\t\tpointList.push(new WorldPosition(-(width/2),height/2));\n\t\tpointList.push(new WorldPosition(0,-(height/2)));\n\t\t\n\t\treturn(pointList);;\n\t}\n\t\n\tpublic static getRectanglePositionList(width:number,height:number):Array<WorldPosition> {\n\t\tlet pointList = new Array<WorldPosition>();\n\t\t\n\t\tpointList.push(new WorldPosition(-(width/2),-(height/2)));\n\t\tpointList.push(new WorldPosition((width/2),-(height/2)));\n\t\tpointList.push(new WorldPosition((width/2),(height/2)));\n\t\tpointList.push(new WorldPosition(-(width/2),(height/2)));\t\n\t\tpointList.push(new WorldPosition(-(width/2),-(height/2)));\n\t\n\t\treturn(pointList);;\n\t}\n\n\tpublic static getArcPositionList(endAngle:number,startAngle:number,radius:number,curvePoints:number):Array<WorldPosition> {\n\t\tlet pointList = new Array<WorldPosition>();\n\t\t\n\t\t// bug durring the port to javascript... it was just expecting one arg so probably endAngle was used\n\t\tlet angle:number = Math.abs(endAngle-startAngle);\n\t\tlet angleInc:number = angle / curvePoints;\n\t\t\n\t\tpointList.push(new WorldPosition(0,0));\n\t\tfor(let angle=startAngle;\n\t\t\tangle<=endAngle && angleInc>0;\n\t\t\tangle=angle+angleInc)\n\t\t{\n\t\t\tif( (angle+angleInc) > endAngle )\n\t\t\t{\n\t\t\t\tif(angle!=endAngle) angle = endAngle ;\n\t\t\t}\n\t\t\tvar rads = angle * (Math.PI/180);\n\t\t\tpointList.push(\n\t\t\t\t\tnew WorldPosition(\n\t\t\t\t\t\t\tradius*Math.cos(rads),\n\t\t\t\t\t\t\tradius*Math.sin(rads))\n\t\t\t\t\t);\t\n\t\t}\n\t\t\n\t\tpointList.push(new WorldPosition(0,0));\n\t\t\n\t\treturn(pointList);\n\t}\n\n    public static fillTextMutipleLines(context:CanvasRenderingContext2D,text:string,x:number,y:number,lineHeight:number,splitChar:string)\n\t{\n\t\tlet lines:Array<string> = text.split(splitChar);\n\t    let line:string = '';\n\t\n\t    for(let n = 0; n < lines.length; n++)\n\t    {\n\t      //let metrics:TextMetrics = context.measureText(lines[n]);\n\t      context.fillText(lines[n], x, y);\n\t      y = y+lineHeight; \n\t    }\n\t    context.fillText(line, x, y);\n\t }\n\t\n   \n\t\n    public static roundedRect(context:CanvasRenderingContext2D,x:number,y:number,\n        w:number,h:number,r:number,borderWitdh:number,borderColor:string,rectColor:string):void\n\t{\n\t\t  if (w < 2 * r) r = w / 2;\n\t\t  if (h < 2 * r) r = h / 2;\n\t\t  context.beginPath();\n\t\t  context.moveTo(x+r, y);\n\t\t  context.arcTo(x+w, y,   x+w, y+h, r);\n\t\t  context.arcTo(x+w, y+h, x,   y+h, r);\n\t\t  context.arcTo(x,   y+h, x,   y,   r);\n\t\t  context.arcTo(x,   y,   x+w, y,   r);\n\t\t  context.closePath();\n\t\t/*\n\t    context.beginPath();\n\t    context.moveTo(x, y);\n\t    context.lineTo(x + width - cornerRadius, y);\n\t    context.arcTo(x + width, y, x + width, y + cornerRadius, cornerRadius);\n\t    context.lineTo(x + width, y + height);\n\t   */ \n\t    context.lineWidth = borderWitdh;\n\t    context.fillStyle = rectColor;\n\t    context.strokeStyle = borderColor;\n\t    \n\t    context.stroke();\n\t    context.fill();\n\t\n\t}\n}\n","import { WorldEngine } from \"../worldengine\";\nimport { Drawable } from \"../../display/drawable\";\nimport { WorldId } from \"../../world/worldid\";\nimport { WorldPosition } from \"../../world/worldposition\";\nimport { CircleEngineShape } from \"../shapes/circleengineshape\";\nimport { RectangleEngineShape } from \"../shapes/rectangleengineshape\";\nimport { MockCircle } from \"./shapes/mockcircle\";\nimport { MockRectangle } from \"./shapes/mockrectangle\";\nimport { MockPolygon } from \"./shapes/mockpolygon\";\nimport { PolygonEngineShape } from \"../shapes/polygonengineshape\";\nimport { CanvasMouse } from \"../../display/canvas/canvasmouse\";\nimport { MouseEventHandler } from \"../../display/canvas/mouseeventhandler\";\nimport { World } from \"../../world/world\";\nimport { CircleDisplayShape } from \"../../display/drawableshapes/circledisplayshape\";\nimport { EngineShape } from \"../shapes/engineshape\";\nimport { TextDisplayShape } from \"../../display/drawableshapes/textdisplayshape\";\nimport { TextEngineShape } from \"../shapes/textengineshape\";\nimport { MockRectangleText } from \"./shapes/mockrectangletext\";\nimport { DrawableConnector } from \"../../display/drawableshapes/drawableconnector\";\nimport { EngineConnectorDef } from \"../shapes/engineconnectordef\";\nimport { EngineConnector } from \"../shapes/engineconnector\";\nimport { MockConnectorDef } from \"./shapes/mockconnectordef\";\nimport { MockConnector } from \"./shapes/mockconnector\";\n\nexport class MockEngine implements WorldEngine {\n  private _mouseAnchor: MockCircle;\n\n  public constructor() {\n    this.mouseAnchor = new MockCircle(\n      new WorldId(\"mouseAnchor\"),\n      new CircleDisplayShape(),\n      5,\n      8,\n      new WorldPosition(-10,-10),\n      { restitution: 0.9, isSensor: true },\n      this\n    );\n  }\n  public getMouseAnchor(): EngineShape {\n    return this.mouseAnchor;\n  }\n\n  public createBounds(width:number,height:number,options:any):void {\n  }\n\n  public startEngine():void {\n  }\n\n  public createCircle(\n    worldId: WorldId,\n    drawable: Drawable,\n    radius: number,\n    numberOfSides: number,\n    worldPosition: WorldPosition,\n    options: any\n  ): CircleEngineShape {\n    let circle: MockCircle = new MockCircle(\n      worldId,\n      drawable,\n      radius,\n      numberOfSides,\n      worldPosition,\n      options,\n      this\n    );\n    return circle;\n  }\n\n  public createRectangle(\n    worldId: WorldId,\n    drawable: Drawable,\n    width: number,\n    height: number,\n    worldPosition: WorldPosition,\n    options: any\n  ): RectangleEngineShape {\n    let rectangle: MockRectangle = new MockRectangle(\n      worldId,\n      drawable,\n      width,\n      height,\n      worldPosition,\n      options,\n      this\n    );\n    return rectangle;\n  }\n\n  public createConnector(worldId:WorldId,drawableConnector:DrawableConnector,connectorShape:EngineShape,\n    engineConnectorDefArray:Array<EngineConnectorDef>,\n    options:any):EngineConnector {\n\n      let mockConnectorDefArrayDef:Array<MockConnectorDef> = new Array<MockConnectorDef>();\n      \n      for(let i=0;i<engineConnectorDefArray.length;i++) \n        mockConnectorDefArrayDef.push(new MockConnectorDef(this,engineConnectorDefArray[i]));\n      \n      let connector = new MockConnector(\n        worldId,\n        drawableConnector,\n        connectorShape,\n        mockConnectorDefArrayDef,\n        options,\n        this);\n    return(connector);\n  }\n\n  public createTextBox(worldId:WorldId,textDisplayShape:TextDisplayShape,width:number,height:number,worldPosition:WorldPosition,options:any):TextEngineShape {\n  //createTextBox(worldId:WorldId,textDisplayShape:TextDisplayShape,width:number,height:number,worldPosition:WorldPosition,options:any):RectangleEngineShape {\n    let rectangleText:MockRectangleText = new MockRectangleText (\n      worldId,\n      textDisplayShape,\n      width,height,worldPosition,\n      options,\n      this\n    );\n    return(rectangleText);\n  }\n\n  public createPolygon(\n    worldId: WorldId,\n    drawable: Drawable,\n    numberOfSides: number,\n    radius: number,\n    worldPosition: WorldPosition,\n    options: any\n  ): PolygonEngineShape {\n    let ploygon: PolygonEngineShape = new MockPolygon(\n      worldId,\n      drawable,\n      numberOfSides,\n      radius,\n      worldPosition,\n      options,\n      this\n    );\n    return ploygon;\n  }\n\n  public pointerDownEngineEvent(\n    world: World,\n    canvasMouse: CanvasMouse,\n    event: MouseEvent,\n    mouseEventHandler: MouseEventHandler\n  ): void {}\n\n  public pointerMoveEngineEvent(\n    world: World,\n    canvasMouse: CanvasMouse,\n    event: MouseEvent,\n    mouseEventHandler: MouseEventHandler\n  ): void {\n    var newPosition = new WorldPosition(\n      event.x - canvasMouse.offset.x,\n      event.y - canvasMouse.offset.y\n    );\n    this.mouseAnchor.translate(newPosition);\n\n    if (mouseEventHandler.getCurrentWorldObject() != null) {\n      var deltaPosition = mouseEventHandler\n        .getMouseStatus()\n        .startPosition.getDelta(mouseEventHandler.getMouseStatus().position);\n\n      let newX =\n        mouseEventHandler.getMouseStatus().startPosition.x -\n        deltaPosition.x +\n        mouseEventHandler.getMouseStatus().clickOffset.x;\n\n      let newY =\n        mouseEventHandler.getMouseStatus().startPosition.y -\n        deltaPosition.y +\n        mouseEventHandler.getMouseStatus().clickOffset.y;\n\n      mouseEventHandler\n        .getCurrentWorldObject()\n        .setWorldPosition(new WorldPosition(newX, newY));\n    }\n  }\n\n  public pointerUpEngineEvent(\n    world: World,\n    canvasMouse: CanvasMouse,\n    event: MouseEvent,\n    mouseEventHandler: MouseEventHandler\n  ): void {}\n\n  public get mouseAnchor(): MockCircle {\n    return this._mouseAnchor;\n  }\n\n  public set mouseAnchor(value: MockCircle) {\n    this._mouseAnchor = value;\n  }\n}\n","import { CircleEngineShape } from \"../../shapes/circleengineshape\";\nimport { WorldPosition } from \"../../../world/worldposition\";\nimport { Drawable } from \"../../../display/drawable\";\nimport { MockShape } from \"./mockshape\";\nimport { WorldId } from \"../../../world/worldid\";\nimport { MockEngine } from \"../mockengine\";\nimport { WorldDisplay } from \"../../../display/worlddisplay\";\n\nexport class MockCircle extends MockShape implements CircleEngineShape\n{\n\tprivate _curvePoints:number;\n\tprivate _radius:number;\n\t\n\n\tconstructor(worldId:WorldId,drawable:Drawable,radius:number,curvePoints:number,position:WorldPosition,options:any,mockEngine:MockEngine)\n\t{\n\t\tsuper(worldId,drawable,position,options);\n\t\tthis.radius = radius;\n\t\tthis.curvePoints = curvePoints;\t\n\t\tdrawable.init(this,options);\n\t}\n\n\tpublic containsWorldPosition(worldPosition:WorldPosition):boolean {\n\t\tlet distance = this.getWorldPosition().getDistance(worldPosition);\n\t\treturn(distance<=this.radius);\n\t}\n\n\tpublic getRadius():number {\n\t\treturn(this.radius);\n\t}\n\n\tpublic getShapePoints():Array<WorldPosition> {\n\t\t//return( WorldDisplay.getPolygonPoints(Math.PI/4,4,this.getWidth()+this.get,this.getWorldPosition() ) ;\n\t\t//WorldDisplay.getCirclePositionList(this.radius,this.curvePoints);\n\t\treturn(WorldDisplay.getCirclePositionList(this.radius,this.curvePoints));\n    }\n\n\tpublic get curvePoints(): number {\n\t\treturn this._curvePoints;\n\t}\n\n\tpublic set curvePoints(value: number) {\n\t\tthis._curvePoints = value;\n\t}\n\t\n\n\tpublic get radius(): number {\n\t\treturn this._radius;\n\t}\n\n\tpublic set radius(value: number) {\n\t\tthis._radius = value;\n\t}\n\n\n}\n","import { WorldPosition } from \"../../../world/worldposition\";\nimport { Drawable } from \"../../../display/drawable\";\nimport { WorldId } from \"../../../world/worldid\";\nimport { EngineConnector } from \"../../shapes/engineconnector\";\nimport { DrawableConnector } from \"../../../display/drawableshapes/drawableconnector\";\nimport { EngineConnectorDef } from \"../../shapes/engineconnectordef\";\nimport { WorldDisplay } from \"../../../display/worlddisplay\";\nimport { EngineShape } from \"../../shapes/engineshape\";\nimport { MockShape } from \"./mockshape\";\nimport { MockEngine } from \"../mockengine\";\nimport { MockCircle } from \"./mockcircle\";\nimport { CircleDisplayShape } from \"../../../display/drawableshapes/circledisplayshape\";\nimport { MockConnectorDef } from \"./mockconnectordef\";\n\nexport class MockConnector extends MockShape implements EngineConnector\n{\n    private _drawableConnector:DrawableConnector;\n    private _mockConnectorDefArray:Array<MockConnectorDef>;\n\n\n    \n\tprivate _connectorShape:EngineShape;\n    constructor(\n        worldId:WorldId,\n        drawableConnector:DrawableConnector,\n        connectorShape:EngineShape,\n        mockConnectorDefArray:Array<MockConnectorDef>,\n        options:any,\n        mockEngine:MockEngine)\n\t{\n       super(worldId,drawableConnector,connectorShape.getWorldPosition(),options);\n       this.drawableConnector = drawableConnector;\n       this.mockConnectorDefArray = mockConnectorDefArray;\n\n       \n       this.connectorShape = connectorShape;\n\n       connectorShape.getDrawable().init(connectorShape,options);\n\n    \n       /*\n       this.connectorCircleBody = new MockCircle(\n            new WorldId(this.worldId+\"-connector-circle\"),\n            new CircleDisplayShape(),\n            this.connectorCircleRadius,this.connectorCircleCurvePoints,\n            this.getWorldPosition(),\n            {},\n            mockEngine\n            );\n      \t*/\n       //this.circleBody.collisionFilter.category = MatterEngine.boundsFilter;\n       //matterEngine.addMatterShape(this);\n        \n       drawableConnector.init(this,options);\n\n       /*\n       for(let i=0;i<this.matterConnectorDefArray.length;i++) {\n        let connectorDef:MatterConnectorDef = matterConnectorDefArray[i];\n        let matterConstraint = Matter.Constraint.create(\n            {\n                bodyA: this.connectorCircleBody,\n                bodyB: connectorDef.matterShape.getBody(),\n                pointA: { x: -0, y: -0 },\n                pointB: { x: -0, y: -0 },\n                length:connectorDef.length,\n                stiffness:connectorDef.stiffness\n            });\n        connectorDef.init(matterConstraint);\n       }\n       matterEngine.addMatterConnector(this);\n       */\n    }\n\n    public positionConnectorShape():void {\n\n        if(this.connectorShape.isAnimated())\n        {\n            this.connectorShape.setWorldPosition(\n\t\t\t    WorldDisplay.getAveragePostionFromPositionList(\n\t\t\t\t    EngineConnectorDef.getWorldPositionArrayFromEngineDefs(\n\t\t\t\t\t    this.getEngineConnectorDefArray()) ) );\n        }\n\n    }\n\n    public getShapePoints():Array<WorldPosition> {\n        //return( WorldDisplay.getPolygonPoints(Math.PI/4,4,this.getWidth()+this.get,this.getWorldPosition() ) ;\n        //return(this.connectorCircleBody.getShapePoints());\n        return( this.connectorShape.getShapePoints());\n    }\n\n\n    /**\n     * Getter mockConnectorDefArray\n     * @return {Array<MockConnectorDef>}\n     */\n\tpublic get mockConnectorDefArray(): Array<MockConnectorDef> {\n\t\treturn this._mockConnectorDefArray;\n\t}\n\n    /**\n     * Setter mockConnectorDefArray\n     * @param {Array<MockConnectorDef>} value\n     */\n\tpublic set mockConnectorDefArray(value: Array<MockConnectorDef>) {\n\t\tthis._mockConnectorDefArray = value;\n\t}\n\n\n    public getEngineConnectorDefArray():Array<EngineConnectorDef> {\n        return(this.mockConnectorDefArray);\n    }\n\n/*\n    public getMiddleWorldPosition():WorldPosition {\n        let positions = new Array<WorldPosition>();\n        for(let i=0;i<this.mockConnectorDefArray.length;i++) positions.push(this.mockConnectorDefArray[i].engineShape.getWorldPosition());\n        let middle:WorldPosition = WorldDisplay.getAveragePostionFromPositionList(positions);\n        return(middle);\n    }\n*/\n\n    /**\n     * Getter connectorShape\n     * @return {EngineShape}\n     */\n\tpublic get connectorShape(): EngineShape {\n\t\treturn this._connectorShape;\n\t}\n\n    /**\n     * Setter connectorShape\n     * @param {EngineShape} value\n     */\n\tpublic set connectorShape(value: EngineShape) {\n\t\tthis._connectorShape = value;\n\t}\n\n\n    public containsWorldPosition(worldPosition:WorldPosition):boolean {\n        //return(this.connectorShape.containsWorldPosition(worldPosition));\n        return(false);\n    }\n\n    /*\n    public getWorldPosition():WorldPosition {\n        //return(this.getMiddleWorldPosition());\n        return(super.getWorldPosition());\n\n    }\n\n\tpublic translate(worldPosition:WorldPosition):void {\n    }\n\n\tpublic setWorldPosition(worldPosition:WorldPosition):void {\n    }\n\n    public containsWorldPosition(worldPosition:WorldPosition):boolean {\n        return(false);\n    }\n\n\tpublic getDrawable():Drawable {\n        return(this.drawableConnector);\n     }\n\n*/\n\n\n\n    /**\n     * Getter drawableConnector\n     * @return {DrawableConnector}\n     */\n\tpublic get drawableConnector(): DrawableConnector {\n\t\treturn this._drawableConnector;\n\t}\n\n    /**\n     * Setter drawableConnector\n     * @param {DrawableConnector} value\n     */\n\tpublic set drawableConnector(value: DrawableConnector) {\n\t\tthis._drawableConnector = value;\n\t}\n\n\n    /**\n     * Getter connectorCircleBody\n     * @return {Matter.Body}\n     *\n\tpublic get connectorCircleBody(): MockCircle {\n\t\treturn this._connectorCircleBody;\n\t}\n\n    /**\n     * Setter connectorCircleBody\n     * @param {Matter.Body} value\n     *\n\tpublic set connectorCircleBody(value: MockCircle) {\n\t\tthis._connectorCircleBody = value;\n\t}\n*/\n\n    \n\n}\n","import { EngineConnectorDef } from \"../../shapes/engineconnectordef\";\nimport { MockShape } from \"./mockshape\";\nimport { MockEngine } from \"../mockengine\";\n\nexport class MockConnectorDef extends EngineConnectorDef {\n    private _mockShape:MockShape;\n    private _matterConstraint:Matter.Constraint;\n\n    /*\n    constructor(matterShape:MatterShape,length:number,stiffness:number) {\n        super(matterShape,length,stiffness);\n        this.matterShape = matterShape; \n        this.matterConstraint = null;\n    }\n    */\n\n    constructor(mockEngine:MockEngine,engineConnectorDef:EngineConnectorDef) {\n\n        super(engineConnectorDef.engineShape,engineConnectorDef.length,engineConnectorDef.stiffness);\n        /*\n        if(!mockEngine.has(engineConnectorDef.engineShape.getWorldId()))\n            throw new Error(\"Error creating MatterConnectorDef, matterShape not found.  WorldId is : \"+\n            engineConnectorDef.engineShape.getWorldId().id);\n        this.matterShape = mockEngine.matterShapes.get(engineConnectorDef.engineShape.getWorldId()); \n        this.matterConstraint = null;\n        */\n    }\n\n    public init():void {\n    }\n\n    /**\n     * Getter mockShape\n     * @return {MockShape}\n     */\n\tpublic get mockShape(): MockShape {\n\t\treturn this._mockShape;\n\t}\n\n    /**\n     * Setter mockShape\n     * @param {MockShape} value\n     */\n\tpublic set mockShape(value: MockShape) {\n\t\tthis._mockShape = value;\n\t}\n\n\n}","import { WorldPosition } from \"../../../world/worldposition\";\nimport { Drawable } from \"../../../display/drawable\";\nimport { MockShape } from \"./mockshape\";\nimport { WorldId } from \"../../../world/worldid\";\nimport { MockEngine } from \"../mockengine\";\nimport { PolygonEngineShape } from \"../../shapes/polygonengineshape\";\nimport { WorldDisplay } from \"../../../display/worlddisplay\";\n\n\nexport class MockPolygon extends MockShape implements PolygonEngineShape\n{\n    private _polygonPointArray:Array<WorldPosition>;\n    private _numberOfSides:number;\n    private _radius:number;\n    \n\n    constructor(worldId:WorldId,drawable:Drawable,numberOfSides:number,radius:number,worldPosition:WorldPosition,options:any,mockEngine:MockEngine)    \n\t{\n        super(worldId,drawable,worldPosition,options);\n        this.radius = radius;\n        this.numberOfSides = numberOfSides;\n        this.polygonPointArray = WorldDisplay.getPolygonPoints(0,numberOfSides,radius,worldPosition);\n\t\tdrawable.init(this,options);\n\t}\n\n\tpublic containsWorldPosition(worldPosition:WorldPosition):boolean {\n        //if(this.boundingBox.containsPosition(position,node)) return false;\n        \n        let i = 0;\n        let j = 0;\n        let c = false;\n        for(i=0,j=this.polygonPointArray.length-1;i< this.polygonPointArray.length;j=i++)\n        {\n            //\n            var pi = this.polygonPointArray[i];\n            var pj = this.polygonPointArray[j];\n                \n            if (\n                ((pi.y>worldPosition.y) != (pj.y>worldPosition.y)) &&\n                    (worldPosition.x < (pj.x-pi.x) *\n                    (worldPosition.y-pi.y) /\n                    (pj.y-pi.y) +\n                    pi.x) )\n                c = !c;\n        }\n        return c;\n    }\n\n    public getRadius():number {\n        return(this.radius);\n    }\n\n    public getNumberOfSides():number {\n        return(this.numberOfSides);\n    }\n\n    public \tgetShapePoints():Array<WorldPosition> {\n        return(this.polygonPointArray);\n    }    \n\n    public \tgetPointList():Array<WorldPosition> {\n        return(this.polygonPointArray);\n    }    \n\n    public translate(worldPosition:WorldPosition):void {\n        super.translate(worldPosition);\n        //this.polygonPointArray = WorldDisplay.getPolygonPoints(0,this.numberOfSides,this.radius,worldPosition);\n        \n            for(let i=0;i<this.polygonPointArray.length;i++) \n                this.polygonPointArray[i].translate(this.getWorldPosition());\n\t}\n\n\t\n\tpublic setWorldPosition(worldPosition:WorldPosition):void {\n       super.setWorldPosition(worldPosition);\n       this.polygonPointArray = WorldDisplay.getPolygonPoints(0,this.numberOfSides,this.radius,this.getWorldPosition());\n\n       // TODO this is not working becasue it moves all points to the same point... it should be getting the offset from the set\n       // position and moving each point by that amount\n      //  for(let i=0;i<this.polygonPointArray.length;i++) \n      //    this.polygonPointArray[i].setWorldPosition(this.getWorldPosition());\n\t}\n\n\n\t\n\n    public getPolygonPoints():Array<WorldPosition> {\n        return(this.polygonPointArray);\n\n    }\n    \n\n\tpublic get radius(): number {\n\t\treturn this._radius;\n\t}\n\n\tpublic set radius(value: number) {\n\t\tthis._radius = value;\n\t}\n    \n\n\n\tpublic get polygonPointArray(): Array<WorldPosition> {\n\t\treturn this._polygonPointArray;\n\t}\n\n\tpublic set polygonPointArray(value: Array<WorldPosition>) {\n\t\tthis._polygonPointArray = value;\n\t}\n\n\n\tpublic get numberOfSides(): number {\n\t\treturn this._numberOfSides;\n\t}\n\n\tpublic set numberOfSides(value: number) {\n\t\tthis._numberOfSides = value;\n\t}\n\n}\n","import { RectangleEngineShape } from \"../../shapes/rectangleengineshape\";\nimport { WorldPosition } from \"../../../world/worldposition\";\nimport { Drawable } from \"../../../display/drawable\";\nimport { MockShape } from \"./mockshape\";\nimport { WorldId } from \"../../../world/worldid\";\nimport { MockEngine } from \"../mockengine\";\n\nexport class MockRectangle extends MockShape implements RectangleEngineShape\n{\n\tprivate _width:number;\n\tprivate _height:number;\n\n\tconstructor(worldId:WorldId,drawable:Drawable,width:number,height:number,position:WorldPosition,options:any,mockEngine:MockEngine)\n\t{\n\t\tsuper(worldId,drawable,position,options);\n\t\tthis.width = width;\n\t\tthis.height = height;\t\n\t\tdrawable.init(this,options);\n\t}\n\n\tpublic setSize(width:number,height:number) {\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t}\n\n\tpublic containsWorldPosition(worldPosition:WorldPosition):boolean {\n\t\treturn(\n\t\t\t(\n\t\t\t\t\t\t\t(this.getWorldPosition().x-this.getWidth()/2)<=worldPosition.x &&\n\t\t\t\t\t\t\t(this.getWorldPosition().x+this.getWidth()/2)>=worldPosition.x &&\n\t\t\t\t\t\t\t(this.getWorldPosition().y-this.getHeight()/2)<=worldPosition.y &&\n\t\t\t\t\t\t\t(this.getWorldPosition().y+this.getHeight()/2)>=worldPosition.y\n\t\t\t)\n\t\t);\n\t}\n\n\tpublic getShapePoints():Array<WorldPosition> {\n\t\t//return( WorldDisplay.getPolygonPoints(Math.PI/4,4,this.getWidth()+this.get,this.getWorldPosition() ) ;\n\t\tlet polygonPointArray = Array<WorldPosition>();\t\n\n\n\t\tpolygonPointArray.push( new WorldPosition(\n\t\t\tthis.getWorldPosition().x+this.getWidth()/2,\n\t\t\tthis.getWorldPosition().y+this.getHeight()/2 ) );\n\n\t\tpolygonPointArray.push( new WorldPosition(\n\t\t\tthis.getWorldPosition().x+this.getWidth()/2,\n\t\t\tthis.getWorldPosition().y-this.getHeight()/2 ) );\n\n\t\tpolygonPointArray.push( new WorldPosition(\n\t\t\tthis.getWorldPosition().x-this.getWidth()/2,\n\t\t\tthis.getWorldPosition().y-this.getHeight()/2 ) );\n\n\t\tpolygonPointArray.push( new WorldPosition(\n\t\t\tthis.getWorldPosition().x-this.getWidth()/2,\n\t\t\tthis.getWorldPosition().y+this.getHeight()/2 ) );\n\n\t\treturn(polygonPointArray);    }\n\n\tpublic getWidth():number {\n\t\treturn(this.width);\n\t}\n\tpublic getHeight():number {\n\t\treturn(this.height);\n\t}\n\n\tpublic get width(): number {\n\t\treturn this._width;\n\t}\n\n\tpublic set width(value: number) {\n\t\tthis._width = value;\n\t}\n\n\tpublic get height(): number {\n\t\treturn this._height;\n\t}\n\n\tpublic set height(value: number) {\n\t\tthis._height = value;\n\t}\n\n\n\n}\n","import { RectangleEngineShape } from \"../../shapes/rectangleengineshape\";\nimport { WorldPosition } from \"../../../world/worldposition\";\nimport { Drawable } from \"../../../display/drawable\";\nimport { MockShape } from \"./mockshape\";\nimport { WorldId } from \"../../../world/worldid\";\nimport { MockEngine } from \"../mockengine\";\nimport { MockRectangle } from \"./mockrectangle\";\nimport { TextEngineShape } from \"../../shapes/textengineshape\";\nimport { DrawableText } from \"../../../display/drawableshapes/drawabletext\";\n\nexport class MockRectangleText extends MockRectangle implements TextEngineShape\n{\n    private _drawableText:DrawableText;\n\n\n\tconstructor(worldId:WorldId,drawableText:DrawableText,width:number,height:number,position:WorldPosition,options:any,mockEngine:MockEngine)\n\t{\n        super(worldId,drawableText,width,height,position,options,mockEngine);\n        this.drawableText = drawableText;\n\n/*\n\t\tsuper(worldId,drawable,position,options);\n\t\tthis.width = width;\n\t\tthis.height = height;\t\n        drawable.init(this,options);\n        */\n\t}\n    public setText(displayText:string):void {\n        this.drawableText.setText(displayText);\n    }\n\n\tpublic getText():string {\n        return(this.drawableText.getText());\n    }\n\n    /**\n     * Getter drawableText\n     * @return {DrawableText}\n     */\n\tpublic get drawableText(): DrawableText {\n\t\treturn this._drawableText;\n\t}\n\n    /**\n     * Setter drawableText\n     * @param {DrawableText} value\n     */\n\tpublic set drawableText(value: DrawableText) {\n\t\tthis._drawableText = value;\n\t}\n\n\n\n}\n","import { WorldPosition } from \"../../../world/worldposition\";\nimport { Drawable } from \"../../../display/drawable\";\nimport { WorldObject } from \"../../../world/worldobject\";\nimport { WorldId } from \"../../../world/worldid\";\nimport { WorldObjectEventHandler } from \"../../../world/worldobjecteventhandler\";\nimport { World } from \"../../../world/world\";\nimport { CanvasMouse } from \"../../../display/canvas/canvasmouse\";\n\n//import { World } from \"../../walkerworld/world\";\n//import { WorldObjectDisplay } from \"../worldobjectdisplay\";\n\nexport abstract class MockShape implements WorldObject  \n{\n\tprivate _drawable:Drawable;\n\tprivate _worldId:WorldId;\n\tprivate _isObjectAnimated:boolean;\n\tprivate _isObjectVisable:boolean;\n\tprivate _isObjectSelected:boolean;\n\tprivate _objectOptions:any;\n\tprivate _worldObjectEventHandler:WorldObjectEventHandler;\n\n\tprivate _position:WorldPosition; \n\n    constructor(worldId:WorldId,drawable:Drawable,position:WorldPosition,options:any) {\n\t\tthis.worldId = worldId;\n\t\tthis.drawable = drawable;\n\t\tthis.isObjectAnimated = true;\n\t\tthis.isObjectVisable = true;\n\t\tthis.isObjectSelected = true;\n\t\tthis.drawable = drawable;\n\t\tthis.position = position;\n\t\tthis.worldObjectEventHandler = this.createMouseEventHandler();\n\t}\n\n\tpublic stopRotation():void {\n\t\t// its a mock engine, nothng to do here :)\n\t}\n\n\n\tpublic \tcreateMouseEventHandler():WorldObjectEventHandler {\n\t\tlet woe:WorldObjectEventHandler = \n\t   {\n\t\t   pointerDownEvent : function (world:World,canvasMouse:CanvasMouse,event:MouseEvent):void {},\n\t\t   pointerMoveEvent : function (world:World,canvasMouse:CanvasMouse,event:MouseEvent):void {},\n\t\t   pointerUpEvent : function (world:World,canvasMouse:CanvasMouse,event:MouseEvent):void {}\n\t   }\n\t   return(woe);\n   }\n   public getWorldObjectEventHandler():WorldObjectEventHandler {\n\treturn(this.worldObjectEventHandler);\n\n   }\n\n   public setWorldObjectEventHandler(worldObjectEventHandler:WorldObjectEventHandler):void {\n\tthis.worldObjectEventHandler = worldObjectEventHandler;\n\t}\n\t\n\tpublic isAnimated(): boolean { return(this.isObjectAnimated); }\n\tpublic isSelected(): boolean { return(this.isObjectSelected); }\n\tpublic isVisable():boolean { return(this.isObjectVisable); }\n\tpublic getWorldId(): WorldId { return(this.worldId); }\n\tpublic getOptions(): any { return(this.objectOptions); }\n\n\tpublic setAnimated(animated:boolean):void { this.isObjectAnimated = animated; }\n\tpublic setSelected(selected:boolean): void { this.isObjectSelected = selected; }\n\tpublic setVisable(visable:boolean):void { this.isObjectVisable = visable; }\n\t\n\tpublic scaleShape(scaleX:number,scaleY:number):void {\n\t\tconsole.error(\"scaleShape NOT IMPLMENTED\");\n\t\t\n\t}\n    public getWorldPosition():WorldPosition {\n\t\treturn(this.position );\n\t}\n\n\tpublic setWorldPosition(worldPosition:WorldPosition):void {\n\t\t//this.position.x = worldPosition.x;\n\t\t//this.position.y = worldPosition.y;\n\t\tthis.position.setWorldPosition(worldPosition);\n\t}\n\n\tpublic translate(worldPosition:WorldPosition):void {\n\t\t//this.position.x = worldPosition.x;\n\t\t//this.position.y = worldPosition.y;\n\t\tthis.position.translate(worldPosition);\n\t\t\n\t}\n\n    /**\n     * Getter worldObjectEventHandler\n     * @return {WorldObjectEventHandler}\n     */\n\tpublic get worldObjectEventHandler(): WorldObjectEventHandler {\n\t\treturn this._worldObjectEventHandler;\n\t}\n\n    /**\n     * Setter worldObjectEventHandler\n     * @param {WorldObjectEventHandler} value\n     */\n\tpublic set worldObjectEventHandler(value: WorldObjectEventHandler) {\n\t\tthis._worldObjectEventHandler = value;\n\t}\n\n\tpublic abstract containsWorldPosition(worldPosition:WorldPosition):boolean;\n\n    public getDrawable():Drawable {\n        return(this.drawable);\n    }\n\n\n\tpublic get drawable(): Drawable {\n\t\treturn this._drawable;\n\t}\n\n\tpublic set drawable(value: Drawable) {\n\t\tthis._drawable = value;\n\t}\n    \n\n\tpublic get position(): WorldPosition {\n\t\treturn this._position;\n\t}\n\n\tpublic set position(value: WorldPosition) {\n\t\tthis._position = value;\n\t}\n\n\tpublic get worldId(): WorldId {\n\t\treturn this._worldId;\n\t}\n\n\tpublic set worldId(value: WorldId) {\n\t\tthis._worldId = value;\n\t}\n\n\tpublic get isObjectAnimated(): boolean {\n\t\treturn this._isObjectAnimated;\n\t}\n\n\tpublic set isObjectAnimated(value: boolean) {\n\t\tthis._isObjectAnimated = value;\n\t}\n\n\tpublic get isObjectVisable(): boolean {\n\t\treturn this._isObjectVisable;\n\t}\n\n\tpublic set isObjectVisable(value: boolean) {\n\t\tthis._isObjectVisable = value;\n\t}\n\n\tpublic get isObjectSelected(): boolean {\n\t\treturn this._isObjectSelected;\n\t}\n\n\tpublic set isObjectSelected(value: boolean) {\n\t\tthis._isObjectSelected = value;\n\t}\n\n\tpublic get objectOptions(): any {\n\t\treturn this._objectOptions;\n\t}\n\n\tpublic set objectOptions(value: any) {\n\t\tthis._objectOptions = value;\n\t}\n\n}\n","import { EngineShape } from \"./engineshape\";\nimport { WorldPosition } from \"../../world/worldposition\";\n\nexport class EngineConnectorDef {\n    private _engineShape:EngineShape;\n    private _length:number;\n    private _stiffness:number;\n\n    constructor(engineShape:EngineShape,length:number,stiffness:number) {\n        this.engineShape = engineShape;\n        this.length = length;\n        this.stiffness = stiffness;\n    }\n\n    public static getWorldPositionArrayFromEngineDefs(engineConnectorDefArray:Array<EngineConnectorDef>):Array<WorldPosition> {\n\t\tlet worldPositionArray:Array<WorldPosition> = new Array<WorldPosition>();\n\t\tfor(let n = 0; n < engineConnectorDefArray.length; n++)\n\t\t{\n\t\t\tworldPositionArray.push(engineConnectorDefArray[n].engineShape.getWorldPosition());\n\t\t}\n\t\treturn(worldPositionArray);\n   }\n    \n\n    /**\n     * Getter engineShape\n     * @return {EngineShape}\n     */\n\tpublic get engineShape(): EngineShape {\n\t\treturn this._engineShape;\n\t}\n\n    /**\n     * Setter engineShape\n     * @param {EngineShape} value\n     */\n\tpublic set engineShape(value: EngineShape) {\n\t\tthis._engineShape = value;\n\t}\n\n    /**\n     * Getter length\n     * @return {number}\n     */\n\tpublic get length(): number {\n\t\treturn this._length;\n\t}\n\n    /**\n     * Setter length\n     * @param {number} value\n     */\n\tpublic set length(value: number) {\n\t\tthis._length = value;\n    }\n    \n\n    /**\n     * Getter stiffness\n     * @return {number}\n     */\n\tpublic get stiffness(): number {\n\t\treturn this._stiffness;\n\t}\n\n    /**\n     * Setter stiffness\n     * @param {number} value\n     */\n\tpublic set stiffness(value: number) {\n\t\tthis._stiffness = value;\n\t}\n\n\n}","import { CanvasHolderHTML } from \"./display/canvas/canvasholderhtml\";\nimport { MockEngine } from \"./engine/mockengine/mockengine\";\nimport { WorldOfWorldObjects } from \"./world/worldofworldobjects\";\nimport { CircleDisplayShape } from \"./display/drawableshapes/circledisplayshape\";\nimport { WorldPosition } from \"./world/worldposition\";\nimport { WorldId } from \"./world/worldid\";\nimport { CircleEngineShape } from \"./engine/shapes/circleengineshape\";\nimport { RectangleEngineShape } from \"./engine/shapes/rectangleengineshape\";\nimport { RectangleDisplayShape } from \"./display/drawableshapes/rectangledisplayshape\";\nimport { PolygonEngineShape } from \"./engine/shapes/polygonengineshape\";\nimport { PolygonDisplayShape } from \"./display/drawableshapes/polygondisplayshape\";\nimport { TextDisplayShape } from \"./display/drawableshapes/textdisplayshape\";\nimport { Test1 } from \"./test1\";\n\n\nexport let mockEngine = new MockEngine();\nexport let world:WorldOfWorldObjects = new WorldOfWorldObjects(mockEngine);\nexport let canvasHolder:CanvasHolderHTML = new CanvasHolderHTML(\"worldCanvas\",world);\nexport let test1 = new Test1(mockEngine,world,canvasHolder);\n\n","import { CanvasHolderHTML } from \"./display/canvas/canvasholderhtml\";\nimport { WorldOfWorldObjects } from \"./world/worldofworldobjects\";\nimport { CircleDisplayShape } from \"./display/drawableshapes/circledisplayshape\";\nimport { WorldPosition } from \"./world/worldposition\";\nimport { WorldId } from \"./world/worldid\";\nimport { CircleEngineShape } from \"./engine/shapes/circleengineshape\";\nimport { RectangleEngineShape } from \"./engine/shapes/rectangleengineshape\";\nimport { RectangleDisplayShape } from \"./display/drawableshapes/rectangledisplayshape\";\nimport { TextDisplayShape } from \"./display/drawableshapes/textdisplayshape\";\nimport { PolygonDisplayShape } from \"./display/drawableshapes/polygondisplayshape\";\nimport { PolygonEngineShape } from \"./engine/shapes/polygonengineshape\";\nimport { TextEngineShape } from \"./engine/shapes/textengineshape\";\nimport { WorldEngine } from \"./engine/worldengine\";\nimport { World } from \"./world/world\";\nimport { EngineConnector } from \"./engine/shapes/engineconnector\";\nimport { EngineConnectorDef } from \"./engine/shapes/engineconnectordef\";\nimport { LineConnectoDisplayShape } from \"./display/drawableshapes/lineconnectordisplayshape\";\nimport { LineConnectorDisplay } from \"./display/drawableshapes/lineconnectordisplay\";\n\nexport class Test1 {\n\n    constructor(worldEngine:WorldEngine,world:World,canvasHolder:CanvasHolderHTML) {\n\n       let circle1:CircleEngineShape = world.worldEngine.createCircle(\n          new WorldId(\"circle1\"),\n          new CircleDisplayShape(),\n          30,8,\n          new WorldPosition(400,400),\n          {restitution:0.9}\n        );\n        \n      let circle2:CircleEngineShape = world.worldEngine.createCircle(\n        new WorldId(\"circle2\"),\n        new CircleDisplayShape(),\n        40,8,\n        new WorldPosition(300,300),\n        {restitution:0.9}\n      );\n      \n        \n      let rectangle1:RectangleEngineShape = world.worldEngine.createRectangle(\n        new WorldId(\"rectangle1\"),\n        new RectangleDisplayShape(),\n        40,40,\n        new WorldPosition(100,100),\n        {}\n      );\n      \n      let polygon1:PolygonEngineShape = world.worldEngine.createPolygon(\n        new WorldId(\"polygon1\"),\n        new PolygonDisplayShape(),\n        5,40,\n        new WorldPosition(400,100),\n        {}\n      );\n      \n      \n      let textBox1:TextEngineShape = world.worldEngine.createTextBox(\n        new WorldId(\"textbox1\"),\n        new TextDisplayShape(\n          new RectangleDisplayShape(),\n          \"SomeText Mg\\nAnd more text Mg\"),\n        100,100,\n        new WorldPosition(550,550),\n        {}\n      );\n            \n      \n      \n      let textBox2:TextEngineShape = world.worldEngine.createTextBox(\n        new WorldId(\"textbox2\"),\n        new TextDisplayShape(\n          new RectangleDisplayShape(),\n          \"hey there friend Mg\"),\n        //80,20,\n        100,100,\n        new WorldPosition(150,550),\n        {}\n      );\n      \n      let textBox3:TextEngineShape = world.worldEngine.createTextBox(\n        new WorldId(\"textbox3\"),\n        new TextDisplayShape(\n          new RectangleDisplayShape(),\n          \"SomeText Mg\\nAnd more text Mg\\nSomeText Mg\\nAnd more text Mg\\nSomeText Mg\\nAnd more text Mg\\nSomeText Mg\\nAnd MOOORE text Mg\"),\n          100,100,\n          new WorldPosition(550,250),\n        {}\n      );\n\n      let c1A:EngineConnectorDef = new EngineConnectorDef(textBox1,200,0.5);\n      let c1B:EngineConnectorDef = new EngineConnectorDef(textBox2,200,0.5);\n\n      let c1Circle:CircleEngineShape = world.worldEngine.createCircle(\n        new WorldId(\"c1Circle\"),\n        new CircleDisplayShape(),\n        40,8,\n        new WorldPosition(300,300),\n        {restitution:0.9}\n      );\n      \n      let connector1:EngineConnector = world.worldEngine.createConnector(\n        new WorldId(\"connector1\"),\n        new LineConnectorDisplay(),//drawableConnector:DrawableConnector,\n        c1Circle,//connectorShape:EngineShape,\n        [c1A,c1B],\n        {}\n      );\n\n      \n      world.addWorldObject(circle1);\n      world.addWorldObject(circle2);\n      world.addWorldObject(rectangle1);\n      world.addWorldObject(polygon1);\n      world.addWorldObject(textBox1);\n      world.addWorldObject(textBox2);\n      world.addWorldObject(textBox3);\n      world.addWorldObject(connector1);\n\n      world.addWorldObject(c1Circle);\n\n      world.addWorldObject(world.worldEngine.getMouseAnchor());\n      \n      \n      worldEngine.createBounds(canvasHolder.getWidth(),canvasHolder.getHeight(),{restitution:0.9});\n      let interval:number = 1000/30; //one millisecond over beat per second\n      console.log(\"drawing every : \"+interval+\"ms\");\n      setInterval(doDraw,interval);\n      \n      worldEngine.startEngine();\n      function doDraw()\n      {\n        world.drawWorld(canvasHolder);\t\n      }\n    }\n\n}","//import { MatterTools } from \"../matterengine/mattertools\";\n//import { World } from \"../walkerworld/world\";\n//import { MatterEvent } from \"../matterengine/matterevent\";\n//import { MatterCollisionEvent } from \"../matterengine/mattercollisionevent\";\n//import { DisplayHolder } from \"../display/displayholder\";\nimport { WorldEngine } from \"../engine/worldengine\";\nimport { WorldPosition } from \"./worldposition\";\nimport { WorldObject } from \"./worldobject\";\nimport { CanvasHolder } from \"../display/canvas/canvasholder\";\nimport { WorldId } from \"./worldid\";\n\n\nexport abstract class World {\n\n   // private _displayHolder:DisplayHolder;\n\tprivate _worldEngine:WorldEngine;\n\n    constructor(worldEngine:WorldEngine){\n\t\tthis.worldEngine = worldEngine;\n\t}\n\n\tpublic abstract addWorldObject(worldObject:WorldObject):void;\n\n    public abstract getWorldObjectMatchingWorldId(worldId:WorldId):WorldObject;\n\t\n\tpublic abstract getWorldObjectContainingPosition(worldPosition:WorldPosition):WorldObject;\n\n\tpublic abstract drawWorld(canvasHolder:CanvasHolder):void;\n\n\tpublic get worldEngine(): WorldEngine {\n\t\treturn this._worldEngine;\n\t}\n\n\tpublic set worldEngine(value: WorldEngine) {\n\t\tthis._worldEngine = value;\n\t}\n    \n}","\nexport class WorldId {\n    private _id:string;\n\n    public constructor(woldObjectId:string) {\n        this.id = woldObjectId;\n\t}\n\t\n\tpublic matches(worldId:WorldId):boolean {\n\t\treturn(this.id==worldId.id);\n\t}\n\n\tpublic get id(): string {\n\t\treturn this._id;\n\t}\n\n\tpublic set id(value: string) {\n\t\tthis._id = value;\n\t}\n\n}","import { WorldEngine } from \"../engine/worldengine\";\nimport { WorldObject } from \"./worldobject\";\nimport { World } from \"./world\";\nimport { CanvasHolder } from \"../display/canvas/canvasholder\";\nimport { WorldPosition } from \"./worldposition\";\nimport { WorldId } from \"./worldid\";\n\n\nexport class WorldOfWorldObjects extends World{\n\n    private _worldObjectArray:Array<WorldObject>;\n\n    constructor(worldEngine:WorldEngine){\n        super(worldEngine);\n        this.worldObjectArray = new Array<WorldObject>();\n\t}\n\t\n\t\n\tpublic drawWorld(canvasHolder:CanvasHolder):void {\n        let context = canvasHolder.getContext();\n        canvasHolder.clearCanvas();\n        for(let i=0;i<this.worldObjectArray.length;i++) {\n            let worldObject:WorldObject = this.worldObjectArray[i];\n            worldObject.getDrawable().draw(context);\n        }\n    }\n\n    public addWorldObject(worldObject:WorldObject):void {\n        this.worldObjectArray.push(worldObject);\n    }\n\n\n    public getWorldObjectMatchingWorldId(worldId:WorldId):WorldObject {\n        let foundObject:WorldObject = null;\n        for(let i=0;i<this.worldObjectArray.length;i++) {\n            ////console.log(\"this.worldObjectArray.length=\"+this.worldObjectArray.length+\":i=\"+i);\n            let worldObject:WorldObject = this.worldObjectArray[i];\n            ////console.log(\"    worldObject.position=\"+worldObject.getWorldPosition());\n            if(worldObject.getWorldId().matches(worldId)) foundObject = worldObject;\n        }\n        return(foundObject);\n    }\n\n\n    public getWorldObjectContainingPosition(worldPosition:WorldPosition):WorldObject {\n        let foundObject:WorldObject = null;\n        for(let i=0;i<this.worldObjectArray.length;i++) {\n            ////console.log(\"this.worldObjectArray.length=\"+this.worldObjectArray.length+\":i=\"+i);\n            let worldObject:WorldObject = this.worldObjectArray[i];\n            ////console.log(\"    worldObject.position=\"+worldObject.getWorldPosition());\n            if(worldObject.containsWorldPosition(worldPosition) && worldObject!=this.worldEngine.getMouseAnchor()) foundObject = worldObject;\n        }\n        return(foundObject);\n    }\n\n    /**\n     * Getter worldObjectArray\n     * @return {Array<WorldObject>}\n     */\n\tpublic get worldObjectArray(): Array<WorldObject> {\n\t\treturn this._worldObjectArray;\n\t}\n\n    /**\n     * Setter worldObjectArray\n     * @param {Array<WorldObject>} value\n     */\n\tpublic set worldObjectArray(value: Array<WorldObject>) {\n\t\tthis._worldObjectArray = value;\n\t}\n    \n}","import { WorldObject } from \"./worldobject\";\n\n\nexport class WorldPosition {\n    private _x:number;\n    private _y:number;\n\n    public constructor(x:number,y:number) {\n        this.x = x;\n        this.y = y;\n    }\n\n\tpublic get x(): number {\n\t\treturn this._x;\n\t}\n\n\tpublic set x(value: number) {\n\t\tthis._x = value;\n\t}\n\n\tpublic get y(): number {\n\t\treturn this._y;\n\t}\n\n\tpublic set y(value: number) {\n\t\tthis._y = value;\n\t}\n\n\tpublic clone():WorldPosition {\n\t\treturn(new WorldPosition(this.x,this.y));\n\t}\n\n\tpublic translate(worldPosition:WorldPosition):void {\n\t\t//this.x = this.x + worldPosition.x;\n\t\t//this.y = this.y + worldPosition.y;\n\t\tthis.x = worldPosition.x;\n\t\tthis.y = worldPosition.y;\n\t}\n\n\tpublic setWorldPosition(worldPosition:WorldPosition):void {\n\t\tthis.x = worldPosition.x;\n\t\tthis.y = worldPosition.y;\n\t\t\n\t}\n\n\tpublic getDeltaY(worldPosition:WorldPosition):number\n\t{\n\t\t\treturn(this.y-worldPosition.y);\n\t}\n\n\tpublic getDeltaX(worldPosition:WorldPosition):number\n\t{\n\t\t\treturn(this.x-worldPosition.x);\n\t}\n\n\tpublic getDelta(worldPosition:WorldPosition):WorldPosition\n\t{\n\t\t\treturn(new WorldPosition(this.getDeltaX(worldPosition),this.getDeltaY(worldPosition)));\n\t}\n\n\tpublic equals(worldPosition:WorldPosition):boolean\n\t{\n\t\treturn( (this.x==worldPosition.x) && (this.y==worldPosition.y) ) ;\n\t}\n\n\tpublic getDistance(worldPosition:WorldPosition):number\n\t{\n\t\treturn (Math.sqrt(Math.pow(this.getDeltaX(worldPosition), 2) + Math.pow(this.getDeltaY(worldPosition), 2)));\n\t}\n\n\tpublic static getAveragePostionFromWorldPositionList(positionList:Array<WorldPosition>):WorldPosition\n\t{\n\t\tlet x = 0.0;\n\t\tlet y = 0.0;\n\t\tfor(let i=0;i<positionList.length;i++)\n\t\t{\n\t\t\tlet p = positionList[i];\n\t\t\tx += p.x;\n\t\t\ty += p.y;\n\t\t}\n\t\tx = x / positionList.length;\n\t\ty = y / positionList.length;\n\t\treturn(new WorldPosition(x,y));\n\t}\n\n\tpublic static getAveragePostionFromWorldObjectList(worldObjectList:Array<WorldObject>):WorldPosition\n\t{\n\t  let x = 0.0;\n\t  let y = 0.0;\n\t  for(var i=0;i<worldObjectList.length;i++)\n\t  {\n\t\t  var p = worldObjectList[i].getWorldPosition();\n\t\t  x += p.x;\n\t\t  y += p.y;\n\t  }\n\t  x = x / worldObjectList.length;\n\t  y = y / worldObjectList.length;\n\t  return(new WorldPosition(x,y));\n\t}\n\n\tpublic static getPostionListFromNodeList(worldObjectList:Array<WorldObject>):Array<WorldPosition>\n\t{\n\t\tvar positions = new Array<WorldPosition>();\n\t\tfor (var i = 0; i < worldObjectList.length; i++)\n\t\t{\n\t\t\tpositions.push(worldObjectList[i].getWorldPosition());\n\t\t}\n\t\treturn(positions);\n\t}\n\n\n}"]}