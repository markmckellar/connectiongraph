{"version":3,"sources":["node_modules/browser-pack/_prelude.js","source/display/canvas/canvasholderhtml.ts","source/display/canvas/canvasmouse.ts","source/display/canvas/mouseeventhandlerworldobject.ts","source/display/canvas/mousestatus.ts","source/display/drawableshapes/circledisplayshape.ts","source/display/drawableshapes/polygondisplayshape.ts","source/display/drawableshapes/rectangledisplayshape.ts","source/display/worlddisplay.ts","source/engine/mockengine/mockengine.ts","source/engine/mockengine/shapes/mockcircle.ts","source/engine/mockengine/shapes/mockpolygon.ts","source/engine/mockengine/shapes/mockrectangle.ts","source/engine/mockengine/shapes/mockshape.ts","source/main_mock.ts","source/world/world.ts","source/world/worldid.ts","source/world/worldofworldobjects.ts","source/world/worldposition.ts"],"names":["f","exports","module","define","amd","g","window","global","self","this","test_mock","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","canvasmouse_1","mouseeventhandlerworldobject_1","worlddisplay_1","CanvasHolderHTML","canvasName","world","isVisable","isDrawable","canvas","document","getElementById","context","getContext","canvasMouse","CanvasMouse","MouseEventHandlerWorldObject","prototype","clearCanvas","clearRect","getWidth","getHeight","fillStyle","WorldDisplay","getColorFromString","fillRect","getCanvas","isCanvasVisable","_isVisable","isCanvasDrawable","_isDrawable","Object","defineProperty","_canvasName","value","_canvas","_context","_canvasMouse","worldposition_1","canvasholderHTML","mouseEventHandler","offset","getCanvasOffset","addEventListener","event","pointerDownEvent","pointerMoveEvent","pointerUpEvent","offsetLeft","offsetTop","object","isNaN","element","offsetParent","hasOwnProperty","WorldPosition","_offset","_mouseEventHandler","mousestatus_1","mouseStatus","MouseStatus","currentWorldObject","lastWorldObject","worldObjectSelected","wWorldObject","worldObjectDeselected","getWorldPositionFromMouseEvent","pageX","x","pageY","y","eventPosition","console","log","JSON","stringify","isDown","startPosition","position","setAnimated","setSelected","clickWorldObject","getWorldObjectContainingPosition","getWorldId","id","clone","clickOffset","getWorldPosition","getDelta","deltaPosition","newX","newY","setWorldPosition","_mouseStatus","_currentWorldObject","_lastWorldObject","_isDown","_startPosition","_position","_clickOffset","CircleDisplayShape","circleEngineShape","init","options","_circleEngineShape","draw","strokeStyle","beginPath","arc","getRadius","Math","PI","closePath","fill","lineWidth","stroke","PolygonDisplayShape","polygonEngineShape","_polygonEngineShape","drawOutlinedShape","getPolygonPoints","RectangleDisplayShape","rectangleEngineShape","_rectangleEngineShape","strokeRect","colorString","parseInt","substring","worldPositionArray","point","moveTo","lineTo","getAveragePostionFromPositionList","positionList","p","getCirclePositionList","radius","curvePoints","pointList","Array","angleInc","angle","rads","push","cos","sin","getTrianglePositionList","width","height","getRectanglePositionList","getArcPositionList","endAngle","startAngle","abs","angle_1","fillTextMutipleLines","text","lineHeight","splitChar","lines","split","fillText","metricsTextMutipleLines","maxWidth","totalHeight","metrics","measureText","roundedRect","w","h","borderWitdh","borderColor","rectColor","arcTo","mockcircle_1","mockrectangle_1","mockpolygon_1","MockEngine","createCircle","worldId","drawable","numberOfSides","worldPosition","MockCircle","createRectangle","MockRectangle","createPolygon","MockPolygon","mockshape_1","_super","mockEngine","_this","__extends","containsWorldPosition","getDistance","_curvePoints","_radius","MockShape","polygonPointArray","angleIncrement","j","c","pi","pj","getNumberOfSides","getPointList","translate","_polygonPointArray","_numberOfSides","_width","_height","isObjectAnimated","isObjectVisable","isObjectSelected","isAnimated","isSelected","getOptions","animated","selected","setVisable","visable","getDrawable","_drawable","_worldId","_isObjectAnimated","_isObjectVisable","_isObjectSelected","_objectOptions","doDraw","drawWorld","canvasHolder","canvasholderhtml_1","mockengine_1","worldofworldobjects_1","circledisplayshape_1","worldid_1","rectangledisplayshape_1","polygondisplayshape_1","WorldOfWorldObjects","circle1","worldEngine","WorldId","circle2","rectangle1","polygon1","worldObjectArray","setInterval","World","_worldEngine","woldObjectId","_id","world_1","foundObject","worldObject","_worldObjectArray","_x","_y","getDeltaY","getDeltaX","equals","sqrt","pow","getAveragePostionFromWorldPositionList","getAveragePostionFromWorldObjectList","worldObjectList","getPostionListFromNodeList","positions"],"mappings":"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","file":"test_mock.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import { CanvasHolder } from \"./canvasholder\";\nimport { World } from \"../../world/world\";\nimport { CanvasMouse } from \"./canvasmouse\";\nimport { MouseEventHandlerWorldObject } from \"./mouseeventhandlerworldobject\";\nimport { WorldDisplay } from \"../worlddisplay\";\n\n\nexport class CanvasHolderHTML implements CanvasHolder\n{\n\tprivate _isVisable:boolean;\n\tprivate _isDrawable:boolean;\n\tprivate _canvasName:string;\n\tprivate _canvas:HTMLCanvasElement;\n\tprivate _context:CanvasRenderingContext2D;\n\tprivate _canvasMouse:CanvasMouse;\n\t\n\tconstructor(canvasName:string,world:World)\n\t{\n\t\tthis.canvasName = canvasName;\n\t\tthis.isVisable = true;\n\t\tthis.isDrawable = true;\n\t\tthis.canvas = <HTMLCanvasElement>document.getElementById(this.canvasName);\t\t\t\n\t\tthis.context = this.canvas.getContext(\"2d\");\n\t\tthis.canvasMouse = new CanvasMouse(world,this,new MouseEventHandlerWorldObject());\n\t\t/*if (typeof document !== 'undefined')\n\t\t{\n\t\t\tthis.canvas = document.getElementById(this.canvasName);\t\t\t\n\t\t\tthis.context = this.canvas.getContext('2d');\n\t\t}*/\n\t}\n\n\tpublic clearCanvas():void {\n\t\tif(this.isVisable && this.isDrawable)\n\t\t{\n\t\t\tthis.context.clearRect(0, 0, this.getWidth(), this.getHeight());\n\t\t\tthis.context.fillStyle = WorldDisplay.getColorFromString(\"ffffff\"+\"ff\");\n\t\t\tthis.context.fillRect(0, 0, this.getWidth(), this.getHeight());\n\t\t}\n\t}\n\n\tpublic getCanvas():HTMLCanvasElement {\n\t\treturn(this.canvas);\n\t}\n\n\tpublic getContext():CanvasRenderingContext2D {\n\t\treturn(this.context);\n\t}\n\t\n\tpublic getWidth():number\n\t{\n\t\treturn(this.canvas.width);\n\t}\n\t\n\tpublic getHeight():number\n\t{\n\t\treturn(this.canvas.height);\n\t}\n\n\tpublic isCanvasVisable(): boolean {\n\t\treturn this._isVisable;\n\t}\n\n\tpublic isCanvasDrawable(): boolean {\n\t\treturn this._isDrawable;\n\t}\n\n\tpublic get canvasName(): string {\n\t\treturn this._canvasName;\n\t}\n\n\tpublic set canvasName(value: string) {\n\t\tthis._canvasName = value;\n\t}\n\n\n\tpublic get canvas(): HTMLCanvasElement {\n\t\treturn this._canvas;\n\t}\n\n\tpublic set canvas(value: HTMLCanvasElement) {\n\t\tthis._canvas = value;\n\t}\n\n\tpublic get context(): CanvasRenderingContext2D {\n\t\treturn this._context;\n\t}\n\n\tpublic set context(value: CanvasRenderingContext2D) {\n\t\tthis._context = value;\n\t}\n\n\tpublic get isVisable(): boolean {\n\t\treturn this._isVisable;\n\t}\n\n\tpublic set isVisable(value: boolean) {\n\t\tthis._isVisable = value;\n\t}\n\n\tpublic get isDrawable(): boolean {\n\t\treturn this._isDrawable;\n\t}\n\n\tpublic set isDrawable(value: boolean) {\n\t\tthis._isDrawable = value;\n\t}\n\n\tpublic get canvasMouse(): CanvasMouse {\n\t\treturn this._canvasMouse;\n\t}\n\n\tpublic set canvasMouse(value: CanvasMouse) {\n\t\tthis._canvasMouse = value;\n\t}\n\t\n\t\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t/*\n\tstatic createCanvasHolderFromClientJson(worldDef,json)\n\t{\n\t  var canvasHolder = new CanvasHolder(json.canavsName,worldDef);\n\t  return(canvasHolder);\n\t}\n\t*/\n\t/*\n\t  getClientJson()\n\t  {\n\t\t  var json = {};\n\t\t  \n\t\t  \n\t\t  json.canvasName = this.canvasName;\n\t\t  json.origin = this.origin;\n\t\t  json.width = this.getWidth();\n\t\t  json.height = this.getHeight();\n\t\t  json.worldDef = this.worldDef;\n\t\t  \n\t\t  JSON.stringify(json);\n\t\t  return(json)\n\t  }\n\t*/\n\n\t/*  \n\tgetConnector(connectorDefKey,name)\n\t{\n\t\tvar connector = this.getConnectorDef(connectorDefKey)(this.worldDef,name);\n\t\tconnector.connectorDefKey = connectorDefKey;\n\t\treturn(connector);\n\t}\n\t*/\n\n\t/*\n\tgetConnectorDef(connectorDefKey)\n\t{\n\t\tvar connectorDef = this.worldDef.worldDisplay.connectorDefs[\"generic\"];\n\t\t\n\t\tvar foundConnectorDef = false;\n\t\tif(this.worldDef.worldDisplay.connectorDefs.hasOwnProperty(connectorDefKey))\n\t\t{\n\t\t\tconnectorDef = this.worldDef.worldDisplay.connectorDefs[connectorDefKey];\n\t\t\tfoundConnectorDef = true;\n\t\t}\n\t\tif(!foundConnectorDef) console.trace(\"CanvasHolder:getConnectorDef:connectorDefKey=\\\"\"+connectorDefKey+ \"\\\" was not found using generic\");\n\t\telse console.log(\"found connector display :\"+connectorDefKey);\n\t\tconnectorDef.connectorDefKey = connectorDefKey;\n\t\treturn(connectorDef);\n\t}\n\t*/\n\n\t/*\n\tgetConnectorDisplay(connectorDisplayKey)\n\t{\n\t\tvar connectorDisplay = this.worldDef.worldDisplay.connectorDisplay[\"generic\"];\n\t\t\n\t\tvar foundConnectorDisplay = false;\n\t\tif(this.worldDef.worldDisplay.connectorDisplay.hasOwnProperty(connectorDisplayKey))\n\t\t{\n\t\t\tconnectorDisplay = this.worldDef.worldDisplay.connectorDisplay[connectorDisplayKey];\n\t\t\tfoundConnectorDisplay = true;\n\t\t}\n\t\tif(!foundConnectorDisplay) console.trace(\"CanvasHolder:getConnectorDisplay:connectorDisplayKey=\\\"\"+connectorDisplayKey+ \"\\\" was not found using generic\");\n\t\tconnectorDisplay.connectorDisplayKey = connectorDisplayKey;\n\t\treturn(connectorDisplay);\n\t}\n\t*/\n\n\t/*\n\tgetGraphData(graphDataKey)\n\t{\n\t\tvar graphData = this.worldDef.worldDisplay.nodeDisplay[\"generic\"];\t\n\t\tvar foundGraphData = false;\n\t\tif(this.worldDef.worldDisplay.nodeDisplay.hasOwnProperty(graphDataKey))\n\t\t{\n\t\t\tgraphData = this.worldDef.worldDisplay.nodeDisplay[graphDataKey];\n\t\t\tfoundGraphData = true;\n\t\t}\n\t\tif(!foundGraphData) console.trace(\"CanvasHolder:getGraphData:graphDataKey=\\\"\"+graphDataKey+ \"\\\" was not found using generic\")\n\t\t//console.trace(\"CanvasHolder:getGraphData:graphDataKey=\\\"\"+graphDataKey+ \"\\\" was not found using generic\")\n\t\t//console.log(\"FOR:\"+graphDataKey+Common.toString(graphData));\n\t\t//console.log(\"getGraphData:graphDataKey=\"+graphDataKey+\":clone=\"+graphData.nodeDisplay.displayInfo.clone);\n\n\t\t//if(graphData.nodeDisplay.displayInfo.clone)\n\t\tif(graphData.nodeDisplayFunction)\n\t\t{\n\t\t\t//console.log(\"getGraphData:graphDataKey:FOUND A FUNCTION:\"+graphDataKey);\n\t\t\tgraphData = Object.create(graphData);\n\t\t\tgraphData.nodeDisplay = graphData.nodeDisplayFunction();\n\t\t\t//console.log(\"CLONING:\"+graphDataKey+Common.toString(graphData));\n\t\t\t//graphData.nodeDisplay.displayInfo = Object.create(graphData.nodeDisplay.displayInfo);\n\t\t\t//graphData.nodeDisplay.displayInfo  = JSON.parse(JSON.stringify(graphData.nodeDisplay.displayInfo));\n\t\t\t//graphData.nodeDisplay.displayInfo  = JSON.parse(JSON.stringify(graphData.nodeDisplay.displayInfo));\n\t\t\t//graphData = Object.create(graphData);\n\t\t\t//graphData.nodeDisplay.displayInfo.ts = new Date().getTime();\n\n\n\t\t}\n\n\t\tgraphData.graphDataKey = graphDataKey;\n\t\treturn(graphData);\n\t}\n\t*/\n\t/*\n\tclone(origin)\n\t{\n\t\tvar canvasHolder = new CanvasHolderHTML(this.canvasName);\n\t\t//canvasHolder.origin = origin;\n\t\t\n\t\tvar canvasHolder = new Object();\n\t\tcanvasHolder.origin = origin;\n\t\t\n\t\tcanvasHolder.canvasName = this.canvasName;\n\t\tcanvasHolder.canvas = this.canvas;\n\t\tcanvasHolder.context = this.context;\n\t\tcanvasHolder.isCanvasVisable = this.isCanvasVisable;\n\t\tcanvasHolder.isCanvasDrawable = this.isCanvasDrawable;\n\t\tcanvasHolder.isDrawable = this.isDrawable;\n\t\tcanvasHolder.isVisable = this.isVisable;\n\t\tcanvasHolder.getWidth = this.getWidth;\n\t\tcanvasHolder.getHeight = this.getHeight;\n\t\tcanvasHolder.worldDef = this.worldDef;\n\t\tcanvasHolder.getGraphData = this.getGraphData;\n\t\t\n\t\t\n\t\treturn(canvasHolder);\n\t}\n\t*/","import { WorldPosition } from \"../../world/worldposition\";\nimport { CanvasHolderHTML } from \"./canvasholderhtml\";\nimport { MouseEventHandler } from \"./mouseeventhandler\";\nimport { World } from \"../../world/world\";\n\n\nexport class CanvasMouse\n{\n\tprivate _offset:WorldPosition;\n\tprivate canvasholderHTML:CanvasHolderHTML;\n\tprivate _mouseEventHandler:MouseEventHandler;\n\t\n\n\tconstructor(world:World,canvasholderHTML:CanvasHolderHTML,mouseEventHandler:MouseEventHandler)\n\t{\n\t\tthis.canvasholderHTML = canvasholderHTML;\n\t\tthis.mouseEventHandler = mouseEventHandler;\n\t\tif(canvasholderHTML.isCanvasVisable()) \n\t\t{\n\t\t\t//this.offset = NodeCanvasMouse.getCanvasOffset(this.canvasholder.canvas);\n\t\t\tthis.offset = this.getCanvasOffset();\t\t\n\t\t\tvar self = this;\n\t\t\tthis.canvasholderHTML.canvas.addEventListener(\"pointerdown\", function(event) { self.pointerDownEvent(world,self,event) }, false);\n\t\t\tthis.canvasholderHTML.canvas.addEventListener(\"pointermove\",function(event) { self.pointerMoveEvent(world,self,event) }, false);\n\t\t\tthis.canvasholderHTML.canvas.addEventListener(\"pointerup\",function(event) { self.pointerUpEvent(world,self,event) }, false);\n\t\t\t//this.nodeMouseMovment = {};\n\t\t}\n\t}\n\n\tprivate getCanvasOffset():WorldPosition\n\t{\n\t    let offsetLeft = 0;\n\t\tlet offsetTop = 0;\n\t\tlet object:HTMLElement = this.canvasholderHTML.canvas;\n\t    do\n\t    {\n\t      if (!isNaN(object.offsetLeft))\n\t      {\n\t          offsetLeft += object.offsetLeft;\n\t      }\n\t      if (!isNaN(object.offsetTop))\n\t      {\n\t          offsetTop += object.offsetTop;\n\t\t  }   \n\t\t let element:any = object.offsetParent;\n\t\t if(element.hasOwnProperty(\"offsetParent\")) object = element;\n\t\t else object = null;\n\t    }\n\t    while(object);\n\t    \n\t    return( new WorldPosition(offsetLeft,offsetTop) );\n\t}\n\n\tpublic pointerDownEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent) {\n\t\tthis.mouseEventHandler.pointerDownEvent(world,canvasMouse,event);\n\t}\n\t\n\tpublic pointerMoveEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent)\t{\n\t\tthis.mouseEventHandler.pointerMoveEvent(world,canvasMouse,event);\n\n\t}\n\t\n\tpublic pointerUpEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent)\n\t{\n\t\tthis.mouseEventHandler.pointerUpEvent(world,canvasMouse,event);\n\n\t}\n\t\n\n\t\n\tpublic get offset(): WorldPosition {\n\t\treturn this._offset;\n\t}\n\n\tpublic set offset(value: WorldPosition) {\n\t\tthis._offset = value;\n\t}\n\n\tpublic get mouseEventHandler(): MouseEventHandler {\n\t\treturn this._mouseEventHandler;\n\t}\n\n\tpublic set mouseEventHandler(value: MouseEventHandler) {\n\t\tthis._mouseEventHandler = value;\n\t}\n\n\n\tpublic get $canvasholderHTML(): CanvasHolderHTML {\n\t\treturn this.canvasholderHTML;\n\t}\n\n\tpublic set $canvasholderHTML(value: CanvasHolderHTML) {\n\t\tthis.canvasholderHTML = value;\n\t}\n\t\n\n}\n","import { MouseStatus } from \"./mousestatus\";\nimport { WorldObject } from \"../../world/worldobject\";\nimport { MouseEventHandler } from \"./mouseeventhandler\";\nimport { WorldPosition } from \"../../world/worldposition\";\nimport { World } from \"../../world/world\";\nimport { CanvasMouse } from \"./canvasmouse\";\n\n\n\nexport class MouseEventHandlerWorldObject implements MouseEventHandler {\n   private _mouseStatus:MouseStatus;\n   private _currentWorldObject:WorldObject;\n   private _lastWorldObject:WorldObject;\n\n    constructor()\n    {\n        this.mouseStatus = new MouseStatus();\n        this.currentWorldObject = null;\n        this.lastWorldObject = null;\n    }\n\n    public worldObjectSelected(world:World,event:MouseEvent,wWorldObject:WorldObject):void {\n\n    }\n\n    public worldObjectDeselected(world:World,event:MouseEvent):void {\n\n\t}\n\t\n\tpublic getWorldPositionFromMouseEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent):WorldPosition {\n\t\tvar eventPosition:WorldPosition = new WorldPosition(event.pageX-canvasMouse.offset.x,event.pageY-canvasMouse.offset.y);\n\t\treturn(eventPosition);\n\t}\n   \n    public pointerDownEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent):void\n\t{\n\t\t//console.log(\"pointerDownEvent:\"+JSON.stringify(event));;\n\t\tvar eventPosition:WorldPosition = this.getWorldPositionFromMouseEvent(world,canvasMouse,event);\n\t\t//this.hideCurrentNodeInfo();\n\t\tconsole.log(\"pointerDownEvent:\"+JSON.stringify(eventPosition));;\n\n\t\tthis.mouseStatus.isDown = true;\n\t\tthis.mouseStatus.startPosition = eventPosition;\n\t\tthis.mouseStatus.position = eventPosition;\n\t\tif(this.currentWorldObject!=null)\n\t\t{\n\t\t\tthis.currentWorldObject.setAnimated(true);\n\t\t\tthis.currentWorldObject.setSelected(false);\n\t\t\tthis.currentWorldObject = null;\n\t\t}\n\t\t\n\t\tlet clickWorldObject:WorldObject =  world.getWorldObjectContainingPosition(eventPosition);\n\t\n\t\tif(clickWorldObject!=null && clickWorldObject!=this.lastWorldObject)\n\t\t{\n\t\t\tconsole.log(\"pointerDownEvent:clickWorldObject=\"+clickWorldObject.getWorldId().id);\n\n\t\t\tthis.currentWorldObject = clickWorldObject;\n\n\t\t\tthis.mouseStatus.startPosition = eventPosition.clone();\n\n\t\t\tthis.currentWorldObject.setSelected(true);\n\t\t\tthis.mouseStatus.clickOffset = this.currentWorldObject.getWorldPosition().getDelta(eventPosition);\n\n\t\t\t/////////////////this.mouseStatus.clickOffset = clickWorldObject.getWorldPosition().getDelta(eventPosition);\n\t\t\t//this.mouseEventHandler.pointerDown(this.mouseStatus);\t\t\t\n\t\t\tthis.worldObjectSelected(world,event,this.currentWorldObject);\n\t\t}\n\t\t\n\t\tif(clickWorldObject==null)\n\t\t{\n\t\t\tthis.worldObjectDeselected(world,event);\n\t\t}\n\t\t\n\t\tif(this.lastWorldObject)\n\t\t{\n\t\t\tthis.worldObjectDeselected(world,event);\n\t\t\tthis.lastWorldObject.setSelected(false);\n\t\t\tthis.lastWorldObject = null;\n\t\t}\n\t\n    }\n    \n    \n\n    public pointerMoveEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent):void {\n\t\tif(this.mouseStatus.isDown)\n\t\t{\n\t\t\tvar eventPosition:WorldPosition = this.getWorldPositionFromMouseEvent(world,canvasMouse,event);\n\n\t\t\t////////////console.log(\"pointerMoveEvent:\"+event);\n\n\t\t\tthis.worldObjectDeselected(world,event);\n\n\t\t\tif(this.currentWorldObject!=null)\n\t\t\t{\n\t\t\t\tthis.currentWorldObject.setAnimated(false);\n\t\t\t\tthis.mouseStatus.position = eventPosition;\n\t\t\t\tvar deltaPosition = this.mouseStatus.startPosition.getDelta(eventPosition);\n\n\n\t\t\t\t\t\t\n\t\t\t\tlet newX = this.mouseStatus.startPosition.x-\n\t\t\t\t\t\tdeltaPosition.x+\n\t\t\t\t\t\tthis.mouseStatus.clickOffset.x;\n\t\t\t\t\n\t\t\t\tlet newY = this.mouseStatus.startPosition.y-\n\t\t\t\t\t\tdeltaPosition.y+\n\t\t\t\t\t\tthis.mouseStatus.clickOffset.y;\n\n\t\t\t\tthis.currentWorldObject.setWorldPosition( new WorldPosition(newX,newY));\n\t\t\t}\n\t\t}\n    }\n            \n\n    public pointerUpEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent):void \t{\n\t\t//console.log(\"pointerUpEvent:\"+JSON.stringify(event));\n\t\t//var eventPosition:WorldPosition = this.getWorldPositionFromMouseEvent(world,canvasMouse,event);\n\n\t\tif(this.currentWorldObject!=null)\n\t\t{\n\t\t\t///this.nodeCanvas.pointerUp(this.mouseStatus.node);\n\t\t\tthis.currentWorldObject.setAnimated(true);\n\t\t\t//this.mouseStatus.node.isSelected = false;\n\t\t\tthis.lastWorldObject = this.currentWorldObject;\n\t\n\t\t\tthis.currentWorldObject = null;\n\t\t}\n\t\tthis.mouseStatus.isDown = false;\n\t}\n\n\tpublic get mouseStatus(): MouseStatus {\n\t\treturn this._mouseStatus;\n\t}\n\n\tpublic set mouseStatus(value: MouseStatus) {\n\t\tthis._mouseStatus = value;\n\t}\n\n\n\tpublic get currentWorldObject(): WorldObject {\n\t\treturn this._currentWorldObject;\n\t}\n\n\tpublic set currentWorldObject(value: WorldObject) {\n\t\tthis._currentWorldObject = value;\n\t}\n\n\n\tpublic get lastWorldObject(): WorldObject {\n\t\treturn this._lastWorldObject;\n\t}\n\n\tpublic set lastWorldObject(value: WorldObject) {\n\t\tthis._lastWorldObject = value;\n\t}\n    \n}","import { WorldPosition } from \"../../world/worldposition\";\n\nexport class MouseStatus\n{\n\tprivate _isDown:boolean;\n\tprivate _startPosition:WorldPosition;\n\tprivate _position:WorldPosition;\n\t//private _worldObject:WorldObject;\n\t//private _objectStartPosition:WorldPosition;\n\tprivate _clickOffset:WorldPosition;\n\t//private _lastWorldObject:WorldObject;\n\t\n\t\n\t\n\n\tconstructor()\n\t{\n\t\tthis.isDown = false;\n\t\tthis.startPosition = new WorldPosition(0,0);\n\t\tthis.position = new WorldPosition(0,0);\n\t\tthis.clickOffset = new WorldPosition(0,0);\n\n\t\t//this.objectStartPosition = null\n\t}\n// \t\t\tnodeCanvasMouse.mouseStatus = new MouseStatus(false,new Position(0,0),new Position(0,0),null,null);\n\n\n\tpublic get isDown(): boolean {\n\t\treturn this._isDown;\n\t}\n\n\tpublic set isDown(value: boolean) {\n\t\tthis._isDown = value;\n\t}\n\n\tpublic get startPosition(): WorldPosition {\n\t\treturn this._startPosition;\n\t}\n\n\tpublic set startPosition(value: WorldPosition) {\n\t\tthis._startPosition = value;\n\t}\n\t\n\n\tpublic get position(): WorldPosition {\n\t\treturn this._position;\n\t}\n\n\tpublic set position(value: WorldPosition) {\n\t\tthis._position = value;\n\t}\n\n\tpublic get clickOffset(): WorldPosition {\n\t\treturn this._clickOffset;\n\t}\n\n\tpublic set clickOffset(value: WorldPosition) {\n\t\tthis._clickOffset = value;\n\t}\n\n\n\n\t\n}\n","import { Drawable } from \"../drawable\";\nimport { WorldPosition } from \"../../world/worldposition\";\n//import { WalkerWorld } from \"../../walkers/walkerworld/walkerworld\";\nimport { WorldDisplay } from \"../worlddisplay\";\nimport { CircleEngineShape } from \"../../engine/shapes/circleengineshape\";\n//import { WalkerEngine } from \"../../walkerworld/walkerengine\";\n\n\nexport class CircleDisplayShape implements Drawable\n{\n\tprivate _circleEngineShape:CircleEngineShape;\n\n\tconstructor()\n\t{\n\t\tthis.circleEngineShape = null;\n\t}\n\n\tpublic init(circleEngineShape:CircleEngineShape,options:any):void {\n\t\tthis.circleEngineShape = circleEngineShape;\t\t\n\t}\n\t\n\n\tpublic get circleEngineShape(): CircleEngineShape {\n\t\treturn this._circleEngineShape;\n\t}\n\n\tpublic set circleEngineShape(value: CircleEngineShape) {\n\t\tthis._circleEngineShape = value;\n\t}\n\t\n\t\n\tpublic draw(context:CanvasRenderingContext2D):void\n\t{\n\t\tif(!this.circleEngineShape) throw Error(\"CircleDisplayShape:CircleEngineShape is not set, was init called?\")\n\t\t//super.drawConnector(canvasHolder,node);\n\t\t/*\n\t\tsuper.drawNode(canvasHolder,node);\n\n\t\t*/\n\t\t//console.log(\"CircleDisplayShape.drawShape\");\n\n\t\tcontext.fillStyle = WorldDisplay.getColorFromString(\"ff0000ff\");\n\t\tcontext.strokeStyle = WorldDisplay.getColorFromString(\"0000ffff\");\n\t\tlet position:WorldPosition = this.circleEngineShape.getWorldPosition();\n\t\t\n\t    context.beginPath();\n\t    context.arc(position.x,position.y,this.circleEngineShape.getRadius(),0,Math.PI * 2, false);\n\t    context.closePath();\n\t    context.fill();\n\t    context.lineWidth = 2;\n\t\tcontext.stroke();\n\t}\n}\n","import { Drawable } from \"../drawable\";\nimport { PolygonEngineShape } from \"../../engine/shapes/polygonengineshape\";\nimport { WorldDisplay } from \"../worlddisplay\";\n\nexport class PolygonDisplayShape implements Drawable\n{\n\tprivate _polygonEngineShape:PolygonEngineShape;\n\n\tconstructor()\n\t{\n\t\tthis.polygonEngineShape = null;\n\t}\n\n\tpublic init(polygonEngineShape:PolygonEngineShape,options:any):void {\n\t\tthis.polygonEngineShape = polygonEngineShape;\t\t\n\t}\n\n\tpublic get polygonEngineShape(): PolygonEngineShape {\n\t\treturn this._polygonEngineShape;\n\t}\n\n\tpublic set polygonEngineShape(value: PolygonEngineShape) {\n\t\tthis._polygonEngineShape = value;\n\t}\n\n\t\n\t\n\tpublic draw(context:CanvasRenderingContext2D):void\n\t{\n\t\tif(!this.polygonEngineShape) throw Error(\"PolygonDisplayShape:PolygonEngineShape is not set, was init called?\")\n\n\t\tcontext.fillStyle = WorldDisplay.getColorFromString(\"ff0000ff\");\n\t\tcontext.strokeStyle = WorldDisplay.getColorFromString(\"0000ffff\");\n        context.lineWidth = 2;\n        \n        WorldDisplay.drawOutlinedShape(context,this.polygonEngineShape.getPolygonPoints());\n\t\t\n\t}\n}\n","import { Drawable } from \"../drawable\";\nimport { WorldPosition } from \"../../world/worldposition\";\n//import { WalkerWorld } from \"../../walkers/walkerworld/walkerworld\";\nimport { WorldDisplay } from \"../worlddisplay\";\nimport { RectangleEngineShape } from \"../../engine/shapes/rectangleengineshape\";\n//import { WalkerEngine } from \"../../walkerworld/walkerengine\";\n\n\nexport class RectangleDisplayShape implements Drawable\n{\n\tprivate _rectangleEngineShape:RectangleEngineShape;\n\n\tconstructor()\n\t{\n\t\tthis.rectangleEngineShape = null;\n\t}\n\n\tpublic init(rectangleEngineShape:RectangleEngineShape,options:any):void {\n\t\tthis.rectangleEngineShape = rectangleEngineShape;\t\t\n\t}\n\n\tpublic get rectangleEngineShape(): RectangleEngineShape {\n\t\treturn this._rectangleEngineShape;\n\t}\n\n\tpublic set rectangleEngineShape(value: RectangleEngineShape) {\n\t\tthis._rectangleEngineShape = value;\n\t}\n\t\n\t\n\t\n\tpublic draw(context:CanvasRenderingContext2D):void\n\t{\n\t\tif(!this.rectangleEngineShape) throw Error(\"RectangleDisplayShape:rectangleEngineShape is not set, was init called?\")\n\t\t//super.drawConnector(canvasHolder,node);\n\t\t/*\n\t\tsuper.drawNode(canvasHolder,node);\n\n\t\t*/\n\t\t//console.log(\"CircleDisplayShape.drawShape\");\n\n\t\tcontext.fillStyle = WorldDisplay.getColorFromString(\"ff0000ff\");\n\t\tcontext.strokeStyle = WorldDisplay.getColorFromString(\"0000ffff\");\n\t\tlet position:WorldPosition = this.rectangleEngineShape.getWorldPosition();\n\n\n\t\tcontext.fillRect( \n\t\t\t(position.x-this.rectangleEngineShape.getWidth()/2),\n\t\t\t(position.y-this.rectangleEngineShape.getHeight()/2),\n\t\t\tthis.rectangleEngineShape.getWidth(),\n\t\t\tthis.rectangleEngineShape.getHeight());\n\t\t\tcontext.lineWidth = 2;\n\t\tcontext.strokeRect( \n\t\t\t(position.x-this.rectangleEngineShape.getWidth()/2), \n\t\t\t(position.y-this.rectangleEngineShape.getHeight()/2), \n\t\t\tthis.rectangleEngineShape.getWidth(), \n\t\t\tthis.rectangleEngineShape.getHeight());\n\n\n\t}\n}\n","//import { MatterTools } from \"../matterengine/mattertools\";\n//import { World } from \"../walkerworld/world\";\n//import { MatterEvent } from \"../matterengine/matterevent\";\n//import { MatterCollisionEvent } from \"../matterengine/mattercollisionevent\";\n//import { MatterCompositeEvent } from \"../matterengine/mattercompositeevent\";\nimport { WorldPosition } from \"../world/worldposition\";\n\n//import * as Matter from \"matter-js\";\n\nexport class WorldDisplay  {\n    /*\n    static world(render:Matter.Render) {\n\n        Matter.Render.world(render);\n        console.log(\"doing some redering...\");\n    }\n    */    \n    public static getColorFromString(colorString:string):string\n    {\n      if(colorString.length==6)\n      {\n        colorString += \"ff\";\n      }\n      \n      let color = \"rgba(\"+\n          parseInt(colorString.substring(0,2), 16)+\",\"+\n          parseInt(colorString.substring(2,4), 16)+\",\"+\n          parseInt(colorString.substring(4,6), 16)+\",\"+\n          parseInt(colorString.substring(6,8), 16)/255.0+\")\";\n      \n      return(color);\n\t}\n\t/**\n\t * Draws an outlined shape from an Array of WorldPosition objects. It is assumed that the fill color, \n\t * stroek color and line width for the context have been set before the call is made\n\t * \n\t * @static\n\t * @param {CanvasRenderingContext2D} context \n\t * @param {Array<WorldPosition>} worldPositionArray \n\t * @memberof WorldDisplay\n\t */\n\tpublic static drawOutlinedShape(context:CanvasRenderingContext2D,worldPositionArray:Array<WorldPosition>):void\n\t{\t    \n\t    context.beginPath();\n\t    for(let i=0;i<worldPositionArray.length;i++)\n\t    {   \t\n\t\t\tvar point = worldPositionArray[i];\n\t    \tif(i==0) context.moveTo(point.x,point.y);\n\t    \telse context.lineTo(point.x,point.y);\n\t    }\n\t    context.closePath();\n\t    \n\t    context.fill();\n\t    //context.lineWidth = displayInfo.borderWidth;\n\t    context.stroke();\n\t}\n\n\tpublic static getAveragePostionFromPositionList(positionList:Array<WorldPosition>):WorldPosition\n\t{\n\t  let x = 0.0;\n\t  let y = 0.0;\n\t  for(let i=0;i<positionList.length;i++)\n\t  {\n\t\t  let p = positionList[i];\n\t\t  x += p.x;\n\t\t  y += p.y;\n\t  }\n\t  x = x / positionList.length;\n\t  y = y / positionList.length;\n\t  return(new WorldPosition(x,y));\n\t}\n\t\t  \n\n    public static getCirclePositionList(radius:number,curvePoints:number):Array<WorldPosition> {\n\t\tlet pointList = new Array<WorldPosition>();\n\t\t\n\t\tlet angleInc = 360 / curvePoints;\n\t\tfor(let angle=0;angle<=360;angle=angle+angleInc)\n\t\t{\n\t\t\tlet rads = angle * (Math.PI/180);\n\t\t\tpointList.push(\n\t\t\t\t\tnew WorldPosition(\n\t\t\t\t\t\t\tradius*Math.cos(rads),\n\t\t\t\t\t\t\tradius*Math.sin(rads))\n\t\t\t\t\t);\t\n\t\t}\n\t\t\n\t\treturn(pointList);\n\t}\n\n\tpublic static getTrianglePositionList(width:number,height:number):Array<WorldPosition> {\n\t\tlet pointList = new Array<WorldPosition>();\n\t\t\n\t\tpointList.push(new WorldPosition(0,-(height/2)));\n\t\tpointList.push(new WorldPosition(width/2,height/2));\n\t\tpointList.push(new WorldPosition(-(width/2),height/2));\n\t\tpointList.push(new WorldPosition(0,-(height/2)));\n\t\t\n\t\treturn(pointList);;\n\t}\n\t\n\tpublic static getRectanglePositionList(width:number,height:number):Array<WorldPosition> {\n\t\tlet pointList = new Array<WorldPosition>();\n\t\t\n\t\tpointList.push(new WorldPosition(-(width/2),-(height/2)));\n\t\tpointList.push(new WorldPosition((width/2),-(height/2)));\n\t\tpointList.push(new WorldPosition((width/2),(height/2)));\n\t\tpointList.push(new WorldPosition(-(width/2),(height/2)));\t\n\t\tpointList.push(new WorldPosition(-(width/2),-(height/2)));\n\t\n\t\treturn(pointList);;\n\t}\n\n\tpublic static getArcPositionList(endAngle:number,startAngle:number,radius:number,curvePoints:number):Array<WorldPosition> {\n\t\tlet pointList = new Array<WorldPosition>();\n\t\t\n\t\t// bug durring the port to javascript... it was just expecting one arg so probably endAngle was used\n\t\tlet angle:number = Math.abs(endAngle-startAngle);\n\t\tlet angleInc:number = angle / curvePoints;\n\t\t\n\t\tpointList.push(new WorldPosition(0,0));\n\t\tfor(let angle=startAngle;\n\t\t\tangle<=endAngle && angleInc>0;\n\t\t\tangle=angle+angleInc)\n\t\t{\n\t\t\tif( (angle+angleInc) > endAngle )\n\t\t\t{\n\t\t\t\tif(angle!=endAngle) angle = endAngle ;\n\t\t\t}\n\t\t\tvar rads = angle * (Math.PI/180);\n\t\t\tpointList.push(\n\t\t\t\t\tnew WorldPosition(\n\t\t\t\t\t\t\tradius*Math.cos(rads),\n\t\t\t\t\t\t\tradius*Math.sin(rads))\n\t\t\t\t\t);\t\n\t\t}\n\t\t\n\t\tpointList.push(new WorldPosition(0,0));\n\t\t\n\t\treturn(pointList);\n\t}\n\n    public static fillTextMutipleLines(context:CanvasRenderingContext2D,text:string,x:number,y:number,lineHeight:number,splitChar:string)\n\t{\n\t\tlet lines:Array<string> = text.split(splitChar);\n\t    let line:string = '';\n\t\n\t    for(let n = 0; n < lines.length; n++)\n\t    {\n\t      //let metrics:TextMetrics = context.measureText(lines[n]);\n\t      context.fillText(lines[n], x, y);\n\t      y = y+lineHeight; \n\t    }\n\t    context.fillText(line, x, y);\n\t }\n\t\n    public static metricsTextMutipleLines(context:CanvasRenderingContext2D,text:string,lineHeight:number,splitChar:string)\n\t{\n\t\tlet lines:Array<string> = text.split(splitChar);\n\t    //let line:string = '';\n\t    let maxWidth:number = 0;\n\t    let totalHeight = 0;\n\t    for(var n = 0; n < lines.length; n++)\n\t    {\n            let metrics:TextMetrics = context.measureText(lines[n]);\n            if(metrics.width>maxWidth) maxWidth = metrics.width;\n            totalHeight = totalHeight + lineHeight;\n\t    }\n\t    return({width:maxWidth,height:totalHeight});\n\t }\n\t\n    public static roundedRect(context:CanvasRenderingContext2D,x:number,y:number,\n        w:number,h:number,r:number,borderWitdh:number,borderColor:string,rectColor:string):void\n\t{\n\t\t  if (w < 2 * r) r = w / 2;\n\t\t  if (h < 2 * r) r = h / 2;\n\t\t  context.beginPath();\n\t\t  context.moveTo(x+r, y);\n\t\t  context.arcTo(x+w, y,   x+w, y+h, r);\n\t\t  context.arcTo(x+w, y+h, x,   y+h, r);\n\t\t  context.arcTo(x,   y+h, x,   y,   r);\n\t\t  context.arcTo(x,   y,   x+w, y,   r);\n\t\t  context.closePath();\n\t\t/*\n\t    context.beginPath();\n\t    context.moveTo(x, y);\n\t    context.lineTo(x + width - cornerRadius, y);\n\t    context.arcTo(x + width, y, x + width, y + cornerRadius, cornerRadius);\n\t    context.lineTo(x + width, y + height);\n\t   */ \n\t    context.lineWidth = borderWitdh;\n\t    context.fillStyle = rectColor;\n\t    context.strokeStyle = borderColor;\n\t    \n\t    context.stroke();\n\t    context.fill();\n\t\n\t}\n}\n","import { WorldEngine } from \"../worldengine\";\nimport { Drawable } from \"../../display/drawable\";\nimport { WorldId } from \"../../world/worldid\";\nimport { WorldPosition } from \"../../world/worldposition\";\nimport { CircleEngineShape } from \"../shapes/circleengineshape\";\nimport { RectangleEngineShape } from \"../shapes/rectangleengineshape\";\nimport { MockCircle } from \"./shapes/mockcircle\";\nimport { MockRectangle } from \"./shapes/mockrectangle\";\nimport { MockPolygon } from \"./shapes/mockpolygon\";\n\nimport { PolygonEngineShape } from \"../shapes/triangleengineshape\";\n\n\nexport class MockEngine implements WorldEngine {\n\n    public createCircle(worldId:WorldId,drawable:Drawable,radius:number,numberOfSides:number,worldPosition:WorldPosition,options:any):CircleEngineShape {\n        let circle:MockCircle = new MockCircle(\n          worldId,\n          drawable,\n          radius,numberOfSides,worldPosition,\n          options,\n          this\n        );\n        return(circle);  \n    }\n\n    public createRectangle(worldId:WorldId,drawable:Drawable,width:number,height:number,worldPosition:WorldPosition,options:any):RectangleEngineShape {\n      let rectangle:MockRectangle = new MockRectangle(\n        worldId,\n        drawable,\n        width,height,worldPosition,\n        options,\n        this\n      );\n      return(rectangle);\n    }\n    public createPolygon(worldId:WorldId,drawable:Drawable,numberOfSides:number,radius:number,worldPosition:WorldPosition,options:any):PolygonEngineShape {\n      let ploygon:PolygonEngineShape = new MockPolygon(\n        worldId,\n        drawable,\n        numberOfSides,\n        radius,\n        worldPosition,\n        options,\n        this); \n      return(ploygon);\n    }   \n       \n}","import { CircleEngineShape } from \"../../shapes/circleengineshape\";\nimport { WorldPosition } from \"../../../world/worldposition\";\nimport { Drawable } from \"../../../display/drawable\";\nimport { MockShape } from \"./mockshape\";\nimport { WorldId } from \"../../../world/worldid\";\nimport { MockEngine } from \"../mockengine\";\n\nexport class MockCircle extends MockShape implements CircleEngineShape\n{\n\tprivate _curvePoints:number;\n\tprivate _radius:number;\n\t\n\n\tconstructor(worldId:WorldId,drawable:Drawable,radius:number,curvePoints:number,position:WorldPosition,options:any,mockEngine:MockEngine)\n\t{\n\t\tsuper(worldId,drawable,position,options);\n\t\tthis.radius = radius;\n\t\tthis.curvePoints = curvePoints;\t\n\t\tdrawable.init(this,options);\n\t}\n\n\tpublic containsWorldPosition(worldPosition:WorldPosition):boolean {\n\t\tlet distance = this.getWorldPosition().getDistance(worldPosition);\n\t\treturn(distance<=this.radius);\n\t}\n\n\tpublic getRadius():number {\n\t\treturn(this.radius);\n\t}\n\n\n\tpublic get curvePoints(): number {\n\t\treturn this._curvePoints;\n\t}\n\n\tpublic set curvePoints(value: number) {\n\t\tthis._curvePoints = value;\n\t}\n\t\n\n\tpublic get radius(): number {\n\t\treturn this._radius;\n\t}\n\n\tpublic set radius(value: number) {\n\t\tthis._radius = value;\n\t}\n\n\n}\n","import { WorldPosition } from \"../../../world/worldposition\";\nimport { Drawable } from \"../../../display/drawable\";\nimport { MockShape } from \"./mockshape\";\nimport { WorldId } from \"../../../world/worldid\";\nimport { MockEngine } from \"../mockengine\";\nimport { PolygonEngineShape } from \"../../shapes/polygonengineshape\";\n\nexport class MockPolygon extends MockShape implements PolygonEngineShape\n{\n    private _polygonPointArray:Array<WorldPosition>;\n    private _numberOfSides:number;\n    private _radius:number;\n    \n\n    constructor(worldId:WorldId,drawable:Drawable,numberOfSides:number,radius:number,worldPosition:WorldPosition,options:any,mockEngine:MockEngine)    \n\t{\n\t\tsuper(worldId,drawable,worldPosition,options);\n        this.polygonPointArray = Array<WorldPosition>();\t\n        this.numberOfSides = numberOfSides;\n        this.radius = radius;\n        let angle = 0\n        let angleIncrement = 2 * Math.PI / this.numberOfSides;\n    \n        for(let i=0;i < this.numberOfSides;i++) {\n            this.polygonPointArray.push(new WorldPosition(\n                worldPosition.x  + radius * Math.cos(angle),\n                worldPosition.y  + radius * Math.sin(angle)\n            ));\n            angle = angle + angleIncrement;\n                \n        }\n\n\t\tdrawable.init(this,options);\n\t}\n\n\tpublic containsWorldPosition(worldPosition:WorldPosition):boolean {\n        //if(this.boundingBox.containsPosition(position,node)) return false;\n        \n        let i = 0;\n        let j = 0;\n        let c = false;\n        for(i=0,j=this.polygonPointArray.length-1;i< this.polygonPointArray.length;j=i++)\n        {\n            //\n            var pi = this.polygonPointArray[i];\n            var pj = this.polygonPointArray[j];\n                \n            if (\n                ((pi.y>worldPosition.y) != (pj.y>worldPosition.y)) &&\n                    (worldPosition.x < (pj.x-pi.x) *\n                    (worldPosition.y-pi.y) /\n                    (pj.y-pi.y) +\n                    pi.x) )\n                c = !c;\n        }\n        return c;\n    }\n\n    public getRadius():number {\n        return(this.radius);\n    }\n\n    public getNumberOfSides():number {\n        return(this.numberOfSides);\n    }\n\n    public \tgetPointList():Array<WorldPosition> {\n        return(this.polygonPointArray);\n    }    \n\n    public translate(worldPosition:WorldPosition):void {\n        super.translate(worldPosition);\n        for(let i=0;i<this.polygonPointArray.length;i++) \n            this.polygonPointArray[i].translate(worldPosition);\n\t}\n\n\t\n\tpublic setWorldPosition(worldPosition:WorldPosition):void {\n        super.translate(worldPosition);\n        for(let i=0;i<this.polygonPointArray.length;i++) \n            this.polygonPointArray[i].moveTo(worldPosition);\n\t}\n\n\n\t\n\n    public getPolygonPoints():Array<WorldPosition> {\n        return(this.polygonPointArray);\n\n    }\n    \n\n\tpublic get radius(): number {\n\t\treturn this._radius;\n\t}\n\n\tpublic set radius(value: number) {\n\t\tthis._radius = value;\n\t}\n    \n\n\n\tpublic get polygonPointArray(): Array<WorldPosition> {\n\t\treturn this._polygonPointArray;\n\t}\n\n\tpublic set polygonPointArray(value: Array<WorldPosition>) {\n\t\tthis._polygonPointArray = value;\n\t}\n\n\n\tpublic get numberOfSides(): number {\n\t\treturn this._numberOfSides;\n\t}\n\n\tpublic set numberOfSides(value: number) {\n\t\tthis._numberOfSides = value;\n\t}\n\n}\n","import { RectangleEngineShape } from \"../../shapes/rectangleengineshape\";\nimport { WorldPosition } from \"../../../world/worldposition\";\nimport { Drawable } from \"../../../display/drawable\";\nimport { MockShape } from \"./mockshape\";\nimport { WorldId } from \"../../../world/worldid\";\nimport { MockEngine } from \"../mockengine\";\n\nexport class MockRectangle extends MockShape implements RectangleEngineShape\n{\n\tprivate _width:number;\n\tprivate _height:number;\n\n\tconstructor(worldId:WorldId,drawable:Drawable,width:number,height:number,position:WorldPosition,options:any,mockEngine:MockEngine)\n\t{\n\t\tsuper(worldId,drawable,position,options);\n\t\tthis.width = width;\n\t\tthis.height = height;\t\n\t\tdrawable.init(this,options);\n\t}\n\n\tpublic containsWorldPosition(worldPosition:WorldPosition):boolean {\n\t\treturn(\n\t\t\t(\n\t\t\t\t\t\t\t(worldPosition.x-this.getWidth()/2)<=worldPosition.x &&\n\t\t\t\t\t\t\t(worldPosition.x+this.getWidth()/2)>=worldPosition.x &&\n\t\t\t\t\t\t\t(worldPosition.y-this.getHeight()/2)<=worldPosition.y &&\n\t\t\t\t\t\t\t(worldPosition.y+this.getHeight()/2)>=worldPosition.y\n\t\t\t)\n\t);\n\n\t}\n\n\tpublic getWidth():number {\n\t\treturn(this.width);\n\t}\n\tpublic getHeight():number {\n\t\treturn(this.height);\n\t}\n\n\tpublic get width(): number {\n\t\treturn this._width;\n\t}\n\n\tpublic set width(value: number) {\n\t\tthis._width = value;\n\t}\n\n\tpublic get height(): number {\n\t\treturn this._height;\n\t}\n\n\tpublic set height(value: number) {\n\t\tthis._height = value;\n\t}\n\n\n\n}\n","import { WorldPosition } from \"../../../world/worldposition\";\n\nimport { Drawable } from \"../../../display/drawable\";\nimport { WorldObject } from \"../../../world/worldobject\";\nimport { WorldId } from \"../../../world/worldid\";\n\n//import { World } from \"../../walkerworld/world\";\n//import { WorldObjectDisplay } from \"../worldobjectdisplay\";\n\nexport abstract class MockShape implements WorldObject  \n{\n\tprivate _drawable:Drawable;\n\tprivate _worldId:WorldId;\n\tprivate _isObjectAnimated:boolean;\n\tprivate _isObjectVisable:boolean;\n\tprivate _isObjectSelected:boolean;\n\tprivate _objectOptions:any;\n\t\n\tprivate _position:WorldPosition; \n\n    constructor(worldId:WorldId,drawable:Drawable,position:WorldPosition,options:any) {\n\t\tthis.worldId = worldId;\n\t\tthis.drawable = drawable;\n\t\tthis.isObjectAnimated = true;\n\t\tthis.isObjectVisable = true;\n\t\tthis.isObjectSelected = true;\n\t\tthis.drawable = drawable;\n\t\tthis.position = position;\n\t}\n\t\n\tpublic isAnimated(): boolean { return(this.isObjectAnimated); }\n\tpublic isSelected(): boolean { return(this.isObjectSelected); }\n\tpublic isVisable():boolean { return(this.isObjectVisable); }\n\tpublic getWorldId(): WorldId { return(this.worldId); }\n\tpublic getOptions(): any { return(this.objectOptions); }\n\n\tpublic setAnimated(animated:boolean):void { this.isObjectAnimated = animated; }\n\tpublic setSelected(selected:boolean): void { this.isObjectSelected = selected; }\n\tpublic setVisable(visable:boolean):void { this.isObjectVisable = visable; }\n\t\n\t\n    public getWorldPosition():WorldPosition {\n\t\treturn(this.position );\n\t}\n\n\tpublic translate(worldPosition:WorldPosition):void {\n\t\tthis.position.x = worldPosition.x;\n\t\tthis.position.y = worldPosition.y;\n\t}\n\n\t\n\tpublic setWorldPosition(worldPosition:WorldPosition):void {\n\t\tthis.position.x = worldPosition.x;\n\t\tthis.position.y = worldPosition.y;\n\t}\n\n\tpublic abstract containsWorldPosition(worldPosition:WorldPosition):boolean;\n\n    public getDrawable():Drawable {\n        return(this.drawable);\n    }\n\n\n\tpublic get drawable(): Drawable {\n\t\treturn this._drawable;\n\t}\n\n\tpublic set drawable(value: Drawable) {\n\t\tthis._drawable = value;\n\t}\n    \n\n\tpublic get position(): WorldPosition {\n\t\treturn this._position;\n\t}\n\n\tpublic set position(value: WorldPosition) {\n\t\tthis._position = value;\n\t}\n\n\tpublic get worldId(): WorldId {\n\t\treturn this._worldId;\n\t}\n\n\tpublic set worldId(value: WorldId) {\n\t\tthis._worldId = value;\n\t}\n\n\tpublic get isObjectAnimated(): boolean {\n\t\treturn this._isObjectAnimated;\n\t}\n\n\tpublic set isObjectAnimated(value: boolean) {\n\t\tthis._isObjectAnimated = value;\n\t}\n\n\tpublic get isObjectVisable(): boolean {\n\t\treturn this._isObjectVisable;\n\t}\n\n\tpublic set isObjectVisable(value: boolean) {\n\t\tthis._isObjectVisable = value;\n\t}\n\n\tpublic get isObjectSelected(): boolean {\n\t\treturn this._isObjectSelected;\n\t}\n\n\tpublic set isObjectSelected(value: boolean) {\n\t\tthis._isObjectSelected = value;\n\t}\n\n\tpublic get objectOptions(): any {\n\t\treturn this._objectOptions;\n\t}\n\n\tpublic set objectOptions(value: any) {\n\t\tthis._objectOptions = value;\n\t}\n\n}\n","import { CanvasHolderHTML } from \"./display/canvas/canvasholderhtml\";\nimport { MockEngine } from \"./engine/mockengine/mockengine\";\nimport { WorldOfWorldObjects } from \"./world/worldofworldobjects\";\nimport { CircleDisplayShape } from \"./display/drawableshapes/circledisplayshape\";\nimport { WorldPosition } from \"./world/worldposition\";\nimport { WorldId } from \"./world/worldid\";\nimport { CircleEngineShape } from \"./engine/shapes/circleengineshape\";\nimport { RectangleEngineShape } from \"./engine/shapes/rectangleengineshape\";\nimport { RectangleDisplayShape } from \"./display/drawableshapes/rectangledisplayshape\";\nimport { PolygonEngineShape } from \"./engine/shapes/polygonengineshape\";\nimport { PolygonDisplayShape } from \"./display/drawableshapes/polygondisplayshape\";\n\n\nlet mockEngine = new MockEngine();\nlet world:WorldOfWorldObjects = new WorldOfWorldObjects(mockEngine);\nlet canvasHolder:CanvasHolderHTML = new CanvasHolderHTML(\"worldCanvas\",world);\n\nlet circle1:CircleEngineShape = world.worldEngine.createCircle(\n  new WorldId(\"circle1\"),\n  new CircleDisplayShape(),\n  30,8,\n  new WorldPosition(400,400),\n  {}\n);\n\nlet circle2:CircleEngineShape = world.worldEngine.createCircle(\n  new WorldId(\"circle1\"),\n  new CircleDisplayShape(),\n  40,8,\n  new WorldPosition(300,300),\n  {}\n);\n\nlet rectangle1:RectangleEngineShape = world.worldEngine.createRectangle(\n  new WorldId(\"rectangle1\"),\n  new RectangleDisplayShape(),\n  40,40,\n  new WorldPosition(100,100),\n  {}\n);\n      \n\nlet polygon1:PolygonEngineShape = world.worldEngine.createPolygon(\n  new WorldId(\"rectangle1\"),\n  new PolygonDisplayShape(),\n  5,40,\n  new WorldPosition(400,100),\n  {}\n);\n      \nworld.worldObjectArray.push(circle1);\nworld.worldObjectArray.push(circle2);\nworld.worldObjectArray.push(rectangle1);\nworld.worldObjectArray.push(polygon1);\n\n\n\nlet interval:number = 1000/30; //one millisecond over beat per second\n\nconsole.log(\"drawing every : \"+interval+\"ms\");\n\nsetInterval(doDraw,interval);\n\nfunction doDraw()\n{\n  world.drawWorld(canvasHolder);\t\n}\n\n\n\n","//import { MatterTools } from \"../matterengine/mattertools\";\n//import { World } from \"../walkerworld/world\";\n//import { MatterEvent } from \"../matterengine/matterevent\";\n//import { MatterCollisionEvent } from \"../matterengine/mattercollisionevent\";\n//import { DisplayHolder } from \"../display/displayholder\";\nimport { WorldEngine } from \"../engine/worldengine\";\nimport { WorldPosition } from \"./worldposition\";\nimport { WorldObject } from \"./worldobject\";\nimport { CanvasHolder } from \"../display/canvas/canvasholder\";\n\n\nexport abstract class World {\n\n   // private _displayHolder:DisplayHolder;\n\tprivate _worldEngine:WorldEngine;\n\n    constructor(worldEngine:WorldEngine){\n\t\tthis.worldEngine = worldEngine;\n\t}\n\t\n\tpublic abstract getWorldObjectContainingPosition(worldPosition:WorldPosition):WorldObject;\n\n\tpublic abstract drawWorld(canvasHolder:CanvasHolder):void;\n\n\tpublic get worldEngine(): WorldEngine {\n\t\treturn this._worldEngine;\n\t}\n\n\tpublic set worldEngine(value: WorldEngine) {\n\t\tthis._worldEngine = value;\n\t}\n    \n}","\nexport class WorldId {\n    private _id:string;\n\n    public constructor(woldObjectId:string) {\n        this.id = woldObjectId;\n    }\n\n\tpublic get id(): string {\n\t\treturn this._id;\n\t}\n\n\tpublic set id(value: string) {\n\t\tthis._id = value;\n\t}\n\n}","//import { MatterTools } from \"../matterengine/mattertools\";\n//import { World } from \"../walkerworld/world\";\n//import { MatterEvent } from \"../matterengine/matterevent\";\n//import { MatterCollisionEvent } from \"../matterengine/mattercollisionevent\";\n//import { DisplayHolder } from \"../display/displayholder\";\nimport { WorldEngine } from \"../engine/worldengine\";\nimport { WorldObject } from \"./worldobject\";\nimport { World } from \"./world\";\nimport { CanvasHolder } from \"../display/canvas/canvasholder\";\nimport { WorldPosition } from \"./worldposition\";\n\n\nexport class WorldOfWorldObjects extends World{\n\n    private _worldObjectArray:Array<WorldObject>;\n\n    constructor(worldEngine:WorldEngine){\n        super(worldEngine);\n        this.worldObjectArray = new Array<WorldObject>();\n\t}\n\t\n\t\n\tpublic drawWorld(canvasHolder:CanvasHolder):void {\n        let context = canvasHolder.getContext();\n        canvasHolder.clearCanvas();\n        for(let i=0;i<this.worldObjectArray.length;i++) {\n            let worldObject:WorldObject = this.worldObjectArray[i];\n            worldObject.getDrawable().draw(context);\n        }\n    }\n\n    public getWorldObjectContainingPosition(worldPosition:WorldPosition):WorldObject {\n        let foundObject:WorldObject = null;\n        for(let i=0;i<this.worldObjectArray.length;i++) {\n            ////console.log(\"this.worldObjectArray.length=\"+this.worldObjectArray.length+\":i=\"+i);\n            let worldObject:WorldObject = this.worldObjectArray[i];\n            ////console.log(\"    worldObject.position=\"+worldObject.getWorldPosition());\n            if(worldObject.containsWorldPosition(worldPosition)) foundObject = worldObject;\n        }\n        return(foundObject);\n    }\n\n\n\tpublic get worldObjectArray(): Array<WorldObject> {\n\t\treturn this._worldObjectArray;\n\t}\n\n\tpublic set worldObjectArray(value: Array<WorldObject>) {\n\t\tthis._worldObjectArray = value;\n\t}\n\n    \n}","import { WorldObject } from \"./worldobject\";\n\n\nexport class WorldPosition {\n    private _x:number;\n    private _y:number;\n\n    public constructor(x:number,y:number) {\n        this.x = x;\n        this.y = y;\n    }\n\n\tpublic get x(): number {\n\t\treturn this._x;\n\t}\n\n\tpublic set x(value: number) {\n\t\tthis._x = value;\n\t}\n\n\tpublic get y(): number {\n\t\treturn this._y;\n\t}\n\n\tpublic set y(value: number) {\n\t\tthis._y = value;\n\t}\n\n\tpublic clone():WorldPosition {\n\t\treturn(new WorldPosition(this.x,this.y));\n\t}\n\n\tpublic translate(worldPosition:WorldPosition):void {\n\t\tthis.x = this.x + worldPosition.x;\n\t\tthis.y = this.y + worldPosition.y;\n\t}\n\n\tpublic moveTo(worldPosition:WorldPosition):void {\n\t\tthis.x = worldPosition.y;\n\t\tthis.y = worldPosition.y;\n\t}\n\n\tpublic getDeltaY(worldPosition:WorldPosition):number\n\t{\n\t\t\treturn(this.y-worldPosition.y);\n\t}\n\n\tpublic getDeltaX(worldPosition:WorldPosition):number\n\t{\n\t\t\treturn(this.x-worldPosition.x);\n\t}\n\n\tpublic getDelta(worldPosition:WorldPosition):WorldPosition\n\t{\n\t\t\treturn(new WorldPosition(this.getDeltaX(worldPosition),this.getDeltaY(worldPosition)));\n\t}\n\n\tpublic equals(worldPosition:WorldPosition):boolean\n\t{\n\t\treturn( (this.x==worldPosition.x) && (this.y==worldPosition.y) ) ;\n\t}\n\n\tpublic getDistance(worldPosition:WorldPosition):number\n\t{\n\t\treturn (Math.sqrt(Math.pow(this.getDeltaX(worldPosition), 2) + Math.pow(this.getDeltaY(worldPosition), 2)));\n\t}\n\n\tpublic static getAveragePostionFromWorldPositionList(positionList:Array<WorldPosition>):WorldPosition\n\t{\n\t\tlet x = 0.0;\n\t\tlet y = 0.0;\n\t\tfor(let i=0;i<positionList.length;i++)\n\t\t{\n\t\t\tlet p = positionList[i];\n\t\t\tx += p.x;\n\t\t\ty += p.y;\n\t\t}\n\t\tx = x / positionList.length;\n\t\ty = y / positionList.length;\n\t\treturn(new WorldPosition(x,y));\n\t}\n\n\tpublic static getAveragePostionFromWorldObjectList(worldObjectList:Array<WorldObject>):WorldPosition\n\t{\n\t  let x = 0.0;\n\t  let y = 0.0;\n\t  for(var i=0;i<worldObjectList.length;i++)\n\t  {\n\t\t  var p = worldObjectList[i].getWorldPosition();\n\t\t  x += p.x;\n\t\t  y += p.y;\n\t  }\n\t  x = x / worldObjectList.length;\n\t  y = y / worldObjectList.length;\n\t  return(new WorldPosition(x,y));\n\t}\n\n\tpublic static getPostionListFromNodeList(worldObjectList:Array<WorldObject>):Array<WorldPosition>\n\t{\n\t\tvar positions = new Array<WorldPosition>();\n\t\tfor (var i = 0; i < worldObjectList.length; i++)\n\t\t{\n\t\t\tpositions.push(worldObjectList[i].getWorldPosition());\n\t\t}\n\t\treturn(positions);\n\t}\n\n\n}"]}