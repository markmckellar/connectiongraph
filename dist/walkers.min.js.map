{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/matter-js/build/matter.js","source/display/canvas/canvasholderhtml.ts","source/display/canvas/canvasmouse.ts","source/display/canvas/mouseEventhandlerworldobject.ts","source/display/canvas/mousestatus.ts","source/display/drawableshapes/circledisplayshape.ts","source/display/worlddisplay.ts","source/engine/engineobjects/engineobject.ts","source/engine/matterengine/events/matterevent.ts","source/engine/matterengine/matterengine.ts","source/engine/matterengine/mattertools.ts","source/engine/matterengine/shapes/mattercircle.ts","source/engine/matterengine/shapes/mattershape.ts","source/main.ts","source/walkers/engine/matterengine/engineobjects/matterdestination.ts","source/walkers/engine/matterengine/engineobjects/matterjunction.ts","source/walkers/engine/matterengine/engineobjects/matterjunctiononecirle.ts","source/walkers/engine/matterengine/engineobjects/matterobject.ts","source/walkers/engine/matterengine/engineobjects/matterwalker.ts","source/walkers/engine/matterengine/matterwalkerengine.ts","source/walkers/walkerworld/path.ts","source/world/world.ts","source/world/worldid.ts","source/world/worldobject.ts","source/world/worldofworldobjects.ts","source/world/worldposition.ts"],"names":["f","exports","module","define","amd","g","window","global","self","this","walkers","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","Matter","_dereq_","Body","Vertices","Vector","Sleeping","Common","Bounds","Axes","_inertiaScale","_nextCollidingGroupId","_nextNonCollidingGroupId","_nextCategory","create","options","defaults","id","nextId","type","label","parts","plugin","angle","vertices","fromPath","position","x","y","force","torque","positionImpulse","constraintImpulse","totalContacts","speed","angularSpeed","velocity","angularVelocity","isSensor","isStatic","isSleeping","motion","sleepThreshold","density","restitution","friction","frictionStatic","frictionAir","collisionFilter","category","mask","group","slop","timeScale","render","visible","opacity","sprite","xScale","yScale","xOffset","yOffset","lineWidth","body","extend","_initProperties","nextGroup","isNonColliding","nextCategory","set","bounds","positionPrev","clone","anglePrev","parent","rotate","axes","update","area","mass","inertia","defaultFillStyle","choose","fillStyle","strokeStyle","min","max","settings","value","property","hasOwnProperty","setStatic","setMass","setDensity","setInertia","setVertices","setPosition","setAngle","setVelocity","setAngularVelocity","setParts","part","_original","inverseMass","inverseInertia","Infinity","fromVertices","centre","translate","autoHull","slice","push","concat","clockwiseSort","hull","hullCentre","total","_totalProperties","delta","sub","rotateAbout","magnitude","Math","abs","translation","add","rotation","point","cos","sin","dx","dy","scale","scaleX","scaleY","circleRadius","deltaTime","correction","deltaTimeSquared","pow","velocityPrevX","velocityPrevY","applyForce","offset","properties","mult","div","../core/Common","../core/Sleeping","../geometry/Axes","../geometry/Bounds","../geometry/Vector","../geometry/Vertices","../render/Render","2","Composite","Events","isModified","bodies","constraints","composites","setModified","composite","updateParents","updateChildren","childComposite","object","objects","trigger","obj","warn","addBody","addConstraint","addComposite","constraint","remove","deep","removeBody","removeConstraint","removeComposite","compositeA","compositeB","indexOf","removeCompositeAt","splice","removeBodyAt","removeConstraintAt","clear","keepStatic","filter","allBodies","allConstraints","allComposites","get","toString","move","rebase","recursive","../core/Events","./Body","3","World","gravity","../constraint/Constraint","./Composite","4","Contact","vertex","normalImpulse","tangentImpulse","index","5","Detector","SAT","Pair","collisions","broadphasePairs","engine","pairsTable","pairs","table","bodyA","bodyB","canCollide","overlaps","j","partA","k","partB","previousCollision","pairId","pair","isActive","collision","collides","collided","filterA","filterB","./Pair","./SAT","6","Grid","controller","detector","buckets","pairsList","bucketWidth","bucketHeight","grid","forceUpdate","col","row","bucket","bucketId","world","gridChanged","newRegion","_getRegion","region","union","_regionUnion","startCol","endCol","startRow","endRow","_getBucketId","isInsideNewRegion","isInsideOldRegion","_bucketRemoveBody","_createBucket","_bucketAddBody","_createActivePairsList","regionA","regionB","_createRegion","floor","column","pairKeys","keys","./Detector","7","timestamp","parentA","parentB","contacts","activeContacts","separation","timeCreated","timeUpdated","supports","support","contactId","contact","depth","setActive","./Contact","8","Pairs","list","collisionStart","collisionActive","collisionEnd","activePairIds","removeOld","pairIndex","indexesToRemove","9","Query","Bodies","ray","startPoint","endPoint","rayWidth","rayAngle","rayLength","rayX","rayY","rectangle","outside","result","contains","../factory/Bodies","10","Resolver","_restingThresh","_restingThreshTangent","_positionDampen","_positionWarming","_frictionNormalMultiplier","preSolvePosition","activeCount","solvePosition","normal","bodyBtoA","contactShare","tempA","_temp","tempB","tempC","tempD","penetration","dot","postSolvePosition","preSolveVelocity","tangent","contactVertex","impulse","cross","solveVelocity","timeScaleSquared","tempE","offsetA","offsetB","velocityPointA","perp","velocityPointB","relativeVelocity","normalVelocity","tangentVelocity","tangentSpeed","tangentVelocityDirection","sign","normalForce","clamp","maxFriction","oAcN","oBcN","share","contactNormalImpulse","contactTangentImpulse","11","overlapAB","overlapBA","minOverlap","canReusePrevCol","axisBodyA","axisBody","axisBodyB","axisNumber","_overlapAxes","reused","overlap","axis","verticesB","_findSupports","verticesA","neg","projectionA","projectionB","Number","MAX_VALUE","_projectToAxis","projection","distance","vertexA","vertexB","nearestDistance","vertexToBody","bodyAPosition","12","Constraint","_warming","_torqueDampen","_minLength","pointA","pointB","initialPointA","initialPointB","stiffness","damping","angularStiffness","angleA","angleB","anchors","preSolveAll","solveAll","fixedA","fixedB","solve","pointAWorld","pointBWorld","currentLength","difference","massTotal","inertiaTotal","resistanceTotal","zero","postSolveAll","13","MouseConstraint","Mouse","mouse","canvas","element","mouseConstraint","on","_triggerEvents","button","mouseEvents","sourceEvents","mousemove","mousedown","mouseup","clearSourceEvents","../body/Composite","../collision/Detector","../core/Mouse","./Constraint","14","_nextId","_seed","_nowStartTime","Date","argsStart","deepClone","arguments","source","prop","constructor","Object","key","values","path","begin","end","split","val","shuffle","array","random","temp","choices","isElement","HTMLElement","isArray","prototype","isFunction","isPlainObject","isString","now","performance","webkitNow","_seededRandom","colorToNumber","colorString","replace","charAt","parseInt","logLevel","log","console","apply","Array","info","haystack","needle","map","func","mapped","topologicalSort","graph","visited","node","_topologicalSort","neighbors","neighbor","chain","funcs","_chained","lastResult","args","chainPathBefore","base","chainPathAfter","15","Engine","Render","positionIterations","velocityIterations","constraintIterations","enableSleeping","events","timing","broadphase","renderDefaults","metrics","extended","event","_bodiesApplyGravity","_bodiesUpdate","afterCollisions","_bodiesClearForces","merge","engineA","engineB","gravityScale","worldBounds","../body/Body","../body/World","../collision/Grid","../collision/Pairs","../collision/Resolver","./Common","./Events","./Metrics","./Sleeping","16","eventNames","callback","name","names","off","join","callbacks","newCallbacks","eventClone","17","Plugin","version","uses","used","use","before","after","./Plugin","18","19","document","absolute","mousedownPosition","mouseupPosition","wheelDelta","pixelRatio","getAttribute","mousewheel","_getRelativeMousePosition","changedTouches","preventDefault","detail","setElement","addEventListener","setOffset","setScale","elementBounds","getBoundingClientRect","rootNode","documentElement","parentNode","scrollX","undefined","pageXOffset","scrollLeft","scrollY","pageYOffset","scrollTop","touches","pageX","left","pageY","top","clientWidth","width","clientHeight","height","20","_registry","register","isPlugin","registered","pluginVersion","versionParse","number","registeredVersion","resolve","dependency","dependencyParse","range","install","isUsed","isFor","parsed","for","versionSatisfies","plugins","dependencies","sortedDependencies","status","_warned","tracked","parsedBase","resolved","test","identifiers","isRange","isNaN","substr","operator","prerelease","rangeParsed","rangeParts","versionParsed","versionParts","21","Runner","_requestAnimationFrame","_cancelAnimationFrame","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","msRequestAnimationFrame","cancelAnimationFrame","mozCancelAnimationFrame","webkitCancelAnimationFrame","msCancelAnimationFrame","_frameTimeout","setTimeout","clearTimeout","fps","deltaSampleSize","counterTimestamp","frameCounter","deltaHistory","timePrev","timeScalePrev","frameRequestId","isFixed","enabled","runner","deltaMin","deltaMax","run","time","tick","stop","start","./Engine","22","_motionWakeThreshold","_motionSleepThreshold","_minBias","timeFactor","minMotion","maxMotion","sleepCounter","sleepingBody","movingBody","wasSleeping","23","decomp","chamfer","radius","quality","qualityMin","qualityMax","trapezoid","slope","verticesPath","roof","x1","x2","x3","circle","maxSides","sides","ceil","polygon","theta","PI","xx","yy","toFixed","vertexSets","flagInternal","removeCollinear","minimumArea","isConvex","v","z","concave","makeCCW","removeCollinearPoints","decomposed","quickDecomp","chunk","chunkVertices","pav","pbv","da","magnitudeSquared","db","isInternal","24","Composites","stack","columns","rows","columnGap","rowGap","lastBody","maxHeight","bodyHeight","bodyWidth","xOffsetA","yOffsetA","xOffsetB","yOffsetB","bodyAHeight","bodyAWidth","bodyBHeight","bodyBWidth","mesh","crossBrace","bodyC","pyramid","actualRows","lastBodyWidth","newtonsCradle","size","car","wheelSize","wheelAOffset","wheelBOffset","wheelA","wheelB","axelA","axelB","softBody","particleRadius","particleOptions","constraintOptions","./Bodies","25","normalise","gradient","26","boundsA","boundsB","vector","shift","deltaX","deltaY","27","Svg","pathToVertices","sampleLength","il","segment","segments","segmentsQueue","lastSegment","lastPoint","segmentIndex","lx","ly","points","addPoint","px","py","pathSegType","isRelative","addSegmentPoint","segType","pathSegTypeAsLetter","toUpperCase","_svgPathToAbsolute","getTotalLength","pathSegList","numberOfItems","getItem","getPathSegAtLength","getPointAtLength","x0","y0","y1","y2","segs","len","seg","replaceItem","createSVGPathSegMovetoAbs","createSVGPathSegLinetoAbs","createSVGPathSegLinetoHorizontalAbs","createSVGPathSegLinetoVerticalAbs","createSVGPathSegCurvetoCubicAbs","createSVGPathSegCurvetoCubicSmoothAbs","createSVGPathSegCurvetoQuadraticAbs","createSVGPathSegCurvetoQuadraticSmoothAbs","createSVGPathSegArcAbs","r1","r2","largeArcFlag","sweepFlag","28","sqrt","output","vectorA","vectorB","cross3","vectorC","scalar","negate","atan2","29","pathPattern","match","parseFloat","mean","average","signed","numerator","denominator","vertice","nextVertice","newVertices","prevVertex","nextVertex","currentRadius","prevNormal","nextNormal","diagonalRadius","radiusVector","midNormal","scaledVertex","precision","alpha","acos","sort","flag","upper","lower","pop","30","RenderPixi","../collision/Contact","../collision/Pair","../collision/Query","../collision/SAT","../constraint/MouseConstraint","../core/Engine","../core/Matter","../core/Metrics","../core/Plugin","../core/Runner","../factory/Composites","../geometry/Svg","../render/RenderPixi","31","background","wireframeBackground","hasBounds","wireframes","showSleeping","showDebug","showBroadphase","showBounds","showVelocity","showCollisions","showSeparations","showAxes","showPositions","showAngleIndicator","showIds","showShadows","showVertexNumbers","showConvexHulls","showInternalEdges","showMousePosition","_createCanvas","context","getContext","textures","setPixelRatio","appendChild","loop","_getPixelRatio","setAttribute","style","lookAt","padding","center","viewHeight","viewWidth","outerRatio","innerRatio","startViewTransform","boundsWidth","boundsHeight","boundsScaleX","boundsScaleY","endViewTransform","setTransform","currentBackground","_applyBackground","globalCompositeOperation","fillRect","bodyConvexHulls","bodyWireframes","bodyBounds","bodyAxes","bodyPositions","bodyVelocity","bodyIds","separations","vertexNumbers","mousePosition","debug","c","debugTimestamp","text","round","debugString","font","fillText","beginPath","arc","closePath","moveTo","coils","lineTo","stroke","fill","bodyShadows","distanceX","distanceY","shadowColor","shadowOffsetX","shadowOffsetY","shadowBlur","globalAlpha","texture","_getTexture","drawImage","rect","normalPosX","normalPosY","bucketKeys","inspector","selected","item","data","setLineDash","selectStart","selectBounds","createElement","oncontextmenu","onselectstart","devicePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","imagePath","image","Image","src","cssBackground","backgroundSize","32","renderer","container","spriteContainer","pixiOptions","transparent","view","antialias","backgroundColor","PIXI","WebGLRenderer","Container","sprites","primitives","addChild","children","removeChild","bgSprite","addChildAt","setBackground","isColor","color","Sprite","constraintRender","primitiveId","primitive","Graphics","beginFill","lineStyle","endFill","bodyRender","spriteId","_createBodySprite","_createBodyPrimitive","initialAngle","texturePath","anchor","strokeStyleIndicator","strokeStyleWireframe","strokeStyleWireframeIndicator","Texture","fromImage","canvasmouse_1","mouseEventhandlerworldobject_1","worlddisplay_1","CanvasHolderHTML","canvasName","isVisable","isDrawable","getElementById","canvasMouse","CanvasMouse","MouseEventHandlerWorldObject","clearCanvas","clearRect","getWidth","getHeight","WorldDisplay","getColorFromString","getCanvas","isCanvasVisable","_isVisable","isCanvasDrawable","_isDrawable","defineProperty","_canvasName","_canvas","_context","_canvasMouse","worldposition_1","canvasholderHTML","mouseEventHandler","getCanvasOffset","pointerDownEvent","pointerMoveEvent","pointerUpEvent","offsetLeft","offsetTop","offsetParent","WorldPosition","_offset","_mouseEventHandler","mousestatus_1","mouseStatus","MouseStatus","currentWorldObject","lastWorldObject","worldObjectSelected","wWorldObject","worldObjectDeselected","getWorldPositionFromMouseEvent","eventPosition","JSON","stringify","isDown","startPosition","isAnimated","isSelected","clickWorldObject","getWorldObjectContainingPosition","worldId","clickOffset","getWorldPosition","getDelta","deltaPosition","newX","newY","setWorldPosition","_mouseStatus","_currentWorldObject","_lastWorldObject","_isDown","_startPosition","_position","_clickOffset","CircleDisplayShape","circleEngineShape","init","_circleEngineShape","draw","getRadius","substring","getCirclePositionList","curvePoints","pointList","angleInc","rads","getTrianglePositionList","getRectanglePositionList","getArcPositionList","endAngle","startAngle","angle_1","fillTextMutipleLines","lineHeight","splitChar","lines","metricsTextMutipleLines","maxWidth","totalHeight","measureText","roundedRect","w","h","borderWitdh","borderColor","rectColor","arcTo","worldobject_1","EngineObject","_super","__extends","getEngineShape","worldPosition","containsWorldPosition","WorldObject","MatterEvent","mattertools_1","matterevent_1","matterwalkerengine_1","MatterEngine","matterTools","MatterTools","collisionEventHandlers","Map","compositeEventHandlers","timestampEventHandlers","enableEvents","createBounds","wallBoundsRect","walls","createBoundObject","MatterWalkerEngine","boundsFilter","get2DGraphicsContext","geTimestampedEventMapId","eventType","getCompositeEventMapId","registerCompositeEvent","deregisterCompositeEvent","delete","registerTimestampedEvent","deregisterTimestampedEvent","getCollisionEventMapId","registerCollisionEvent","deregisterCollisionEvent","hasCollisionHandler","has","getCollisionHandler","initMouse","initRendererEvents","me","beforeRender","processTimestampedEvent","afterRender","disableEvents","matterEngine","beforeUpdate","processCollisionPairsEvent","from","name_1","endsWith","processCompositeEvent","name_2","afterUpdate","beforeAdd","afterAdd","_engine","_matterTools","_mouseConstraint","_mouse","_collisionEventHandlers","_compositeEventHandlers","_timestampEventHandlers","_render","getLongerLine","p1","p2","middleX","middleY","adjustX","adjustY","signX","signY","n1","n2","bodyPostion2WorldPosition","cloneVerticies","inVertices","newVeritices","getVectorArrayFromWorldPostionOffsetArray","positionArray","getVectorFromWorldPostionOffset","getWorldPostionFromVector","getVectorFromWorldPostion","getBodyFromWorldPostionArray","location","scaleInner","scaleOuter","pointsInner","pointsOuter","insidePoints","outsidePoints","newBody_1","newBody","findClosestPostionOnLine","A","B","C","D","lengthSquared","param","mattershape_1","MatterCircle","drawable","_this","circleBody","getBody","_circleBody","_curvePoints","_radius","MatterShape","getDrawable","_drawable","doDraw","drawWorld","canvasHolder","canvasholderhtml_1","worldofworldobjects_1","circledisplayshape_1","worldid_1","matterengine_1","mattercircle_1","WorldOfWorldObjects","circle1","WorldId","circle2","worldObjectArray","setInterval","MatterDestination","walkerWorld","destination","getMatterJunction","getBoundryJunction","spatialBody","boundryBody","boundrySpatialFilter","walkerTravleing","boundryContainerFilter","walkerArrived","junctions","getJunction","addToEngine","pin","getSpatialBody","getWalkerContainer","_destination","_spatialBody","_boundryBody","matterobject_1","MatterJunction","MatterObject","matterjunction_1","MatterJunctionOneCircle","visable","junctionBody","junctionFilter","spacerBody","junctionSpacerFilter","getEngineObject","getCircle","getAreaJunction","_spacerBody","_junctionBody","_circle","engineobject_1","MatterWalker","walker","getCurrentJunction","getCurrentMaterDestination","walkerBody","walker2DestinationSpring","getAreaWalker","destinations","getCurrentDestination","walkerTravelingTotDestination","enableWalkerEvents","walkerArrivedAtDestination","getWalker2DestinationSpring","matterWalkerEngine","matterWalker","containerDest","_walker2DestinationSpring","_walkerBody","path_1","matterdestination_1","matterwalker_1","matterjunctiononecirle_1","paths","registerWalkerEvents","addPath","Path","getPathId","endJunction","startJunction","matterStartJunction","matterEndJunction","matterPath","changeWalkerDestination","addWalker","addDestination","_destinations","matterDestination","hasJunction","junction","getJunctionPosition","vectorToPosition","getJunctionOneCircle","matterJunctionOneCircle","addJunction","matterJunction","isWalkerAtDestination","_junctions","_paths","_walkers","walkerFilter","pathWorldObject","_startJunction","_endJunction","_pathWorldObject","worldEngine","_worldEngine","woldObjectId","_id","_worldId","_isAnimated","_isSelected","world_1","foundObject","worldObject","_worldObjectArray","_x","_y","getDeltaY","getDeltaX","equals","getDistance","getAveragePostionFromWorldPositionList","positionList","p","getAveragePostionFromWorldObjectList","worldObjectList","getPostionListFromNodeList","positions"],"mappings":"CAAA,SAAAA,GAAA,GAAA,gBAAAC,UAAA,mBAAAC,QAAAA,OAAAD,QAAAD,QAAA,IAAA,kBAAAG,SAAAA,OAAAC,IAAAD,UAAAH,OAAA,CAAA,GAAAK,EAAAA,GAAA,mBAAAC,QAAAA,OAAA,mBAAAC,QAAAA,OAAA,mBAAAC,MAAAA,KAAAC,KAAAJ,EAAAK,QAAAV,MAAA,WAAA,GAAAG,EAAA,OAAA,SAAAQ,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAhB,GAAA,GAAAqB,OAAA,uBAAAL,EAAA,IAAA,MAAAhB,GAAAsB,KAAA,mBAAAtB,EAAA,GAAAuB,GAAAV,EAAAG,IAAAf,WAAAW,GAAAI,GAAA,GAAAQ,KAAAD,EAAAtB,QAAA,SAAAU,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,GAAAF,IAAAY,EAAAA,EAAAtB,QAAAU,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAf,QAAA,IAAA,GAAAmB,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAW,OAAAT,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAW,GAAA,SAAAP,EAAAjB,EAAAD,iBC8BA,SAAAD,GAAA,GAAA,gBAAAC,QAAA,KAAAC,EAAAA,EAAAD,QAAAD,QAAA,IAAA,kBAAAG,IAAAA,EAAAC,IAAAD,KAAAH,OAAA,CAAA,GAAAK,EAAAA,GAAA,mBAAAC,QAAAA,WAAA,KAAAC,EAAAA,EAAA,mBAAAC,MAAAA,KAAAC,KAAAJ,EAAAsB,OAAA3B,MAAA,WAAA,MAAA,SAAAW,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,IAAAA,CAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAhB,GAAA,GAAAqB,OAAA,uBAAAL,EAAA,IAAA,MAAAhB,GAAAsB,KAAA,mBAAAtB,EAAA,GAAAuB,GAAAV,EAAAG,IAAAf,WAAAW,GAAAI,GAAA,GAAAQ,KAAAD,EAAAtB,QAAA,SAAAU,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,GAAAF,IAAAY,EAAAA,EAAAtB,QAAAU,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAf,QAAA,IAAA,GAAAmB,GAAA,kBAAAD,IAAAA,EAAAH,EAAA,EAAAA,EAAAF,EAAAW,OAAAT,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAW,GAAA,SAAAE,EAAA1B,EAAAD,GAWA,GAAA4B,KAEA3B,GAAAD,QAAA4B,CAEA,IAAAC,GAAAF,EAAA,wBACAG,EAAAH,EAAA,sBACAI,EAAAJ,EAAA,oBAEAK,GADAL,EAAA,oBACAA,EAAA,mBACAM,EAAAN,EAAA,sBACAO,EAAAP,EAAA,qBAEA,WAEAC,EAAAO,cAAA,EACAP,EAAAQ,sBAAA,EACAR,EAAAS,0BAAA,EACAT,EAAAU,cAAA,EAWAV,EAAAW,OAAA,SAAAC,GACA,GAAAC,IACAC,GAAAV,EAAAW,SACAC,KAAA,OACAC,MAAA,OACAC,SACAC,UACAC,MAAA,EACAC,SAAApB,EAAAqB,SAAA,+BACAC,UAAAC,EAAA,EAAAC,EAAA,GACAC,OAAAF,EAAA,EAAAC,EAAA,GACAE,OAAA,EACAC,iBAAAJ,EAAA,EAAAC,EAAA,GACAI,mBAAAL,EAAA,EAAAC,EAAA,EAAAL,MAAA,GACAU,cAAA,EACAC,MAAA,EACAC,aAAA,EACAC,UAAAT,EAAA,EAAAC,EAAA,GACAS,gBAAA,EACAC,UAAA,EACAC,UAAA,EACAC,YAAA,EACAC,OAAA,EACAC,eAAA,GACAC,QAAA,KACAC,YAAA,EACAC,SAAA,GACAC,eAAA,GACAC,YAAA,IACAC,iBACAC,SAAA,EACAC,KAAA,WACAC,MAAA,GAEAC,KAAA,IACAC,UAAA,EACAC,QACAC,SAAA,EACAC,QAAA,EACAC,QACAC,OAAA,EACAC,OAAA,EACAC,QAAA,EACAC,QAAA,GAEAC,UAAA,IAIAC,EAAAxD,EAAAyD,OAAAhD,EAAAD,EAIA,OAFAkD,GAAAF,EAAAhD,GAEAgD,GAWA5D,EAAA+D,UAAA,SAAAC,GACA,MAAAA,GACAhE,EAAAS,2BAEAT,EAAAQ,yBASAR,EAAAiE,aAAA,WAEA,MADAjE,GAAAU,cAAAV,EAAAU,eAAA,EACAV,EAAAU,cAUA,IAAAoD,GAAA,SAAAF,EAAAhD,GACAA,EAAAA,MAGAZ,EAAAkE,IAAAN,GACAO,OAAAP,EAAAO,QAAA9D,EAAAM,OAAAiD,EAAAvC,UACA+C,aAAAR,EAAAQ,cAAAlE,EAAAmE,MAAAT,EAAArC,UACA+C,UAAAV,EAAAU,WAAAV,EAAAxC,MACAC,SAAAuC,EAAAvC,SACAH,MAAA0C,EAAA1C,QAAA0C,GACAxB,SAAAwB,EAAAxB,SACAC,WAAAuB,EAAAvB,WACAkC,OAAAX,EAAAW,QAAAX,IAGA3D,EAAAuE,OAAAZ,EAAAvC,SAAAuC,EAAAxC,MAAAwC,EAAArC,UACAjB,EAAAkE,OAAAZ,EAAAa,KAAAb,EAAAxC,OACAf,EAAAqE,OAAAd,EAAAO,OAAAP,EAAAvC,SAAAuC,EAAA3B,UAGAjC,EAAAkE,IAAAN,GACAa,KAAA7D,EAAA6D,MAAAb,EAAAa,KACAE,KAAA/D,EAAA+D,MAAAf,EAAAe,KACAC,KAAAhE,EAAAgE,MAAAhB,EAAAgB,KACAC,QAAAjE,EAAAiE,SAAAjB,EAAAiB,SAIA,IAAAC,GAAAlB,EAAAxB,SAAA,UAAAhC,EAAA2E,QAAA,UAAA,UAAA,UAAA,UAAA,WAEAnB,GAAAT,OAAA6B,UAAApB,EAAAT,OAAA6B,WAAAF,EACAlB,EAAAT,OAAA8B,YAAArB,EAAAT,OAAA8B,aAFA,OAGArB,EAAAT,OAAAG,OAAAG,WAAAG,EAAAO,OAAAe,IAAA1D,EAAAoC,EAAArC,SAAAC,IAAAoC,EAAAO,OAAAgB,IAAA3D,EAAAoC,EAAAO,OAAAe,IAAA1D,GACAoC,EAAAT,OAAAG,OAAAI,WAAAE,EAAAO,OAAAe,IAAAzD,EAAAmC,EAAArC,SAAAE,IAAAmC,EAAAO,OAAAgB,IAAA1D,EAAAmC,EAAAO,OAAAe,IAAAzD,GAWAzB,GAAAkE,IAAA,SAAAN,EAAAwB,EAAAC,GACA,GAAAC,EAEA,iBAAAF,KACAE,EAAAF,EACAA,KACAA,EAAAE,GAAAD,EAGA,KAAAC,IAAAF,GAGA,GAFAC,EAAAD,EAAAE,GAEAF,EAAAG,eAAAD,GAGA,OAAAA,GAEA,IAAA,WACAtF,EAAAwF,UAAA5B,EAAAyB,EACA,MACA,KAAA,aACAlF,EAAA+D,IAAAN,EAAAyB,EACA,MACA,KAAA,OACArF,EAAAyF,QAAA7B,EAAAyB,EACA,MACA,KAAA,UACArF,EAAA0F,WAAA9B,EAAAyB,EACA,MACA,KAAA,UACArF,EAAA2F,WAAA/B,EAAAyB,EACA,MACA,KAAA,WACArF,EAAA4F,YAAAhC,EAAAyB,EACA,MACA,KAAA,WACArF,EAAA6F,YAAAjC,EAAAyB,EACA,MACA,KAAA,QACArF,EAAA8F,SAAAlC,EAAAyB,EACA,MACA,KAAA,WACArF,EAAA+F,YAAAnC,EAAAyB,EACA,MACA,KAAA,kBACArF,EAAAgG,mBAAApC,EAAAyB,EACA,MACA,KAAA,QACArF,EAAAiG,SAAArC,EAAAyB,EACA,MACA,SACAzB,EAAA0B,GAAAD,IAYArF,EAAAwF,UAAA,SAAA5B,EAAAxB,GACA,IAAA,GAAA7C,GAAA,EAAAA,EAAAqE,EAAA1C,MAAAtB,OAAAL,IAAA,CACA,GAAA2G,GAAAtC,EAAA1C,MAAA3B,EACA2G,GAAA9D,SAAAA,EAEAA,GACA8D,EAAAC,WACA1D,YAAAyD,EAAAzD,YACAC,SAAAwD,EAAAxD,SACAkC,KAAAsB,EAAAtB,KACAC,QAAAqB,EAAArB,QACArC,QAAA0D,EAAA1D,QACA4D,YAAAF,EAAAE,YACAC,eAAAH,EAAAG,gBAGAH,EAAAzD,YAAA,EACAyD,EAAAxD,SAAA,EACAwD,EAAAtB,KAAAsB,EAAArB,QAAAqB,EAAA1D,QAAA8D,EAAAA,EACAJ,EAAAE,YAAAF,EAAAG,eAAA,EAEAH,EAAA9B,aAAA5C,EAAA0E,EAAA3E,SAAAC,EACA0E,EAAA9B,aAAA3C,EAAAyE,EAAA3E,SAAAE,EACAyE,EAAA5B,UAAA4B,EAAA9E,MACA8E,EAAAhE,gBAAA,EACAgE,EAAAnE,MAAA,EACAmE,EAAAlE,aAAA,EACAkE,EAAA5D,OAAA,GACA4D,EAAAC,YACAD,EAAAzD,YAAAyD,EAAAC,UAAA1D,YACAyD,EAAAxD,SAAAwD,EAAAC,UAAAzD,SACAwD,EAAAtB,KAAAsB,EAAAC,UAAAvB,KACAsB,EAAArB,QAAAqB,EAAAC,UAAAtB,QACAqB,EAAA1D,QAAA0D,EAAAC,UAAA3D,QACA0D,EAAAE,YAAAF,EAAAC,UAAAC,YACAF,EAAAG,eAAAH,EAAAC,UAAAE,qBAEAH,GAAAC,aAWAnG,EAAAyF,QAAA,SAAA7B,EAAAgB,GACAhB,EAAAgB,KAAAA,EACAhB,EAAAwC,YAAA,EAAAxC,EAAAgB,KACAhB,EAAApB,QAAAoB,EAAAgB,KAAAhB,EAAAe,MASA3E,EAAA0F,WAAA,SAAA9B,EAAApB,GACAxC,EAAAyF,QAAA7B,EAAApB,EAAAoB,EAAAe,MACAf,EAAApB,QAAAA,GAUAxC,EAAA2F,WAAA,SAAA/B,EAAAiB,GACAjB,EAAAiB,QAAAA,EACAjB,EAAAyC,eAAA,EAAAzC,EAAAiB,SAeA7E,EAAA4F,YAAA,SAAAhC,EAAAvC,GAEAA,EAAA,GAAAuC,OAAAA,EACAA,EAAAvC,SAAAA,EAEAuC,EAAAvC,SAAApB,EAAAU,OAAAU,EAAAuC,GAIAA,EAAAa,KAAAnE,EAAAiG,aAAA3C,EAAAvC,UACAuC,EAAAe,KAAA1E,EAAA0E,KAAAf,EAAAvC,UACArB,EAAAyF,QAAA7B,EAAAA,EAAApB,QAAAoB,EAAAe,KAGA,IAAA6B,GAAAvG,EAAAuG,OAAA5C,EAAAvC,SACApB,GAAAwG,UAAA7C,EAAAvC,SAAAmF,GAAA,GAGAxG,EAAA2F,WAAA/B,EAAA5D,EAAAO,cAAAN,EAAA4E,QAAAjB,EAAAvC,SAAAuC,EAAAgB,OAGA3E,EAAAwG,UAAA7C,EAAAvC,SAAAuC,EAAArC,UACAlB,EAAAqE,OAAAd,EAAAO,OAAAP,EAAAvC,SAAAuC,EAAA3B,WAaAjC,EAAAiG,SAAA,SAAArC,EAAA1C,EAAAwF,GACA,GAAAnH,EAQA,KALA2B,EAAAA,EAAAyF,MAAA,GACA/C,EAAA1C,MAAAtB,OAAA,EACAgE,EAAA1C,MAAA0F,KAAAhD,GACAA,EAAAW,OAAAX,EAEArE,EAAA,EAAAA,EAAA2B,EAAAtB,OAAAL,IAAA,CACA,GAAA2G,GAAAhF,EAAA3B,EACA2G,KAAAtC,IACAsC,EAAA3B,OAAAX,EACAA,EAAA1C,MAAA0F,KAAAV,IAIA,GAAA,IAAAtC,EAAA1C,MAAAtB,OAAA,CAMA,GAHA8G,MAAA,KAAAA,GAAAA,EAGA,CACA,GAAArF,KACA,KAAA9B,EAAA,EAAAA,EAAA2B,EAAAtB,OAAAL,IACA8B,EAAAA,EAAAwF,OAAA3F,EAAA3B,GAAA8B,SAGApB,GAAA6G,cAAAzF,EAEA,IAAA0F,GAAA9G,EAAA8G,KAAA1F,GACA2F,EAAA/G,EAAAuG,OAAAO,EAEA/G,GAAA4F,YAAAhC,EAAAmD,GACA9G,EAAAwG,UAAA7C,EAAAvC,SAAA2F,GAIA,GAAAC,GAAAC,EAAAtD,EAEAA,GAAAe,KAAAsC,EAAAtC,KACAf,EAAAW,OAAAX,EACAA,EAAArC,SAAAC,EAAAyF,EAAAT,OAAAhF,EACAoC,EAAArC,SAAAE,EAAAwF,EAAAT,OAAA/E,EACAmC,EAAAQ,aAAA5C,EAAAyF,EAAAT,OAAAhF,EACAoC,EAAAQ,aAAA3C,EAAAwF,EAAAT,OAAA/E,EAEAzB,EAAAyF,QAAA7B,EAAAqD,EAAArC,MACA5E,EAAA2F,WAAA/B,EAAAqD,EAAApC,SACA7E,EAAA6F,YAAAjC,EAAAqD,EAAAT,UASAxG,EAAA6F,YAAA,SAAAjC,EAAArC,GACA,GAAA4F,GAAAjH,EAAAkH,IAAA7F,EAAAqC,EAAArC,SACAqC,GAAAQ,aAAA5C,GAAA2F,EAAA3F,EACAoC,EAAAQ,aAAA3C,GAAA0F,EAAA1F,CAEA,KAAA,GAAAlC,GAAA,EAAAA,EAAAqE,EAAA1C,MAAAtB,OAAAL,IAAA,CACA,GAAA2G,GAAAtC,EAAA1C,MAAA3B,EACA2G,GAAA3E,SAAAC,GAAA2F,EAAA3F,EACA0E,EAAA3E,SAAAE,GAAA0F,EAAA1F,EACAxB,EAAAwG,UAAAP,EAAA7E,SAAA8F,GACA9G,EAAAqE,OAAAwB,EAAA/B,OAAA+B,EAAA7E,SAAAuC,EAAA3B,YAUAjC,EAAA8F,SAAA,SAAAlC,EAAAxC,GACA,GAAA+F,GAAA/F,EAAAwC,EAAAxC,KACAwC,GAAAU,WAAA6C,CAEA,KAAA,GAAA5H,GAAA,EAAAA,EAAAqE,EAAA1C,MAAAtB,OAAAL,IAAA,CACA,GAAA2G,GAAAtC,EAAA1C,MAAA3B,EACA2G,GAAA9E,OAAA+F,EACAlH,EAAAuE,OAAA0B,EAAA7E,SAAA8F,EAAAvD,EAAArC,UACAjB,EAAAkE,OAAA0B,EAAAzB,KAAA0C,GACA9G,EAAAqE,OAAAwB,EAAA/B,OAAA+B,EAAA7E,SAAAuC,EAAA3B,UACA1C,EAAA,GACAW,EAAAmH,YAAAnB,EAAA3E,SAAA4F,EAAAvD,EAAArC,SAAA2E,EAAA3E,YAWAvB,EAAA+F,YAAA,SAAAnC,EAAA3B,GACA2B,EAAAQ,aAAA5C,EAAAoC,EAAArC,SAAAC,EAAAS,EAAAT,EACAoC,EAAAQ,aAAA3C,EAAAmC,EAAArC,SAAAE,EAAAQ,EAAAR,EACAmC,EAAA3B,SAAAT,EAAAS,EAAAT,EACAoC,EAAA3B,SAAAR,EAAAQ,EAAAR,EACAmC,EAAA7B,MAAA7B,EAAAoH,UAAA1D,EAAA3B,WASAjC,EAAAgG,mBAAA,SAAApC,EAAA3B,GACA2B,EAAAU,UAAAV,EAAAxC,MAAAa,EACA2B,EAAA1B,gBAAAD,EACA2B,EAAA5B,aAAAuF,KAAAC,IAAA5D,EAAA1B,kBASAlC,EAAAyG,UAAA,SAAA7C,EAAA6D,GACAzH,EAAA6F,YAAAjC,EAAA1D,EAAAwH,IAAA9D,EAAArC,SAAAkG,KAUAzH,EAAAwE,OAAA,SAAAZ,EAAA+D,EAAAC,GACA,GAAAA,EAEA,CACA,GAAAC,GAAAN,KAAAM,IAAAF,GACAG,EAAAP,KAAAO,IAAAH,GACAI,EAAAnE,EAAArC,SAAAC,EAAAoG,EAAApG,EACAwG,EAAApE,EAAArC,SAAAE,EAAAmG,EAAAnG,CAEAzB,GAAA6F,YAAAjC,GACApC,EAAAoG,EAAApG,GAAAuG,EAAAF,EAAAG,EAAAF,GACArG,EAAAmG,EAAAnG,GAAAsG,EAAAD,EAAAE,EAAAH,KAGA7H,EAAA8F,SAAAlC,EAAAA,EAAAxC,MAAAuG,OAZA3H,GAAA8F,SAAAlC,EAAAA,EAAAxC,MAAAuG,IAwBA3H,EAAAiI,MAAA,SAAArE,EAAAsE,EAAAC,EAAAP,GACA,IAAA,GAAArI,GAAA,EAAAA,EAAAqE,EAAA1C,MAAAtB,OAAAL,IAAA,CACA,GAAA2G,GAAAtC,EAAA1C,MAAA3B,EAGAU,GAAAgI,MAAA/B,EAAA7E,SAAA6G,EAAAC,EAAAvE,EAAArC,UAGA2E,EAAAzB,KAAAnE,EAAAiG,aAAAL,EAAA7E,UAEAuC,EAAAxB,WACA8D,EAAAvB,KAAA1E,EAAA0E,KAAAuB,EAAA7E,UACArB,EAAAyF,QAAAS,EAAAtC,EAAApB,QAAA0D,EAAAvB,MAGA1E,EAAAwG,UAAAP,EAAA7E,UAAAG,GAAA0E,EAAA3E,SAAAC,EAAAC,GAAAyE,EAAA3E,SAAAE,IACAzB,EAAA2F,WAAAO,EAAAjG,EAAA4E,QAAAqB,EAAA7E,SAAA6E,EAAAtB,OACA3E,EAAAwG,UAAAP,EAAA7E,UAAAG,EAAA0E,EAAA3E,SAAAC,EAAAC,EAAAyE,EAAA3E,SAAAE,KAIApB,EAAAqE,OAAAwB,EAAA/B,OAAA+B,EAAA7E,SAAAuC,EAAA3B,UAaA,GATA2B,EAAAwE,eACAF,IAAAC,EACAvE,EAAAwE,cAAAF,EAGAtE,EAAAwE,aAAA,OAIAxE,EAAAxB,SAAA,CACA,GAAA6E,GAAAC,EAAAtD,EACAA,GAAAe,KAAAsC,EAAAtC,KACA3E,EAAAyF,QAAA7B,EAAAqD,EAAArC,MACA5E,EAAA2F,WAAA/B,EAAAqD,EAAApC,WAYA7E,EAAA0E,OAAA,SAAAd,EAAAyE,EAAAnF,EAAAoF,GACA,GAAAC,GAAAhB,KAAAiB,IAAAH,EAAAnF,EAAAU,EAAAV,UAAA,GAGAN,EAAA,EAAAgB,EAAAhB,YAAAM,EAAAU,EAAAV,UACAuF,EAAA7E,EAAArC,SAAAC,EAAAoC,EAAAQ,aAAA5C,EACAkH,EAAA9E,EAAArC,SAAAE,EAAAmC,EAAAQ,aAAA3C,CAGAmC,GAAA3B,SAAAT,EAAAiH,EAAA7F,EAAA0F,EAAA1E,EAAAlC,MAAAF,EAAAoC,EAAAgB,KAAA2D,EACA3E,EAAA3B,SAAAR,EAAAiH,EAAA9F,EAAA0F,EAAA1E,EAAAlC,MAAAD,EAAAmC,EAAAgB,KAAA2D,EAEA3E,EAAAQ,aAAA5C,EAAAoC,EAAArC,SAAAC,EACAoC,EAAAQ,aAAA3C,EAAAmC,EAAArC,SAAAE,EACAmC,EAAArC,SAAAC,GAAAoC,EAAA3B,SAAAT,EACAoC,EAAArC,SAAAE,GAAAmC,EAAA3B,SAAAR,EAGAmC,EAAA1B,iBAAA0B,EAAAxC,MAAAwC,EAAAU,WAAA1B,EAAA0F,EAAA1E,EAAAjC,OAAAiC,EAAAiB,QAAA0D,EACA3E,EAAAU,UAAAV,EAAAxC,MACAwC,EAAAxC,OAAAwC,EAAA1B,gBAGA0B,EAAA7B,MAAA7B,EAAAoH,UAAA1D,EAAA3B,UACA2B,EAAA5B,aAAAuF,KAAAC,IAAA5D,EAAA1B,gBAGA,KAAA,GAAA3C,GAAA,EAAAA,EAAAqE,EAAA1C,MAAAtB,OAAAL,IAAA,CACA,GAAA2G,GAAAtC,EAAA1C,MAAA3B,EAEAU,GAAAwG,UAAAP,EAAA7E,SAAAuC,EAAA3B,UAEA1C,EAAA,IACA2G,EAAA3E,SAAAC,GAAAoC,EAAA3B,SAAAT,EACA0E,EAAA3E,SAAAE,GAAAmC,EAAA3B,SAAAR,GAGA,IAAAmC,EAAA1B,kBACAjC,EAAAuE,OAAA0B,EAAA7E,SAAAuC,EAAA1B,gBAAA0B,EAAArC,UACAjB,EAAAkE,OAAA0B,EAAAzB,KAAAb,EAAA1B,iBACA3C,EAAA,GACAW,EAAAmH,YAAAnB,EAAA3E,SAAAqC,EAAA1B,gBAAA0B,EAAArC,SAAA2E,EAAA3E,WAIAlB,EAAAqE,OAAAwB,EAAA/B,OAAA+B,EAAA7E,SAAAuC,EAAA3B,YAWAjC,EAAA2I,WAAA,SAAA/E,EAAArC,EAAAG,GACAkC,EAAAlC,MAAAF,GAAAE,EAAAF,EACAoC,EAAAlC,MAAAD,GAAAC,EAAAD,CACA,IAAAmH,IAAApH,EAAAD,EAAAC,EAAAoC,EAAArC,SAAAC,EAAAC,EAAAF,EAAAE,EAAAmC,EAAArC,SAAAE,EACAmC,GAAAjC,QAAAiH,EAAApH,EAAAE,EAAAD,EAAAmH,EAAAnH,EAAAC,EAAAF,EAUA,IAAA0F,GAAA,SAAAtD,GAaA,IAAA,GARAiF,IACAjE,KAAA,EACAD,KAAA,EACAE,QAAA,EACA2B,QAAAhF,EAAA,EAAAC,EAAA,IAIAlC,EAAA,IAAAqE,EAAA1C,MAAAtB,OAAA,EAAA,EAAAL,EAAAqE,EAAA1C,MAAAtB,OAAAL,IAAA,CACA,GAAA2G,GAAAtC,EAAA1C,MAAA3B,EACAsJ,GAAAjE,MAAAsB,EAAAtB,KACAiE,EAAAlE,MAAAuB,EAAAvB,KACAkE,EAAAhE,SAAAqB,EAAArB,QACAgE,EAAArC,OAAAtG,EAAAwH,IAAAmB,EAAArC,OACAtG,EAAA4I,KAAA5C,EAAA3E,SAAA2E,EAAAtB,OAAA0B,EAAAA,EAAAJ,EAAAtB,KAAA,IAMA,MAHAiE,GAAArC,OAAAtG,EAAA6I,IAAAF,EAAArC,OACAqC,EAAAjE,OAAA0B,EAAAA,EAAAuC,EAAAjE,KAAAhB,EAAA1C,MAAAtB,QAEAiJ,QA4fAG,iBAAA,GAAAC,mBAAA,GAAAC,mBAAA,GAAAC,qBAAA,GAAAC,qBAAA,GAAAC,uBAAA,GAAAC,mBAAA,KAAAC,GAAA,SAAAxJ,EAAA1B,EAAAD,GAYA,GAAAoL,KAEAnL,GAAAD,QAAAoL,CAEA,IAAAC,GAAA1J,EAAA,kBACAK,EAAAL,EAAA,kBACAC,EAAAD,EAAA,WAEA,WASAyJ,EAAA7I,OAAA,SAAAC,GACA,MAAAR,GAAAyD,QACA/C,GAAAV,EAAAW,SACAC,KAAA,YACAuD,OAAA,KACAmF,YAAA,EACAC,UACAC,eACAC,cACA5I,MAAA,YACAE,WACAP,IAaA4I,EAAAM,YAAA,SAAAC,EAAAL,EAAAM,EAAAC,GAOA,GANAF,EAAAL,WAAAA,EAEAM,GAAAD,EAAAxF,QACAiF,EAAAM,YAAAC,EAAAxF,OAAAmF,EAAAM,EAAAC,GAGAA,EACA,IAAA,GAAA1K,GAAA,EAAAA,EAAAwK,EAAAF,WAAAjK,OAAAL,IAAA,CACA,GAAA2K,GAAAH,EAAAF,WAAAtK,EACAiK,GAAAM,YAAAI,EAAAR,EAAAM,EAAAC,KAaAT,EAAA9B,IAAA,SAAAqC,EAAAI,GACA,GAAAC,MAAAvD,OAAAsD,EAEAV,GAAAY,QAAAN,EAAA,aAAAI,OAAAA,GAEA,KAAA,GAAA5K,GAAA,EAAAA,EAAA6K,EAAAxK,OAAAL,IAAA,CACA,GAAA+K,GAAAF,EAAA7K,EAEA,QAAA+K,EAAAtJ,MAEA,IAAA,OAEA,GAAAsJ,EAAA/F,SAAA+F,EAAA,CACAlK,EAAAmK,KAAA,uFACA,OAGAf,EAAAgB,QAAAT,EAAAO,EACA,MACA,KAAA,aACAd,EAAAiB,cAAAV,EAAAO,EACA,MACA,KAAA,YACAd,EAAAkB,aAAAX,EAAAO,EACA,MACA,KAAA,kBACAd,EAAAiB,cAAAV,EAAAO,EAAAK,aAQA,MAFAlB,GAAAY,QAAAN,EAAA,YAAAI,OAAAA,IAEAJ,GAaAP,EAAAoB,OAAA,SAAAb,EAAAI,EAAAU,GACA,GAAAT,MAAAvD,OAAAsD,EAEAV,GAAAY,QAAAN,EAAA,gBAAAI,OAAAA,GAEA,KAAA,GAAA5K,GAAA,EAAAA,EAAA6K,EAAAxK,OAAAL,IAAA,CACA,GAAA+K,GAAAF,EAAA7K,EAEA,QAAA+K,EAAAtJ,MAEA,IAAA,OACAwI,EAAAsB,WAAAf,EAAAO,EAAAO,EACA,MACA,KAAA,aACArB,EAAAuB,iBAAAhB,EAAAO,EAAAO,EACA,MACA,KAAA,YACArB,EAAAwB,gBAAAjB,EAAAO,EAAAO,EACA,MACA,KAAA,kBACArB,EAAAuB,iBAAAhB,EAAAO,EAAAK,aAQA,MAFAlB,GAAAY,QAAAN,EAAA,eAAAI,OAAAA,IAEAJ,GAWAP,EAAAkB,aAAA,SAAAO,EAAAC,GAIA,MAHAD,GAAApB,WAAAjD,KAAAsE,GACAA,EAAA3G,OAAA0G,EACAzB,EAAAM,YAAAmB,GAAA,GAAA,GAAA,GACAA,GAYAzB,EAAAwB,gBAAA,SAAAC,EAAAC,EAAAL,GACA,GAAAtJ,GAAAnB,EAAA+K,QAAAF,EAAApB,WAAAqB,EAMA,KALA,IAAA3J,IACAiI,EAAA4B,kBAAAH,EAAA1J,GACAiI,EAAAM,YAAAmB,GAAA,GAAA,GAAA,IAGAJ,EACA,IAAA,GAAAtL,GAAA,EAAAA,EAAA0L,EAAApB,WAAAjK,OAAAL,IACAiK,EAAAwB,gBAAAC,EAAApB,WAAAtK,GAAA2L,GAAA,EAIA,OAAAD,IAWAzB,EAAA4B,kBAAA,SAAArB,EAAAxI,GAGA,MAFAwI,GAAAF,WAAAwB,OAAA9J,EAAA,GACAiI,EAAAM,YAAAC,GAAA,GAAA,GAAA,GACAA,GAWAP,EAAAgB,QAAA,SAAAT,EAAAnG,GAGA,MAFAmG,GAAAJ,OAAA/C,KAAAhD,GACA4F,EAAAM,YAAAC,GAAA,GAAA,GAAA,GACAA,GAYAP,EAAAsB,WAAA,SAAAf,EAAAnG,EAAAiH,GACA,GAAAtJ,GAAAnB,EAAA+K,QAAApB,EAAAJ,OAAA/F,EAMA,KALA,IAAArC,IACAiI,EAAA8B,aAAAvB,EAAAxI,GACAiI,EAAAM,YAAAC,GAAA,GAAA,GAAA,IAGAc,EACA,IAAA,GAAAtL,GAAA,EAAAA,EAAAwK,EAAAF,WAAAjK,OAAAL,IACAiK,EAAAsB,WAAAf,EAAAF,WAAAtK,GAAAqE,GAAA,EAIA,OAAAmG,IAWAP,EAAA8B,aAAA,SAAAvB,EAAAxI,GAGA,MAFAwI,GAAAJ,OAAA0B,OAAA9J,EAAA,GACAiI,EAAAM,YAAAC,GAAA,GAAA,GAAA,GACAA,GAWAP,EAAAiB,cAAA,SAAAV,EAAAY,GAGA,MAFAZ,GAAAH,YAAAhD,KAAA+D,GACAnB,EAAAM,YAAAC,GAAA,GAAA,GAAA,GACAA,GAYAP,EAAAuB,iBAAA,SAAAhB,EAAAY,EAAAE,GACA,GAAAtJ,GAAAnB,EAAA+K,QAAApB,EAAAH,YAAAe,EAKA,KAJA,IAAApJ,GACAiI,EAAA+B,mBAAAxB,EAAAxI,GAGAsJ,EACA,IAAA,GAAAtL,GAAA,EAAAA,EAAAwK,EAAAF,WAAAjK,OAAAL,IACAiK,EAAAuB,iBAAAhB,EAAAF,WAAAtK,GAAAoL,GAAA,EAIA,OAAAZ,IAWAP,EAAA+B,mBAAA,SAAAxB,EAAAxI,GAGA,MAFAwI,GAAAH,YAAAyB,OAAA9J,EAAA,GACAiI,EAAAM,YAAAC,GAAA,GAAA,GAAA,GACAA,GAWAP,EAAAgC,MAAA,SAAAzB,EAAA0B,EAAAZ,GACA,GAAAA,EACA,IAAA,GAAAtL,GAAA,EAAAA,EAAAwK,EAAAF,WAAAjK,OAAAL,IACAiK,EAAAgC,MAAAzB,EAAAF,WAAAtK,GAAAkM,GAAA,EAcA,OAVAA,GACA1B,EAAAJ,OAAAI,EAAAJ,OAAA+B,OAAA,SAAA9H,GAAA,MAAAA,GAAAxB,WAEA2H,EAAAJ,OAAA/J,OAAA,EAGAmK,EAAAH,YAAAhK,OAAA,EACAmK,EAAAF,WAAAjK,OAAA,EACA4J,EAAAM,YAAAC,GAAA,GAAA,GAAA,GAEAA,GASAP,EAAAmC,UAAA,SAAA5B,GAGA,IAAA,GAFAJ,MAAA9C,OAAAkD,EAAAJ,QAEApK,EAAA,EAAAA,EAAAwK,EAAAF,WAAAjK,OAAAL,IACAoK,EAAAA,EAAA9C,OAAA2C,EAAAmC,UAAA5B,EAAAF,WAAAtK,IAEA,OAAAoK,IASAH,EAAAoC,eAAA,SAAA7B,GAGA,IAAA,GAFAH,MAAA/C,OAAAkD,EAAAH,aAEArK,EAAA,EAAAA,EAAAwK,EAAAF,WAAAjK,OAAAL,IACAqK,EAAAA,EAAA/C,OAAA2C,EAAAoC,eAAA7B,EAAAF,WAAAtK,IAEA,OAAAqK,IASAJ,EAAAqC,cAAA,SAAA9B,GAGA,IAAA,GAFAF,MAAAhD,OAAAkD,EAAAF,YAEAtK,EAAA,EAAAA,EAAAwK,EAAAF,WAAAjK,OAAAL,IACAsK,EAAAA,EAAAhD,OAAA2C,EAAAqC,cAAA9B,EAAAF,WAAAtK,IAEA,OAAAsK,IAWAL,EAAAsC,IAAA,SAAA/B,EAAAjJ,EAAAE,GACA,GAAAoJ,GACAD,CAEA,QAAAnJ,GACA,IAAA,OACAoJ,EAAAZ,EAAAmC,UAAA5B,EACA,MACA,KAAA,aACAK,EAAAZ,EAAAoC,eAAA7B,EACA,MACA,KAAA,YACAK,EAAAZ,EAAAqC,cAAA9B,GAAAlD,OAAAkD,GAIA,MAAAK,IAGAD,EAAAC,EAAAsB,OAAA,SAAAvB,GACA,MAAAA,GAAArJ,GAAAiL,aAAAjL,EAAAiL,aAGA,IAAA5B,EAAAvK,OAAA,KAAAuK,EAAA,IANA,MAiBAX,EAAAwC,KAAA,SAAAf,EAAAb,EAAAc,GAGA,MAFA1B,GAAAoB,OAAAK,EAAAb,GACAZ,EAAA9B,IAAAwD,EAAAd,GACAa,GASAzB,EAAAyC,OAAA,SAAAlC,GAKA,IAAA,GAJAK,GAAAZ,EAAAmC,UAAA5B,GACAlD,OAAA2C,EAAAoC,eAAA7B,IACAlD,OAAA2C,EAAAqC,cAAA9B,IAEAxK,EAAA,EAAAA,EAAA6K,EAAAxK,OAAAL,IACA6K,EAAA7K,GAAAuB,GAAAV,EAAAW,QAKA,OAFAyI,GAAAM,YAAAC,GAAA,GAAA,GAAA,GAEAA,GAWAP,EAAA/C,UAAA,SAAAsD,EAAAtC,EAAAyE,GAGA,IAAA,GAFAvC,GAAAuC,EAAA1C,EAAAmC,UAAA5B,GAAAA,EAAAJ,OAEApK,EAAA,EAAAA,EAAAoK,EAAA/J,OAAAL,IACAS,EAAAyG,UAAAkD,EAAApK,GAAAkI,EAKA,OAFA+B,GAAAM,YAAAC,GAAA,GAAA,GAAA,GAEAA,GAWAP,EAAAhF,OAAA,SAAAuF,EAAApC,EAAAC,EAAAsE,GAKA,IAAA,GAJArE,GAAAN,KAAAM,IAAAF,GACAG,EAAAP,KAAAO,IAAAH,GACAgC,EAAAuC,EAAA1C,EAAAmC,UAAA5B,GAAAA,EAAAJ,OAEApK,EAAA,EAAAA,EAAAoK,EAAA/J,OAAAL,IAAA,CACA,GAAAqE,GAAA+F,EAAApK,GACAwI,EAAAnE,EAAArC,SAAAC,EAAAoG,EAAApG,EACAwG,EAAApE,EAAArC,SAAAE,EAAAmG,EAAAnG,CAEAzB,GAAA6F,YAAAjC,GACApC,EAAAoG,EAAApG,GAAAuG,EAAAF,EAAAG,EAAAF,GACArG,EAAAmG,EAAAnG,GAAAsG,EAAAD,EAAAE,EAAAH,KAGA7H,EAAAwE,OAAAZ,EAAA+D,GAKA,MAFA6B,GAAAM,YAAAC,GAAA,GAAA,GAAA,GAEAA,GAYAP,EAAAvB,MAAA,SAAA8B,EAAA7B,EAAAC,EAAAP,EAAAsE,GAGA,IAAA,GAFAvC,GAAAuC,EAAA1C,EAAAmC,UAAA5B,GAAAA,EAAAJ,OAEApK,EAAA,EAAAA,EAAAoK,EAAA/J,OAAAL,IAAA,CACA,GAAAqE,GAAA+F,EAAApK,GACAwI,EAAAnE,EAAArC,SAAAC,EAAAoG,EAAApG,EACAwG,EAAApE,EAAArC,SAAAE,EAAAmG,EAAAnG,CAEAzB,GAAA6F,YAAAjC,GACApC,EAAAoG,EAAApG,EAAAuG,EAAAG,EACAzG,EAAAmG,EAAAnG,EAAAuG,EAAAG,IAGAnI,EAAAiI,MAAArE,EAAAsE,EAAAC,GAKA,MAFAqB,GAAAM,YAAAC,GAAA,GAAA,GAAA,GAEAA,GASAP,EAAArF,OAAA,SAAA4F,GAIA,IAAA,GAHAJ,GAAA7J,OAAA0J,UAAAmC,UAAA5B,GACA1I,KAEA9B,EAAA,EAAAA,EAAAoK,EAAA/J,OAAAL,GAAA,EAAA,CACA,GAAAqE,GAAA+F,EAAApK,EACA8B,GAAAuF,KAAAhD,EAAAO,OAAAe,IAAAtB,EAAAO,OAAAgB,KAGA,MAAArF,QAAAO,OAAAM,OAAAU,SAwIA2H,iBAAA,GAAAmD,iBAAA,GAAAC,SAAA,IAAAC,GAAA,SAAAtM,EAAA1B,EAAAD,GAcA,GAAAkO,KAEAjO,GAAAD,QAAAkO,CAEA,IAAA9C,GAAAzJ,EAAA,eAEAK,GADAL,EAAA,4BACAA,EAAA,oBAEA,WAUAuM,EAAA3L,OAAA,SAAAC,GACA,GAAAmJ,GAAAP,EAAA7I,SAEAE,GACAI,MAAA,QACAsL,SACA/K,EAAA,EACAC,EAAA,EACAwG,MAAA,MAEA9D,QACAe,KAAA1D,GAAA8E,EAAAA,EAAA7E,GAAA6E,EAAAA,GACAnB,KAAA3D,EAAA8E,EAAAA,EAAA7E,EAAA6E,EAAAA,IAIA,OAAAlG,GAAAyD,OAAAkG,EAAAlJ,EAAAD,SAoFA4L,2BAAA,GAAAxD,iBAAA,GAAAyD,cAAA,IAAAC,GAAA,SAAA3M,EAAA1B,EAAAD,GAOA,GAAAuO,KAEAtO,GAAAD,QAAAuO,EAEA,WAQAA,EAAAhM,OAAA,SAAAiM,GACA,OACA9L,GAAA6L,EAAA7L,GAAA8L,GACAA,OAAAA,EACAC,cAAA,EACAC,eAAA,IAUAH,EAAA7L,GAAA,SAAA8L,GACA,MAAAA,GAAAhJ,KAAA9C,GAAA,IAAA8L,EAAAG,eAKAC,GAAA,SAAAjN,EAAA1B,EAAAD,GASA,GAAA6O,KAEA5O,GAAAD,QAAA6O,CAEA,IAAAC,GAAAnN,EAAA,SACAoN,EAAApN,EAAA,UACAM,EAAAN,EAAA,uBAEA,WASAkN,EAAAG,WAAA,SAAAC,EAAAC,GAKA,IAAA,GAJAF,MACAG,EAAAD,EAAAE,MAAAC,MAGAlO,EAAA,EAAAA,EAAA8N,EAAAzN,OAAAL,IAAA,CACA,GAAAmO,GAAAL,EAAA9N,GAAA,GACAoO,EAAAN,EAAA9N,GAAA,EAEA,MAAAmO,EAAAtL,WAAAsL,EAAArL,aAAAsL,EAAAvL,WAAAuL,EAAAtL,cAGA4K,EAAAW,WAAAF,EAAA7K,gBAAA8K,EAAA9K,kBAKAxC,EAAAwN,SAAAH,EAAAvJ,OAAAwJ,EAAAxJ,SACA,IAAA,GAAA2J,GAAAJ,EAAAxM,MAAAtB,OAAA,EAAA,EAAA,EAAAkO,EAAAJ,EAAAxM,MAAAtB,OAAAkO,IAGA,IAAA,GAFAC,GAAAL,EAAAxM,MAAA4M,GAEAE,EAAAL,EAAAzM,MAAAtB,OAAA,EAAA,EAAA,EAAAoO,EAAAL,EAAAzM,MAAAtB,OAAAoO,IAAA,CACA,GAAAC,GAAAN,EAAAzM,MAAA8M,EAEA,IAAAD,IAAAL,GAAAO,IAAAN,GAAAtN,EAAAwN,SAAAE,EAAA5J,OAAA8J,EAAA9J,QAAA,CAEA,GAEA+J,GAFAC,EAAAhB,EAAArM,GAAAiN,EAAAE,GACAG,EAAAb,EAAAY,EAIAD,GADAE,GAAAA,EAAAC,SACAD,EAAAE,UAEA,IAIA,IAAAA,GAAApB,EAAAqB,SAAAR,EAAAE,EAAAC,EAGAI,GAAAE,UACApB,EAAAxG,KAAA0H,KAQA,MAAAlB,IAWAH,EAAAW,WAAA,SAAAa,EAAAC,GACA,MAAAD,GAAAzL,QAAA0L,EAAA1L,OAAA,IAAAyL,EAAAzL,MACAyL,EAAAzL,MAAA,EAEA,IAAAyL,EAAA1L,KAAA2L,EAAA5L,WAAA,IAAA4L,EAAA3L,KAAA0L,EAAA3L,gBAKAqG,qBAAA,GAAAwF,SAAA,EAAAC,QAAA,KAAAC,GAAA,SAAA9O,EAAA1B,EAAAD,GAOA,GAAA0Q,KAEAzQ,GAAAD,QAAA0Q,CAEA,IAAA3B,GAAApN,EAAA,UACAkN,EAAAlN,EAAA,cACAK,EAAAL,EAAA,mBAEA,WAQA+O,EAAAnO,OAAA,SAAAC,GACA,GAAAC,IACAkO,WAAAD,EACAE,SAAA/B,EAAAG,WACA6B,WACAzB,SACA0B,aACAC,YAAA,GACAC,aAAA,GAGA,OAAAhP,GAAAyD,OAAAhD,EAAAD,IA2BAkO,EAAApK,OAAA,SAAA2K,EAAA1F,EAAA2D,EAAAgC,GACA,GAAA/P,GAAAgQ,EAAAC,EAGAC,EACAC,EAHAC,EAAArC,EAAAqC,MACAV,EAAAI,EAAAJ,QAGAW,GAAA,CAGA,KAAArQ,EAAA,EAAAA,EAAAoK,EAAA/J,OAAAL,IAAA,CACA,GAAAqE,GAAA+F,EAAApK,EAEA,MAAAqE,EAAAvB,YAAAiN,MAIA1L,EAAAO,OAAAgB,IAAA3D,EAAAmO,EAAAxL,OAAAe,IAAA1D,GAAAoC,EAAAO,OAAAe,IAAA1D,EAAAmO,EAAAxL,OAAAgB,IAAA3D,GACAoC,EAAAO,OAAAgB,IAAA1D,EAAAkO,EAAAxL,OAAAe,IAAAzD,GAAAmC,EAAAO,OAAAe,IAAAzD,EAAAkO,EAAAxL,OAAAgB,IAAA1D,GADA,CAIA,GAAAoO,GAAAC,EAAAT,EAAAzL,EAGA,KAAAA,EAAAmM,QAAAF,EAAA/O,KAAA8C,EAAAmM,OAAAjP,IAAAwO,EAAA,CAGA1L,EAAAmM,SAAAT,IACA1L,EAAAmM,OAAAF,EAEA,IAAAG,GAAAC,EAAAJ,EAAAjM,EAAAmM,OAIA,KAAAR,EAAAS,EAAAE,SAAAX,GAAAS,EAAAG,OAAAZ,IACA,IAAAC,EAAAQ,EAAAI,SAAAZ,GAAAQ,EAAAK,OAAAb,IAAA,CACAE,EAAAY,EAAAf,EAAAC,GACAC,EAAAR,EAAAS,EAEA,IAAAa,GAAAhB,GAAAM,EAAAK,UAAAX,GAAAM,EAAAM,QACAX,GAAAK,EAAAO,UAAAZ,GAAAK,EAAAQ,OAEAG,EAAAjB,GAAA3L,EAAAmM,OAAAG,UAAAX,GAAA3L,EAAAmM,OAAAI,QACAX,GAAA5L,EAAAmM,OAAAK,UAAAZ,GAAA5L,EAAAmM,OAAAM,QAGAE,GAAAC,GACAA,GACAf,GACAgB,EAAApB,EAAAI,EAAA7L,IAKAA,EAAAmM,SAAAF,GAAAU,IAAAC,GAAAlB,KACAG,IACAA,EAAAiB,EAAAzB,EAAAS,IACAiB,EAAAtB,EAAAI,EAAA7L,IAMAA,EAAAmM,OAAAF,EAGAD,GAAA,IAKAA,IACAP,EAAAH,UAAA0B,EAAAvB,KAQAP,EAAAtD,MAAA,SAAA6D,GACAA,EAAAJ,WACAI,EAAA7B,SACA6B,EAAAH,aAWA,IAAAe,GAAA,SAAAY,EAAAC,GACA,GAAAZ,GAAA3I,KAAArC,IAAA2L,EAAAX,SAAAY,EAAAZ,UACAC,EAAA5I,KAAApC,IAAA0L,EAAAV,OAAAW,EAAAX,QACAC,EAAA7I,KAAArC,IAAA2L,EAAAT,SAAAU,EAAAV,UACAC,EAAA9I,KAAApC,IAAA0L,EAAAR,OAAAS,EAAAT,OAEA,OAAAU,GAAAb,EAAAC,EAAAC,EAAAC,IAWAP,EAAA,SAAAT,EAAAzL,GACA,GAAAO,GAAAP,EAAAO,OACA+L,EAAA3I,KAAAyJ,MAAA7M,EAAAe,IAAA1D,EAAA6N,EAAAF,aACAgB,EAAA5I,KAAAyJ,MAAA7M,EAAAgB,IAAA3D,EAAA6N,EAAAF,aACAiB,EAAA7I,KAAAyJ,MAAA7M,EAAAe,IAAAzD,EAAA4N,EAAAD,cACAiB,EAAA9I,KAAAyJ,MAAA7M,EAAAgB,IAAA1D,EAAA4N,EAAAD,aAEA,OAAA2B,GAAAb,EAAAC,EAAAC,EAAAC,IAaAU,EAAA,SAAAb,EAAAC,EAAAC,EAAAC,GACA,OACAvP,GAAAoP,EAAA,IAAAC,EAAA,IAAAC,EAAA,IAAAC,EACAH,SAAAA,EACAC,OAAAA,EACAC,SAAAA,EACAC,OAAAA,IAYAC,EAAA,SAAAW,EAAAzB,GACA,MAAA,IAAAyB,EAAA,IAAAzB,GAWAkB,EAAA,SAAAzB,EAAAS,GAEA,MADAT,GAAAS,OAYAiB,EAAA,SAAAtB,EAAAI,EAAA7L,GAEA,IAAA,GAAArE,GAAA,EAAAA,EAAAkQ,EAAA7P,OAAAL,IAAA,CACA,GAAAoO,GAAA8B,EAAAlQ,EAEA,MAAAqE,EAAA9C,KAAA6M,EAAA7M,IAAA8C,EAAAxB,UAAAuL,EAAAvL,UAAA,CAKA,GAAA+L,GAAAhB,EAAArM,GAAA8C,EAAA+J,GACAS,EAAAiB,EAAA7B,MAAAW,EAEAC,GACAA,EAAA,IAAA,EAEAiB,EAAA7B,MAAAW,IAAAvK,EAAA+J,EAAA,IAKA8B,EAAA7I,KAAAhD,IAWA6M,EAAA,SAAApB,EAAAI,EAAA7L,GAEA6L,EAAApE,OAAAjL,EAAA+K,QAAAsE,EAAA7L,GAAA,EAGA,KAAA,GAAArE,GAAA,EAAAA,EAAAkQ,EAAA7P,OAAAL,IAAA,CAGA,GAAAoO,GAAA8B,EAAAlQ,GACA4O,EAAAhB,EAAArM,GAAA8C,EAAA+J,GACAS,EAAAiB,EAAA7B,MAAAW,EAEAC,KACAA,EAAA,IAAA,KAWAwC,EAAA,SAAAvB,GACA,GAAA6B,GACA9C,EACAZ,IAGA0D,GAAA9Q,EAAA+Q,KAAA9B,EAAA7B,MAGA,KAAA,GAAAQ,GAAA,EAAAA,EAAAkD,EAAAtR,OAAAoO,IACAI,EAAAiB,EAAA7B,MAAA0D,EAAAlD,IAIAI,EAAA,GAAA,EACAZ,EAAA5G,KAAAwH,SAEAiB,GAAA7B,MAAA0D,EAAAlD,GAIA,OAAAR,SAKAxE,iBAAA,GAAAoI,aAAA,EAAAzC,SAAA,IAAA0C,GAAA,SAAAtR,EAAA1B,EAAAD,GAOA,GAAA+O,KAEA9O,GAAAD,QAAA+O,CAEA,IAAAR,GAAA5M,EAAA,cAEA,WASAoN,EAAAxM,OAAA,SAAA2N,EAAAgD,GACA,GAAA5D,GAAAY,EAAAZ,MACAC,EAAAW,EAAAX,MACA4D,EAAAjD,EAAAiD,QACAC,EAAAlD,EAAAkD,QAEApD,GACAtN,GAAAqM,EAAArM,GAAA4M,EAAAC,GACAD,MAAAA,EACAC,MAAAA,EACA8D,YACAC,kBACAC,WAAA,EACAtD,UAAA,EACAlM,SAAAuL,EAAAvL,UAAAwL,EAAAxL,SACAyP,YAAAN,EACAO,YAAAP,EACAlL,YAAAmL,EAAAnL,YAAAoL,EAAApL,YACA1D,SAAA6E,KAAArC,IAAAqM,EAAA7O,SAAA8O,EAAA9O,UACAC,eAAA4E,KAAApC,IAAAoM,EAAA5O,eAAA6O,EAAA7O,gBACAF,YAAA8E,KAAApC,IAAAoM,EAAA9O,YAAA+O,EAAA/O,aACAQ,KAAAsE,KAAApC,IAAAoM,EAAAtO,KAAAuO,EAAAvO,MAKA,OAFAkK,GAAAzI,OAAA0J,EAAAE,EAAAgD,GAEAlD,GAUAjB,EAAAzI,OAAA,SAAA0J,EAAAE,EAAAgD,GACA,GAAAG,GAAArD,EAAAqD,SACAK,EAAAxD,EAAAwD,SACAJ,EAAAtD,EAAAsD,eACAH,EAAAjD,EAAAiD,QACAC,EAAAlD,EAAAkD,OAUA,IARApD,EAAAE,UAAAA,EACAF,EAAAhI,YAAAmL,EAAAnL,YAAAoL,EAAApL,YACAgI,EAAA1L,SAAA6E,KAAArC,IAAAqM,EAAA7O,SAAA8O,EAAA9O,UACA0L,EAAAzL,eAAA4E,KAAApC,IAAAoM,EAAA5O,eAAA6O,EAAA7O,gBACAyL,EAAA3L,YAAA8E,KAAApC,IAAAoM,EAAA9O,YAAA+O,EAAA/O,aACA2L,EAAAnL,KAAAsE,KAAApC,IAAAoM,EAAAtO,KAAAuO,EAAAvO,MACAyO,EAAA9R,OAAA,EAEA0O,EAAAE,SAAA,CACA,IAAA,GAAAjP,GAAA,EAAAA,EAAAuS,EAAAlS,OAAAL,IAAA,CACA,GAAAwS,GAAAD,EAAAvS,GACAyS,EAAArF,EAAA7L,GAAAiR,GACAE,EAAAR,EAAAO,EAEAC,GACAP,EAAA9K,KAAAqL,GAEAP,EAAA9K,KAAA6K,EAAAO,GAAArF,EAAAhM,OAAAoR,IAIA3D,EAAAuD,WAAArD,EAAA4D,MACA/E,EAAAgF,UAAA/D,GAAA,EAAAkD,QAEA,IAAAlD,EAAAC,UACAlB,EAAAgF,UAAA/D,GAAA,EAAAkD,IAWAnE,EAAAgF,UAAA,SAAA/D,EAAAC,EAAAiD,GACAjD,GACAD,EAAAC,UAAA,EACAD,EAAAyD,YAAAP,IAEAlD,EAAAC,UAAA,EACAD,EAAAsD,eAAA9R,OAAA,IAWAuN,EAAArM,GAAA,SAAA4M,EAAAC,GACA,MAAAD,GAAA5M,GAAA6M,EAAA7M,GACA,IAAA4M,EAAA5M,GAAA,IAAA6M,EAAA7M,GAEA,IAAA6M,EAAA7M,GAAA,IAAA4M,EAAA5M,SAMAsR,YAAA,IAAAC,GAAA,SAAAtS,EAAA1B,EAAAD,GAOA,GAAAkU,KAEAjU,GAAAD,QAAAkU,CAEA,IAAAnF,GAAApN,EAAA,UACAK,EAAAL,EAAA,mBAEA,WAUAuS,EAAA3R,OAAA,SAAAC,GACA,MAAAR,GAAAyD,QACA4J,SACA8E,QACAC,kBACAC,mBACAC,iBACA9R,IAUA0R,EAAA5N,OAAA,SAAA8I,EAAAJ,EAAAkE,GACA,GAMAhD,GACAH,EACAC,EACA7O,EATA2P,EAAA1B,EAAA+E,KACAhF,EAAAC,EAAAC,MACA+E,EAAAhF,EAAAgF,eACAE,EAAAlF,EAAAkF,aACAD,EAAAjF,EAAAiF,gBACAE,IAWA,KAJAH,EAAA5S,OAAA,EACA8S,EAAA9S,OAAA,EACA6S,EAAA7S,OAAA,EAEAL,EAAA,EAAAA,EAAA6N,EAAAxN,OAAAL,IACA+O,EAAAlB,EAAA7N,GAEA+O,EAAAE,WACAL,EAAAhB,EAAArM,GAAAwN,EAAAZ,MAAAY,EAAAX,OACAgF,EAAA/L,KAAAuH,GAEAC,EAAAb,EAAAY,GAEAC,GAEAA,EAAAC,SAEAoE,EAAA7L,KAAAwH,GAGAoE,EAAA5L,KAAAwH,GAIAjB,EAAAzI,OAAA0J,EAAAE,EAAAgD,KAGAlD,EAAAjB,EAAAxM,OAAA2N,EAAAgD,GACA/D,EAAAY,GAAAC,EAGAoE,EAAA5L,KAAAwH,GACAc,EAAAtI,KAAAwH,IAMA,KAAA7O,EAAA,EAAAA,EAAA2P,EAAAtP,OAAAL,IACA6O,EAAAc,EAAA3P,GACA6O,EAAAC,WAAA,IAAAjO,EAAA+K,QAAAwH,EAAAvE,EAAAtN,MACAqM,EAAAgF,UAAA/D,GAAA,EAAAkD,GACAoB,EAAA9L,KAAAwH,KAWAkE,EAAAM,UAAA,SAAApF,EAAA8D,GACA,GAGAlD,GACAE,EACAuE,EACAtT,EANA2P,EAAA1B,EAAA+E,KACAhF,EAAAC,EAAAC,MACAqF,IAMA,KAAAvT,EAAA,EAAAA,EAAA2P,EAAAtP,OAAAL,IACA6O,EAAAc,EAAA3P,GACA+O,EAAAF,EAAAE,UAGAA,EAAAZ,MAAArL,YAAAiM,EAAAX,MAAAtL,WACA+L,EAAAyD,YAAAP,EAKAA,EAAAlD,EAAAyD,YA/GA,KAgHAiB,EAAAlM,KAAArH,EAKA,KAAAA,EAAA,EAAAA,EAAAuT,EAAAlT,OAAAL,IACAsT,EAAAC,EAAAvT,GAAAA,EACA6O,EAAAc,EAAA2D,SACAtF,GAAAa,EAAAtN,IACAoO,EAAA7D,OAAAwH,EAAA,IAUAP,EAAA9G,MAAA,SAAAgC,GAMA,MALAA,GAAAC,SACAD,EAAA+E,KAAA3S,OAAA,EACA4N,EAAAgF,eAAA5S,OAAA,EACA4N,EAAAiF,gBAAA7S,OAAA,EACA4N,EAAAkF,aAAA9S,OAAA,EACA4N,QAKAxE,iBAAA,GAAA2F,SAAA,IAAAoE,GAAA,SAAAhT,EAAA1B,EAAAD,GASA,GAAA4U,KAEA3U,GAAAD,QAAA4U,CAEA,IAAA9S,GAAAH,EAAA,sBACAmN,EAAAnN,EAAA,SACAM,EAAAN,EAAA,sBACAkT,EAAAlT,EAAA,qBACAE,EAAAF,EAAA,yBAEA,WAWAiT,EAAAE,IAAA,SAAAvJ,EAAAwJ,EAAAC,EAAAC,GACAA,EAAAA,GAAA,MASA,KAAA,GAPAC,GAAApT,EAAAkB,MAAA+R,EAAAC,GACAG,EAAArT,EAAAoH,UAAApH,EAAAkH,IAAA+L,EAAAC,IACAI,EAAA,IAAAJ,EAAA5R,EAAA2R,EAAA3R,GACAiS,EAAA,IAAAL,EAAA3R,EAAA0R,EAAA1R,GACAyR,EAAAD,EAAAS,UAAAF,EAAAC,EAAAF,EAAAF,GAAAjS,MAAAkS,IACAlG,KAEA7N,EAAA,EAAAA,EAAAoK,EAAA/J,OAAAL,IAAA,CACA,GAAAmO,GAAA/D,EAAApK,EAEA,IAAAc,EAAAwN,SAAAH,EAAAvJ,OAAA+O,EAAA/O,QACA,IAAA,GAAA2J,GAAA,IAAAJ,EAAAxM,MAAAtB,OAAA,EAAA,EAAAkO,EAAAJ,EAAAxM,MAAAtB,OAAAkO,IAAA,CACA,GAAA5H,GAAAwH,EAAAxM,MAAA4M,EAEA,IAAAzN,EAAAwN,SAAA3H,EAAA/B,OAAA+O,EAAA/O,QAAA,CACA,GAAAmK,GAAApB,EAAAqB,SAAArI,EAAAgN,EACA,IAAA5E,EAAAE,SAAA,CACAF,EAAA1K,KAAA0K,EAAAZ,MAAAY,EAAAX,MAAAD,EACAN,EAAAxG,KAAA0H,EACA,UAOA,MAAAlB,IAWA4F,EAAAjD,OAAA,SAAApG,EAAAxF,EAAAwP,GAGA,IAAA,GAFAC,MAEArU,EAAA,EAAAA,EAAAoK,EAAA/J,OAAAL,IAAA,CACA,GAAAqE,GAAA+F,EAAApK,GACAsO,EAAAxN,EAAAwN,SAAAjK,EAAAO,OAAAA,IACA0J,IAAA8F,IAAA9F,GAAA8F,IACAC,EAAAhN,KAAAhD,GAGA,MAAAgQ,IAUAZ,EAAApL,MAAA,SAAA+B,EAAA/B,GAGA,IAAA,GAFAgM,MAEArU,EAAA,EAAAA,EAAAoK,EAAA/J,OAAAL,IAAA,CACA,GAAAqE,GAAA+F,EAAApK,EAEA,IAAAc,EAAAwT,SAAAjQ,EAAAO,OAAAyD,GACA,IAAA,GAAAkG,GAAA,IAAAlK,EAAA1C,MAAAtB,OAAA,EAAA,EAAAkO,EAAAlK,EAAA1C,MAAAtB,OAAAkO,IAAA,CACA,GAAA5H,GAAAtC,EAAA1C,MAAA4M,EAEA,IAAAzN,EAAAwT,SAAA3N,EAAA/B,OAAAyD,IACA3H,EAAA4T,SAAA3N,EAAA7E,SAAAuG,GAAA,CACAgM,EAAAhN,KAAAhD,EACA,SAMA,MAAAgQ,SAKAE,oBAAA,GAAA3K,qBAAA,GAAAC,qBAAA,GAAAC,uBAAA,GAAAuF,QAAA,KAAAmF,IAAA,SAAAhU,EAAA1B,EAAAD,GAOA,GAAA4V,KAEA3V,GAAAD,QAAA4V,CAEA,IAAA/T,GAAAF,EAAA,wBACAG,EAAAH,EAAA,sBACAK,EAAAL,EAAA,kBACAM,EAAAN,EAAA,uBAEA,WAEAiU,EAAAC,eAAA,EACAD,EAAAE,sBAAA,EACAF,EAAAG,gBAAA,GACAH,EAAAI,iBAAA,GACAJ,EAAAK,0BAAA,EAOAL,EAAAM,iBAAA,SAAA9G,GACA,GAAAjO,GACA6O,EACAmG,CAGA,KAAAhV,EAAA,EAAAA,EAAAiO,EAAA5N,OAAAL,IACA6O,EAAAZ,EAAAjO,GAEA6O,EAAAC,WAGAkG,EAAAnG,EAAAsD,eAAA9R,OACAwO,EAAAE,UAAAiD,QAAAzP,eAAAyS,EACAnG,EAAAE,UAAAkD,QAAA1P,eAAAyS,IAUAP,EAAAQ,cAAA,SAAAhH,EAAAtK,GACA,GAAA3D,GACA6O,EACAE,EACAZ,EACAC,EACA8G,EACAC,EACAC,EACA/S,EAEAgT,EAAA1U,EAAA2U,MAAA,GACAC,EAAA5U,EAAA2U,MAAA,GACAE,EAAA7U,EAAA2U,MAAA,GACAG,EAAA9U,EAAA2U,MAAA,EAGA,KAAAtV,EAAA,EAAAA,EAAAiO,EAAA5N,OAAAL,IACA6O,EAAAZ,EAAAjO,GAEA6O,EAAAC,WAAAD,EAAAjM,WAGAmM,EAAAF,EAAAE,UACAZ,EAAAY,EAAAiD,QACA5D,EAAAW,EAAAkD,QACAiD,EAAAnG,EAAAmG,OAGAC,EAAAxU,EAAAkH,IAAAlH,EAAAwH,IAAAiG,EAAA/L,gBAAA+L,EAAApM,SAAAqT,GACA1U,EAAAwH,IAAAgG,EAAA9L,gBACA1B,EAAAkH,IAAAuG,EAAApM,SAAA+M,EAAA2G,YAAAH,GAAAC,GAAAC,GAEA5G,EAAAuD,WAAAzR,EAAAgV,IAAAT,EAAAC,GAGA,KAAAnV,EAAA,EAAAA,EAAAiO,EAAA5N,OAAAL,IACA6O,EAAAZ,EAAAjO,GAEA6O,EAAAC,WAAAD,EAAAjM,WAGAmM,EAAAF,EAAAE,UACAZ,EAAAY,EAAAiD,QACA5D,EAAAW,EAAAkD,QACAiD,EAAAnG,EAAAmG,OACA7S,GAAAwM,EAAAuD,WAAAvD,EAAAnL,MAAAC,GAEAwK,EAAAtL,UAAAuL,EAAAvL,YACAR,GAAA,GAEA8L,EAAAtL,UAAAsL,EAAArL,aACAsS,EAAAX,EAAAG,gBAAAzG,EAAA5L,cACA4L,EAAA9L,gBAAAJ,GAAAiT,EAAAjT,EAAAI,EAAA+S,EACAjH,EAAA9L,gBAAAH,GAAAgT,EAAAhT,EAAAG,EAAA+S,GAGAhH,EAAAvL,UAAAuL,EAAAtL,aACAsS,EAAAX,EAAAG,gBAAAxG,EAAA7L,cACA6L,EAAA/L,gBAAAJ,GAAAiT,EAAAjT,EAAAI,EAAA+S,EACAhH,EAAA/L,gBAAAH,GAAAgT,EAAAhT,EAAAG,EAAA+S,KAUAX,EAAAmB,kBAAA,SAAAxL,GACA,IAAA,GAAApK,GAAA,EAAAA,EAAAoK,EAAA/J,OAAAL,IAAA,CACA,GAAAqE,GAAA+F,EAAApK,EAKA,IAFAqE,EAAA9B,cAAA,EAEA,IAAA8B,EAAAhC,gBAAAJ,GAAA,IAAAoC,EAAAhC,gBAAAH,EAAA,CAEA,IAAA,GAAAqM,GAAA,EAAAA,EAAAlK,EAAA1C,MAAAtB,OAAAkO,IAAA,CACA,GAAA5H,GAAAtC,EAAA1C,MAAA4M,EACA7N,GAAAwG,UAAAP,EAAA7E,SAAAuC,EAAAhC,iBACAvB,EAAAqE,OAAAwB,EAAA/B,OAAA+B,EAAA7E,SAAAuC,EAAA3B,UACAiE,EAAA3E,SAAAC,GAAAoC,EAAAhC,gBAAAJ,EACA0E,EAAA3E,SAAAE,GAAAmC,EAAAhC,gBAAAH,EAIAmC,EAAAQ,aAAA5C,GAAAoC,EAAAhC,gBAAAJ,EACAoC,EAAAQ,aAAA3C,GAAAmC,EAAAhC,gBAAAH,EAEAvB,EAAAgV,IAAAtR,EAAAhC,gBAAAgC,EAAA3B,UAAA,GAEA2B,EAAAhC,gBAAAJ,EAAA,EACAoC,EAAAhC,gBAAAH,EAAA,IAGAmC,EAAAhC,gBAAAJ,GAAAwS,EAAAI,iBACAxQ,EAAAhC,gBAAAH,GAAAuS,EAAAI,qBAWAJ,EAAAoB,iBAAA,SAAA5H,GACA,GAAAjO,GACAuO,EACAM,EACAqD,EACAnD,EACAZ,EACAC,EACA8G,EACAY,EACApD,EACAqD,EACAzI,EACAC,EACAlE,EACA2M,EAAArV,EAAA2U,MAAA,GACAD,EAAA1U,EAAA2U,MAAA,EAEA,KAAAtV,EAAA,EAAAA,EAAAiO,EAAA5N,OAAAL,IAGA,GAFA6O,EAAAZ,EAAAjO,GAEA6O,EAAAC,WAAAD,EAAAjM,SAWA,IARAsP,EAAArD,EAAAsD,eACApD,EAAAF,EAAAE,UACAZ,EAAAY,EAAAiD,QACA5D,EAAAW,EAAAkD,QACAiD,EAAAnG,EAAAmG,OACAY,EAAA/G,EAAA+G,QAGAvH,EAAA,EAAAA,EAAA2D,EAAA7R,OAAAkO,IACAmE,EAAAR,EAAA3D,GACAwH,EAAArD,EAAArF,OACAC,EAAAoF,EAAApF,cACAC,EAAAmF,EAAAnF,eAEA,IAAAD,GAAA,IAAAC,IAEAyI,EAAA/T,EAAAiT,EAAAjT,EAAAqL,EAAAwI,EAAA7T,EAAAsL,EACAyI,EAAA9T,EAAAgT,EAAAhT,EAAAoL,EAAAwI,EAAA5T,EAAAqL,EAGAY,EAAAtL,UAAAsL,EAAArL,aACAuG,EAAA1I,EAAAkH,IAAAkO,EAAA5H,EAAAnM,SAAAqT,GACAlH,EAAAtJ,aAAA5C,GAAA+T,EAAA/T,EAAAkM,EAAAtH,YACAsH,EAAAtJ,aAAA3C,GAAA8T,EAAA9T,EAAAiM,EAAAtH,YACAsH,EAAApJ,WAAApE,EAAAsV,MAAA5M,EAAA2M,GAAA7H,EAAArH,gBAGAsH,EAAAvL,UAAAuL,EAAAtL,aACAuG,EAAA1I,EAAAkH,IAAAkO,EAAA3H,EAAApM,SAAAqT,GACAjH,EAAAvJ,aAAA5C,GAAA+T,EAAA/T,EAAAmM,EAAAvH,YACAuH,EAAAvJ,aAAA3C,GAAA8T,EAAA9T,EAAAkM,EAAAvH,YACAuH,EAAArJ,WAAApE,EAAAsV,MAAA5M,EAAA2M,GAAA5H,EAAAtH,kBAaA2N,EAAAyB,cAAA,SAAAjI,EAAAtK,GASA,IAAA,GARAwS,GAAAxS,EAAAA,EACAqS,EAAArV,EAAA2U,MAAA,GACAD,EAAA1U,EAAA2U,MAAA,GACAC,EAAA5U,EAAA2U,MAAA,GACAE,EAAA7U,EAAA2U,MAAA,GACAG,EAAA9U,EAAA2U,MAAA,GACAc,EAAAzV,EAAA2U,MAAA,GAEAtV,EAAA,EAAAA,EAAAiO,EAAA5N,OAAAL,IAAA,CACA,GAAA6O,GAAAZ,EAAAjO,EAEA,IAAA6O,EAAAC,WAAAD,EAAAjM,SAAA,CAGA,GAAAmM,GAAAF,EAAAE,UACAZ,EAAAY,EAAAiD,QACA5D,EAAAW,EAAAkD,QACAiD,EAAAnG,EAAAmG,OACAY,EAAA/G,EAAA+G,QACA5D,EAAArD,EAAAsD,eACAiD,EAAA,EAAAlD,EAAA7R,MAGA8N,GAAAzL,SAAAT,EAAAkM,EAAAnM,SAAAC,EAAAkM,EAAAtJ,aAAA5C,EACAkM,EAAAzL,SAAAR,EAAAiM,EAAAnM,SAAAE,EAAAiM,EAAAtJ,aAAA3C,EACAkM,EAAA1L,SAAAT,EAAAmM,EAAApM,SAAAC,EAAAmM,EAAAvJ,aAAA5C,EACAmM,EAAA1L,SAAAR,EAAAkM,EAAApM,SAAAE,EAAAkM,EAAAvJ,aAAA3C,EACAiM,EAAAxL,gBAAAwL,EAAAtM,MAAAsM,EAAApJ,UACAqJ,EAAAzL,gBAAAyL,EAAAvM,MAAAuM,EAAArJ,SAGA,KAAA,GAAAwJ,GAAA,EAAAA,EAAA2D,EAAA7R,OAAAkO,IAAA,CACA,GAAAmE,GAAAR,EAAA3D,GACAwH,EAAArD,EAAArF,OACAgJ,EAAA1V,EAAAkH,IAAAkO,EAAA5H,EAAAnM,SAAAqT,GACAiB,EAAA3V,EAAAkH,IAAAkO,EAAA3H,EAAApM,SAAAuT,GACAgB,EAAA5V,EAAAwH,IAAAgG,EAAAzL,SAAA/B,EAAA4I,KAAA5I,EAAA6V,KAAAH,GAAAlI,EAAAxL,iBAAA6S,GACAiB,EAAA9V,EAAAwH,IAAAiG,EAAA1L,SAAA/B,EAAA4I,KAAA5I,EAAA6V,KAAAF,GAAAlI,EAAAzL,iBAAA8S,GACAiB,EAAA/V,EAAAkH,IAAA0O,EAAAE,EAAAL,GACAO,EAAAhW,EAAAgV,IAAAT,EAAAwB,GAEAE,EAAAjW,EAAAgV,IAAAG,EAAAY,GACAG,EAAA7O,KAAAC,IAAA2O,GACAE,EAAAjW,EAAAkW,KAAAH,GAGAtJ,GAAA,EAAAuB,EAAA3L,aAAAyT,EACAK,EAAAnW,EAAAoW,MAAApI,EAAAuD,WAAAuE,EAAA,EAAA,GAAAlC,EAAAK,0BAGAvH,EAAAqJ,EACAM,EAAAnQ,EAAAA,CAEA8P,GAAAhI,EAAA1L,SAAA0L,EAAAzL,eAAA4T,EAAAb,IACAe,EAAAL,EACAtJ,EAAA1M,EAAAoW,MACApI,EAAA1L,SAAA2T,EAAAX,GACAe,EAAAA,GAKA,IAAAC,GAAAxW,EAAAsV,MAAAI,EAAAnB,GACAkC,EAAAzW,EAAAsV,MAAAK,EAAApB,GACAmC,EAAAjC,GAAAjH,EAAAtH,YAAAuH,EAAAvH,YAAAsH,EAAArH,eAAAqQ,EAAAA,EAAA/I,EAAAtH,eAAAsQ,EAAAA,EAMA,IAJA9J,GAAA+J,EACA9J,GAAA8J,EAGAV,EAAA,GAAAA,EAAAA,EAAAlC,EAAAC,eAAAyB,EAEAzD,EAAApF,cAAA,MACA,CAGA,GAAAgK,GAAA5E,EAAApF,aACAoF,GAAApF,cAAAtF,KAAArC,IAAA+M,EAAApF,cAAAA,EAAA,GACAA,EAAAoF,EAAApF,cAAAgK,EAIA,GAAAV,EAAAA,EAAAnC,EAAAE,sBAAAwB,EAEAzD,EAAAnF,eAAA,MACA,CAGA,GAAAgK,GAAA7E,EAAAnF,cACAmF,GAAAnF,eAAA1M,EAAAoW,MAAAvE,EAAAnF,eAAAA,GAAA2J,EAAAA,GACA3J,EAAAmF,EAAAnF,eAAAgK,EAIAvB,EAAA/T,EAAAiT,EAAAjT,EAAAqL,EAAAwI,EAAA7T,EAAAsL,EACAyI,EAAA9T,EAAAgT,EAAAhT,EAAAoL,EAAAwI,EAAA5T,EAAAqL,EAGAY,EAAAtL,UAAAsL,EAAArL,aACAqL,EAAAtJ,aAAA5C,GAAA+T,EAAA/T,EAAAkM,EAAAtH,YACAsH,EAAAtJ,aAAA3C,GAAA8T,EAAA9T,EAAAiM,EAAAtH,YACAsH,EAAApJ,WAAApE,EAAAsV,MAAAI,EAAAL,GAAA7H,EAAArH,gBAGAsH,EAAAvL,UAAAuL,EAAAtL,aACAsL,EAAAvJ,aAAA5C,GAAA+T,EAAA/T,EAAAmM,EAAAvH,YACAuH,EAAAvJ,aAAA3C,GAAA8T,EAAA9T,EAAAkM,EAAAvH,YACAuH,EAAArJ,WAAApE,EAAAsV,MAAAK,EAAAN,GAAA5H,EAAAtH,yBAQA2C,iBAAA,GAAAG,qBAAA,GAAAC,qBAAA,GAAAC,uBAAA,KAAA0N,IAAA,SAAAhX,EAAA1B,EAAAD,GASA,GAAA8O,KAEA7O,GAAAD,QAAA8O,CAEA,IAAAjN,GAAAF,EAAA,wBACAG,EAAAH,EAAA,uBAEA,WAUAmN,EAAAqB,SAAA,SAAAb,EAAAC,EAAAO,GACA,GAAA8I,GACAC,EACAC,EACA5I,EACA6I,GAAA,CAEA,IAAAjJ,EAAA,CAEA,GAAAqD,GAAA7D,EAAAnJ,OACAiN,EAAA7D,EAAApJ,OACAjC,EAAAiP,EAAAxP,MAAAwP,EAAAxP,MAAAwP,EAAAvP,aAAAuP,EAAAvP,aACAwP,EAAAzP,MAAAyP,EAAAzP,MAAAyP,EAAAxP,aAAAwP,EAAAxP,YAIAmV,GAAAjJ,GAAAA,EAAAM,UAAAlM,EAAA,GAGAgM,EAAAJ,MAEAI,IAAAE,UAAA,EAAAd,MAAAA,EAAAC,MAAAA,EAGA,IAAAO,GAAAiJ,EAAA,CAGA,GAAAC,GAAA9I,EAAA+I,SACAC,EAAAF,IAAA1J,EAAAC,EAAAD,EACAjJ,GAAA2S,EAAA3S,KAAAyJ,EAAAqJ,YAKA,IAHAL,EAAAM,EAAAJ,EAAA/V,SAAAiW,EAAAjW,SAAAoD,GACA6J,EAAAmJ,QAAA,EAEAP,EAAAQ,SAAA,EAEA,MADApJ,GAAAE,UAAA,EACAF,MAEA,CAKA,GAFA0I,EAAAQ,EAAA9J,EAAArM,SAAAsM,EAAAtM,SAAAqM,EAAAjJ,MAEAuS,EAAAU,SAAA,EAEA,MADApJ,GAAAE,UAAA,EACAF,CAKA,IAFA2I,EAAAO,EAAA7J,EAAAtM,SAAAqM,EAAArM,SAAAsM,EAAAlJ,MAEAwS,EAAAS,SAAA,EAEA,MADApJ,GAAAE,UAAA,EACAF,CAGA0I,GAAAU,QAAAT,EAAAS,SACAR,EAAAF,EACA1I,EAAA+I,SAAA3J,IAEAwJ,EAAAD,EACA3I,EAAA+I,SAAA1J,GAIAW,EAAAiJ,WAAAL,EAAAK,WAGAjJ,EAAAZ,MAAAA,EAAA5M,GAAA6M,EAAA7M,GAAA4M,EAAAC,EACAW,EAAAX,MAAAD,EAAA5M,GAAA6M,EAAA7M,GAAA6M,EAAAD,EACAY,EAAAE,UAAA,EACAF,EAAA4D,MAAAgF,EAAAQ,QACApJ,EAAAiD,QAAAjD,EAAAZ,MAAAnJ,OACA+J,EAAAkD,QAAAlD,EAAAX,MAAApJ,OAEAmJ,EAAAY,EAAAZ,MACAC,EAAAW,EAAAX,MAGAzN,EAAAgV,IAAAgC,EAAAS,KAAAzX,EAAAkH,IAAAuG,EAAApM,SAAAmM,EAAAnM,WAAA,EACA+M,EAAAmG,QACAjT,EAAA0V,EAAAS,KAAAnW,EACAC,EAAAyV,EAAAS,KAAAlW,GAGA6M,EAAAmG,QACAjT,GAAA0V,EAAAS,KAAAnW,EACAC,GAAAyV,EAAAS,KAAAlW,GAIA6M,EAAA+G,QAAAnV,EAAA6V,KAAAzH,EAAAmG,QAEAnG,EAAA2G,YAAA3G,EAAA2G,gBACA3G,EAAA2G,YAAAzT,EAAA8M,EAAAmG,OAAAjT,EAAA8M,EAAA4D,MACA5D,EAAA2G,YAAAxT,EAAA6M,EAAAmG,OAAAhT,EAAA6M,EAAA4D,KAGA,IAAA0F,GAAAC,EAAAnK,EAAAC,EAAAW,EAAAmG,QACA3C,IAUA,IAPA7R,EAAA4T,SAAAnG,EAAArM,SAAAuW,EAAA,KACA9F,EAAAlL,KAAAgR,EAAA,IAEA3X,EAAA4T,SAAAnG,EAAArM,SAAAuW,EAAA,KACA9F,EAAAlL,KAAAgR,EAAA,IAGA9F,EAAAlS,OAAA,EAAA,CACA,GAAAkY,GAAAD,EAAAlK,EAAAD,EAAAxN,EAAA6X,IAAAzJ,EAAAmG,QAEAxU,GAAA4T,SAAAlG,EAAAtM,SAAAyW,EAAA,KACAhG,EAAAlL,KAAAkR,EAAA,IAEAhG,EAAAlS,OAAA,GAAAK,EAAA4T,SAAAlG,EAAAtM,SAAAyW,EAAA,KACAhG,EAAAlL,KAAAkR,EAAA,IASA,MALAhG,GAAAlS,OAAA,IACAkS,GAAA8F,EAAA,KAEAtJ,EAAAwD,SAAAA,EAEAxD,EAYA,IAAAkJ,GAAA,SAAAM,EAAAF,EAAAnT,GAOA,IAAA,GAHAiT,GACAC,EAJAK,EAAA9X,EAAA2U,MAAA,GACAoD,EAAA/X,EAAA2U,MAAA,GACAjB,GAAA8D,QAAAQ,OAAAC,WAIA5Y,EAAA,EAAAA,EAAAkF,EAAA7E,OAAAL,IAAA,CAQA,GAPAoY,EAAAlT,EAAAlF,GAEA6Y,EAAAJ,EAAAF,EAAAH,GACAS,EAAAH,EAAAL,EAAAD,IAEAD,EAAAnQ,KAAArC,IAAA8S,EAAA7S,IAAA8S,EAAA/S,IAAA+S,EAAA9S,IAAA6S,EAAA9S,OAEA,EAEA,MADA0O,GAAA8D,QAAAA,EACA9D,CAGA8D,GAAA9D,EAAA8D,UACA9D,EAAA8D,QAAAA,EACA9D,EAAA+D,KAAAA,EACA/D,EAAA2D,WAAAhY,GAIA,MAAAqU,IAWAwE,EAAA,SAAAC,EAAAhX,EAAAsW,GAIA,IAAA,GAHAzS,GAAAhF,EAAAgV,IAAA7T,EAAA,GAAAsW,GACAxS,EAAAD,EAEA3F,EAAA,EAAAA,EAAA8B,EAAAzB,OAAAL,GAAA,EAAA,CACA,GAAA2V,GAAAhV,EAAAgV,IAAA7T,EAAA9B,GAAAoY,EAEAzC,GAAA/P,EACAA,EAAA+P,EACAA,EAAAhQ,IACAA,EAAAgQ,GAIAmD,EAAAnT,IAAAA,EACAmT,EAAAlT,IAAAA,GAYA0S,EAAA,SAAAnK,EAAAC,EAAA8G,GAWA,IAAA,GANA6D,GACA1L,EACA2L,EACAC,EAPAC,EAAAP,OAAAC,UACAO,EAAAxY,EAAA2U,MAAA,GACAxT,EAAAsM,EAAAtM,SACAsX,EAAAjL,EAAAnM,SAOAhC,EAAA,EAAAA,EAAA8B,EAAAzB,OAAAL,IACAqN,EAAAvL,EAAA9B,GACAmZ,EAAAlX,EAAAoL,EAAApL,EAAAmX,EAAAnX,EACAkX,EAAAjX,EAAAmL,EAAAnL,EAAAkX,EAAAlX,GACA6W,GAAApY,EAAAgV,IAAAT,EAAAiE,IAEAD,IACAA,EAAAH,EACAC,EAAA3L,EAqBA,OAfAA,GAAAvL,EADAkX,EAAAxL,MAAA,GAAA,EAAAwL,EAAAxL,MAAA,EAAA1L,EAAAzB,OAAA,GAEA8Y,EAAAlX,EAAAoL,EAAApL,EAAAmX,EAAAnX,EACAkX,EAAAjX,EAAAmL,EAAAnL,EAAAkX,EAAAlX,EACAgX,GAAAvY,EAAAgV,IAAAT,EAAAiE,GACAF,EAAA5L,EAGAA,EAAAvL,GADAkX,EAAAxL,MAAA,GAAA1L,EAAAzB,QAEA8Y,EAAAlX,EAAAoL,EAAApL,EAAAmX,EAAAnX,EACAkX,EAAAjX,EAAAmL,EAAAnL,EAAAkX,EAAAlX,EACA6W,GAAApY,EAAAgV,IAAAT,EAAAiE,GACAJ,EAAAG,IACAD,EAAA5L,IAGA2L,EAAAC,SAKApP,qBAAA,GAAAC,uBAAA,KAAAuP,IAAA,SAAA7Y,EAAA1B,EAAAD,GAWA,GAAAya,KAEAxa,GAAAD,QAAAya,CAEA,IAAA5Y,GAAAF,EAAA,wBACAG,EAAAH,EAAA,sBACAI,EAAAJ,EAAA,oBACAM,EAAAN,EAAA,sBACAO,EAAAP,EAAA,oBACAK,EAAAL,EAAA,mBAEA,WAEA8Y,EAAAC,SAAA,GACAD,EAAAE,cAAA,EACAF,EAAAG,WAAA,KAYAH,EAAAlY,OAAA,SAAAC,GACA,GAAA+J,GAAA/J,CAGA+J,GAAA+C,QAAA/C,EAAAsO,SACAtO,EAAAsO,QAAAzX,EAAA,EAAAC,EAAA,IACAkJ,EAAAgD,QAAAhD,EAAAuO,SACAvO,EAAAuO,QAAA1X,EAAA,EAAAC,EAAA,GAGA,IAAA0X,GAAAxO,EAAA+C,MAAAxN,EAAAwH,IAAAiD,EAAA+C,MAAAnM,SAAAoJ,EAAAsO,QAAAtO,EAAAsO,OACAG,EAAAzO,EAAAgD,MAAAzN,EAAAwH,IAAAiD,EAAAgD,MAAApM,SAAAoJ,EAAAuO,QAAAvO,EAAAuO,OACAtZ,EAAAM,EAAAoH,UAAApH,EAAAkH,IAAA+R,EAAAC,GAEAzO,GAAA/K,WAAA,KAAA+K,EAAA/K,OAAA+K,EAAA/K,OAAAA,EAGA+K,EAAA7J,GAAA6J,EAAA7J,IAAAV,EAAAW,SACA4J,EAAA1J,MAAA0J,EAAA1J,OAAA,aACA0J,EAAA3J,KAAA,aACA2J,EAAA0O,UAAA1O,EAAA0O,YAAA1O,EAAA/K,OAAA,EAAA,EAAA,IACA+K,EAAA2O,QAAA3O,EAAA2O,SAAA,EACA3O,EAAA4O,iBAAA5O,EAAA4O,kBAAA,EACA5O,EAAA6O,OAAA7O,EAAA+C,MAAA/C,EAAA+C,MAAAtM,MAAAuJ,EAAA6O,OACA7O,EAAA8O,OAAA9O,EAAAgD,MAAAhD,EAAAgD,MAAAvM,MAAAuJ,EAAA8O,OACA9O,EAAAxJ,SAGA,IAAAgC,IACAC,SAAA,EACAO,UAAA,EACAsB,YAAA,UACAjE,KAAA,OACA0Y,SAAA,EAYA,OATA,KAAA/O,EAAA/K,QAAA+K,EAAA0O,UAAA,IACAlW,EAAAnC,KAAA,MACAmC,EAAAuW,SAAA,GACA/O,EAAA0O,UAAA,KACAlW,EAAAnC,KAAA,UAGA2J,EAAAxH,OAAA/C,EAAAyD,OAAAV,EAAAwH,EAAAxH,QAEAwH,GASAkO,EAAAc,YAAA,SAAAhQ,GACA,IAAA,GAAApK,GAAA,EAAAA,EAAAoK,EAAA/J,OAAAL,GAAA,EAAA,CACA,GAAAqE,GAAA+F,EAAApK,GACAgW,EAAA3R,EAAA/B,iBAEA+B,GAAAxB,UAAA,IAAAmT,EAAA/T,GAAA,IAAA+T,EAAA9T,GAAA,IAAA8T,EAAAnU,QAIAwC,EAAArC,SAAAC,GAAA+T,EAAA/T,EACAoC,EAAArC,SAAAE,GAAA8T,EAAA9T,EACAmC,EAAAxC,OAAAmU,EAAAnU,SAWAyX,EAAAe,SAAA,SAAAhQ,EAAA1G,GAEA,IAAA,GAAA3D,GAAA,EAAAA,EAAAqK,EAAAhK,OAAAL,GAAA,EAAA,CACA,GAAAoL,GAAAf,EAAArK,GACAsa,GAAAlP,EAAA+C,OAAA/C,EAAA+C,OAAA/C,EAAA+C,MAAAtL,SACA0X,GAAAnP,EAAAgD,OAAAhD,EAAAgD,OAAAhD,EAAAgD,MAAAvL,UAEAyX,GAAAC,IACAjB,EAAAkB,MAAAnQ,EAAArK,GAAA2D,GAKA,IAAA3D,EAAA,EAAAA,EAAAqK,EAAAhK,OAAAL,GAAA,EACAoL,EAAAf,EAAArK,GACAsa,GAAAlP,EAAA+C,OAAA/C,EAAA+C,OAAA/C,EAAA+C,MAAAtL,SACA0X,GAAAnP,EAAAgD,OAAAhD,EAAAgD,OAAAhD,EAAAgD,MAAAvL,SAEAyX,GAAAC,GACAjB,EAAAkB,MAAAnQ,EAAArK,GAAA2D,IAYA2V,EAAAkB,MAAA,SAAApP,EAAAzH,GACA,GAAAwK,GAAA/C,EAAA+C,MACAC,EAAAhD,EAAAgD,MACAsL,EAAAtO,EAAAsO,OACAC,EAAAvO,EAAAuO,MAEA,IAAAxL,GAAAC,EAAA,CAIAD,IAAAA,EAAAtL,WACAlC,EAAAsE,OAAAyU,EAAAvL,EAAAtM,MAAAuJ,EAAA6O,OAAAP,GACAtO,EAAA6O,OAAA9L,EAAAtM,OAIAuM,IAAAA,EAAAvL,WACAlC,EAAAsE,OAAA0U,EAAAvL,EAAAvM,MAAAuJ,EAAA8O,OAAAP,GACAvO,EAAA8O,OAAA9L,EAAAvM,MAGA,IAAA4Y,GAAAf,EACAgB,EAAAf,CAKA,IAHAxL,IAAAsM,EAAA9Z,EAAAwH,IAAAgG,EAAAnM,SAAA0X,IACAtL,IAAAsM,EAAA/Z,EAAAwH,IAAAiG,EAAApM,SAAA2X,IAEAc,GAAAC,EAAA,CAGA,GAAA9S,GAAAjH,EAAAkH,IAAA4S,EAAAC,GACAC,EAAAha,EAAAoH,UAAAH,EAGA+S,GAAArB,EAAAG,aACAkB,EAAArB,EAAAG,WAIA,IAMArX,GACAiV,EACAnC,EACAyB,EACAD,EAVAkE,GAAAD,EAAAvP,EAAA/K,QAAAsa,EACAb,EAAA1O,EAAA0O,UAAA,EAAA1O,EAAA0O,UAAAnW,EAAAyH,EAAA0O,UACA3X,EAAAxB,EAAA4I,KAAA3B,EAAAgT,EAAAd,GACAe,GAAA1M,EAAAA,EAAAtH,YAAA,IAAAuH,EAAAA,EAAAvH,YAAA,GACAiU,GAAA3M,EAAAA,EAAArH,eAAA,IAAAsH,EAAAA,EAAAtH,eAAA,GACAiU,EAAAF,EAAAC,CAOA,IAAA1P,EAAA2O,QAAA,CACA,GAAAiB,GAAAra,EAAAS,QACA8T,GAAAvU,EAAA6I,IAAA5B,EAAA+S,GAEAjE,EAAA/V,EAAAkH,IACAuG,GAAAzN,EAAAkH,IAAAuG,EAAApM,SAAAoM,EAAAvJ,eAAAmW,EACA7M,GAAAxN,EAAAkH,IAAAsG,EAAAnM,SAAAmM,EAAAtJ,eAAAmW,GAGArE,EAAAhW,EAAAgV,IAAAT,EAAAwB,GAGAvI,IAAAA,EAAAtL,WACAwU,EAAAlJ,EAAAtH,YAAAgU,EAGA1M,EAAA7L,kBAAAL,GAAAE,EAAAF,EAAAoV,EACAlJ,EAAA7L,kBAAAJ,GAAAC,EAAAD,EAAAmV,EAGAlJ,EAAAnM,SAAAC,GAAAE,EAAAF,EAAAoV,EACAlJ,EAAAnM,SAAAE,GAAAC,EAAAD,EAAAmV,EAGAjM,EAAA2O,UACA5L,EAAAtJ,aAAA5C,GAAAmJ,EAAA2O,QAAA7E,EAAAjT,EAAA0U,EAAAU,EACAlJ,EAAAtJ,aAAA3C,GAAAkJ,EAAA2O,QAAA7E,EAAAhT,EAAAyU,EAAAU,GAIAjV,EAAAzB,EAAAsV,MAAAyD,EAAAvX,GAAA4Y,EAAAzB,EAAAE,cAAArL,EAAArH,gBAAA,EAAAsE,EAAA4O,kBACA7L,EAAA7L,kBAAAT,OAAAO,EACA+L,EAAAtM,OAAAO,GAGAgM,IAAAA,EAAAvL,WACAwU,EAAAjJ,EAAAvH,YAAAgU,EAGAzM,EAAA9L,kBAAAL,GAAAE,EAAAF,EAAAoV,EACAjJ,EAAA9L,kBAAAJ,GAAAC,EAAAD,EAAAmV,EAGAjJ,EAAApM,SAAAC,GAAAE,EAAAF,EAAAoV,EACAjJ,EAAApM,SAAAE,GAAAC,EAAAD,EAAAmV,EAGAjM,EAAA2O,UACA3L,EAAAvJ,aAAA5C,GAAAmJ,EAAA2O,QAAA7E,EAAAjT,EAAA0U,EAAAU,EACAjJ,EAAAvJ,aAAA3C,GAAAkJ,EAAA2O,QAAA7E,EAAAhT,EAAAyU,EAAAU,GAIAjV,EAAAzB,EAAAsV,MAAA0D,EAAAxX,GAAA4Y,EAAAzB,EAAAE,cAAApL,EAAAtH,gBAAA,EAAAsE,EAAA4O,kBACA5L,EAAA9L,kBAAAT,OAAAO,EACAgM,EAAAvM,OAAAO,MAWAkX,EAAA2B,aAAA,SAAA7Q,GACA,IAAA,GAAApK,GAAA,EAAAA,EAAAoK,EAAA/J,OAAAL,IAAA,CACA,GAAAqE,GAAA+F,EAAApK,GACAgW,EAAA3R,EAAA/B,iBAEA,MAAA+B,EAAAxB,UAAA,IAAAmT,EAAA/T,GAAA,IAAA+T,EAAA9T,GAAA,IAAA8T,EAAAnU,OAAA,CAIAjB,EAAA+D,IAAAN,GAAA,EAGA,KAAA,GAAAkK,GAAA,EAAAA,EAAAlK,EAAA1C,MAAAtB,OAAAkO,IAAA,CACA,GAAA5H,GAAAtC,EAAA1C,MAAA4M,EAEA7N,GAAAwG,UAAAP,EAAA7E,SAAAkU,GAEAzH,EAAA,IACA5H,EAAA3E,SAAAC,GAAA+T,EAAA/T,EACA0E,EAAA3E,SAAAE,GAAA8T,EAAA9T,GAGA,IAAA8T,EAAAnU,QACAnB,EAAAuE,OAAA0B,EAAA7E,SAAAkU,EAAAnU,MAAAwC,EAAArC,UACAjB,EAAAkE,OAAA0B,EAAAzB,KAAA8Q,EAAAnU,OACA0M,EAAA,GACA5N,EAAAmH,YAAAnB,EAAA3E,SAAAgU,EAAAnU,MAAAwC,EAAArC,SAAA2E,EAAA3E,WAIAlB,EAAAqE,OAAAwB,EAAA/B,OAAA+B,EAAA7E,SAAAuC,EAAA3B,UAIAsT,EAAAnU,OAAAyX,EAAAC,SACAvD,EAAA/T,GAAAqX,EAAAC,SACAvD,EAAA9T,GAAAoX,EAAAC,iBA4JA9P,iBAAA,GAAAC,mBAAA,GAAAC,mBAAA,GAAAC,qBAAA,GAAAC,qBAAA,GAAAC,uBAAA,KAAAoR,IAAA,SAAA1a,EAAA1B,EAAAD,GAUA,GAAAsc,KAEArc,GAAAD,QAAAsc,CAEA,IAAAza,GAAAF,EAAA,wBACAI,EAAAJ,EAAA,oBACA4a,EAAA5a,EAAA,iBACA0J,EAAA1J,EAAA,kBACAkN,EAAAlN,EAAA,yBACA8Y,EAAA9Y,EAAA,gBACAyJ,EAAAzJ,EAAA,qBACAK,EAAAL,EAAA,kBACAM,EAAAN,EAAA,uBAEA,WAWA2a,EAAA/Z,OAAA,SAAA2M,EAAA1M,GACA,GAAAga,IAAAtN,EAAAA,EAAAsN,MAAA,QAAAha,EAAAA,EAAAga,MAAA,KAEAA,KACAtN,GAAAA,EAAAnK,QAAAmK,EAAAnK,OAAA0X,OACAD,EAAAD,EAAAha,OAAA2M,EAAAnK,OAAA0X,QACAja,GAAAA,EAAAka,QACAF,EAAAD,EAAAha,OAAAC,EAAAka,UAEAF,EAAAD,EAAAha,SACAP,EAAAmK,KAAA,qHAIA,IAAAI,GAAAkO,EAAAlY,QACAM,MAAA,mBACAgY,OAAA2B,EAAArZ,SACA2X,QAAA1X,EAAA,EAAAC,EAAA,GACA7B,OAAA,IACAyZ,UAAA,GACAE,iBAAA,EACApW,QACA8B,YAAA,UACAtB,UAAA,KAIA9C,GACAG,KAAA,kBACA4Z,MAAAA,EACAE,QAAA,KACAlX,KAAA,KACA+G,WAAAA,EACA9H,iBACAC,SAAA,EACAC,KAAA,WACAC,MAAA,IAIA+X,EAAA3a,EAAAyD,OAAAhD,EAAAD,EAQA,OANA6I,GAAAuR,GAAA1N,EAAA,eAAA,WACA,GAAA3B,GAAAnC,EAAAmC,UAAA2B,EAAAqC,MACA+K,GAAAhW,OAAAqW,EAAApP,GACAsP,EAAAF,KAGAA,GAUAL,EAAAhW,OAAA,SAAAqW,EAAApR,GACA,GAAAiR,GAAAG,EAAAH,MACAjQ,EAAAoQ,EAAApQ,WACA/G,EAAAmX,EAAAnX,IAEA,IAAA,IAAAgX,EAAAM,QACA,GAAAvQ,EAAAgD,MAsBAxN,EAAA+D,IAAAyG,EAAAgD,OAAA,GACAhD,EAAAsO,OAAA2B,EAAArZ,aAtBA,KAAA,GAAAhC,GAAA,EAAAA,EAAAoK,EAAA/J,OAAAL,IAEA,GADAqE,EAAA+F,EAAApK,GACAc,EAAAwT,SAAAjQ,EAAAO,OAAAyW,EAAArZ,WACA0L,EAAAW,WAAAhK,EAAAf,gBAAAkY,EAAAlY,iBACA,IAAA,GAAAiL,GAAAlK,EAAA1C,MAAAtB,OAAA,EAAA,EAAA,EAAAkO,EAAAlK,EAAA1C,MAAAtB,OAAAkO,IAAA,CACA,GAAA5H,GAAAtC,EAAA1C,MAAA4M,EACA,IAAA7N,EAAA4T,SAAA3N,EAAA7E,SAAAuZ,EAAArZ,UAAA,CACAoJ,EAAAsO,OAAA2B,EAAArZ,SACAoJ,EAAAgD,MAAAoN,EAAAnX,KAAAA,EACA+G,EAAAuO,QAAA1X,EAAAoZ,EAAArZ,SAAAC,EAAAoC,EAAArC,SAAAC,EAAAC,EAAAmZ,EAAArZ,SAAAE,EAAAmC,EAAArC,SAAAE,GACAkJ,EAAA8O,OAAA7V,EAAAxC,MAEAjB,EAAA+D,IAAAN,GAAA,GACA6F,EAAAY,QAAA0Q,EAAA,aAAAH,MAAAA,EAAAhX,KAAAA,GAEA,aAUA+G,GAAAgD,MAAAoN,EAAAnX,KAAA,KACA+G,EAAAuO,OAAA,KAEAtV,GACA6F,EAAAY,QAAA0Q,EAAA,WAAAH,MAAAA,EAAAhX,KAAAA,IAUA,IAAAqX,GAAA,SAAAF,GACA,GAAAH,GAAAG,EAAAH,MACAO,EAAAP,EAAAQ,YAEAD,GAAAE,WACA5R,EAAAY,QAAA0Q,EAAA;uCAAAH,MAAAA,IAEAO,EAAAG,WACA7R,EAAAY,QAAA0Q,EAAA,aAAAH,MAAAA,IAEAO,EAAAI,SACA9R,EAAAY,QAAA0Q,EAAA,WAAAH,MAAAA,IAGAD,EAAAa,kBAAAZ,SA8GAa,oBAAA,EAAAC,wBAAA,EAAA1S,iBAAA,GAAAmD,iBAAA,GAAAwP,gBAAA,GAAA1S,mBAAA,GAAAE,qBAAA,GAAAE,uBAAA,GAAAuS,eAAA,KAAAC,IAAA,SAAA9b,EAAA1B,EAAAD,GAOA,GAAAgC,KAEA/B,GAAAD,QAAAgC,EAEA,WAEAA,EAAA0b,QAAA,EACA1b,EAAA2b,MAAA,EACA3b,EAAA4b,eAAA,GAAAC,MASA7b,EAAAyD,OAAA,SAAAyG,EAAAO,GACA,GAAAqR,GAEAC,CAEA,kBAAAtR,IACAqR,EAAA,EACAC,EAAAtR,IAEAqR,EAAA,EACAC,GAAA,EAGA,KAAA,GAAA5c,GAAA2c,EAAA3c,EAAA6c,UAAAxc,OAAAL,IAAA,CACA,GAAA8c,GAAAD,UAAA7c,EAEA,IAAA8c,EACA,IAAA,GAAAC,KAAAD,GACAF,GAAAE,EAAAC,IAAAD,EAAAC,GAAAC,cAAAC,OACAlS,EAAAgS,IAAAhS,EAAAgS,GAAAC,cAAAC,OAIAlS,EAAAgS,GAAAD,EAAAC,IAHAhS,EAAAgS,GAAAhS,EAAAgS,OACAlc,EAAAyD,OAAAyG,EAAAgS,GAAAH,EAAAE,EAAAC,KAKAhS,EAAAgS,GAAAD,EAAAC,GAMA,MAAAhS,IAUAlK,EAAAiE,MAAA,SAAAiG,EAAAO,GACA,MAAAzK,GAAAyD,UAAAgH,EAAAP,IASAlK,EAAA+Q,KAAA,SAAA7G,GACA,GAAAkS,OAAArL,KACA,MAAAqL,QAAArL,KAAA7G,EAGA,IAAA6G,KACA,KAAA,GAAAsL,KAAAnS,GACA6G,EAAAvK,KAAA6V,EACA,OAAAtL,IASA/Q,EAAAsc,OAAA,SAAApS,GACA,GAAAoS,KAEA,IAAAF,OAAArL,KAAA,CAEA,IAAA,GADAA,GAAAqL,OAAArL,KAAA7G,GACA/K,EAAA,EAAAA,EAAA4R,EAAAvR,OAAAL,IACAmd,EAAA9V,KAAA0D,EAAA6G,EAAA5R,IAEA,OAAAmd,GAIA,IAAA,GAAAD,KAAAnS,GACAoS,EAAA9V,KAAA0D,EAAAmS,GACA,OAAAC,IAYAtc,EAAA0L,IAAA,SAAAxB,EAAAqS,EAAAC,EAAAC,GACAF,EAAAA,EAAAG,MAAA,KAAAnW,MAAAiW,EAAAC,EAEA,KAAA,GAAAtd,GAAA,EAAAA,EAAAod,EAAA/c,OAAAL,GAAA,EACA+K,EAAAA,EAAAqS,EAAApd,GAGA,OAAA+K,IAaAlK,EAAA8D,IAAA,SAAAoG,EAAAqS,EAAAI,EAAAH,EAAAC,GACA,GAAA3b,GAAAyb,EAAAG,MAAA,KAAAnW,MAAAiW,EAAAC,EAEA,OADAzc,GAAA0L,IAAAxB,EAAAqS,EAAA,GAAA,GAAAzb,EAAAA,EAAAtB,OAAA,IAAAmd,EACAA,GAUA3c,EAAA4c,QAAA,SAAAC,GACA,IAAA,GAAA1d,GAAA0d,EAAArd,OAAA,EAAAL,EAAA,EAAAA,IAAA,CACA,GAAAuO,GAAAvG,KAAAyJ,MAAA5Q,EAAA8c,UAAA3d,EAAA,IACA4d,EAAAF,EAAA1d,EACA0d,GAAA1d,GAAA0d,EAAAnP,GACAmP,EAAAnP,GAAAqP,EAEA,MAAAF,IAUA7c,EAAA2E,OAAA,SAAAqY,GACA,MAAAA,GAAA7V,KAAAyJ,MAAA5Q,EAAA8c,SAAAE,EAAAxd,UASAQ,EAAAid,UAAA,SAAA/S,GACA,MAAAA,aAAAgT,cASAld,EAAAmd,QAAA,SAAAjT,GACA,MAAA,mBAAAkS,OAAAgB,UAAAzR,SAAApM,KAAA2K,IASAlK,EAAAqd,WAAA,SAAAnT,GACA,MAAA,kBAAAA,IASAlK,EAAAsd,cAAA,SAAApT,GACA,MAAA,gBAAAA,IAAAA,EAAAiS,cAAAC,QASApc,EAAAud,SAAA,SAAArT,GACA,MAAA,oBAAAyB,SAAApM,KAAA2K,IAWAlK,EAAAoW,MAAA,SAAAnR,EAAAH,EAAAC,GACA,MAAAE,GAAAH,EACAA,EACAG,EAAAF,EACAA,EACAE,GASAjF,EAAAkW,KAAA,SAAAjR,GACA,MAAAA,GAAA,GAAA,EAAA,GASAjF,EAAAwd,IAAA,WACA,GAAAnf,OAAAof,YAAA,CACA,GAAApf,OAAAof,YAAAD,IACA,MAAAnf,QAAAof,YAAAD,KACA,IAAAnf,OAAAof,YAAAC,UACA,MAAArf,QAAAof,YAAAC,YAIA,MAAA,IAAA7B,MAAA7b,EAAA4b,eAWA5b,EAAA8c,OAAA,SAAAhY,EAAAC,GAGA,MAFAD,OAAA,KAAAA,EAAAA,EAAA,EACAC,MAAA,KAAAA,EAAAA,EAAA,EACAD,EAAA6Y,KAAA5Y,EAAAD,GAGA,IAAA6Y,GAAA,WAGA,MADA3d,GAAA2b,OAAA,KAAA3b,EAAA2b,MAAA,OAAA,OACA3b,EAAA2b,MAAA,OASA3b,GAAA4d,cAAA,SAAAC,GASA,MARAA,GAAAA,EAAAC,QAAA,IAAA,IAEA,GAAAD,EAAAre,SACAqe,EAAAA,EAAAE,OAAA,GAAAF,EAAAE,OAAA,GACAF,EAAAE,OAAA,GAAAF,EAAAE,OAAA,GACAF,EAAAE,OAAA,GAAAF,EAAAE,OAAA,IAGAC,SAAAH,EAAA,KAiBA7d,EAAAie,SAAA,EAQAje,EAAAke,IAAA,WACAC,SAAAne,EAAAie,SAAA,GAAAje,EAAAie,UAAA,GACAE,QAAAD,IAAAE,MAAAD,SAAA,cAAA1X,OAAA4X,MAAAjB,UAAA7W,MAAAhH,KAAAyc,cAUAhc,EAAAse,KAAA,WACAH,SAAAne,EAAAie,SAAA,GAAAje,EAAAie,UAAA,GACAE,QAAAG,KAAAF,MAAAD,SAAA,cAAA1X,OAAA4X,MAAAjB,UAAA7W,MAAAhH,KAAAyc,cAUAhc,EAAAmK,KAAA,WACAgU,SAAAne,EAAAie,SAAA,GAAAje,EAAAie,UAAA,GACAE,QAAAhU,KAAAiU,MAAAD,SAAA,cAAA1X,OAAA4X,MAAAjB,UAAA7W,MAAAhH,KAAAyc,cASAhc,EAAAW,OAAA,WACA,MAAAX,GAAA0b,WAUA1b,EAAA+K,QAAA,SAAAwT,EAAAC,GACA,GAAAD,EAAAxT,QACA,MAAAwT,GAAAxT,QAAAyT,EAEA,KAAA,GAAArf,GAAA,EAAAA,EAAAof,EAAA/e,OAAAL,IACA,GAAAof,EAAApf,KAAAqf,EACA,MAAArf,EAGA,QAAA,GAUAa,EAAAye,IAAA,SAAAtM,EAAAuM,GACA,GAAAvM,EAAAsM,IACA,MAAAtM,GAAAsM,IAAAC,EAKA,KAAA,GAFAC,MAEAxf,EAAA,EAAAA,EAAAgT,EAAA3S,OAAAL,GAAA,EACAwf,EAAAnY,KAAAkY,EAAAvM,EAAAhT,IAGA,OAAAwf,IAUA3e,EAAA4e,gBAAA,SAAAC,GAIA,GAAArL,MACAsL,KACA/B,IAEA,KAAA,GAAAgC,KAAAF,GACAC,EAAAC,IAAAhC,EAAAgC,IACAC,EAAAD,EAAAD,EAAA/B,EAAA8B,EAAArL,EAIA,OAAAA,GAGA,IAAAwL,GAAA,SAAAD,EAAAD,EAAA/B,EAAA8B,EAAArL,GACA,GAAAyL,GAAAJ,EAAAE,MACAhC,GAAAgC,IAAA,CAEA,KAAA,GAAA5f,GAAA,EAAAA,EAAA8f,EAAAzf,OAAAL,GAAA,EAAA,CACA,GAAA+f,GAAAD,EAAA9f,EAEA4d,GAAAmC,KAKAJ,EAAAI,IACAF,EAAAE,EAAAJ,EAAA/B,EAAA8B,EAAArL,IAIAuJ,EAAAgC,IAAA,EACAD,EAAAC,IAAA,EAEAvL,EAAAhN,KAAAuY,GAcA/e,GAAAmf,MAAA,WAGA,IAAA,GAFAC,MAEAjgB,EAAA,EAAAA,EAAA6c,UAAAxc,OAAAL,GAAA,EAAA,CACA,GAAAuf,GAAA1C,UAAA7c,EAEAuf,GAAAW,SAEAD,EAAA5Y,KAAA4X,MAAAgB,EAAAV,EAAAW,UAEAD,EAAA5Y,KAAAkY,GAIA,GAAAS,GAAA,WAKA,IAAA,GAHAG,GACAC,EAAA,GAAAlB,OAAArC,UAAAxc,QAEAL,EAAA,EAAAG,EAAA0c,UAAAxc,OAAAL,EAAAG,EAAAH,IACAogB,EAAApgB,GAAA6c,UAAA7c,EAGA,KAAAA,EAAA,EAAAA,EAAAigB,EAAA5f,OAAAL,GAAA,EAAA,CACA,GAAAqU,GAAA4L,EAAAjgB,GAAAif,MAAAkB,EAAAC,OAEA,KAAA/L,IACA8L,EAAA9L,GAIA,MAAA8L,GAKA,OAFAH,GAAAE,SAAAD,EAEAD,GAYAnf,EAAAwf,gBAAA,SAAAC,EAAAlD,EAAAmC,GACA,MAAA1e,GAAA8D,IAAA2b,EAAAlD,EAAAvc,EAAAmf,MACAT,EACA1e,EAAA0L,IAAA+T,EAAAlD,MAaAvc,EAAA0f,eAAA,SAAAD,EAAAlD,EAAAmC,GACA,MAAA1e,GAAA8D,IAAA2b,EAAAlD,EAAAvc,EAAAmf,MACAnf,EAAA0L,IAAA+T,EAAAlD,GACAmC,aAMAiB,IAAA,SAAAhgB,EAAA1B,EAAAD,GAWA,GAAA4hB,KAEA3hB,GAAAD,QAAA4hB,CAEA,IAAA1T,GAAAvM,EAAA,iBACAI,EAAAJ,EAAA,cACAiU,EAAAjU,EAAA,yBACAkgB,EAAAlgB,EAAA,oBACAuS,EAAAvS,EAAA,sBAEA+O,GADA/O,EAAA,aACAA,EAAA,sBACA0J,EAAA1J,EAAA,YACAyJ,EAAAzJ,EAAA,qBACA8Y,EAAA9Y,EAAA,4BACAK,EAAAL,EAAA,YACAC,EAAAD,EAAA,iBAEA,WAUAigB,EAAArf,OAAA,SAAAma,EAAAla,GAEAA,EAAAR,EAAAid,UAAAvC,GAAAla,EAAAka,EACAA,EAAA1a,EAAAid,UAAAvC,GAAAA,EAAA,KACAla,EAAAA,OAEAka,GAAAla,EAAAuC,SACA/C,EAAAmK,KAAA,wDAGA,IAAA1J,IACAqf,mBAAA,EACAC,mBAAA,EACAC,qBAAA,EACAC,gBAAA,EACAC,UACAnf,UACAof,QACAjP,UAAA,EACApO,UAAA,GAEAsd,YACAzR,WAAAD,IAIAxB,EAAAlN,EAAAyD,OAAAhD,EAAAD,EAGA,IAAAka,GAAAxN,EAAAnK,OAAA,CACA,GAAAsd,IACA3F,QAAAA,EACA/L,WAAAkR,EAGA3S,GAAAnK,OAAA/C,EAAAyD,OAAA4c,EAAAnT,EAAAnK,QAmBA,MAfAmK,GAAAnK,QAAAmK,EAAAnK,OAAA4L,aACAzB,EAAAnK,OAAAmK,EAAAnK,OAAA4L,WAAApO,OAAA2M,EAAAnK,SAIAmK,EAAAnK,SACAmK,EAAAnK,OAAAmK,OAAAA,GAGAA,EAAAqC,MAAA/O,EAAA+O,OAAArD,EAAA3L,OAAA2M,EAAAqC,OACArC,EAAAE,MAAA8E,EAAA3R,SACA2M,EAAAkT,WAAAlT,EAAAkT,WAAAzR,WAAApO,OAAA2M,EAAAkT,YACAlT,EAAAoT,QAAApT,EAAAoT,UAAAC,UAAA,GAGArT,GAkBA0S,EAAAtb,OAAA,SAAA4I,EAAAnG,EAAAmB,GACAnB,EAAAA,GAAA,IAAA,GACAmB,EAAAA,GAAA,CAEA,IAIA/I,GAJAoQ,EAAArC,EAAAqC,MACA4Q,EAAAjT,EAAAiT,OACAC,EAAAlT,EAAAkT,WACAnT,IAIAkT,GAAAjP,WAAAnK,EAAAoZ,EAAArd,SAGA,IAAA0d,IACAtP,UAAAiP,EAAAjP,UAGA7H,GAAAY,QAAAiD,EAAA,eAAAsT,EAGA,IAAAjV,GAAAnC,EAAAmC,UAAAgE,GACA/D,EAAApC,EAAAoC,eAAA+D,EAeA,KAXArC,EAAA+S,gBACAlgB,EAAAuE,OAAAiH,EAAA4U,EAAArd,WAGA2d,EAAAlV,EAAAgE,EAAApD,SAGAuU,EAAAnV,EAAAxE,EAAAoZ,EAAArd,UAAAoF,EAAAqH,EAAAxL,QAGA0U,EAAAc,YAAAhO,GACApM,EAAA,EAAAA,EAAA+N,EAAA8S,qBAAA7gB,IACAsZ,EAAAe,SAAAhO,EAAA2U,EAAArd,UAEA2V,GAAA2B,aAAA7O,GAGA6U,EAAAzR,YAEAY,EAAAjG,YACA8W,EAAAzR,WAAAvD,MAAAgV,GAGAA,EAAAzR,WAAArK,OAAA8b,EAAA7U,EAAA2B,EAAAqC,EAAAjG,YACA2D,EAAAmT,EAAAtR,WAGA7B,EAAA1B,EAIAgE,EAAAjG,YACAF,EAAAM,YAAA6F,GAAA,GAAA,GAAA,EAIA,IAAAvC,GAAAoT,EAAAxR,SAAA3B,EAAAC,GAGAE,EAAAF,EAAAE,MACA8D,EAAAiP,EAAAjP,SAcA,KAbAgB,EAAA5N,OAAA8I,EAAAJ,EAAAkE,GACAgB,EAAAM,UAAApF,EAAA8D,GAGAhE,EAAA+S,gBACAlgB,EAAA4gB,gBAAAvT,EAAA+E,KAAAgO,EAAArd,WAGAsK,EAAAgF,eAAA5S,OAAA,GACA6J,EAAAY,QAAAiD,EAAA,kBAAAE,MAAAA,EAAAgF,iBAGAwB,EAAAM,iBAAA9G,EAAA+E,MACAhT,EAAA,EAAAA,EAAA+N,EAAA4S,mBAAA3gB,IACAyU,EAAAQ,cAAAhH,EAAA+E,KAAAgO,EAAArd,UAMA,KAJA8Q,EAAAmB,kBAAAxJ,GAGAkN,EAAAc,YAAAhO,GACApM,EAAA,EAAAA,EAAA+N,EAAA8S,qBAAA7gB,IACAsZ,EAAAe,SAAAhO,EAAA2U,EAAArd,UAMA,KAJA2V,EAAA2B,aAAA7O,GAGAqI,EAAAoB,iBAAA5H,EAAA+E,MACAhT,EAAA,EAAAA,EAAA+N,EAAA6S,mBAAA5gB,IACAyU,EAAAyB,cAAAjI,EAAA+E,KAAAgO,EAAArd,UAgBA,OAZAsK,GAAAiF,gBAAA7S,OAAA,GACA6J,EAAAY,QAAAiD,EAAA,mBAAAE,MAAAA,EAAAiF,kBAEAjF,EAAAkF,aAAA9S,OAAA,GACA6J,EAAAY,QAAAiD,EAAA,gBAAAE,MAAAA,EAAAkF,eAIAsO,EAAArV,GAEAlC,EAAAY,QAAAiD,EAAA,cAAAsT,GAEAtT,GASA0S,EAAAiB,MAAA,SAAAC,EAAAC,GAGA,GAFA/gB,EAAAyD,OAAAqd,EAAAC,GAEAA,EAAAxR,MAAA,CACAuR,EAAAvR,MAAAwR,EAAAxR,MAEAqQ,EAAAxU,MAAA0V,EAIA,KAAA,GAFAvX,GAAAH,EAAAmC,UAAAuV,EAAAvR,OAEApQ,EAAA,EAAAA,EAAAoK,EAAA/J,OAAAL,IAAA,CACA,GAAAqE,GAAA+F,EAAApK,EACAY,GAAA+D,IAAAN,GAAA,GACAA,EAAA9C,GAAAV,EAAAW,YAUAif,EAAAxU,MAAA,SAAA8B,GACA,GAAAqC,GAAArC,EAAAqC,KAEA2C,GAAA9G,MAAA8B,EAAAE,MAEA,IAAAgT,GAAAlT,EAAAkT,UACA,IAAAA,EAAAzR,WAAA,CACA,GAAApF,GAAAH,EAAAmC,UAAAgE,EACA6Q,GAAAzR,WAAAvD,MAAAgV,GACAA,EAAAzR,WAAArK,OAAA8b,EAAA7W,EAAA2D,GAAA,IAUA,IAAA0T,GAAA,SAAArX,GACA,IAAA,GAAApK,GAAA,EAAAA,EAAAoK,EAAA/J,OAAAL,IAAA,CACA,GAAAqE,GAAA+F,EAAApK,EAGAqE,GAAAlC,MAAAF,EAAA,EACAoC,EAAAlC,MAAAD,EAAA,EACAmC,EAAAjC,OAAA,IAWAkf,EAAA,SAAAlX,EAAA4C,GACA,GAAA6U,OAAA,KAAA7U,EAAAtE,MAAAsE,EAAAtE,MAAA,IAEA,KAAA,IAAAsE,EAAA/K,GAAA,IAAA+K,EAAA9K,IAAA,IAAA2f,EAIA,IAAA,GAAA7hB,GAAA,EAAAA,EAAAoK,EAAA/J,OAAAL,IAAA,CACA,GAAAqE,GAAA+F,EAAApK,EAEAqE,GAAAxB,UAAAwB,EAAAvB,aAIAuB,EAAAlC,MAAAD,GAAAmC,EAAAgB,KAAA2H,EAAA9K,EAAA2f,EACAxd,EAAAlC,MAAAF,GAAAoC,EAAAgB,KAAA2H,EAAA/K,EAAA4f,KAgBAN,EAAA,SAAAnX,EAAAtB,EAAAnF,EAAAoF,EAAA+Y,GACA,IAAA,GAAA9hB,GAAA,EAAAA,EAAAoK,EAAA/J,OAAAL,IAAA,CACA,GAAAqE,GAAA+F,EAAApK,EAEAqE,GAAAxB,UAAAwB,EAAAvB,YAGArC,EAAA0E,OAAAd,EAAAyE,EAAAnF,EAAAoF,UA2KAgZ,eAAA,EAAA7F,oBAAA,EAAA8F,gBAAA,EAAAC,oBAAA,EAAAC,qBAAA,EAAAC,wBAAA,GAAAlV,2BAAA,GAAAlD,mBAAA,GAAAqY,WAAA,GAAAC,WAAA,GAAAC,YAAA,GAAAC,aAAA,KAAAC,IAAA,SAAAhiB,EAAA1B,EAAAD,GASA,GAAAqL,KAEApL,GAAAD,QAAAqL,CAEA,IAAArJ,GAAAL,EAAA,aAEA,WASA0J,EAAAuR,GAAA,SAAA7Q,EAAA6X,EAAAC,GAIA,IAAA,GAFAC,GADAC,EAAAH,EAAAlF,MAAA,KAGAvd,EAAA,EAAAA,EAAA4iB,EAAAviB,OAAAL,IACA2iB,EAAAC,EAAA5iB,GACA4K,EAAAmW,OAAAnW,EAAAmW,WACAnW,EAAAmW,OAAA4B,GAAA/X,EAAAmW,OAAA4B,OACA/X,EAAAmW,OAAA4B,GAAAtb,KAAAqb,EAGA,OAAAA,IAUAxY,EAAA2Y,IAAA,SAAAjY,EAAA6X,EAAAC,GACA,IAAAD,EAEA,YADA7X,EAAAmW,UAKA,mBAAA0B,KACAC,EAAAD,EACAA,EAAA5hB,EAAA+Q,KAAAhH,EAAAmW,QAAA+B,KAAA,KAKA,KAAA,GAFAF,GAAAH,EAAAlF,MAAA,KAEAvd,EAAA,EAAAA,EAAA4iB,EAAAviB,OAAAL,IAAA,CACA,GAAA+iB,GAAAnY,EAAAmW,OAAA6B,EAAA5iB,IACAgjB,IAEA,IAAAN,GAAAK,EACA,IAAA,GAAAxU,GAAA,EAAAA,EAAAwU,EAAA1iB,OAAAkO,IACAwU,EAAAxU,KAAAmU,GACAM,EAAA3b,KAAA0b,EAAAxU,GAIA3D,GAAAmW,OAAA6B,EAAA5iB,IAAAgjB,IAWA9Y,EAAAY,QAAA,SAAAF,EAAA6X,EAAApB,GACA,GAAAuB,GACAD,EACAI,EACAE,CAEA,IAAArY,EAAAmW,OAAA,CACAM,IACAA,MAEAuB,EAAAH,EAAAlF,MAAA,IAEA,KAAA,GAAAvd,GAAA,EAAAA,EAAA4iB,EAAAviB,OAAAL,IAIA,GAHA2iB,EAAAC,EAAA5iB,GACA+iB,EAAAnY,EAAAmW,OAAA4B,GAEA,CACAM,EAAApiB,EAAAiE,MAAAuc,GAAA,GACA4B,EAAAN,KAAAA,EACAM,EAAAnG,OAAAlS,CAEA,KAAA,GAAA2D,GAAA,EAAAA,EAAAwU,EAAA1iB,OAAAkO,IACAwU,EAAAxU,GAAA0Q,MAAArU,GAAAqY,YASAb,WAAA,KAAAc,IAAA,SAAA1iB,EAAA1B,EAAAD,GAOA,GAAA0B,KAEAzB,GAAAD,QAAA0B,CAEA,IAAA4iB,GAAA3iB,EAAA,YACAK,EAAAL,EAAA,aAEA,WAQAD,EAAAoiB,KAAA,YAQApiB,EAAA6iB,QAAA,SAQA7iB,EAAA8iB,QAQA9iB,EAAA+iB,QAUA/iB,EAAAgjB,IAAA,WACAJ,EAAAI,IAAAhjB,EAAA2e,MAAAjB,UAAA7W,MAAAhH,KAAAyc,aAWAtc,EAAAijB,OAAA,SAAApG,EAAAmC,GAEA,MADAnC,GAAAA,EAAAuB,QAAA,WAAA,IACA9d,EAAAwf,gBAAA9f,EAAA6c,EAAAmC,IAWAhf,EAAAkjB,MAAA,SAAArG,EAAAmC,GAEA,MADAnC,GAAAA,EAAAuB,QAAA,WAAA,IACA9d,EAAA0f,eAAAhgB,EAAA6c,EAAAmC,SAKA6C,WAAA,GAAAsB,WAAA,KAAAC,IAAA,SAAAnjB,EAAA1B,EAAAD,MAEAqd,oBAAA,EAAAkG,WAAA,KAAAwB,IAAA,SAAApjB,EAAA1B,EAAAD,GAOA,GAAAuc,KAEAtc,GAAAD,QAAAuc,CAEA,IAAAva,GAAAL,EAAA,mBAEA,WAQA4a,EAAAha,OAAA,SAAAma,GACA,GAAAF,KAqFA,OAnFAE,IACA1a,EAAAke,IAAA,mEAAA,QAGA1D,EAAAE,QAAAA,GAAAsI,SAAAxf,KACAgX,EAAAyI,UAAA7hB,EAAA,EAAAC,EAAA,GACAmZ,EAAArZ,UAAAC,EAAA,EAAAC,EAAA,GACAmZ,EAAA0I,mBAAA9hB,EAAA,EAAAC,EAAA,GACAmZ,EAAA2I,iBAAA/hB,EAAA,EAAAC,EAAA,GACAmZ,EAAAhS,QAAApH,EAAA,EAAAC,EAAA,GACAmZ,EAAA3S,OAAAzG,EAAA,EAAAC,EAAA,GACAmZ,EAAA4I,WAAA,EACA5I,EAAAM,QAAA,EACAN,EAAA6I,WAAA7I,EAAAE,QAAA4I,aAAA,qBAAA,EAEA9I,EAAAQ,cACAC,UAAA,KACAC,UAAA,KACAC,QAAA,KACAoI,WAAA,MAGA/I,EAAAS,UAAA,SAAAuF,GACA,GAAArf,GAAAqiB,EAAAhD,EAAAhG,EAAAE,QAAAF,EAAA6I,WACA7C,GAAAiD,iBAGAjJ,EAAAM,OAAA,EACA0F,EAAAkD,kBAGAlJ,EAAAyI,SAAA7hB,EAAAD,EAAAC,EACAoZ,EAAAyI,SAAA5hB,EAAAF,EAAAE,EACAmZ,EAAArZ,SAAAC,EAAAoZ,EAAAyI,SAAA7hB,EAAAoZ,EAAA3S,MAAAzG,EAAAoZ,EAAAhS,OAAApH,EACAoZ,EAAArZ,SAAAE,EAAAmZ,EAAAyI,SAAA5hB,EAAAmZ,EAAA3S,MAAAxG,EAAAmZ,EAAAhS,OAAAnH,EACAmZ,EAAAQ,aAAAC,UAAAuF,GAGAhG,EAAAU,UAAA,SAAAsF,GACA,GAAArf,GAAAqiB,EAAAhD,EAAAhG,EAAAE,QAAAF,EAAA6I,WACA7C,GAAAiD,gBAGAjJ,EAAAM,OAAA,EACA0F,EAAAkD,kBAEAlJ,EAAAM,OAAA0F,EAAA1F,OAGAN,EAAAyI,SAAA7hB,EAAAD,EAAAC,EACAoZ,EAAAyI,SAAA5hB,EAAAF,EAAAE,EACAmZ,EAAArZ,SAAAC,EAAAoZ,EAAAyI,SAAA7hB,EAAAoZ,EAAA3S,MAAAzG,EAAAoZ,EAAAhS,OAAApH,EACAoZ,EAAArZ,SAAAE,EAAAmZ,EAAAyI,SAAA5hB,EAAAmZ,EAAA3S,MAAAxG,EAAAmZ,EAAAhS,OAAAnH,EACAmZ,EAAA0I,kBAAA9hB,EAAAoZ,EAAArZ,SAAAC,EACAoZ,EAAA0I,kBAAA7hB,EAAAmZ,EAAArZ,SAAAE,EACAmZ,EAAAQ,aAAAE,UAAAsF,GAGAhG,EAAAW,QAAA,SAAAqF,GACA,GAAArf,GAAAqiB,EAAAhD,EAAAhG,EAAAE,QAAAF,EAAA6I,WACA7C,GAAAiD,gBAGAjD,EAAAkD,iBAGAlJ,EAAAM,QAAA,EACAN,EAAAyI,SAAA7hB,EAAAD,EAAAC,EACAoZ,EAAAyI,SAAA5hB,EAAAF,EAAAE,EACAmZ,EAAArZ,SAAAC,EAAAoZ,EAAAyI,SAAA7hB,EAAAoZ,EAAA3S,MAAAzG,EAAAoZ,EAAAhS,OAAApH,EACAoZ,EAAArZ,SAAAE,EAAAmZ,EAAAyI,SAAA5hB,EAAAmZ,EAAA3S,MAAAxG,EAAAmZ,EAAAhS,OAAAnH,EACAmZ,EAAA2I,gBAAA/hB,EAAAoZ,EAAArZ,SAAAC,EACAoZ,EAAA2I,gBAAA9hB,EAAAmZ,EAAArZ,SAAAE,EACAmZ,EAAAQ,aAAAG,QAAAqF,GAGAhG,EAAA+I,WAAA,SAAA/C,GACAhG,EAAA4I,WAAAjc,KAAApC,KAAA,EAAAoC,KAAArC,IAAA,EAAA0b,EAAA4C,aAAA5C,EAAAmD,SACAnD,EAAAkD,kBAGAnJ,EAAAqJ,WAAApJ,EAAAA,EAAAE,SAEAF,GASAD,EAAAqJ,WAAA,SAAApJ,EAAAE,GACAF,EAAAE,QAAAA,EAEAA,EAAAmJ,iBAAA,YAAArJ,EAAAS,WACAP,EAAAmJ,iBAAA,YAAArJ,EAAAU,WACAR,EAAAmJ,iBAAA,UAAArJ,EAAAW,SAEAT,EAAAmJ,iBAAA,aAAArJ,EAAA+I,YACA7I,EAAAmJ,iBAAA,iBAAArJ,EAAA+I,YAEA7I,EAAAmJ,iBAAA,YAAArJ,EAAAS,WACAP,EAAAmJ,iBAAA,aAAArJ,EAAAU,WACAR,EAAAmJ,iBAAA,WAAArJ,EAAAW,UAQAZ,EAAAa,kBAAA,SAAAZ,GACAA,EAAAQ,aAAAC,UAAA,KACAT,EAAAQ,aAAAE,UAAA,KACAV,EAAAQ,aAAAG,QAAA,KACAX,EAAAQ,aAAAuI,WAAA,KACA/I,EAAA4I,WAAA,GASA7I,EAAAuJ,UAAA,SAAAtJ,EAAAhS,GACAgS,EAAAhS,OAAApH,EAAAoH,EAAApH,EACAoZ,EAAAhS,OAAAnH,EAAAmH,EAAAnH,EACAmZ,EAAArZ,SAAAC,EAAAoZ,EAAAyI,SAAA7hB,EAAAoZ,EAAA3S,MAAAzG,EAAAoZ,EAAAhS,OAAApH,EACAoZ,EAAArZ,SAAAE,EAAAmZ,EAAAyI,SAAA5hB,EAAAmZ,EAAA3S,MAAAxG,EAAAmZ,EAAAhS,OAAAnH,GASAkZ,EAAAwJ,SAAA,SAAAvJ,EAAA3S,GACA2S,EAAA3S,MAAAzG,EAAAyG,EAAAzG,EACAoZ,EAAA3S,MAAAxG,EAAAwG,EAAAxG,EACAmZ,EAAArZ,SAAAC,EAAAoZ,EAAAyI,SAAA7hB,EAAAoZ,EAAA3S,MAAAzG,EAAAoZ,EAAAhS,OAAApH,EACAoZ,EAAArZ,SAAAE,EAAAmZ,EAAAyI,SAAA5hB,EAAAmZ,EAAA3S,MAAAxG,EAAAmZ,EAAAhS,OAAAnH,EAYA,IAAAmiB,GAAA,SAAAhD,EAAA9F,EAAA2I,GACA,GAKAjiB,GAAAC,EALA2iB,EAAAtJ,EAAAuJ,wBACAC,EAAAlB,SAAAmB,iBAAAnB,SAAAxf,KAAA4gB,YAAApB,SAAAxf,KACA6gB,MAAAC,KAAAjmB,OAAAkmB,YAAAlmB,OAAAkmB,YAAAL,EAAAM,WACAC,MAAAH,KAAAjmB,OAAAqmB,YAAArmB,OAAAqmB,YAAAR,EAAAS,UACAC,EAAApE,EAAAiD,cAWA,OARAmB,IACAxjB,EAAAwjB,EAAA,GAAAC,MAAAb,EAAAc,KAAAT,EACAhjB,EAAAujB,EAAA,GAAAG,MAAAf,EAAAgB,IAAAP,IAEArjB,EAAAof,EAAAqE,MAAAb,EAAAc,KAAAT,EACAhjB,EAAAmf,EAAAuE,MAAAf,EAAAgB,IAAAP,IAIArjB,EAAAA,GAAAsZ,EAAAuK,aAAAvK,EAAAwK,OAAAxK,EAAAuK,aAAA5B,GACAhiB,EAAAA,GAAAqZ,EAAAyK,cAAAzK,EAAA0K,QAAA1K,EAAAyK,cAAA9B,UAMAza,iBAAA,KAAAyc,IAAA,SAAA1lB,EAAA1B,EAAAD,GAOA,GAAAskB,KAEArkB,GAAAD,QAAAskB,CAEA,IAAAtiB,GAAAL,EAAA,aAEA,WAEA2iB,EAAAgD,aAQAhD,EAAAiD,SAAA,SAAAxkB,GAKA,GAJAuhB,EAAAkD,SAAAzkB,IACAf,EAAAmK,KAAA,mBAAAmY,EAAA3W,SAAA5K,GAAA,2CAGAA,EAAA+gB,OAAAQ,GAAAgD,UAAA,CACA,GAAAG,GAAAnD,EAAAgD,UAAAvkB,EAAA+gB,MACA4D,EAAApD,EAAAqD,aAAA5kB,EAAAwhB,SAAAqD,OACAC,EAAAvD,EAAAqD,aAAAF,EAAAlD,SAAAqD,MAEAF,GAAAG,GACA7lB,EAAAmK,KAAA,mBAAAmY,EAAA3W,SAAA8Z,GAAA,kBAAAnD,EAAA3W,SAAA5K,IACAuhB,EAAAgD,UAAAvkB,EAAA+gB,MAAA/gB,GACA2kB,EAAAG,EACA7lB,EAAAmK,KAAA,mBAAAmY,EAAA3W,SAAA8Z,GAAA,2BAAAnD,EAAA3W,SAAA5K,IACAA,IAAA0kB,GACAzlB,EAAAmK,KAAA,mBAAAmY,EAAA3W,SAAA5K,GAAA,wDAGAuhB,GAAAgD,UAAAvkB,EAAA+gB,MAAA/gB,CAGA,OAAAA,IAUAuhB,EAAAwD,QAAA,SAAAC,GACA,MAAAzD,GAAAgD,UAAAhD,EAAA0D,gBAAAD,GAAAjE,OASAQ,EAAA3W,SAAA,SAAA5K,GACA,MAAA,gBAAAA,GAAAA,GAAAA,EAAA+gB,MAAA,aAAA,KAAA/gB,EAAAwhB,SAAAxhB,EAAAklB,OAAA,UAaA3D,EAAAkD,SAAA,SAAAtb,GACA,MAAAA,IAAAA,EAAA4X,MAAA5X,EAAAqY,SAAArY,EAAAgc,SAUA5D,EAAA6D,OAAA,SAAAloB,EAAA6jB,GACA,MAAA7jB,GAAAwkB,KAAA1X,QAAA+W,IAAA,GAYAQ,EAAA8D,MAAA,SAAArlB,EAAA9C,GACA,GAAAooB,GAAAtlB,EAAAulB,KAAAhE,EAAA0D,gBAAAjlB,EAAAulB,IACA,QAAAvlB,EAAAulB,KAAAroB,EAAA6jB,OAAAuE,EAAAvE,MAAAQ,EAAAiE,iBAAAtoB,EAAAskB,QAAA8D,EAAAJ,QAmBA3D,EAAAI,IAAA,SAAAzkB,EAAAuoB,GAGA,GAFAvoB,EAAAukB,MAAAvkB,EAAAukB,UAAA/b,OAAA+f,OAEA,IAAAvoB,EAAAukB,KAAAhjB,OAEA,WADAQ,GAAAmK,KAAA,cAAAmY,EAAA3W,SAAA1N,GAAA,gDAQA,KAAA,GAJAwoB,GAAAnE,EAAAmE,aAAAxoB,GACAyoB,EAAA1mB,EAAA4e,gBAAA6H,GACAE,KAEAxnB,EAAA,EAAAA,EAAAunB,EAAAlnB,OAAAL,GAAA,EACA,GAAAunB,EAAAvnB,KAAAlB,EAAA6jB,KAAA,CAIA,GAAA/gB,GAAAuhB,EAAAwD,QAAAY,EAAAvnB,GAEA4B,GAKAuhB,EAAA6D,OAAAloB,EAAA8C,EAAA+gB,QAIAQ,EAAA8D,MAAArlB,EAAA9C,KACA+B,EAAAmK,KAAA,cAAAmY,EAAA3W,SAAA5K,GAAA,SAAAA,EAAAulB,IAAA,mBAAAhE,EAAA3W,SAAA1N,GAAA,KACA8C,EAAA6lB,SAAA,GAGA7lB,EAAAmlB,QACAnlB,EAAAmlB,QAAAjoB,IAEA+B,EAAAmK,KAAA,cAAAmY,EAAA3W,SAAA5K,GAAA,yCACAA,EAAA6lB,SAAA,GAGA7lB,EAAA6lB,SACAD,EAAAngB,KAAA,MAAA8b,EAAA3W,SAAA5K,UACAA,GAAA6lB,SAEAD,EAAAngB,KAAA,KAAA8b,EAAA3W,SAAA5K,IAGA9C,EAAAwkB,KAAAjc,KAAAzF,EAAA+gB,OA3BA6E,EAAAngB,KAAA,KAAAkgB,EAAAvnB,IA8BAwnB,EAAAnnB,OAAA,GACAQ,EAAAse,KAAAqI,EAAA1E,KAAA,QAUAK,EAAAmE,aAAA,SAAAxoB,EAAA4oB,GACA,GAAAC,GAAAxE,EAAA0D,gBAAA/nB,GACA6jB,EAAAgF,EAAAhF,IAIA,IAFA+E,EAAAA,QAEA/E,IAAA+E,IAAA,CAIA5oB,EAAAqkB,EAAAwD,QAAA7nB,IAAAA,EAEA4oB,EAAA/E,GAAA9hB,EAAAye,IAAAxgB,EAAAukB,SAAA,SAAAuD,GACAzD,EAAAkD,SAAAO,IACAzD,EAAAiD,SAAAQ,EAGA,IAAAM,GAAA/D,EAAA0D,gBAAAD,GACAgB,EAAAzE,EAAAwD,QAAAC,EAmBA,OAjBAgB,KAAAzE,EAAAiE,iBAAAQ,EAAAxE,QAAA8D,EAAAJ,QACAjmB,EAAAmK,KACA,uBAAAmY,EAAA3W,SAAAob,GAAA,mBACAzE,EAAA3W,SAAA0a,GAAA,UAAA/D,EAAA3W,SAAAmb,GAAA,KAGAC,EAAAH,SAAA,EACA3oB,EAAA2oB,SAAA,GACAG,IACA/mB,EAAAmK,KACA,uBAAAmY,EAAA3W,SAAAoa,GAAA,UACAzD,EAAA3W,SAAAmb,GAAA,0BAGA7oB,EAAA2oB,SAAA,GAGAP,EAAAvE,MAGA,KAAA,GAAA3iB,GAAA,EAAAA,EAAA0nB,EAAA/E,GAAAtiB,OAAAL,GAAA,EACAmjB,EAAAmE,aAAAI,EAAA/E,GAAA3iB,GAAA0nB,EAGA,OAAAA,KAYAvE,EAAA0D,gBAAA,SAAAD,GACA,GAAA/lB,EAAAud,SAAAwI,GAAA,CAOA,MANA,wDAEAiB,KAAAjB,IACA/lB,EAAAmK,KAAA,0BAAA4b,EAAA,sCAIAjE,KAAAiE,EAAArJ,MAAA,KAAA,GACAuJ,MAAAF,EAAArJ,MAAA,KAAA,IAAA,KAIA,OACAoF,KAAAiE,EAAAjE,KACAmE,MAAAF,EAAAE,OAAAF,EAAAxD,UAkBAD,EAAAqD,aAAA,SAAAM,GACA,4CAEAe,KAAAf,IACAjmB,EAAAmK,KAAA,uBAAA8b,EAAA,mCAGA,IAAAgB,GAAAhB,EAAAvJ,MAAA,IACAuJ,GAAAgB,EAAA,EAEA,IAAAC,GAAAC,MAAArP,OAAAmO,EAAA,KACA1D,EAAA2E,EAAAjB,EAAAmB,OAAA,GAAAnB,EACAnlB,EAAAd,EAAAye,IAAA8D,EAAA7F,MAAA,KAAA,SAAA5W,GACA,MAAAgS,QAAAhS,IAGA,QACAohB,QAAAA,EACA3E,QAAAA,EACA0D,MAAAA,EACAoB,SAAAH,EAAAjB,EAAA,GAAA,GACAnlB,MAAAA,EACAwmB,WAAAL,EAAA,GACArB,OAAA,IAAA9kB,EAAA,GAAA,IAAAA,EAAA,GAAAA,EAAA,KAaAwhB,EAAAiE,iBAAA,SAAAhE,EAAA0D,GACAA,EAAAA,GAAA,GAEA,IAAAsB,GAAAjF,EAAAqD,aAAAM,GACAuB,EAAAD,EAAAzmB,MACA2mB,EAAAnF,EAAAqD,aAAApD,GACAmF,EAAAD,EAAA3mB,KAEA,IAAAymB,EAAAL,QAAA,CACA,GAAA,MAAAK,EAAAF,UAAA,MAAA9E,EACA,OAAA,CAGA,IAAA,MAAAgF,EAAAF,SACA,MAAAK,GAAA,KAAAF,EAAA,IAAAE,EAAA,KAAAF,EAAA,IAAAE,EAAA,IAAAF,EAAA,EAGA,IAAA,MAAAD,EAAAF,SACA,MAAAG,GAAA,GAAA,EACAE,EAAA,KAAAF,EAAA,IAAAC,EAAA7B,QAAA2B,EAAA3B,OAGA4B,EAAA,GAAA,EACAE,EAAA,KAAAF,EAAA,IAAAE,EAAA,IAAAF,EAAA,GAGAE,EAAA,KAAAF,EAAA,GAIA,MAAAjF,KAAA0D,GAAA,MAAA1D,QAKAhB,WAAA,KAAAoG,IAAA,SAAAhoB,EAAA1B,EAAAD,GAaA,GAAA4pB,KAEA3pB,GAAAD,QAAA4pB,CAEA,IAAAve,GAAA1J,EAAA,YACAigB,EAAAjgB,EAAA,YACAK,EAAAL,EAAA,aAEA,WAEA,GAAAkoB,GACAC,CAUA,IARA,mBAAAzpB,UACAwpB,EAAAxpB,OAAA0pB,uBAAA1pB,OAAA2pB,6BACA3pB,OAAA4pB,0BAAA5pB,OAAA6pB,wBAEAJ,EAAAzpB,OAAA8pB,sBAAA9pB,OAAA+pB,yBACA/pB,OAAAgqB,4BAAAhqB,OAAAiqB,yBAGAT,EAAA,CACA,GAAAU,EAEAV,GAAA,SAAAhG,GACA0G,EAAAC,WAAA,WACA3G,EAAA7hB,EAAAwd,QACA,IAAA,KAGAsK,EAAA,WACAW,aAAAF,IASAX,EAAArnB,OAAA,SAAAC,GACA,GAAAC,IACAioB,IAAA,GACAxgB,WAAA,EACAygB,gBAAA,GACAC,iBAAA,EACAC,aAAA,EACAC,gBACAC,SAAA,KACAC,cAAA,EACAC,eAAA,KACAC,SAAA,EACAC,SAAA,GAGAC,EAAAppB,EAAAyD,OAAAhD,EAAAD,EAOA,OALA4oB,GAAAriB,MAAAqiB,EAAAriB,OAAA,IAAAqiB,EAAAV,IACAU,EAAAC,SAAAD,EAAAC,UAAA,IAAAD,EAAAV,IACAU,EAAAE,SAAAF,EAAAE,UAAA,KAAA,GAAAF,EAAAV,KACAU,EAAAV,IAAA,IAAAU,EAAAriB,MAEAqiB,GAQAxB,EAAA2B,IAAA,SAAAH,EAAAlc,GAeA,WAbA,KAAAkc,EAAAtJ,qBACA5S,EAAAkc,EACAA,EAAAxB,EAAArnB,UAGA,QAAAwC,GAAAymB,GACAJ,EAAAH,eAAApB,EAAA9kB,GAEAymB,GAAAJ,EAAAD,SACAvB,EAAA6B,KAAAL,EAAAlc,EAAAsc,MAIAJ,GAaAxB,EAAA6B,KAAA,SAAAL,EAAAlc,EAAAsc,GACA,GAEAziB,GAFAoZ,EAAAjT,EAAAiT,OACAjY,EAAA,EAIAsY,GACAtP,UAAAiP,EAAAjP,UAGA7H,GAAAY,QAAAmf,EAAA,aAAA5I,GACAnX,EAAAY,QAAAiD,EAAA,aAAAsT,GAEA4I,EAAAF,QAEAniB,EAAAqiB,EAAAriB,OAGAA,EAAAyiB,EAAAJ,EAAAL,UAAAK,EAAAriB,MACAqiB,EAAAL,SAAAS,EAGAJ,EAAAN,aAAAtiB,KAAAO,GACAqiB,EAAAN,aAAAM,EAAAN,aAAAviB,OAAA6iB,EAAAT,iBACA5hB,EAAAI,KAAArC,IAAAsZ,MAAA,KAAAgL,EAAAN,cAGA/hB,EAAAA,EAAAqiB,EAAAC,SAAAD,EAAAC,SAAAtiB,EACAA,EAAAA,EAAAqiB,EAAAE,SAAAF,EAAAE,SAAAviB,EAGAmB,EAAAnB,EAAAqiB,EAAAriB,MAGAqiB,EAAAriB,MAAAA,GAIA,IAAAqiB,EAAAJ,gBACA9gB,GAAAiY,EAAArd,UAAAsmB,EAAAJ,eAEA,IAAA7I,EAAArd,YACAoF,EAAA,GAEAkhB,EAAAJ,cAAA7I,EAAArd,UACAsmB,EAAAlhB,WAAAA,EAGAkhB,EAAAP,cAAA,EACAW,EAAAJ,EAAAR,kBAAA,MACAQ,EAAAV,IAAAU,EAAAP,eAAAW,EAAAJ,EAAAR,kBAAA,KACAQ,EAAAR,iBAAAY,EACAJ,EAAAP,aAAA,GAGAxf,EAAAY,QAAAmf,EAAA,OAAA5I,GACAnX,EAAAY,QAAAiD,EAAA,OAAAsT,GAGAtT,EAAAqC,MAAAjG,YACA4D,EAAAnK,QACAmK,EAAAnK,OAAA4L,YACAzB,EAAAnK,OAAA4L,WAAAvD,OACA8B,EAAAnK,OAAA4L,WAAAvD,MAAA8B,EAAAnK,QAIAsG,EAAAY,QAAAmf,EAAA,eAAA5I,GACAZ,EAAAtb,OAAA4I,EAAAnG,EAAAmB,GACAmB,EAAAY,QAAAmf,EAAA,cAAA5I,GAIAtT,EAAAnK,QAAAmK,EAAAnK,OAAA4L,aACAtF,EAAAY,QAAAmf,EAAA,eAAA5I,GACAnX,EAAAY,QAAAiD,EAAA,eAAAsT,GAEAtT,EAAAnK,OAAA4L,WAAAY,MAAArC,EAAAnK,QAEAsG,EAAAY,QAAAmf,EAAA,cAAA5I,GACAnX,EAAAY,QAAAiD,EAAA,cAAAsT,IAGAnX,EAAAY,QAAAmf,EAAA,YAAA5I,GACAnX,EAAAY,QAAAiD,EAAA,YAAAsT,IASAoH,EAAA8B,KAAA,SAAAN,GACAtB,EAAAsB,EAAAH,iBASArB,EAAA+B,MAAA,SAAAP,EAAAlc,GACA0a,EAAA2B,IAAAH,EAAAlc,SAqHAqU,WAAA,GAAAqI,WAAA,GAAApI,WAAA,KAAAqI,IAAA,SAAAlqB,EAAA1B,EAAAD,GAOA,GAAA+B,KAEA9B,GAAAD,QAAA+B,CAEA,IAAAsJ,GAAA1J,EAAA,aAEA,WAEAI,EAAA+pB,qBAAA,IACA/pB,EAAAgqB,sBAAA,IACAhqB,EAAAiqB,SAAA,GAQAjqB,EAAAuE,OAAA,SAAAiF,EAAAzG,GAIA,IAAA,GAHAmnB,GAAAnnB,EAAAA,EAAAA,EAGA3D,EAAA,EAAAA,EAAAoK,EAAA/J,OAAAL,IAAA,CACA,GAAAqE,GAAA+F,EAAApK,GACA+C,EAAAsB,EAAA7B,MAAA6B,EAAA7B,MAAA6B,EAAA5B,aAAA4B,EAAA5B,YAGA,IAAA,IAAA4B,EAAAlC,MAAAF,GAAA,IAAAoC,EAAAlC,MAAAD,EAAA,CAKA,GAAA6oB,GAAA/iB,KAAArC,IAAAtB,EAAAtB,OAAAA,GACAioB,EAAAhjB,KAAApC,IAAAvB,EAAAtB,OAAAA,EAGAsB,GAAAtB,OAAAnC,EAAAiqB,SAAAE,GAAA,EAAAnqB,EAAAiqB,UAAAG,EAEA3mB,EAAArB,eAAA,GAAAqB,EAAAtB,OAAAnC,EAAAgqB,sBAAAE,GACAzmB,EAAA4mB,cAAA,EAEA5mB,EAAA4mB,cAAA5mB,EAAArB,gBACApC,EAAA+D,IAAAN,GAAA,IACAA,EAAA4mB,aAAA,IACA5mB,EAAA4mB,cAAA,OAhBArqB,GAAA+D,IAAAN,GAAA,KA2BAzD,EAAA4gB,gBAAA,SAAAvT,EAAAtK,GAIA,IAAA,GAHAmnB,GAAAnnB,EAAAA,EAAAA,EAGA3D,EAAA,EAAAA,EAAAiO,EAAA5N,OAAAL,IAAA,CACA,GAAA6O,GAAAZ,EAAAjO,EAGA,IAAA6O,EAAAC,SAAA,CAGA,GAAAC,GAAAF,EAAAE,UACAZ,EAAAY,EAAAZ,MAAAnJ,OACAoJ,EAAAW,EAAAX,MAAApJ,MAGA,MAAAmJ,EAAArL,YAAAsL,EAAAtL,YAAAqL,EAAAtL,UAAAuL,EAAAvL,YAGAsL,EAAArL,YAAAsL,EAAAtL,YAAA,CACA,GAAAooB,GAAA/c,EAAArL,aAAAqL,EAAAtL,SAAAsL,EAAAC,EACA+c,EAAAD,IAAA/c,EAAAC,EAAAD,GAEA+c,EAAAroB,UAAAsoB,EAAApoB,OAAAnC,EAAA+pB,qBAAAG,GACAlqB,EAAA+D,IAAAumB,GAAA,OAYAtqB,EAAA+D,IAAA,SAAAN,EAAAvB,GACA,GAAAsoB,GAAA/mB,EAAAvB,UAEAA,IACAuB,EAAAvB,YAAA,EACAuB,EAAA4mB,aAAA5mB,EAAArB,eAEAqB,EAAAhC,gBAAAJ,EAAA,EACAoC,EAAAhC,gBAAAH,EAAA,EAEAmC,EAAAQ,aAAA5C,EAAAoC,EAAArC,SAAAC,EACAoC,EAAAQ,aAAA3C,EAAAmC,EAAArC,SAAAE,EAEAmC,EAAAU,UAAAV,EAAAxC,MACAwC,EAAA7B,MAAA,EACA6B,EAAA5B,aAAA,EACA4B,EAAAtB,OAAA,EAEAqoB,GACAlhB,EAAAY,QAAAzG,EAAA,gBAGAA,EAAAvB,YAAA,EACAuB,EAAA4mB,aAAA,EAEAG,GACAlhB,EAAAY,QAAAzG,EAAA,mBAOAge,WAAA,KAAAgJ,IAAA,SAAA7qB,EAAA1B,EAAAD,IACA,SAAAM,GAYA,GAAAuU,KAEA5U,GAAAD,QAAA6U,CAEA,IAAAhT,GAAAF,EAAA,wBACAK,EAAAL,EAAA,kBACAC,EAAAD,EAAA,gBACAM,EAAAN,EAAA,sBACAG,EAAAH,EAAA,sBACA8qB,EAAA,mBAAApsB,QAAAA,OAAA,WAAA,KAAAC,EAAAA,EAAA,OAAA,MAEA,WAcAuU,EAAAS,UAAA,SAAAlS,EAAAC,EAAA6jB,EAAAE,EAAA5kB,GACAA,EAAAA,KAEA,IAAA8S,IACAzS,MAAA,iBACAM,UAAAC,EAAAA,EAAAC,EAAAA,GACAJ,SAAApB,EAAAqB,SAAA,WAAAgkB,EAAA,QAAAA,EAAA,IAAAE,EAAA,QAAAA,GAGA,IAAA5kB,EAAAkqB,QAAA,CACA,GAAAA,GAAAlqB,EAAAkqB,OACApX,GAAArS,SAAApB,EAAA6qB,QAAApX,EAAArS,SAAAypB,EAAAC,OACAD,EAAAE,QAAAF,EAAAG,WAAAH,EAAAI,kBACAtqB,GAAAkqB,QAGA,MAAA9qB,GAAAW,OAAAP,EAAAyD,UAAA6P,EAAA9S,KAgBAqS,EAAAkY,UAAA,SAAA3pB,EAAAC,EAAA6jB,EAAAE,EAAA4F,EAAAxqB,GACAA,EAAAA,MAEAwqB,GAAA,EACA,IAKAC,GALAC,GAAA,EAAA,EAAAF,GAAA9F,EAEAiG,EAAAjG,EAAA8F,EACAI,EAAAD,EAAAD,EACAG,EAAAD,EAAAD,CAIAF,GADAD,EAAA,GACA,WAAAG,EAAA,KAAA/F,EAAA,MAAAgG,EAAA,KAAAhG,EAAA,MAAAiG,EAAA,KAEA,WAAAD,EAAA,KAAAhG,EAAA,MAAAiG,EAAA,IAGA,IAAAN,IACAlqB,MAAA,iBACAM,UAAAC,EAAAA,EAAAC,EAAAA,GACAJ,SAAApB,EAAAqB,SAAA+pB,GAGA,IAAAzqB,EAAAkqB,QAAA,CACA,GAAAA,GAAAlqB,EAAAkqB,OACAK,GAAA9pB,SAAApB,EAAA6qB,QAAAK,EAAA9pB,SAAAypB,EAAAC,OACAD,EAAAE,QAAAF,EAAAG,WAAAH,EAAAI,kBACAtqB,GAAAkqB,QAGA,MAAA9qB,GAAAW,OAAAP,EAAAyD,UAAAsnB,EAAAvqB,KAeAqS,EAAAyY,OAAA,SAAAlqB,EAAAC,EAAAspB,EAAAnqB,EAAA+qB,GACA/qB,EAAAA,KAEA,IAAA8qB,IACAzqB,MAAA,cACAmH,aAAA2iB,EAIAY,GAAAA,GAAA,EACA,IAAAC,GAAArkB,KAAAskB,KAAAtkB,KAAApC,IAAA,GAAAoC,KAAArC,IAAAymB,EAAAZ,IAMA,OAHAa,GAAA,GAAA,IACAA,GAAA,GAEA3Y,EAAA6Y,QAAAtqB,EAAAC,EAAAmqB,EAAAb,EAAA3qB,EAAAyD,UAAA6nB,EAAA9qB,KAeAqS,EAAA6Y,QAAA,SAAAtqB,EAAAC,EAAAmqB,EAAAb,EAAAnqB,GAGA,GAFAA,EAAAA,MAEAgrB,EAAA,EACA,MAAA3Y,GAAAyY,OAAAlqB,EAAAC,EAAAspB,EAAAnqB,EAMA,KAAA,GAJAmrB,GAAA,EAAAxkB,KAAAykB,GAAAJ,EACAjP,EAAA,GACA/T,EAAA,GAAAmjB,EAEAxsB,EAAA,EAAAA,EAAAqsB,EAAArsB,GAAA,EAAA,CACA,GAAA6B,GAAAwH,EAAArJ,EAAAwsB,EACAE,EAAA1kB,KAAAM,IAAAzG,GAAA2pB,EACAmB,EAAA3kB,KAAAO,IAAA1G,GAAA2pB,CAEApO,IAAA,KAAAsP,EAAAE,QAAA,GAAA,IAAAD,EAAAC,QAAA,GAAA,IAGA,GAAAL,IACA7qB,MAAA,eACAM,UAAAC,EAAAA,EAAAC,EAAAA,GACAJ,SAAApB,EAAAqB,SAAAqb,GAGA,IAAA/b,EAAAkqB,QAAA,CACA,GAAAA,GAAAlqB,EAAAkqB,OACAgB,GAAAzqB,SAAApB,EAAA6qB,QAAAgB,EAAAzqB,SAAAypB,EAAAC,OACAD,EAAAE,QAAAF,EAAAG,WAAAH,EAAAI,kBACAtqB,GAAAkqB,QAGA,MAAA9qB,GAAAW,OAAAP,EAAAyD,UAAAioB,EAAAlrB,KAuBAqS,EAAA1M,aAAA,SAAA/E,EAAAC,EAAA2qB,EAAAxrB,EAAAyrB,EAAAC,EAAAC,GACA,GAAA3oB,GACA1C,EACAsrB,EACAnrB,EACA9B,EACAuO,EACAE,EACAye,EACAC,CAkBA,KAhBA9rB,EAAAA,MACAM,KAEAmrB,MAAA,KAAAA,GAAAA,EACAC,MAAA,KAAAA,EAAAA,EAAA,IACAC,MAAA,KAAAA,EAAAA,EAAA,GAEA1B,GACAzqB,EAAAmK,KAAA,wGAIAnK,EAAAmd,QAAA6O,EAAA,MACAA,GAAAA,IAGAK,EAAA,EAAAA,EAAAL,EAAAxsB,OAAA6sB,GAAA,EAIA,GAHAprB,EAAA+qB,EAAAK,IACAD,EAAAvsB,EAAAusB,SAAAnrB,MAEAwpB,EAEAxpB,EADAmrB,EACAvsB,EAAA6G,cAAAzF,GAGApB,EAAA8G,KAAA1F,GAGAH,EAAA0F,MACArF,UAAAC,EAAAA,EAAAC,EAAAA,GACAJ,SAAAA,QAEA,CAEA,GAAAsrB,GAAAtrB,EAAAwd,IAAA,SAAAjS,GACA,OAAAA,EAAApL,EAAAoL,EAAAnL,IAIAopB,GAAA+B,QAAAD,IACA,IAAAL,GACAzB,EAAAgC,sBAAAF,EAAAL,EAGA,IAAAQ,GAAAjC,EAAAkC,YAAAJ,EAGA,KAAAptB,EAAA,EAAAA,EAAAutB,EAAAltB,OAAAL,IAAA,CACA,GAAAytB,GAAAF,EAAAvtB,GAGA0tB,EAAAD,EAAAnO,IAAA,SAAAxd,GACA,OACAG,EAAAH,EAAA,GACAI,EAAAJ,EAAA,KAKAkrB,GAAA,GAAAtsB,EAAA0E,KAAAsoB,GAAAV,GAIArrB,EAAA0F,MACArF,SAAAtB,EAAAuG,OAAAymB,GACA5rB,SAAA4rB,KAOA,IAAA1tB,EAAA,EAAAA,EAAA2B,EAAAtB,OAAAL,IACA2B,EAAA3B,GAAAS,EAAAW,OAAAP,EAAAyD,OAAA3C,EAAA3B,GAAAqB,GAIA,IAAAyrB,EAAA,CAGA,IAAA9sB,EAAA,EAAAA,EAAA2B,EAAAtB,OAAAL,IAAA,CACA,GAAAwO,GAAA7M,EAAA3B,EAEA,KAAAuO,EAAAvO,EAAA,EAAAuO,EAAA5M,EAAAtB,OAAAkO,IAAA,CACA,GAAAG,GAAA/M,EAAA4M,EAEA,IAAAzN,EAAAwN,SAAAE,EAAA5J,OAAA8J,EAAA9J,QAAA,CACA,GAAA+oB,GAAAnf,EAAA1M,SACA8rB,EAAAlf,EAAA5M,QAGA,KAAA2M,EAAA,EAAAA,EAAAD,EAAA1M,SAAAzB,OAAAoO,IACA,IAAA0e,EAAA,EAAAA,EAAAze,EAAA5M,SAAAzB,OAAA8sB,IAAA,CAEA,GAAAU,GAAAltB,EAAAmtB,iBAAAntB,EAAAkH,IAAA8lB,GAAAlf,EAAA,GAAAkf,EAAAttB,QAAAutB,EAAAT,KACAY,EAAAptB,EAAAmtB,iBAAAntB,EAAAkH,IAAA8lB,EAAAlf,GAAAmf,GAAAT,EAAA,GAAAS,EAAAvtB,SAGAwtB,GApBA,GAoBAE,EApBA,IAqBAJ,EAAAlf,GAAAuf,YAAA,EACAJ,EAAAT,GAAAa,YAAA,OAUA,MAAArsB,GAAAtB,OAAA,GAEAgE,EAAA5D,EAAAW,OAAAP,EAAAyD,QAAA3C,MAAAA,EAAAyF,MAAA,IAAA/F,IACAZ,EAAA6F,YAAAjC,GAAApC,EAAAA,EAAAC,EAAAA,IAEAmC,GAEA1C,EAAA,SAMAvB,KAAAf,SAAA,KAAAF,EAAAA,EAAA,mBAAAC,MAAAA,KAAA,mBAAAF,QAAAA,aACA6iB,eAAA,EAAAtY,iBAAA,GAAAG,qBAAA,GAAAC,qBAAA,GAAAC,uBAAA,KAAAmkB,IAAA,SAAAztB,EAAA1B,EAAAD,GAUA,GAAAqvB,KAEApvB,GAAAD,QAAAqvB,CAEA,IAAAjkB,GAAAzJ,EAAA,qBACA8Y,EAAA9Y,EAAA,4BACAK,EAAAL,EAAA,kBACAC,EAAAD,EAAA,gBACAkT,EAAAlT,EAAA,aAEA,WAeA0tB,EAAAC,MAAA,SAAAzB,EAAAC,EAAAyB,EAAAC,EAAAC,EAAAC,EAAA7L,GAOA,IAAA,GAHA8L,GAHAL,EAAAlkB,EAAA7I,QAAAM,MAAA,UACAO,EAAAyqB,EACAxqB,EAAAyqB,EAEA3sB,EAAA,EAEAiQ,EAAA,EAAAA,EAAAoe,EAAApe,IAAA,CAGA,IAAA,GAFAwe,GAAA,EAEA/c,EAAA,EAAAA,EAAA0c,EAAA1c,IAAA,CACA,GAAArN,GAAAqe,EAAAzgB,EAAAC,EAAAwP,EAAAzB,EAAAue,EAAAxuB,EAEA,IAAAqE,EAAA,CACA,GAAAqqB,GAAArqB,EAAAO,OAAAgB,IAAA1D,EAAAmC,EAAAO,OAAAe,IAAAzD,EACAysB,EAAAtqB,EAAAO,OAAAgB,IAAA3D,EAAAoC,EAAAO,OAAAe,IAAA1D,CAEAysB,GAAAD,IACAA,EAAAC,GAEAjuB,EAAAyG,UAAA7C,GAAApC,EAAA,GAAA0sB,EAAAzsB,EAAA,GAAAwsB,IAEAzsB,EAAAoC,EAAAO,OAAAgB,IAAA3D,EAAAqsB,EAEArkB,EAAAgB,QAAAkjB,EAAA9pB,GAEAmqB,EAAAnqB,EACArE,GAAA,MAEAiC,IAAAqsB,EAIApsB,GAAAusB,EAAAF,EACAtsB,EAAAyqB,EAGA,MAAAyB,IAcAD,EAAAlO,MAAA,SAAAxV,EAAAokB,EAAAC,EAAAC,EAAAC,EAAA1tB,GAGA,IAAA,GAFA+I,GAAAI,EAAAJ,OAEApK,EAAA,EAAAA,EAAAoK,EAAA/J,OAAAL,IAAA,CACA,GAAAmO,GAAA/D,EAAApK,EAAA,GACAoO,EAAAhE,EAAApK,GACAgvB,EAAA7gB,EAAAvJ,OAAAgB,IAAA1D,EAAAiM,EAAAvJ,OAAAe,IAAAzD,EACA+sB,EAAA9gB,EAAAvJ,OAAAgB,IAAA3D,EAAAkM,EAAAvJ,OAAAe,IAAA1D,EACAitB,EAAA9gB,EAAAxJ,OAAAgB,IAAA1D,EAAAkM,EAAAxJ,OAAAe,IAAAzD,EACAitB,EAAA/gB,EAAAxJ,OAAAgB,IAAA3D,EAAAmM,EAAAxJ,OAAAe,IAAA1D,EAEAX,GACA6M,MAAAA,EACAuL,QAAAzX,EAAAgtB,EAAAL,EAAA1sB,EAAA8sB,EAAAH,GACAzgB,MAAAA,EACAuL,QAAA1X,EAAAktB,EAAAL,EAAA5sB,EAAAgtB,EAAAH,IAGA3jB,EAAAvK,EAAAyD,OAAAhD,EAAAD,EAEA4I,GAAAiB,cAAAV,EAAA8O,EAAAlY,OAAAgK,IAKA,MAFAZ,GAAA9I,OAAA,SAEA8I,GAaA0jB,EAAAkB,KAAA,SAAA5kB,EAAA4jB,EAAAC,EAAAgB,EAAAhuB,GACA,GACA4O,GACAD,EACA7B,EACAC,EACAkhB,EALAllB,EAAAI,EAAAJ,MAOA,KAAA6F,EAAA,EAAAA,EAAAoe,EAAApe,IAAA,CACA,IAAAD,EAAA,EAAAA,EAAAoe,EAAApe,IACA7B,EAAA/D,EAAA4F,EAAA,EAAAC,EAAAme,GACAhgB,EAAAhE,EAAA4F,EAAAC,EAAAme,GACAnkB,EAAAiB,cAAAV,EAAA8O,EAAAlY,OAAAP,EAAAyD,QAAA6J,MAAAA,EAAAC,MAAAA,GAAA/M,IAGA,IAAA4O,EAAA,EACA,IAAAD,EAAA,EAAAA,EAAAoe,EAAApe,IACA7B,EAAA/D,EAAA4F,GAAAC,EAAA,GAAAme,GACAhgB,EAAAhE,EAAA4F,EAAAC,EAAAme,GACAnkB,EAAAiB,cAAAV,EAAA8O,EAAAlY,OAAAP,EAAAyD,QAAA6J,MAAAA,EAAAC,MAAAA,GAAA/M,KAEAguB,GAAArf,EAAA,IACAsf,EAAAllB,EAAA4F,EAAA,GAAAC,EAAA,GAAAme,GACAnkB,EAAAiB,cAAAV,EAAA8O,EAAAlY,OAAAP,EAAAyD,QAAA6J,MAAAmhB,EAAAlhB,MAAAA,GAAA/M,MAGAguB,GAAArf,EAAAoe,EAAA,IACAkB,EAAAllB,EAAA4F,EAAA,GAAAC,EAAA,GAAAme,GACAnkB,EAAAiB,cAAAV,EAAA8O,EAAAlY,OAAAP,EAAAyD,QAAA6J,MAAAmhB,EAAAlhB,MAAAA,GAAA/M,MAQA,MAFAmJ,GAAA9I,OAAA,QAEA8I,GAgBA0jB,EAAAqB,QAAA,SAAA7C,EAAAC,EAAAyB,EAAAC,EAAAC,EAAAC,EAAA7L,GACA,MAAAwL,GAAAC,MAAAzB,EAAAC,EAAAyB,EAAAC,EAAAC,EAAAC,EAAA,SAAAtsB,EAAAC,EAAAwP,EAAAzB,EAAAue,EAAAxuB,GACA,GAAAwvB,GAAAxnB,KAAArC,IAAA0oB,EAAArmB,KAAAskB,KAAA8B,EAAA,IACAqB,EAAAjB,EAAAA,EAAA5pB,OAAAgB,IAAA3D,EAAAusB,EAAA5pB,OAAAe,IAAA1D,EAAA,CAEA,MAAAgO,EAAAuf,GAAA,CAIAvf,EAAAuf,EAAAvf,CAEA,IAAAua,GAAAva,EACAqN,EAAA8Q,EAAA,EAAAne,CAEA,MAAAyB,EAAA8Y,GAAA9Y,EAAA4L,GAAA,CAIA,IAAAtd,GACAS,EAAAyG,UAAAsnB,GAAAvsB,GAAAyP,GAAA0c,EAAA,GAAA,EAAA,GAAA,IAAAqB,EAAAvtB,EAAA,GAKA,OAAAwgB,GAAAgK,GAFA8B,EAAA9c,EAAA+d,EAAA,GAEA/d,EAAA4c,EAAApsB,EAAAwP,EAAAzB,EAAAue,EAAAxuB,QAcAkuB,EAAAwB,cAAA,SAAAhD,EAAAC,EAAAlG,EAAAkJ,EAAAtvB,GAGA,IAAA,GAFAqvB,GAAAzlB,EAAA7I,QAAAM,MAAA,mBAEA1B,EAAA,EAAAA,EAAAymB,EAAAzmB,IAAA,CACA,GACAmsB,GAAAzY,EAAAyY,OAAAO,EAAA1sB,GADA,IACA2vB,GAAAhD,EAAAtsB,EAAAsvB,GACArqB,QAAAyB,EAAAA,EAAA7D,YAAA,EAAAC,SAAA,EAAAE,YAAA,KAAAK,KAAA,IACA0H,EAAAkO,EAAAlY,QAAAsY,QAAAzX,EAAAyqB,EAAA1sB,GAHA,IAGA2vB,GAAAztB,EAAAyqB,GAAAve,MAAA+d,GAEAliB,GAAAgB,QAAAykB,EAAAvD,GACAliB,EAAAiB,cAAAwkB,EAAAtkB,GAGA,MAAAskB,IAaAxB,EAAA0B,IAAA,SAAAlD,EAAAC,EAAA5G,EAAAE,EAAA4J,GACA,GAAApsB,GAAAhD,EAAA+D,WAAA,GAEAsrB,EAAA,IAAA/J,EADA,GAEAgK,EAAA,GAAAhK,EAFA,GAKA6J,EAAA3lB,EAAA7I,QAAAM,MAAA,QACA2C,EAAAqP,EAAAS,UAAAuY,EAAAC,EAAA5G,EAAAE,GACA3iB,iBACAG,MAAAA,GAEA8nB,SACAC,OAAA,GAAAvF,GAEAhjB,QAAA,OAGA+sB,EAAAtc,EAAAyY,OAAAO,EAAAoD,EAAAnD,EAbA,EAaAkD,GACAvsB,iBACAG,MAAAA,GAEAN,SAAA,KAGA8sB,EAAAvc,EAAAyY,OAAAO,EAAAqD,EAAApD,EApBA,EAoBAkD,GACAvsB,iBACAG,MAAAA,GAEAN,SAAA,KAGA+sB,EAAA5W,EAAAlY,QACAgN,MAAA/J,EACAsV,QAAA1X,EAAA6tB,EAAA5tB,EA7BA,GA8BAiM,MAAA6hB,EACAlW,UAAA,EACAzZ,OAAA,IAGA8vB,EAAA7W,EAAAlY,QACAgN,MAAA/J,EACAsV,QAAA1X,EAAA8tB,EAAA7tB,EArCA,GAsCAiM,MAAA8hB,EACAnW,UAAA,EACAzZ,OAAA,GASA,OANA4J,GAAAgB,QAAA2kB,EAAAvrB,GACA4F,EAAAgB,QAAA2kB,EAAAI,GACA/lB,EAAAgB,QAAA2kB,EAAAK,GACAhmB,EAAAiB,cAAA0kB,EAAAM,GACAjmB,EAAAiB,cAAA0kB,EAAAO,GAEAP,GAkBA1B,EAAAkC,SAAA,SAAA1D,EAAAC,EAAAyB,EAAAC,EAAAC,EAAAC,EAAAc,EAAAgB,EAAAC,EAAAC,GACAD,EAAAzvB,EAAAyD,QAAAgB,QAAAyB,EAAAA,GAAAupB,GACAC,EAAA1vB,EAAAyD,QAAAwV,UAAA,GAAAlW,QAAAnC,KAAA,OAAA0Y,SAAA,IAAAoW,EAEA,IAAAH,GAAAlC,EAAAC,MAAAzB,EAAAC,EAAAyB,EAAAC,EAAAC,EAAAC,EAAA,SAAAtsB,EAAAC,GACA,MAAAwR,GAAAyY,OAAAlqB,EAAAC,EAAAmuB,EAAAC,IAOA,OAJApC,GAAAkB,KAAAgB,EAAAhC,EAAAC,EAAAgB,EAAAkB,GAEAH,EAAA1uB,MAAA,YAEA0uB,QAKArO,eAAA,EAAA7F,oBAAA,EAAAjP,2BAAA,GAAAxD,iBAAA,GAAA+mB,WAAA,KAAAC,IAAA,SAAAjwB,EAAA1B,EAAAD,GAOA,GAAAkC,KAEAjC,GAAAD,QAAAkC,CAEA,IAAAJ,GAAAH,EAAA,sBACAK,EAAAL,EAAA,mBAEA,WAQAO,EAAAiG,aAAA,SAAAlF,GAIA,IAAA,GAHAoD,MAGAlF,EAAA,EAAAA,EAAA8B,EAAAzB,OAAAL,IAAA,CACA,GAAAuO,IAAAvO,EAAA,GAAA8B,EAAAzB,OACA6U,EAAAvU,EAAA+vB,WACAzuB,EAAAH,EAAAyM,GAAArM,EAAAJ,EAAA9B,GAAAkC,EACAA,EAAAJ,EAAA9B,GAAAiC,EAAAH,EAAAyM,GAAAtM,IAEA0uB,EAAA,IAAAzb,EAAAhT,EAAA6E,EAAAA,EAAAmO,EAAAjT,EAAAiT,EAAAhT,CAGAyuB,GAAAA,EAAA/D,QAAA,GAAApgB,WACAtH,EAAAyrB,GAAAzb,EAGA,MAAArU,GAAAsc,OAAAjY,IASAnE,EAAAkE,OAAA,SAAAC,EAAArD,GACA,GAAA,IAAAA,EAMA,IAAA,GAHAyG,GAAAN,KAAAM,IAAAzG,GACA0G,EAAAP,KAAAO,IAAA1G,GAEA7B,EAAA,EAAAA,EAAAkF,EAAA7E,OAAAL,IAAA,CACA,GACA0sB,GADAtU,EAAAlT,EAAAlF,EAEA0sB,GAAAtU,EAAAnW,EAAAqG,EAAA8P,EAAAlW,EAAAqG,EACA6P,EAAAlW,EAAAkW,EAAAnW,EAAAsG,EAAA6P,EAAAlW,EAAAoG,EACA8P,EAAAnW,EAAAyqB,SAMAjjB,iBAAA,GAAAI,qBAAA,KAAA+mB,IAAA,SAAApwB,EAAA1B,EAAAD,GAOA,GAAAiC,KAEAhC,GAAAD,QAAAiC,EAEA,WAQAA,EAAAM,OAAA,SAAAU,GACA,GAAA8C,IACAe,KAAA1D,EAAA,EAAAC,EAAA,GACA0D,KAAA3D,EAAA,EAAAC,EAAA,GAMA,OAHAJ,IACAhB,EAAAqE,OAAAP,EAAA9C,GAEA8C,GAUA9D,EAAAqE,OAAA,SAAAP,EAAA9C,EAAAY,GACAkC,EAAAe,IAAA1D,EAAA8E,EAAAA,EACAnC,EAAAgB,IAAA3D,GAAA8E,EAAAA,EACAnC,EAAAe,IAAAzD,EAAA6E,EAAAA,EACAnC,EAAAgB,IAAA1D,GAAA6E,EAAAA,CAEA,KAAA,GAAA/G,GAAA,EAAAA,EAAA8B,EAAAzB,OAAAL,IAAA,CACA,GAAAqN,GAAAvL,EAAA9B,EACAqN,GAAApL,EAAA2C,EAAAgB,IAAA3D,IAAA2C,EAAAgB,IAAA3D,EAAAoL,EAAApL,GACAoL,EAAApL,EAAA2C,EAAAe,IAAA1D,IAAA2C,EAAAe,IAAA1D,EAAAoL,EAAApL,GACAoL,EAAAnL,EAAA0C,EAAAgB,IAAA1D,IAAA0C,EAAAgB,IAAA1D,EAAAmL,EAAAnL,GACAmL,EAAAnL,EAAA0C,EAAAe,IAAAzD,IAAA0C,EAAAe,IAAAzD,EAAAmL,EAAAnL,GAGAQ,IACAA,EAAAT,EAAA,EACA2C,EAAAgB,IAAA3D,GAAAS,EAAAT,EAEA2C,EAAAe,IAAA1D,GAAAS,EAAAT,EAGAS,EAAAR,EAAA,EACA0C,EAAAgB,IAAA1D,GAAAQ,EAAAR,EAEA0C,EAAAe,IAAAzD,GAAAQ,EAAAR,IAYApB,EAAAwT,SAAA,SAAA1P,EAAAyD,GACA,MAAAA,GAAApG,GAAA2C,EAAAe,IAAA1D,GAAAoG,EAAApG,GAAA2C,EAAAgB,IAAA3D,GACAoG,EAAAnG,GAAA0C,EAAAe,IAAAzD,GAAAmG,EAAAnG,GAAA0C,EAAAgB,IAAA1D,GAUApB,EAAAwN,SAAA,SAAAuiB,EAAAC,GACA,MAAAD,GAAAlrB,IAAA1D,GAAA6uB,EAAAlrB,IAAA3D,GAAA4uB,EAAAjrB,IAAA3D,GAAA6uB,EAAAnrB,IAAA1D,GACA4uB,EAAAjrB,IAAA1D,GAAA4uB,EAAAnrB,IAAAzD,GAAA2uB,EAAAlrB,IAAAzD,GAAA4uB,EAAAlrB,IAAA1D,GASApB,EAAAoG,UAAA,SAAAtC,EAAAmsB,GACAnsB,EAAAe,IAAA1D,GAAA8uB,EAAA9uB,EACA2C,EAAAgB,IAAA3D,GAAA8uB,EAAA9uB,EACA2C,EAAAe,IAAAzD,GAAA6uB,EAAA7uB,EACA0C,EAAAgB,IAAA1D,GAAA6uB,EAAA7uB,GASApB,EAAAkwB,MAAA,SAAApsB,EAAA5C,GACA,GAAAivB,GAAArsB,EAAAgB,IAAA3D,EAAA2C,EAAAe,IAAA1D,EACAivB,EAAAtsB,EAAAgB,IAAA1D,EAAA0C,EAAAe,IAAAzD,CAEA0C,GAAAe,IAAA1D,EAAAD,EAAAC,EACA2C,EAAAgB,IAAA3D,EAAAD,EAAAC,EAAAgvB,EACArsB,EAAAe,IAAAzD,EAAAF,EAAAE,EACA0C,EAAAgB,IAAA1D,EAAAF,EAAAE,EAAAgvB,WAKAC,IAAA,SAAA3wB,EAAA1B,EAAAD,GAWA,GAAAuyB,KAEAtyB,GAAAD,QAAAuyB,CAEA5wB,GAAA,uBAEA,WAYA4wB,EAAAC,eAAA,SAAAjU,EAAAkU,GAEA,GAAAtxB,GAAAuxB,EAAA7pB,EAAAW,EAAAmpB,EAAAC,EACAC,EAAAC,EACAC,EAAAC,EACAC,EAAAC,EADAC,KACA3xB,EAAA,EAAA4B,EAAA,EAAAC,EAAA,CAEAovB,GAAAA,GAAA,EAEA,IAAAW,GAAA,SAAAC,EAAAC,EAAAC,GAEA,GAAAC,GAAAD,EAAA,GAAA,GAAAA,EAAA,CAGA,KAAAR,GAAAM,GAAAN,EAAA3vB,GAAAkwB,GAAAP,EAAA1vB,EAAA,CACA0vB,GAAAS,GACAP,EAAAF,EAAA3vB,EACA8vB,EAAAH,EAAA1vB,IAEA4vB,EAAA,EACAC,EAAA,EAGA,IAAA1pB,IACApG,EAAA6vB,EAAAI,EACAhwB,EAAA6vB,EAAAI,IAIAE,GAAAT,IACAA,EAAAvpB,GAGA2pB,EAAA3qB,KAAAgB,GAEApG,EAAA6vB,EAAAI,EACAhwB,EAAA6vB,EAAAI,IAIAG,EAAA,SAAAd,GACA,GAAAe,GAAAf,EAAAgB,oBAAAC,aAGA,IAAA,MAAAF,EAAA,CAIA,OAAAA,GAEA,IAAA,IACA,IAAA,IACA,IAAA,IACA,IAAA,IACA,IAAA,IACA,IAAA,IACAtwB,EAAAuvB,EAAAvvB,EACAC,EAAAsvB,EAAAtvB,CACA,MACA,KAAA,IACAD,EAAAuvB,EAAAvvB,CACA,MACA,KAAA,IACAC,EAAAsvB,EAAAtvB,EAIA+vB,EAAAhwB,EAAAC,EAAAsvB,EAAAY,cAWA,KAPAM,EAAAtV,GAGA1V,EAAA0V,EAAAuV,iBAGAlB,KACAzxB,EAAA,EAAAA,EAAAod,EAAAwV,YAAAC,cAAA7yB,GAAA,EACAyxB,EAAApqB,KAAA+V,EAAAwV,YAAAE,QAAA9yB,GAKA,KAHA0xB,EAAAD,EAAAnqB,SAGAjH,EAAAqH,GAAA,CAMA,GAJAmqB,EAAAzU,EAAA2V,mBAAA1yB,IACAmxB,EAAAC,EAAAI,KAGAF,EAAA,CACA,KAAAD,EAAArxB,QAAAqxB,EAAA,IAAAF,GACAc,EAAAZ,EAAAV,QAEAW,GAAAH,EAKA,OAAAA,EAAAgB,oBAAAC,eAEA,IAAA,IACA,IAAA,IACA,IAAA,IACA,IAAA,IACA,IAAA,IACApqB,EAAA+U,EAAA4V,iBAAA3yB,GACA4xB,EAAA5pB,EAAApG,EAAAoG,EAAAnG,EAAA,GAMA7B,GAAAixB,EAIA,IAAAtxB,EAAA,EAAAuxB,EAAAG,EAAArxB,OAAAL,EAAAuxB,IAAAvxB,EACAsyB,EAAAZ,EAAA1xB,GAEA,OAAAgyB,GAGA,IAAAU,GAAA,SAAAtV,GAQA,IAAA,GAHA6V,GAAAC,EAAAlH,EAAAmH,EAAAlH,EAAAmH,EAAAC,EAAAjW,EAAAwV,YACA3wB,EAAA,EAAAC,EAAA,EAAAoxB,EAAAD,EAAAR,cAEA7yB,EAAA,EAAAA,EAAAszB,IAAAtzB,EAAA,CACA,GAAAuzB,GAAAF,EAAAP,QAAA9yB,GACAuyB,EAAAgB,EAAAf,mBAEA,IAAA,cAAA3K,KAAA0K,GACA,KAAAgB,KAAAtxB,EAAAsxB,EAAAtxB,GACA,KAAAsxB,KAAArxB,EAAAqxB,EAAArxB,OASA,QAPA,MAAAqxB,KAAAvH,EAAA/pB,EAAAsxB,EAAAvH,IACA,MAAAuH,KAAAtH,EAAAhqB,EAAAsxB,EAAAtH,IACA,MAAAsH,KAAAJ,EAAAjxB,EAAAqxB,EAAAJ,IACA,MAAAI,KAAAH,EAAAlxB,EAAAqxB,EAAAH,IACA,KAAAG,KAAAtxB,GAAAsxB,EAAAtxB,GACA,KAAAsxB,KAAArxB,GAAAqxB,EAAArxB,GAEAqwB,GAEA,IAAA,IACAc,EAAAG,YAAApW,EAAAqW,0BAAAxxB,EAAAC,GAAAlC,EACA,MACA,KAAA,IACAqzB,EAAAG,YAAApW,EAAAsW,0BAAAzxB,EAAAC,GAAAlC,EACA,MACA,KAAA,IACAqzB,EAAAG,YAAApW,EAAAuW,oCAAA1xB,GAAAjC,EACA,MACA,KAAA,IACAqzB,EAAAG,YAAApW,EAAAwW,kCAAA1xB,GAAAlC,EACA,MACA,KAAA,IACAqzB,EAAAG,YAAApW,EAAAyW,gCAAA5xB,EAAAC,EAAA8pB,EAAAmH,EAAAlH,EAAAmH,GAAApzB,EACA,MACA,KAAA,IACAqzB,EAAAG,YAAApW,EAAA0W,sCAAA7xB,EAAAC,EAAA+pB,EAAAmH,GAAApzB,EACA,MACA,KAAA,IACAqzB,EAAAG,YAAApW,EAAA2W,oCAAA9xB,EAAAC,EAAA8pB,EAAAmH,GAAAnzB,EACA,MACA,KAAA,IACAqzB,EAAAG,YAAApW,EAAA4W,0CAAA/xB,EAAAC,GAAAlC,EACA,MACA,KAAA,IACAqzB,EAAAG,YAAApW,EAAA6W,uBAAAhyB,EAAAC,EAAAqxB,EAAAW,GAAAX,EAAAY,GAAAZ,EAAA1xB,MAAA0xB,EAAAa,aAAAb,EAAAc,WAAAr0B,EACA,MACA,KAAA,IACA,IAAA,IACAiC,EAAAgxB,EACA/wB,EAAAgxB,EAMA,KAAAX,GAAA,KAAAA,IACAU,EAAAhxB,EACAixB,EAAAhxB,UAMA0H,qBAAA,KAAA0qB,IAAA,SAAA9zB,EAAA1B,EAAAD,GAaA,GAAA8B,KAEA7B,GAAAD,QAAA8B,EAEA,WASAA,EAAAS,OAAA,SAAAa,EAAAC,GACA,OAAAD,EAAAA,GAAA,EAAAC,EAAAA,GAAA,IASAvB,EAAAmE,MAAA,SAAAisB,GACA,OAAA9uB,EAAA8uB,EAAA9uB,EAAAC,EAAA6uB,EAAA7uB,IASAvB,EAAAoH,UAAA,SAAAgpB,GACA,MAAA/oB,MAAAusB,KAAAxD,EAAA9uB,EAAA8uB,EAAA9uB,EAAA8uB,EAAA7uB,EAAA6uB,EAAA7uB,IASAvB,EAAAmtB,iBAAA,SAAAiD,GACA,MAAAA,GAAA9uB,EAAA8uB,EAAA9uB,EAAA8uB,EAAA7uB,EAAA6uB,EAAA7uB,GAWAvB,EAAAsE,OAAA,SAAA8rB,EAAAlvB,EAAA2yB,GACA,GAAAlsB,GAAAN,KAAAM,IAAAzG,GAAA0G,EAAAP,KAAAO,IAAA1G,EACA2yB,KAAAA,KACA,IAAAvyB,GAAA8uB,EAAA9uB,EAAAqG,EAAAyoB,EAAA7uB,EAAAqG,CAGA,OAFAisB,GAAAtyB,EAAA6uB,EAAA9uB,EAAAsG,EAAAwoB,EAAA7uB,EAAAoG,EACAksB,EAAAvyB,EAAAA,EACAuyB,GAYA7zB,EAAAmH,YAAA,SAAAipB,EAAAlvB,EAAAwG,EAAAmsB,GACA,GAAAlsB,GAAAN,KAAAM,IAAAzG,GAAA0G,EAAAP,KAAAO,IAAA1G,EACA2yB,KAAAA,KACA,IAAAvyB,GAAAoG,EAAApG,IAAA8uB,EAAA9uB,EAAAoG,EAAApG,GAAAqG,GAAAyoB,EAAA7uB,EAAAmG,EAAAnG,GAAAqG,EAGA,OAFAisB,GAAAtyB,EAAAmG,EAAAnG,IAAA6uB,EAAA9uB,EAAAoG,EAAApG,GAAAsG,GAAAwoB,EAAA7uB,EAAAmG,EAAAnG,GAAAoG,GACAksB,EAAAvyB,EAAAA,EACAuyB,GASA7zB,EAAA+vB,UAAA,SAAAK,GACA,GAAAhpB,GAAApH,EAAAoH,UAAAgpB,EACA,OAAA,KAAAhpB,GACA9F,EAAA,EAAAC,EAAA,IACAD,EAAA8uB,EAAA9uB,EAAA8F,EAAA7F,EAAA6uB,EAAA7uB,EAAA6F,IAUApH,EAAAgV,IAAA,SAAA8e,EAAAC,GACA,MAAAD,GAAAxyB,EAAAyyB,EAAAzyB,EAAAwyB,EAAAvyB,EAAAwyB,EAAAxyB,GAUAvB,EAAAsV,MAAA,SAAAwe,EAAAC,GACA,MAAAD,GAAAxyB,EAAAyyB,EAAAxyB,EAAAuyB,EAAAvyB,EAAAwyB,EAAAzyB,GAWAtB,EAAAg0B,OAAA,SAAAF,EAAAC,EAAAE,GACA,OAAAF,EAAAzyB,EAAAwyB,EAAAxyB,IAAA2yB,EAAA1yB,EAAAuyB,EAAAvyB,IAAAwyB,EAAAxyB,EAAAuyB,EAAAvyB,IAAA0yB,EAAA3yB,EAAAwyB,EAAAxyB,IAWAtB,EAAAwH,IAAA,SAAAssB,EAAAC,EAAAF,GAIA,MAHAA,KAAAA,MACAA,EAAAvyB,EAAAwyB,EAAAxyB,EAAAyyB,EAAAzyB,EACAuyB,EAAAtyB,EAAAuyB,EAAAvyB,EAAAwyB,EAAAxyB,EACAsyB,GAWA7zB,EAAAkH,IAAA,SAAA4sB,EAAAC,EAAAF,GAIA,MAHAA,KAAAA,MACAA,EAAAvyB,EAAAwyB,EAAAxyB,EAAAyyB,EAAAzyB,EACAuyB,EAAAtyB,EAAAuyB,EAAAvyB,EAAAwyB,EAAAxyB,EACAsyB,GAUA7zB,EAAA4I,KAAA,SAAAwnB,EAAA8D,GACA,OAAA5yB,EAAA8uB,EAAA9uB,EAAA4yB,EAAA3yB,EAAA6uB,EAAA7uB,EAAA2yB,IAUAl0B,EAAA6I,IAAA,SAAAunB,EAAA8D,GACA,OAAA5yB,EAAA8uB,EAAA9uB,EAAA4yB,EAAA3yB,EAAA6uB,EAAA7uB,EAAA2yB,IAUAl0B,EAAA6V,KAAA,SAAAua,EAAA+D,GAEA,MADAA,IAAA,IAAAA,GAAA,EAAA,GACA7yB,EAAA6yB,GAAA/D,EAAA7uB,EAAAA,EAAA4yB,EAAA/D,EAAA9uB,IASAtB,EAAA6X,IAAA,SAAAuY,GACA,OAAA9uB,GAAA8uB,EAAA9uB,EAAAC,GAAA6uB,EAAA7uB,IAUAvB,EAAAkB,MAAA,SAAA4yB,EAAAC,GACA,MAAA1sB,MAAA+sB,MAAAL,EAAAxyB,EAAAuyB,EAAAvyB,EAAAwyB,EAAAzyB,EAAAwyB,EAAAxyB,IASAtB,EAAA2U,OACA3U,EAAAS,SAAAT,EAAAS,SACAT,EAAAS,SAAAT,EAAAS,SACAT,EAAAS,SAAAT,EAAAS,kBAIA4zB,IAAA,SAAAx0B,EAAA1B,EAAAD,GAWA,GAAA6B,KAEA5B,GAAAD,QAAA6B,CAEA,IAAAC,GAAAH,EAAA,sBACAK,EAAAL,EAAA,mBAEA,WAmBAE,EAAAU,OAAA,SAAA4wB,EAAA3tB,GAGA,IAAA,GAFAvC,MAEA9B,EAAA,EAAAA,EAAAgyB,EAAA3xB,OAAAL,IAAA,CACA,GAAAqI,GAAA2pB,EAAAhyB,GACAqN,GACApL,EAAAoG,EAAApG,EACAC,EAAAmG,EAAAnG,EACAsL,MAAAxN,EACAqE,KAAAA,EACA2pB,YAAA,EAGAlsB,GAAAuF,KAAAgG,GAGA,MAAAvL,IAYApB,EAAAqB,SAAA,SAAAqb,EAAA/Y,GACA,GAAA4wB,GAAA,yCACAjD,IAMA,OAJA5U,GAAAuB,QAAAsW,EAAA,SAAAC,EAAAjzB,EAAAC,GACA8vB,EAAA3qB,MAAApF,EAAAkzB,WAAAlzB,GAAAC,EAAAizB,WAAAjzB,OAGAxB,EAAAU,OAAA4wB,EAAA3tB,IASA3D,EAAAuG,OAAA,SAAAnF,GAOA,IAAA,GAJAmU,GACA2H,EACArP,EAJAnJ,EAAA1E,EAAA0E,KAAAtD,GAAA,GACAmF,GAAAhF,EAAA,EAAAC,EAAA,GAKAlC,EAAA,EAAAA,EAAA8B,EAAAzB,OAAAL,IACAuO,GAAAvO,EAAA,GAAA8B,EAAAzB,OACA4V,EAAAtV,EAAAsV,MAAAnU,EAAA9B,GAAA8B,EAAAyM,IACAqP,EAAAjd,EAAA4I,KAAA5I,EAAAwH,IAAArG,EAAA9B,GAAA8B,EAAAyM,IAAA0H,GACAhP,EAAAtG,EAAAwH,IAAAlB,EAAA2W,EAGA,OAAAjd,GAAA6I,IAAAvC,EAAA,EAAA7B,IASA1E,EAAA00B,KAAA,SAAAtzB,GAGA,IAAA,GAFAuzB,IAAApzB,EAAA,EAAAC,EAAA,GAEAlC,EAAA,EAAAA,EAAA8B,EAAAzB,OAAAL,IACAq1B,EAAApzB,GAAAH,EAAA9B,GAAAiC,EACAozB,EAAAnzB,GAAAJ,EAAA9B,GAAAkC,CAGA,OAAAvB,GAAA6I,IAAA6rB,EAAAvzB,EAAAzB,SAUAK,EAAA0E,KAAA,SAAAtD,EAAAwzB,GAIA,IAAA,GAHAlwB,GAAA,EACAmJ,EAAAzM,EAAAzB,OAAA,EAEAL,EAAA,EAAAA,EAAA8B,EAAAzB,OAAAL,IACAoF,IAAAtD,EAAAyM,GAAAtM,EAAAH,EAAA9B,GAAAiC,IAAAH,EAAAyM,GAAArM,EAAAJ,EAAA9B,GAAAkC,GACAqM,EAAAvO,CAGA,OAAAs1B,GACAlwB,EAAA,EAEA4C,KAAAC,IAAA7C,GAAA,GAUA1E,EAAA4E,QAAA,SAAAxD,EAAAuD,GASA,IAAA,GALA4Q,GACA1H,EAJAgnB,EAAA,EACAC,EAAA,EACAtI,EAAAprB,EAMArC,EAAA,EAAAA,EAAAytB,EAAA7sB,OAAAZ,IACA8O,GAAA9O,EAAA,GAAAytB,EAAA7sB,OACA4V,EAAAjO,KAAAC,IAAAtH,EAAAsV,MAAAiX,EAAA3e,GAAA2e,EAAAztB,KACA81B,GAAAtf,GAAAtV,EAAAgV,IAAAuX,EAAA3e,GAAA2e,EAAA3e,IAAA5N,EAAAgV,IAAAuX,EAAA3e,GAAA2e,EAAAztB,IAAAkB,EAAAgV,IAAAuX,EAAAztB,GAAAytB,EAAAztB,KACA+1B,GAAAvf,CAGA,OAAA5Q,GAAA,GAAAkwB,EAAAC,IAUA90B,EAAAwG,UAAA,SAAApF,EAAAivB,EAAA8D,GACA,GAAA70B,EACA,IAAA60B,EACA,IAAA70B,EAAA,EAAAA,EAAA8B,EAAAzB,OAAAL,IACA8B,EAAA9B,GAAAiC,GAAA8uB,EAAA9uB,EAAA4yB,EACA/yB,EAAA9B,GAAAkC,GAAA6uB,EAAA7uB,EAAA2yB,MAGA,KAAA70B,EAAA,EAAAA,EAAA8B,EAAAzB,OAAAL,IACA8B,EAAA9B,GAAAiC,GAAA8uB,EAAA9uB,EACAH,EAAA9B,GAAAkC,GAAA6uB,EAAA7uB,CAIA,OAAAJ,IAUApB,EAAAuE,OAAA,SAAAnD,EAAAD,EAAAwG,GACA,GAAA,IAAAxG,EAAA,CAMA,IAAA,GAHAyG,GAAAN,KAAAM,IAAAzG,GACA0G,EAAAP,KAAAO,IAAA1G,GAEA7B,EAAA,EAAAA,EAAA8B,EAAAzB,OAAAL,IAAA,CACA,GAAAy1B,GAAA3zB,EAAA9B,GACAwI,EAAAitB,EAAAxzB,EAAAoG,EAAApG,EACAwG,EAAAgtB,EAAAvzB,EAAAmG,EAAAnG,CAEAuzB,GAAAxzB,EAAAoG,EAAApG,GAAAuG,EAAAF,EAAAG,EAAAF,GACAktB,EAAAvzB,EAAAmG,EAAAnG,GAAAsG,EAAAD,EAAAE,EAAAH,GAGA,MAAAxG,KAUApB,EAAA4T,SAAA,SAAAxS,EAAAuG,GACA,IAAA,GAAArI,GAAA,EAAAA,EAAA8B,EAAAzB,OAAAL,IAAA,CACA,GAAAy1B,GAAA3zB,EAAA9B,GACA01B,EAAA5zB,GAAA9B,EAAA,GAAA8B,EAAAzB,OACA,KAAAgI,EAAApG,EAAAwzB,EAAAxzB,IAAAyzB,EAAAxzB,EAAAuzB,EAAAvzB,IAAAmG,EAAAnG,EAAAuzB,EAAAvzB,IAAAuzB,EAAAxzB,EAAAyzB,EAAAzzB,GAAA,EACA,OAAA,EAIA,OAAA,GAWAvB,EAAAgI,MAAA,SAAA5G,EAAA6G,EAAAC,EAAAP,GACA,GAAA,IAAAM,GAAA,IAAAC,EACA,MAAA9G,EAEAuG,GAAAA,GAAA3H,EAAAuG,OAAAnF,EAKA,KAAA,GAHAuL,GACAzF,EAEA5H,EAAA,EAAAA,EAAA8B,EAAAzB,OAAAL,IACAqN,EAAAvL,EAAA9B,GACA4H,EAAAjH,EAAAkH,IAAAwF,EAAAhF,GACAvG,EAAA9B,GAAAiC,EAAAoG,EAAApG,EAAA2F,EAAA3F,EAAA0G,EACA7G,EAAA9B,GAAAkC,EAAAmG,EAAAnG,EAAA0F,EAAA1F,EAAA0G,CAGA,OAAA9G,IAaApB,EAAA6qB,QAAA,SAAAzpB,EAAA0pB,EAAAC,EAAAC,EAAAC,GACAH,EAAAA,IAAA,GAEAA,EAAAnrB,SACAmrB,GAAAA,IAGAC,MAAA,KAAAA,EAAAA,GAAA,EACAC,EAAAA,GAAA,EACAC,EAAAA,GAAA,EAIA,KAAA,GAFAgK,MAEA31B,EAAA,EAAAA,EAAA8B,EAAAzB,OAAAL,IAAA,CACA,GAAA41B,GAAA9zB,EAAA9B,EAAA,GAAA,EAAAA,EAAA,EAAA8B,EAAAzB,OAAA,GACAgN,EAAAvL,EAAA9B,GACA61B,EAAA/zB,GAAA9B,EAAA,GAAA8B,EAAAzB,QACAy1B,EAAAtK,EAAAxrB,EAAAwrB,EAAAnrB,OAAAL,EAAAwrB,EAAAnrB,OAAA,EAEA,IAAA,IAAAy1B,EAAA,CAKA,GAAAC,GAAAp1B,EAAA+vB,WACAzuB,EAAAoL,EAAAnL,EAAA0zB,EAAA1zB,EACAA,EAAA0zB,EAAA3zB,EAAAoL,EAAApL,IAGA+zB,EAAAr1B,EAAA+vB,WACAzuB,EAAA4zB,EAAA3zB,EAAAmL,EAAAnL,EACAA,EAAAmL,EAAApL,EAAA4zB,EAAA5zB,IAGAg0B,EAAAjuB,KAAAusB,KAAA,EAAAvsB,KAAAiB,IAAA6sB,EAAA,IACAI,EAAAv1B,EAAA4I,KAAA1I,EAAAiE,MAAAixB,GAAAD,GACAK,EAAAx1B,EAAA+vB,UAAA/vB,EAAA4I,KAAA5I,EAAAwH,IAAA4tB,EAAAC,GAAA,KACAI,EAAAz1B,EAAAkH,IAAAwF,EAAA1M,EAAA4I,KAAA4sB,EAAAF,IAEAI,EAAA5K,GAEA,IAAAA,IAEA4K,EAAA,KAAAruB,KAAAiB,IAAA6sB,EAAA,MAGAO,EAAAx1B,EAAAoW,MAAAof,EAAA3K,EAAAC,GAGA0K,EAAA,GAAA,IACAA,GAAA,EAKA,KAAA,GAHAC,GAAAtuB,KAAAuuB,KAAA51B,EAAAgV,IAAAogB,EAAAC,IACAxJ,EAAA8J,EAAAD,EAEA9nB,EAAA,EAAAA,EAAA8nB,EAAA9nB,IACAonB,EAAAtuB,KAAA1G,EAAAwH,IAAAxH,EAAAsE,OAAAixB,EAAA1J,EAAAje,GAAA6nB,QApCAT,GAAAtuB,KAAAgG,GAwCA,MAAAsoB,IASAj1B,EAAA6G,cAAA,SAAAzF,GACA,GAAAmF,GAAAvG,EAAA00B,KAAAtzB,EAMA,OAJAA,GAAA00B,KAAA,SAAAxd,EAAAC,GACA,MAAAtY,GAAAkB,MAAAoF,EAAA+R,GAAArY,EAAAkB,MAAAoF,EAAAgS,KAGAnX,GASApB,EAAAusB,SAAA,SAAAnrB,GAIA,GAEA9B,GACAuO,EACAE,EACA0e,EALAsJ,EAAA,EACAh3B,EAAAqC,EAAAzB,MAMA,IAAAZ,EAAA,EACA,MAAA,KAEA,KAAAO,EAAA,EAAAA,EAAAP,EAAAO,IAYA,GAXAuO,GAAAvO,EAAA,GAAAP,EACAgP,GAAAzO,EAAA,GAAAP,EACA0tB,GAAArrB,EAAAyM,GAAAtM,EAAAH,EAAA9B,GAAAiC,IAAAH,EAAA2M,GAAAvM,EAAAJ,EAAAyM,GAAArM,GACAirB,IAAArrB,EAAAyM,GAAArM,EAAAJ,EAAA9B,GAAAkC,IAAAJ,EAAA2M,GAAAxM,EAAAH,EAAAyM,GAAAtM,GAEAkrB,EAAA,EACAsJ,GAAA,EACAtJ,EAAA,IACAsJ,GAAA,GAGA,IAAAA,EACA,OAAA,CAIA,OAAA,KAAAA,GAGA,MAUA/1B,EAAA8G,KAAA,SAAA1F,GAGA,GAEAuL,GACArN,EAHA02B,KACAC,IAYA,KAPA70B,EAAAA,EAAAsF,MAAA,GACAtF,EAAA00B,KAAA,SAAAxd,EAAAC,GACA,GAAAzQ,GAAAwQ,EAAA/W,EAAAgX,EAAAhX,CACA,OAAA,KAAAuG,EAAAA,EAAAwQ,EAAA9W,EAAA+W,EAAA/W,IAIAlC,EAAA,EAAAA,EAAA8B,EAAAzB,OAAAL,GAAA,EAAA,CAGA,IAFAqN,EAAAvL,EAAA9B,GAEA22B,EAAAt2B,QAAA,GACAM,EAAAg0B,OAAAgC,EAAAA,EAAAt2B,OAAA,GAAAs2B,EAAAA,EAAAt2B,OAAA,GAAAgN,IAAA,GACAspB,EAAAC,KAGAD,GAAAtvB,KAAAgG,GAIA,IAAArN,EAAA8B,EAAAzB,OAAA,EAAAL,GAAA,EAAAA,GAAA,EAAA,CAGA,IAFAqN,EAAAvL,EAAA9B,GAEA02B,EAAAr2B,QAAA,GACAM,EAAAg0B,OAAA+B,EAAAA,EAAAr2B,OAAA,GAAAq2B,EAAAA,EAAAr2B,OAAA,GAAAgN,IAAA,GACAqpB,EAAAE,KAGAF,GAAArvB,KAAAgG,GAQA,MAHAqpB,GAAAE,MACAD,EAAAC,MAEAF,EAAApvB,OAAAqvB,SAKAltB,iBAAA,GAAAI,qBAAA,KAAAgtB,IAAA,SAAAr2B,EAAA1B,EAAAD,GACA,GAAA0B,GAAAzB,EAAAD,QAAA2B,EAAA,iBAEAD,GAAAE,KAAAD,EAAA,gBACAD,EAAA0J,UAAAzJ,EAAA,qBACAD,EAAAwM,MAAAvM,EAAA,iBAEAD,EAAA6M,QAAA5M,EAAA,wBACAD,EAAAmN,SAAAlN,EAAA,yBACAD,EAAAgP,KAAA/O,EAAA,qBACAD,EAAAwS,MAAAvS,EAAA,sBACAD,EAAAqN,KAAApN,EAAA,qBACAD,EAAAkT,MAAAjT,EAAA,sBACAD,EAAAkU,SAAAjU,EAAA,yBACAD,EAAAoN,IAAAnN,EAAA,oBAEAD,EAAA+Y,WAAA9Y,EAAA,4BACAD,EAAA4a,gBAAA3a,EAAA,iCAEAD,EAAAM,OAAAL,EAAA;6BACAD,EAAAkgB,OAAAjgB,EAAA,kBACAD,EAAA2J,OAAA1J,EAAA,kBACAD,EAAA6a,MAAA5a,EAAA,iBACAD,EAAAkoB,OAAAjoB,EAAA,kBACAD,EAAAK,SAAAJ,EAAA,oBACAD,EAAA4iB,OAAA3iB,EAAA,kBAGAD,EAAAmT,OAAAlT,EAAA,qBACAD,EAAA2tB,WAAA1tB,EAAA,yBAEAD,EAAAQ,KAAAP,EAAA,oBACAD,EAAAO,OAAAN,EAAA,sBACAD,EAAA6wB,IAAA5wB,EAAA,mBACAD,EAAAI,OAAAH,EAAA,sBACAD,EAAAG,SAAAF,EAAA,wBAEAD,EAAAmgB,OAAAlgB,EAAA,oBACAD,EAAAu2B,WAAAt2B,EAAA,wBAIAD,EAAAwM,MAAA5E,IAAA5H,EAAA0J,UAAA9B,IACA5H,EAAAwM,MAAA1B,OAAA9K,EAAA0J,UAAAoB,OACA9K,EAAAwM,MAAA5B,aAAA5K,EAAA0J,UAAAkB,aACA5K,EAAAwM,MAAA9B,QAAA1K,EAAA0J,UAAAgB,QACA1K,EAAAwM,MAAA7B,cAAA3K,EAAA0J,UAAAiB,cACA3K,EAAAwM,MAAAd,MAAA1L,EAAA0J,UAAAgC,MACA1L,EAAAkgB,OAAA2J,IAAA7pB,EAAAkoB,OAAA2B,MAEArI,eAAA,EAAA7F,oBAAA,EAAA8F,gBAAA,EAAA+U,uBAAA,EAAA5a,wBAAA,EAAA8F,oBAAA,EAAA+U,oBAAA,EAAA9U,qBAAA,EAAA+U,qBAAA,EAAA9U,wBAAA,GAAA+U,mBAAA,GAAAjqB,2BAAA,GAAAkqB,gCAAA,GAAA1tB,iBAAA,GAAA2tB,iBAAA,GAAAxqB,iBAAA,GAAAyqB,iBAAA,GAAAC,kBAAA,GAAAlb,gBAAA,GAAAmb,iBAAA,GAAAC,iBAAA,GAAA9tB,mBAAA,GAAA6K,oBAAA,GAAAkjB,wBAAA,GAAA9tB,mBAAA,GAAAC,qBAAA,GAAA8tB,kBAAA,GAAA7tB,qBAAA,GAAAC,uBAAA,GAAAC,mBAAA,GAAA4tB,uBAAA,KAAAC,IAAA,SAAAp3B,EAAA1B,EAAAD,GASA,GAAA6hB,KAEA5hB,GAAAD,QAAA6hB,CAEA,IAAA7f,GAAAL,EAAA,kBACAyJ,EAAAzJ,EAAA,qBACAM,EAAAN,EAAA,sBACA0J,EAAA1J,EAAA,kBACA+O,EAAA/O,EAAA,qBACAG,EAAAH,EAAA,sBACA4a,EAAA5a,EAAA,kBAEA,WAEA,GAAAkoB,GACAC,CAEA,oBAAAzpB,UACAwpB,EAAAxpB,OAAA0pB,uBAAA1pB,OAAA2pB,6BACA3pB,OAAA4pB,0BAAA5pB,OAAA6pB,yBACA,SAAArG,GAAAxjB,OAAAmqB,WAAA,WAAA3G,EAAA7hB,EAAAwd,QAAA,IAAA,KAEAsK,EAAAzpB,OAAA8pB,sBAAA9pB,OAAA+pB,yBACA/pB,OAAAgqB,4BAAAhqB,OAAAiqB,wBAWAzI,EAAAtf,OAAA,SAAAC,GACA,GAAAC,IACAkO,WAAAkR,EACA3S,OAAA,KACAwN,QAAA,KACAD,OAAA,KACAD,MAAA,KACAyO,eAAA,KACAzoB,SACA0kB,MAAA,IACAE,OAAA,IACA/B,WAAA,EACA2T,WAAA,UACAC,oBAAA,UACAC,YAAA12B,EAAAuD,OACAolB,SAAA,EACAgO,YAAA,EACAC,cAAA,EACAC,WAAA,EACAC,gBAAA,EACAC,YAAA,EACAC,cAAA,EACAC,gBAAA,EACAC,iBAAA,EACAC,UAAA,EACAC,eAAA,EACAC,oBAAA,EACAC,SAAA,EACAC,aAAA,EACAC,mBAAA,EACAC,iBAAA,EACAC,mBAAA,EACAC,mBAAA,IAIAp1B,EAAA/C,EAAAyD,OAAAhD,EAAAD,EAkCA,OAhCAuC,GAAA0X,SACA1X,EAAA0X,OAAAyK,MAAAniB,EAAAvC,QAAA0kB,OAAAniB,EAAA0X,OAAAyK,MACAniB,EAAA0X,OAAA2K,OAAAriB,EAAAvC,QAAA4kB,QAAAriB,EAAA0X,OAAA2K,QAGAriB,EAAAyX,MAAAha,EAAAga,MACAzX,EAAAmK,OAAA1M,EAAA0M,OACAnK,EAAA0X,OAAA1X,EAAA0X,QAAA2d,EAAAr1B,EAAAvC,QAAA0kB,MAAAniB,EAAAvC,QAAA4kB,QACAriB,EAAAs1B,QAAAt1B,EAAA0X,OAAA6d,WAAA,MACAv1B,EAAAw1B,YAEAx1B,EAAAgB,OAAAhB,EAAAgB,SACAe,KACA1D,EAAA,EACAC,EAAA,GAEA0D,KACA3D,EAAA2B,EAAA0X,OAAAyK,MACA7jB,EAAA0B,EAAA0X,OAAA2K,SAIA,IAAAriB,EAAAvC,QAAA6iB,YACAxD,EAAA2Y,cAAAz1B,EAAAA,EAAAvC,QAAA6iB,YAGArjB,EAAAid,UAAAla,EAAA2X,SACA3X,EAAA2X,QAAA+d,YAAA11B,EAAA0X,QAEAza,EAAAke,IAAA,2FAAA,QAGAnb,GAQA8c,EAAA0J,IAAA,SAAAxmB,IACA,QAAA21B,GAAAlP,GACAzmB,EAAAkmB,eAAApB,EAAA6Q,GACA7Y,EAAAtQ,MAAAxM,OASA8c,EAAA6J,KAAA,SAAA3mB,GACA+kB,EAAA/kB,EAAAkmB,iBAUApJ,EAAA2Y,cAAA,SAAAz1B,EAAAsgB,GACA,GAAA7iB,GAAAuC,EAAAvC,QACAia,EAAA1X,EAAA0X,MAEA,UAAA4I,IACAA,EAAAsV,EAAAle,IAGAja,EAAA6iB,WAAAA,EACA5I,EAAAme,aAAA,mBAAAvV,GACA5I,EAAAyK,MAAA1kB,EAAA0kB,MAAA7B,EACA5I,EAAA2K,OAAA5kB,EAAA4kB,OAAA/B,EACA5I,EAAAoe,MAAA3T,MAAA1kB,EAAA0kB,MAAA,KACAzK,EAAAoe,MAAAzT,OAAA5kB,EAAA4kB,OAAA,KACAriB,EAAAs1B,QAAAxwB,MAAAwb,EAAAA,IAgBAxD,EAAAiZ,OAAA,SAAA/1B,EAAAiH,EAAA+uB,EAAAC,GACAA,MAAA,KAAAA,GAAAA,EACAhvB,EAAAhK,EAAAmd,QAAAnT,GAAAA,GAAAA,GACA+uB,EAAAA,IACA33B,EAAA,EACAC,EAAA,EASA,KAAA,GALA0C,IACAe,KAAA1D,EAAA8E,EAAAA,EAAA7E,EAAA6E,EAAAA,GACAnB,KAAA3D,GAAA8E,EAAAA,EAAA7E,GAAA6E,EAAAA,IAGA/G,EAAA,EAAAA,EAAA6K,EAAAxK,OAAAL,GAAA,EAAA,CACA,GAAA4K,GAAAC,EAAA7K,GACA2F,EAAAiF,EAAAhG,OAAAgG,EAAAhG,OAAAe,IAAAiF,EAAAjF,KAAAiF,EAAA5I,UAAA4I,EACAhF,EAAAgF,EAAAhG,OAAAgG,EAAAhG,OAAAgB,IAAAgF,EAAAhF,KAAAgF,EAAA5I,UAAA4I,CAEAjF,IAAAC,IACAD,EAAA1D,EAAA2C,EAAAe,IAAA1D,IACA2C,EAAAe,IAAA1D,EAAA0D,EAAA1D,GAEA2D,EAAA3D,EAAA2C,EAAAgB,IAAA3D,IACA2C,EAAAgB,IAAA3D,EAAA2D,EAAA3D,GAEA0D,EAAAzD,EAAA0C,EAAAe,IAAAzD,IACA0C,EAAAe,IAAAzD,EAAAyD,EAAAzD,GAEA0D,EAAA1D,EAAA0C,EAAAgB,IAAA1D,IACA0C,EAAAgB,IAAA1D,EAAA0D,EAAA1D,IAKA,GAAA6jB,GAAAnhB,EAAAgB,IAAA3D,EAAA2C,EAAAe,IAAA1D,EAAA,EAAA23B,EAAA33B,EACAgkB,EAAArhB,EAAAgB,IAAA1D,EAAA0C,EAAAe,IAAAzD,EAAA,EAAA03B,EAAA13B,EACA43B,EAAAl2B,EAAA0X,OAAA2K,OACA8T,EAAAn2B,EAAA0X,OAAAyK,MACAiU,EAAAD,EAAAD,EACAG,EAAAlU,EAAAE,EACAtd,EAAA,EACAC,EAAA,CAGAqxB,GAAAD,EACApxB,EAAAqxB,EAAAD,EAEArxB,EAAAqxB,EAAAC,EAIAr2B,EAAAvC,QAAA02B,WAAA,EAGAn0B,EAAAgB,OAAAe,IAAA1D,EAAA2C,EAAAe,IAAA1D,EACA2B,EAAAgB,OAAAgB,IAAA3D,EAAA2C,EAAAe,IAAA1D,EAAA8jB,EAAApd,EACA/E,EAAAgB,OAAAe,IAAAzD,EAAA0C,EAAAe,IAAAzD,EACA0B,EAAAgB,OAAAgB,IAAA1D,EAAA0C,EAAAe,IAAAzD,EAAA+jB,EAAArd,EAGAixB,IACAj2B,EAAAgB,OAAAe,IAAA1D,GAAA,GAAA8jB,EAAAA,EAAApd,EAAA,GACA/E,EAAAgB,OAAAgB,IAAA3D,GAAA,GAAA8jB,EAAAA,EAAApd,EAAA,GACA/E,EAAAgB,OAAAe,IAAAzD,GAAA,GAAA+jB,EAAAA,EAAArd,EAAA,GACAhF,EAAAgB,OAAAgB,IAAA1D,GAAA,GAAA+jB,EAAAA,EAAArd,EAAA,IAIAhF,EAAAgB,OAAAe,IAAA1D,GAAA23B,EAAA33B,EACA2B,EAAAgB,OAAAgB,IAAA3D,GAAA23B,EAAA33B,EACA2B,EAAAgB,OAAAe,IAAAzD,GAAA03B,EAAA13B,EACA0B,EAAAgB,OAAAgB,IAAA1D,GAAA03B,EAAA13B,EAGA0B,EAAAyX,QACAD,EAAAwJ,SAAAhhB,EAAAyX,OACApZ,GAAA2B,EAAAgB,OAAAgB,IAAA3D,EAAA2B,EAAAgB,OAAAe,IAAA1D,GAAA2B,EAAA0X,OAAAyK,MACA7jB,GAAA0B,EAAAgB,OAAAgB,IAAA1D,EAAA0B,EAAAgB,OAAAe,IAAAzD,GAAA0B,EAAA0X,OAAA2K,SAGA7K,EAAAuJ,UAAA/gB,EAAAyX,MAAAzX,EAAAgB,OAAAe,OASA+a,EAAAwZ,mBAAA,SAAAt2B,GACA,GAAAu2B,GAAAv2B,EAAAgB,OAAAgB,IAAA3D,EAAA2B,EAAAgB,OAAAe,IAAA1D,EACAm4B,EAAAx2B,EAAAgB,OAAAgB,IAAA1D,EAAA0B,EAAAgB,OAAAe,IAAAzD,EACAm4B,EAAAF,EAAAv2B,EAAAvC,QAAA0kB,MACAuU,EAAAF,EAAAx2B,EAAAvC,QAAA4kB,MAEAriB,GAAAs1B,QAAAxwB,MAAA,EAAA2xB,EAAA,EAAAC,GACA12B,EAAAs1B,QAAAhyB,WAAAtD,EAAAgB,OAAAe,IAAA1D,GAAA2B,EAAAgB,OAAAe,IAAAzD,IAQAwe,EAAA6Z,iBAAA,SAAA32B,GACAA,EAAAs1B,QAAAsB,aAAA52B,EAAAvC,QAAA6iB,WAAA,EAAA,EAAAtgB,EAAAvC,QAAA6iB,WAAA,EAAA,IASAxD,EAAAtQ,MAAA,SAAAxM,GACA,GAUA5D,GAVA+N,EAAAnK,EAAAmK,OACAqC,EAAArC,EAAAqC,MACAkL,EAAA1X,EAAA0X,OACA4d,EAAAt1B,EAAAs1B,QACA73B,EAAAuC,EAAAvC,QACA+K,EAAAnC,EAAAmC,UAAAgE,GACA/D,EAAApC,EAAAoC,eAAA+D,GACAynB,EAAAx2B,EAAA22B,WAAA32B,EAAAy2B,oBAAAz2B,EAAAw2B,WACAztB,KACAC,KAGAgX,GACAtP,UAAAhE,EAAAiT,OAAAjP,UAgBA,IAbA7H,EAAAY,QAAAlH,EAAA,eAAAyd,GAGAzd,EAAA62B,oBAAA5C,GACA6C,EAAA92B,EAAAi0B,GAGAqB,EAAAyB,yBAAA,YACAzB,EAAAzzB,UAAA,cACAyzB,EAAA0B,SAAA,EAAA,EAAAtf,EAAAyK,MAAAzK,EAAA2K,QACAiT,EAAAyB,yBAAA,cAGAt5B,EAAA02B,UAAA,CAEA,IAAA/3B,EAAA,EAAAA,EAAAoM,EAAA/L,OAAAL,IAAA,CACA,GAAAqE,GAAA+H,EAAApM,EACAc,GAAAwN,SAAAjK,EAAAO,OAAAhB,EAAAgB,SACAwF,EAAA/C,KAAAhD,GAIA,IAAArE,EAAA,EAAAA,EAAAqM,EAAAhM,OAAAL,IAAA,CACA,GAAAoL,GAAAiB,EAAArM,GACAmO,EAAA/C,EAAA+C,MACAC,EAAAhD,EAAAgD,MACAqM,EAAArP,EAAAsO,OACAgB,EAAAtP,EAAAuO,MAEAxL,KAAAsM,EAAA9Z,EAAAwH,IAAAgG,EAAAnM,SAAAoJ,EAAAsO,SACAtL,IAAAsM,EAAA/Z,EAAAwH,IAAAiG,EAAApM,SAAAoJ,EAAAuO,SAEAc,GAAAC,KAGA5Z,EAAAwT,SAAA1Q,EAAAgB,OAAA6V,IAAA3Z,EAAAwT,SAAA1Q,EAAAgB,OAAA8V,KACArQ,EAAAhD,KAAA+D,IAIAsV,EAAAwZ,mBAAAt2B,GAGAA,EAAAyX,QACAD,EAAAwJ,SAAAhhB,EAAAyX,OACApZ,GAAA2B,EAAAgB,OAAAgB,IAAA3D,EAAA2B,EAAAgB,OAAAe,IAAA1D,GAAA2B,EAAA0X,OAAAyK,MACA7jB,GAAA0B,EAAAgB,OAAAgB,IAAA1D,EAAA0B,EAAAgB,OAAAe,IAAAzD,GAAA0B,EAAA0X,OAAA2K,SAGA7K,EAAAuJ,UAAA/gB,EAAAyX,MAAAzX,EAAAgB,OAAAe,UAGA0E,GAAAgC,EACAjC,EAAAgC,GAGA/K,EAAA22B,YAAAjqB,EAAA+S,gBAAAzf,EAAA42B,aAEAvX,EAAAtW,OAAAxG,EAAAwG,EAAA8uB,IAEA73B,EAAAy3B,iBACApY,EAAAma,gBAAAj3B,EAAAwG,EAAA8uB,GAGAxY,EAAAoa,eAAAl3B,EAAAwG,EAAA8uB,IAGA73B,EAAA+2B,YACA1X,EAAAqa,WAAAn3B,EAAAwG,EAAA8uB,IAEA73B,EAAAm3B,UAAAn3B,EAAAq3B,qBACAhY,EAAAsa,SAAAp3B,EAAAwG,EAAA8uB,GAEA73B,EAAAo3B,eACA/X,EAAAua,cAAAr3B,EAAAwG,EAAA8uB,GAEA73B,EAAAg3B,cACA3X,EAAAwa,aAAAt3B,EAAAwG,EAAA8uB,GAEA73B,EAAAs3B,SACAjY,EAAAya,QAAAv3B,EAAAwG,EAAA8uB,GAEA73B,EAAAk3B,iBACA7X,EAAA0a,YAAAx3B,EAAAmK,EAAAE,MAAA+E,KAAAkmB,GAEA73B,EAAAi3B,gBACA5X,EAAA7S,WAAAjK,EAAAmK,EAAAE,MAAA+E,KAAAkmB,GAEA73B,EAAAw3B,mBACAnY,EAAA2a,cAAAz3B,EAAAwG,EAAA8uB,GAEA73B,EAAA23B,mBACAtY,EAAA4a,cAAA13B,EAAAA,EAAAyX,MAAA6d,GAEAxY,EAAArW,YAAAA,EAAA6uB,GAEA73B,EAAA82B,gBAAApqB,EAAAkT,WAAAzR,aAAAD,GACAmR,EAAA5Q,KAAAlM,EAAAmK,EAAAkT,WAAAiY,GAEA73B,EAAA62B,WACAxX,EAAA6a,MAAA33B,EAAAs1B,GAEA73B,EAAA02B,WAEArX,EAAA6Z,iBAAA32B,GAGAsG,EAAAY,QAAAlH,EAAA,cAAAyd,IAUAX,EAAA6a,MAAA,SAAA33B,EAAAs1B,GACA,GAAAsC,GAAAtC,EACAnrB,EAAAnK,EAAAmK,OACAqC,EAAArC,EAAAqC,MACA+Q,EAAApT,EAAAoT,QACA9f,EAAAuC,EAAAvC,OACA4I,GAAAmC,UAAAgE,EAGA,IAAArC,EAAAiT,OAAAjP,WAAAnO,EAAA63B,gBAAA,IAAA,IAAA,CACA,GAAAC,GAAA,EAEAva,GAAAH,SACA0a,GAAA,QAAA1zB,KAAA2zB,MAAAxa,EAAAH,OAAAuI,KANA,QAUA3lB,EAAAg4B,YAAAF,EACA93B,EAAA63B,eAAA1tB,EAAAiT,OAAAjP,UAGA,GAAAnO,EAAAg4B,YAAA,CACAJ,EAAAK,KAAA,aAEAx6B,EAAA22B,WACAwD,EAAA/1B,UAAA,wBAEA+1B,EAAA/1B,UAAA,iBAKA,KAAA,GAFA8X,GAAA3Z,EAAAg4B,YAAAre,MAAA,MAEAvd,EAAA,EAAAA,EAAAud,EAAAld,OAAAL,IACAw7B,EAAAM,SAAAve,EAAAvd,GAAA,GAAA,GAAA,GAAAA,KAYA0gB,EAAArW,YAAA,SAAAA,EAAA6uB,GAGA,IAAA,GAFAsC,GAAAtC,EAEAl5B,EAAA,EAAAA,EAAAqK,EAAAhK,OAAAL,IAAA,CACA,GAAAoL,GAAAf,EAAArK,EAEA,IAAAoL,EAAAxH,OAAAC,SAAAuH,EAAAsO,QAAAtO,EAAAuO,OAAA,CAGA,GAEA6Q,GACAlN,EAHAnP,EAAA/C,EAAA+C,MACAC,EAAAhD,EAAAgD,KAUA,IALAoc,EADArc,EACAxN,EAAAwH,IAAAgG,EAAAnM,SAAAoJ,EAAAsO,QAEAtO,EAAAsO,OAGA,QAAAtO,EAAAxH,OAAAnC,KACA+5B,EAAAO,YACAP,EAAAQ,IAAAxR,EAAAvoB,EAAAuoB,EAAAtoB,EAAA,EAAA,EAAA,EAAA8F,KAAAykB,IACA+O,EAAAS,gBACA,CAUA,GARA3e,EADAlP,EACAzN,EAAAwH,IAAAiG,EAAApM,SAAAoJ,EAAAuO,QAEAvO,EAAAuO,OAGA6hB,EAAAO,YACAP,EAAAU,OAAA1R,EAAAvoB,EAAAuoB,EAAAtoB,GAEA,WAAAkJ,EAAAxH,OAAAnC,KAMA,IAAA,GAFA4H,GAHAzB,EAAAjH,EAAAkH,IAAAyV,EAAAkN,GACAtV,EAAAvU,EAAA6V,KAAA7V,EAAA+vB,UAAA9oB,IACAu0B,EAAAn0B,KAAAskB,KAAAzrB,EAAAoW,MAAA7L,EAAA/K,OAAA,EAAA,GAAA,KAGAkO,EAAA,EAAAA,EAAA4tB,EAAA5tB,GAAA,EACAlF,EAAAkF,EAAA,GAAA,EAAA,GAAA,EAEAitB,EAAAY,OACA5R,EAAAvoB,EAAA2F,EAAA3F,GAAAsM,EAAA4tB,GAAAjnB,EAAAjT,EAAAoH,EAAA,EACAmhB,EAAAtoB,EAAA0F,EAAA1F,GAAAqM,EAAA4tB,GAAAjnB,EAAAhT,EAAAmH,EAAA,EAKAmyB,GAAAY,OAAA9e,EAAArb,EAAAqb,EAAApb,GAGAkJ,EAAAxH,OAAAQ,YACAo3B,EAAAp3B,UAAAgH,EAAAxH,OAAAQ,UACAo3B,EAAA91B,YAAA0F,EAAAxH,OAAA8B,YACA81B,EAAAa,UAGAjxB,EAAAxH,OAAAuW,UACAqhB,EAAA/1B,UAAA2F,EAAAxH,OAAA8B,YACA81B,EAAAO,YACAP,EAAAQ,IAAAxR,EAAAvoB,EAAAuoB,EAAAtoB,EAAA,EAAA,EAAA,EAAA8F,KAAAykB,IACA+O,EAAAQ,IAAA1e,EAAArb,EAAAqb,EAAApb,EAAA,EAAA,EAAA,EAAA8F,KAAAykB,IACA+O,EAAAS,YACAT,EAAAc,WAaA5b,EAAA6b,YAAA,SAAA34B,EAAAwG,EAAA8uB,GAIA,IAAA,GAHAsC,GAAAtC,EAGAl5B,GAFA4D,EAAAmK,OAEA,GAAA/N,EAAAoK,EAAA/J,OAAAL,IAAA,CACA,GAAAqE,GAAA+F,EAAApK,EAEA,IAAAqE,EAAAT,OAAAC,QAAA,CAGA,GAAAQ,EAAAwE,aACA2yB,EAAAO,YACAP,EAAAQ,IAAA33B,EAAArC,SAAAC,EAAAoC,EAAArC,SAAAE,EAAAmC,EAAAwE,aAAA,EAAA,EAAAb,KAAAykB,IACA+O,EAAAS,gBACA,CACAT,EAAAO,YACAP,EAAAU,OAAA73B,EAAAvC,SAAA,GAAAG,EAAAoC,EAAAvC,SAAA,GAAAI,EACA,KAAA,GAAAqM,GAAA,EAAAA,EAAAlK,EAAAvC,SAAAzB,OAAAkO,IACAitB,EAAAY,OAAA/3B,EAAAvC,SAAAyM,GAAAtM,EAAAoC,EAAAvC,SAAAyM,GAAArM,EAEAs5B,GAAAS,YAGA,GAAAO,GAAAn4B,EAAArC,SAAAC,EAAA,GAAA2B,EAAAvC,QAAA0kB,MACA0W,EAAAp4B,EAAArC,SAAAE,EAAA,GAAA0B,EAAAvC,QAAA4kB,OACAlN,EAAA/Q,KAAAC,IAAAu0B,GAAAx0B,KAAAC,IAAAw0B,EAEAjB,GAAAkB,YAAA,mBACAlB,EAAAmB,cAAA,IAAAH,EACAhB,EAAAoB,cAAA,IAAAH,EACAjB,EAAAqB,WAAA,EAAA,GAAA70B,KAAArC,IAAA,EAAAoT,EAAA,KAEAyiB,EAAAc,OAEAd,EAAAkB,YAAA,KACAlB,EAAAmB,cAAA,KACAnB,EAAAoB,cAAA,KACApB,EAAAqB,WAAA,QAYAnc,EAAAtW,OAAA,SAAAxG,EAAAwG,EAAA8uB,GACA,GAIA70B,GACAsC,EACA3G,EACAyO,EAPA+sB,EAAAtC,EAEA73B,GADAuC,EAAAmK,OACAnK,EAAAvC,SACA03B,EAAA13B,EAAA03B,oBAAA13B,EAAA22B,UAMA,KAAAh4B,EAAA,EAAAA,EAAAoK,EAAA/J,OAAAL,IAGA,GAFAqE,EAAA+F,EAAApK,GAEAqE,EAAAT,OAAAC,QAIA,IAAA4K,EAAApK,EAAA1C,MAAAtB,OAAA,EAAA,EAAA,EAAAoO,EAAApK,EAAA1C,MAAAtB,OAAAoO,IAGA,GAFA9H,EAAAtC,EAAA1C,MAAA8M,GAEA9H,EAAA/C,OAAAC,QAAA,CASA,GANAxC,EAAA42B,cAAA5zB,EAAAvB,WACA04B,EAAAsB,YAAA,GAAAn2B,EAAA/C,OAAAE,QACA,IAAA6C,EAAA/C,OAAAE,UACA03B,EAAAsB,YAAAn2B,EAAA/C,OAAAE,SAGA6C,EAAA/C,OAAAG,QAAA4C,EAAA/C,OAAAG,OAAAg5B,UAAA17B,EAAA22B,WAAA,CAEA,GAAAj0B,GAAA4C,EAAA/C,OAAAG,OACAg5B,EAAAC,EAAAp5B,EAAAG,EAAAg5B,QAEAvB,GAAAt0B,UAAAP,EAAA3E,SAAAC,EAAA0E,EAAA3E,SAAAE,GACAs5B,EAAAv2B,OAAA0B,EAAA9E,OAEA25B,EAAAyB,UACAF,EACAA,EAAAhX,OAAAhiB,EAAAG,QAAAH,EAAAC,OACA+4B,EAAA9W,QAAAliB,EAAAI,QAAAJ,EAAAE,OACA84B,EAAAhX,MAAAhiB,EAAAC,OACA+4B,EAAA9W,OAAAliB,EAAAE,QAIAu3B,EAAAv2B,QAAA0B,EAAA9E,OACA25B,EAAAt0B,WAAAP,EAAA3E,SAAAC,GAAA0E,EAAA3E,SAAAE,OACA,CAEA,GAAAyE,EAAAkC,aACA2yB,EAAAO,YACAP,EAAAQ,IAAAr1B,EAAA3E,SAAAC,EAAA0E,EAAA3E,SAAAE,EAAAyE,EAAAkC,aAAA,EAAA,EAAAb,KAAAykB,QACA,CACA+O,EAAAO,YACAP,EAAAU,OAAAv1B,EAAA7E,SAAA,GAAAG,EAAA0E,EAAA7E,SAAA,GAAAI,EAEA,KAAA,GAAAqM,GAAA,EAAAA,EAAA5H,EAAA7E,SAAAzB,OAAAkO,KACA5H,EAAA7E,SAAAyM,EAAA,GAAAyf,YAAA+K,EACAyC,EAAAY,OAAAz1B,EAAA7E,SAAAyM,GAAAtM,EAAA0E,EAAA7E,SAAAyM,GAAArM,GAEAs5B,EAAAU,OAAAv1B,EAAA7E,SAAAyM,GAAAtM,EAAA0E,EAAA7E,SAAAyM,GAAArM,GAGAyE,EAAA7E,SAAAyM,GAAAyf,aAAA+K,GACAyC,EAAAU,OAAAv1B,EAAA7E,UAAAyM,EAAA,GAAA5H,EAAA7E,SAAAzB,QAAA4B,EAAA0E,EAAA7E,UAAAyM,EAAA,GAAA5H,EAAA7E,SAAAzB,QAAA6B,EAIAs5B,GAAAY,OAAAz1B,EAAA7E,SAAA,GAAAG,EAAA0E,EAAA7E,SAAA,GAAAI,GACAs5B,EAAAS,YAGA56B,EAAA22B,YAWAwD,EAAAp3B,UAAA,EACAo3B,EAAA91B,YAAA,OACA81B,EAAAa,WAZAb,EAAA/1B,UAAAkB,EAAA/C,OAAA6B,UAEAkB,EAAA/C,OAAAQ,YACAo3B,EAAAp3B,UAAAuC,EAAA/C,OAAAQ,UACAo3B,EAAA91B,YAAAiB,EAAA/C,OAAA8B,YACA81B,EAAAa,UAGAb,EAAAc,QAQAd,EAAAsB,YAAA,IAaApc,EAAAoa,eAAA,SAAAl3B,EAAAwG,EAAA8uB,GACA,GAEA70B,GACAsC,EACA3G,EACAuO,EACAE,EANA+sB,EAAAtC,EACAH,EAAAn1B,EAAAvC,QAAA03B,iBAUA,KAHAyC,EAAAO,YAGA/7B,EAAA,EAAAA,EAAAoK,EAAA/J,OAAAL,IAGA,GAFAqE,EAAA+F,EAAApK,GAEAqE,EAAAT,OAAAC,QAIA,IAAA4K,EAAApK,EAAA1C,MAAAtB,OAAA,EAAA,EAAA,EAAAoO,EAAApK,EAAA1C,MAAAtB,OAAAoO,IAAA,CAKA,IAJA9H,EAAAtC,EAAA1C,MAAA8M,GAEA+sB,EAAAU,OAAAv1B,EAAA7E,SAAA,GAAAG,EAAA0E,EAAA7E,SAAA,GAAAI,GAEAqM,EAAA,EAAAA,EAAA5H,EAAA7E,SAAAzB,OAAAkO,KACA5H,EAAA7E,SAAAyM,EAAA,GAAAyf,YAAA+K,EACAyC,EAAAY,OAAAz1B,EAAA7E,SAAAyM,GAAAtM,EAAA0E,EAAA7E,SAAAyM,GAAArM,GAEAs5B,EAAAU,OAAAv1B,EAAA7E,SAAAyM,GAAAtM,EAAA0E,EAAA7E,SAAAyM,GAAArM,GAGAyE,EAAA7E,SAAAyM,GAAAyf,aAAA+K,GACAyC,EAAAU,OAAAv1B,EAAA7E,UAAAyM,EAAA,GAAA5H,EAAA7E,SAAAzB,QAAA4B,EAAA0E,EAAA7E,UAAAyM,EAAA,GAAA5H,EAAA7E,SAAAzB,QAAA6B,EAIAs5B,GAAAY,OAAAz1B,EAAA7E,SAAA,GAAAG,EAAA0E,EAAA7E,SAAA,GAAAI,GAIAs5B,EAAAp3B,UAAA,EACAo3B,EAAA91B,YAAA,OACA81B,EAAAa,UAWA3b,EAAAma,gBAAA,SAAAj3B,EAAAwG,EAAA8uB,GACA,GACA70B,GAEArE,EACAuO,EAJAitB,EAAAtC,CAUA,KAHAsC,EAAAO,YAGA/7B,EAAA,EAAAA,EAAAoK,EAAA/J,OAAAL,IAGA,GAFAqE,EAAA+F,EAAApK,GAEAqE,EAAAT,OAAAC,SAAA,IAAAQ,EAAA1C,MAAAtB,OAAA,CAKA,IAFAm7B,EAAAU,OAAA73B,EAAAvC,SAAA,GAAAG,EAAAoC,EAAAvC,SAAA,GAAAI,GAEAqM,EAAA,EAAAA,EAAAlK,EAAAvC,SAAAzB,OAAAkO,IACAitB,EAAAY,OAAA/3B,EAAAvC,SAAAyM,GAAAtM,EAAAoC,EAAAvC,SAAAyM,GAAArM,EAGAs5B,GAAAY,OAAA/3B,EAAAvC,SAAA,GAAAG,EAAAoC,EAAAvC,SAAA,GAAAI,GAGAs5B,EAAAp3B,UAAA,EACAo3B,EAAA91B,YAAA,wBACA81B,EAAAa,UAWA3b,EAAA2a,cAAA,SAAAz3B,EAAAwG,EAAA8uB,GACA,GACAl5B,GACAuO,EACAE,EAHA+sB,EAAAtC,CAKA,KAAAl5B,EAAA,EAAAA,EAAAoK,EAAA/J,OAAAL,IAAA,CACA,GAAA2B,GAAAyI,EAAApK,GAAA2B,KACA,KAAA8M,EAAA9M,EAAAtB,OAAA,EAAA,EAAA,EAAAoO,EAAA9M,EAAAtB,OAAAoO,IAAA,CACA,GAAA9H,GAAAhF,EAAA8M,EACA,KAAAF,EAAA,EAAAA,EAAA5H,EAAA7E,SAAAzB,OAAAkO,IACAitB,EAAA/1B,UAAA,wBACA+1B,EAAAM,SAAA97B,EAAA,IAAAuO,EAAA5H,EAAA3E,SAAAC,EAAA,IAAA0E,EAAA7E,SAAAyM,GAAAtM,EAAA0E,EAAA3E,SAAAC,GAAA0E,EAAA3E,SAAAE,EAAA,IAAAyE,EAAA7E,SAAAyM,GAAArM,EAAAyE,EAAA3E,SAAAE,OAcAwe,EAAA4a,cAAA,SAAA13B,EAAAyX,EAAA6d,GACA,GAAAsC,GAAAtC,CACAsC,GAAA/1B,UAAA,wBACA+1B,EAAAM,SAAAzgB,EAAArZ,SAAAC,EAAA,KAAAoZ,EAAArZ,SAAAE,EAAAmZ,EAAArZ,SAAAC,EAAA,EAAAoZ,EAAArZ,SAAAE,EAAA,IAWAwe,EAAAqa,WAAA,SAAAn3B,EAAAwG,EAAA8uB,GACA,GAAAsC,GAAAtC,EAEA73B,GADAuC,EAAAmK,OACAnK,EAAAvC,QAEAm6B,GAAAO,WAEA,KAAA,GAAA/7B,GAAA,EAAAA,EAAAoK,EAAA/J,OAAAL,IAAA,CAGA,GAFAoK,EAAApK,GAEA4D,OAAAC,QAEA,IAAA,GADAlC,GAAAyI,EAAApK,GAAA2B,MACA4M,EAAA5M,EAAAtB,OAAA,EAAA,EAAA,EAAAkO,EAAA5M,EAAAtB,OAAAkO,IAAA,CACA,GAAA5H,GAAAhF,EAAA4M,EACAitB,GAAA0B,KAAAv2B,EAAA/B,OAAAe,IAAA1D,EAAA0E,EAAA/B,OAAAe,IAAAzD,EAAAyE,EAAA/B,OAAAgB,IAAA3D,EAAA0E,EAAA/B,OAAAe,IAAA1D,EAAA0E,EAAA/B,OAAAgB,IAAA1D,EAAAyE,EAAA/B,OAAAe,IAAAzD,IAKAb,EAAA22B,WACAwD,EAAA91B,YAAA,yBAEA81B,EAAA91B,YAAA,kBAGA81B,EAAAp3B,UAAA,EACAo3B,EAAAa,UAWA3b,EAAAsa,SAAA,SAAAp3B,EAAAwG,EAAA8uB,GACA,GAGAvyB,GACA3G,EACAuO,EACAE,EANA+sB,EAAAtC,EAEA73B,GADAuC,EAAAmK,OACAnK,EAAAvC,QAQA,KAFAm6B,EAAAO,YAEA/7B,EAAA,EAAAA,EAAAoK,EAAA/J,OAAAL,IAAA,CACA,GAAAqE,GAAA+F,EAAApK,GACA2B,EAAA0C,EAAA1C,KAEA,IAAA0C,EAAAT,OAAAC,QAGA,GAAAxC,EAAAm3B,SAEA,IAAAjqB,EAAA5M,EAAAtB,OAAA,EAAA,EAAA,EAAAkO,EAAA5M,EAAAtB,OAAAkO,IAEA,IADA5H,EAAAhF,EAAA4M,GACAE,EAAA,EAAAA,EAAA9H,EAAAzB,KAAA7E,OAAAoO,IAAA,CACA,GAAA2J,GAAAzR,EAAAzB,KAAAuJ,EACA+sB,GAAAU,OAAAv1B,EAAA3E,SAAAC,EAAA0E,EAAA3E,SAAAE,GACAs5B,EAAAY,OAAAz1B,EAAA3E,SAAAC,EAAA,GAAAmW,EAAAnW,EAAA0E,EAAA3E,SAAAE,EAAA,GAAAkW,EAAAlW,OAIA,KAAAqM,EAAA5M,EAAAtB,OAAA,EAAA,EAAA,EAAAkO,EAAA5M,EAAAtB,OAAAkO,IAEA,IADA5H,EAAAhF,EAAA4M,GACAE,EAAA,EAAAA,EAAA9H,EAAAzB,KAAA7E,OAAAoO,IAEA+sB,EAAAU,OAAAv1B,EAAA3E,SAAAC,EAAA0E,EAAA3E,SAAAE,GACAs5B,EAAAY,QAAAz1B,EAAA7E,SAAA,GAAAG,EAAA0E,EAAA7E,SAAA6E,EAAA7E,SAAAzB,OAAA,GAAA4B,GAAA,GACA0E,EAAA7E,SAAA,GAAAI,EAAAyE,EAAA7E,SAAA6E,EAAA7E,SAAAzB,OAAA,GAAA6B,GAAA,GAMAb,EAAA22B,YACAwD,EAAA91B,YAAA,YACA81B,EAAAp3B,UAAA,IAEAo3B,EAAA91B,YAAA,2BACA81B,EAAAb,yBAAA,UACAa,EAAAp3B,UAAA,GAGAo3B,EAAAa,SACAb,EAAAb,yBAAA,eAWAja,EAAAua,cAAA,SAAAr3B,EAAAwG,EAAA8uB,GACA,GAGA70B,GACAsC,EACA3G,EACAyO,EANA+sB,EAAAtC,EAEA73B,GADAuC,EAAAmK,OACAnK,EAAAvC,QASA,KAHAm6B,EAAAO,YAGA/7B,EAAA,EAAAA,EAAAoK,EAAA/J,OAAAL,IAGA,GAFAqE,EAAA+F,EAAApK,GAEAqE,EAAAT,OAAAC,QAIA,IAAA4K,EAAA,EAAAA,EAAApK,EAAA1C,MAAAtB,OAAAoO,IACA9H,EAAAtC,EAAA1C,MAAA8M,GACA+sB,EAAAQ,IAAAr1B,EAAA3E,SAAAC,EAAA0E,EAAA3E,SAAAE,EAAA,EAAA,EAAA,EAAA8F,KAAAykB,IAAA,GACA+O,EAAAS,WAcA,KAVA56B,EAAA22B,WACAwD,EAAA/1B,UAAA,YAEA+1B,EAAA/1B,UAAA,kBAEA+1B,EAAAc,OAEAd,EAAAO,YAGA/7B,EAAA,EAAAA,EAAAoK,EAAA/J,OAAAL,IACAqE,EAAA+F,EAAApK,GACAqE,EAAAT,OAAAC,UACA23B,EAAAQ,IAAA33B,EAAAQ,aAAA5C,EAAAoC,EAAAQ,aAAA3C,EAAA,EAAA,EAAA,EAAA8F,KAAAykB,IAAA,GACA+O,EAAAS,YAIAT,GAAA/1B,UAAA,sBACA+1B,EAAAc,QAWA5b,EAAAwa,aAAA,SAAAt3B,EAAAwG,EAAA8uB,GACA,GAAAsC,GAAAtC,CAEAsC,GAAAO,WAEA,KAAA,GAAA/7B,GAAA,EAAAA,EAAAoK,EAAA/J,OAAAL,IAAA,CACA,GAAAqE,GAAA+F,EAAApK,EAEAqE,GAAAT,OAAAC,UAGA23B,EAAAU,OAAA73B,EAAArC,SAAAC,EAAAoC,EAAArC,SAAAE,GACAs5B,EAAAY,OAAA/3B,EAAArC,SAAAC,EAAA,GAAAoC,EAAArC,SAAAC,EAAAoC,EAAAQ,aAAA5C,GAAAoC,EAAArC,SAAAE,EAAA,GAAAmC,EAAArC,SAAAE,EAAAmC,EAAAQ,aAAA3C,KAGAs5B,EAAAp3B,UAAA,EACAo3B,EAAA91B,YAAA,iBACA81B,EAAAa,UAWA3b,EAAAya,QAAA,SAAAv3B,EAAAwG,EAAA8uB,GACA,GACAl5B,GACAuO,EAFAitB,EAAAtC,CAIA,KAAAl5B,EAAA,EAAAA,EAAAoK,EAAA/J,OAAAL,IACA,GAAAoK,EAAApK,GAAA4D,OAAAC,QAAA,CAGA,GAAAlC,GAAAyI,EAAApK,GAAA2B,KACA,KAAA4M,EAAA5M,EAAAtB,OAAA,EAAA,EAAA,EAAAkO,EAAA5M,EAAAtB,OAAAkO,IAAA,CACA,GAAA5H,GAAAhF,EAAA4M,EACAitB,GAAAK,KAAA,aACAL,EAAA/1B,UAAA,wBACA+1B,EAAAM,SAAAn1B,EAAApF,GAAAoF,EAAA3E,SAAAC,EAAA,GAAA0E,EAAA3E,SAAAE,EAAA,OAaAwe,EAAA7S,WAAA,SAAAjK,EAAAqK,EAAAirB,GACA,GAEArqB,GACAE,EAIA/O,EACAuO,EARAitB,EAAAtC,EACA73B,EAAAuC,EAAAvC,OAYA,KAHAm6B,EAAAO,YAGA/7B,EAAA,EAAAA,EAAAiO,EAAA5N,OAAAL,IAGA,GAFA6O,EAAAZ,EAAAjO,GAEA6O,EAAAC,SAIA,IADAC,EAAAF,EAAAE,UACAR,EAAA,EAAAA,EAAAM,EAAAsD,eAAA9R,OAAAkO,IAAA,CACA,GAAAmE,GAAA7D,EAAAsD,eAAA5D,GACAlB,EAAAqF,EAAArF,MACAmuB,GAAA0B,KAAA7vB,EAAApL,EAAA,IAAAoL,EAAAnL,EAAA,IAAA,IAAA,KAcA,IAVAb,EAAA22B,WACAwD,EAAA/1B,UAAA,wBAEA+1B,EAAA/1B,UAAA,SAEA+1B,EAAAc,OAEAd,EAAAO,YAGA/7B,EAAA,EAAAA,EAAAiO,EAAA5N,OAAAL,IAGA,GAFA6O,EAAAZ,EAAAjO,GAEA6O,EAAAC,WAGAC,EAAAF,EAAAE,UAEAF,EAAAsD,eAAA9R,OAAA,GAAA,CACA,GAAA88B,GAAAtuB,EAAAsD,eAAA,GAAA9E,OAAApL,EACAm7B,EAAAvuB,EAAAsD,eAAA,GAAA9E,OAAAnL,CAEA,KAAA2M,EAAAsD,eAAA9R,SACA88B,GAAAtuB,EAAAsD,eAAA,GAAA9E,OAAApL,EAAA4M,EAAAsD,eAAA,GAAA9E,OAAApL,GAAA,EACAm7B,GAAAvuB,EAAAsD,eAAA,GAAA9E,OAAAnL,EAAA2M,EAAAsD,eAAA,GAAA9E,OAAAnL,GAAA,GAGA6M,EAAAX,QAAAW,EAAAwD,SAAA,GAAAlO,OAAA,IAAA0K,EAAAZ,MAAAtL,SACA24B,EAAAU,OAAAiB,EAAA,EAAApuB,EAAAmG,OAAAjT,EAAAm7B,EAAA,EAAAruB,EAAAmG,OAAAhT,GAEAs5B,EAAAU,OAAAiB,EAAA,EAAApuB,EAAAmG,OAAAjT,EAAAm7B,EAAA,EAAAruB,EAAAmG,OAAAhT,GAGAs5B,EAAAY,OAAAe,EAAAC,GAIA/7B,EAAA22B,WACAwD,EAAA91B,YAAA,sBAEA81B,EAAA91B,YAAA,SAGA81B,EAAAp3B,UAAA,EACAo3B,EAAAa,UAWA3b,EAAA0a,YAAA,SAAAx3B,EAAAqK,EAAAirB,GACA,GAEArqB,GACAE,EAEAZ,EACAC,EACApO,EAPAw7B,EAAAtC,EACA73B,EAAAuC,EAAAvC,OAYA,KAHAm6B,EAAAO,YAGA/7B,EAAA,EAAAA,EAAAiO,EAAA5N,OAAAL,IAGA,GAFA6O,EAAAZ,EAAAjO,GAEA6O,EAAAC,SAAA,CAGAC,EAAAF,EAAAE,UACAZ,EAAAY,EAAAZ,MACAC,EAAAW,EAAAX,KAEA,IAAAK,GAAA,CAEAL,GAAAvL,UAAAsL,EAAAtL,WAAA4L,EAAA,IACAL,EAAAvL,WAAA4L,EAAA,GAEA+sB,EAAAU,OAAA9tB,EAAApM,SAAAC,EAAAmM,EAAApM,SAAAE,GACAs5B,EAAAY,OAAAhuB,EAAApM,SAAAC,EAAA8M,EAAA2G,YAAAzT,EAAAwM,EAAAL,EAAApM,SAAAE,EAAA6M,EAAA2G,YAAAxT,EAAAuM,GAEAA,EAAA,EAEAL,EAAAvL,UAAAsL,EAAAtL,WAAA4L,EAAA,IACAN,EAAAtL,WAAA4L,EAAA,GAEA+sB,EAAAU,OAAA/tB,EAAAnM,SAAAC,EAAAkM,EAAAnM,SAAAE,GACAs5B,EAAAY,OAAAjuB,EAAAnM,SAAAC,EAAA8M,EAAA2G,YAAAzT,EAAAwM,EAAAN,EAAAnM,SAAAE,EAAA6M,EAAA2G,YAAAxT,EAAAuM,GAGApN,EAAA22B,WACAwD,EAAA91B,YAAA,sBAEA81B,EAAA91B,YAAA,SAEA81B,EAAAa,UAWA3b,EAAA5Q,KAAA,SAAAlM,EAAAkM,EAAAopB,GACA,GAAAsC,GAAAtC,CACAt1B,GAAAvC,QAEA22B,WACAwD,EAAA91B,YAAA,sBAEA81B,EAAA91B,YAAA,sBAGA81B,EAAAO,WAIA,KAAA,GAFAsB,GAAAx8B,EAAA+Q,KAAA9B,EAAAJ,SAEA1P,EAAA,EAAAA,EAAAq9B,EAAAh9B,OAAAL,IAAA,CACA,GAAAmQ,GAAAktB,EAAAr9B,EAEA,MAAA8P,EAAAJ,QAAAS,GAAA9P,OAAA,GAAA,CAGA,GAAAmQ,GAAAL,EAAAoN,MAAA,MACAie,GAAA0B,KAAA,GAAAre,SAAArO,EAAA,GAAA,IAAAV,EAAAF,YACA,GAAAiP,SAAArO,EAAA,GAAA,IAAAV,EAAAD,aACAC,EAAAF,YACAE,EAAAD,eAGA2rB,EAAAp3B,UAAA,EACAo3B,EAAAa,UAUA3b,EAAA4c,UAAA,SAAAA,EAAApE,GACA,GAIAt0B,GAHA24B,GADAD,EAAAvvB,OACAuvB,EAAAC,UACA35B,EAAA05B,EAAA15B,OACAvC,EAAAuC,EAAAvC,OAGA,IAAAA,EAAA02B,UAAA,CACA,GAAAoC,GAAAv2B,EAAAgB,OAAAgB,IAAA3D,EAAA2B,EAAAgB,OAAAe,IAAA1D,EACAm4B,EAAAx2B,EAAAgB,OAAAgB,IAAA1D,EAAA0B,EAAAgB,OAAAe,IAAAzD,EACAm4B,EAAAF,EAAAv2B,EAAAvC,QAAA0kB,MACAuU,EAAAF,EAAAx2B,EAAAvC,QAAA4kB,MAEAiT,GAAAxwB,MAAA,EAAA2xB,EAAA,EAAAC,GACApB,EAAAhyB,WAAAtD,EAAAgB,OAAAe,IAAA1D,GAAA2B,EAAAgB,OAAAe,IAAAzD,GAGA,IAAA,GAAAlC,GAAA,EAAAA,EAAAu9B,EAAAl9B,OAAAL,IAAA,CACA,GAAAw9B,GAAAD,EAAAv9B,GAAAy9B,IAOA,QALAvE,EAAAhyB,UAAA,GAAA,IACAgyB,EAAA90B,UAAA,EACA80B,EAAAxzB,YAAA,sBACAwzB,EAAAwE,aAAA,EAAA,IAEAF,EAAA/7B,MAEA,IAAA,OAGAmD,EAAA44B,EAAA54B,OACAs0B,EAAA6C,YACA7C,EAAAgE,KAAAl1B,KAAAyJ,MAAA7M,EAAAe,IAAA1D,EAAA,GAAA+F,KAAAyJ,MAAA7M,EAAAe,IAAAzD,EAAA,GACA8F,KAAAyJ,MAAA7M,EAAAgB,IAAA3D,EAAA2C,EAAAe,IAAA1D,EAAA,GAAA+F,KAAAyJ,MAAA7M,EAAAgB,IAAA1D,EAAA0C,EAAAe,IAAAzD,EAAA,IACAg3B,EAAA+C,YACA/C,EAAAmD,QAEA,MAEA,KAAA,aAGA,GAAAh0B,GAAAm1B,EAAA9jB,MACA8jB,GAAArvB,QACA9F,EAAAm1B,EAAA7jB,QACAuf,EAAA6C,YACA7C,EAAA8C,IAAA3zB,EAAApG,EAAAoG,EAAAnG,EAAA,GAAA,EAAA,EAAA8F,KAAAykB,IACAyM,EAAA+C,YACA/C,EAAAmD,SAMAnD,EAAAwE,gBACAxE,EAAAhyB,WAAA,IAAA,IAIA,OAAAo2B,EAAAK,cACAzE,EAAAhyB,UAAA,GAAA,IACAgyB,EAAA90B,UAAA,EACA80B,EAAAxzB,YAAA,sBACAwzB,EAAAzzB,UAAA,sBACAb,EAAA04B,EAAAM,aACA1E,EAAA6C,YACA7C,EAAAgE,KAAAl1B,KAAAyJ,MAAA7M,EAAAe,IAAA1D,GAAA+F,KAAAyJ,MAAA7M,EAAAe,IAAAzD,GACA8F,KAAAyJ,MAAA7M,EAAAgB,IAAA3D,EAAA2C,EAAAe,IAAA1D,GAAA+F,KAAAyJ,MAAA7M,EAAAgB,IAAA1D,EAAA0C,EAAAe,IAAAzD,IACAg3B,EAAA+C,YACA/C,EAAAmD,SACAnD,EAAAoD,OACApD,EAAAhyB,WAAA,IAAA,KAGA7F,EAAA02B,WACAmB,EAAAsB,aAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAWA,IAAAvB,GAAA,SAAAlT,EAAAE,GACA,GAAA3K,GAAAuI,SAAAga,cAAA,SAKA,OAJAviB,GAAAyK,MAAAA,EACAzK,EAAA2K,OAAAA,EACA3K,EAAAwiB,cAAA,WAAA,OAAA,GACAxiB,EAAAyiB,cAAA,WAAA,OAAA,GACAziB,GAUAke,EAAA,SAAAle,GACA,GAAA4d,GAAA5d,EAAA6d,WAAA,KAMA,QALAj6B,OAAA8+B,kBAAA,IACA9E,EAAA+E,8BAAA/E,EAAAgF,2BACAhF,EAAAiF,0BAAAjF,EAAAkF,yBACAlF,EAAAmF,wBAAA,IAaArB,EAAA,SAAAp5B,EAAA06B,GACA,GAAAC,GAAA36B,EAAAw1B,SAAAkF,EAEA,OAAAC,KAGAA,EAAA36B,EAAAw1B,SAAAkF,GAAA,GAAAE,OACAD,EAAAE,IAAAH,EAEAC,IAUA7D,EAAA,SAAA92B,EAAAi0B,GACA,GAAA6G,GAAA7G,CAEA,kBAAAhQ,KAAAgQ,KACA6G,EAAA,OAAA7G,EAAA,KAEAj0B,EAAA0X,OAAAoe,MAAA7B,WAAA6G,EACA96B,EAAA0X,OAAAoe,MAAAiF,eAAA,UACA/6B,EAAA62B,kBAAA5C,QA0HA3b,oBAAA,EAAA+F,oBAAA,EAAAxY,iBAAA,GAAAmD,iBAAA,GAAAwP,gBAAA,GAAAxS,qBAAA,GAAAC,qBAAA,KAAA+0B,IAAA,SAAAp+B,EAAA1B,EAAAD,GAUA,GAAAi4B,KAEAh4B,GAAAD,QAAAi4B,CAEA,IAAAh2B,GAAAN,EAAA,sBACAyJ,EAAAzJ,EAAA,qBACAK,EAAAL,EAAA,kBACA0J,EAAA1J,EAAA,kBACAG,EAAAH,EAAA,uBAEA,WAEA,GAAAkoB,GACAC,CAEA,oBAAAzpB,UACAwpB,EAAAxpB,OAAA0pB,uBAAA1pB,OAAA2pB,6BACA3pB,OAAA4pB,0BAAA5pB,OAAA6pB,yBACA,SAAArG,GAAAxjB,OAAAmqB,WAAA,WAAA3G,EAAA7hB,EAAAwd,QAAA,IAAA,KAEAsK,EAAAzpB,OAAA8pB,sBAAA9pB,OAAA+pB,yBACA/pB,OAAAgqB,4BAAAhqB,OAAAiqB,wBAUA2N,EAAA11B,OAAA,SAAAC,GACAR,EAAAmK,KAAA,gEAEA,IAAA1J,IACAkO,WAAAsnB,EACA/oB,OAAA,KACAwN,QAAA,KACAuO,eAAA,KACAxO,OAAA,KACAujB,SAAA,KACAC,UAAA,KACAC,gBAAA,KACAC,YAAA,KACA39B,SACA0kB,MAAA,IACAE,OAAA,IACA4R,WAAA,UACAC,oBAAA,OACAC,WAAA,EACA/N,SAAA,EACAgO,YAAA,EACAC,cAAA,EACAC,WAAA,EACAC,gBAAA,EACAC,YAAA,EACAC,cAAA,EACAC,gBAAA,EACAE,UAAA,EACAC,eAAA,EACAC,oBAAA,EACAC,SAAA,EACAC,aAAA,IAIAh1B,EAAA/C,EAAAyD,OAAAhD,EAAAD,GACA49B,GAAAr7B,EAAAvC,QAAA22B,YAAA,gBAAAp0B,EAAAvC,QAAAw2B,UAmDA,OAhDAj0B,GAAAo7B,YAAAp7B,EAAAo7B,cACAE,KAAAt7B,EAAA0X,OACA2jB,YAAAA,EACAE,WAAA,EACAC,gBAAA/9B,EAAAw2B,YAGAj0B,EAAAyX,MAAAha,EAAAga,MACAzX,EAAAmK,OAAA1M,EAAA0M,OACAnK,EAAAi7B,SAAAj7B,EAAAi7B,UAAA,GAAAQ,MAAAC,cAAA17B,EAAAvC,QAAA0kB,MAAAniB,EAAAvC,QAAA4kB,OAAAriB,EAAAo7B,aACAp7B,EAAAk7B,UAAAl7B,EAAAk7B,WAAA,GAAAO,MAAAE,UACA37B,EAAAm7B,gBAAAn7B,EAAAm7B,iBAAA,GAAAM,MAAAE,UACA37B,EAAA0X,OAAA1X,EAAA0X,QAAA1X,EAAAi7B,SAAAK,KACAt7B,EAAAgB,OAAAhB,EAAAgB,SACAe,KACA1D,EAAA,EACAC,EAAA,GAEA0D,KACA3D,EAAA2B,EAAAvC,QAAA0kB,MACA7jB,EAAA0B,EAAAvC,QAAA4kB,SAKA/b,EAAAuR,GAAA7X,EAAAmK,OAAA,eAAA,WACA+oB,EAAA7qB,MAAArI,KAIAA,EAAAw1B,YACAx1B,EAAA47B,WACA57B,EAAA67B,cAGA77B,EAAAk7B,UAAAY,SAAA97B,EAAAm7B,iBAGAl+B,EAAAid,UAAAla,EAAA2X,SACA3X,EAAA2X,QAAA+d,YAAA11B,EAAA0X,QAEAza,EAAAmK,KAAA,+EAIApH,EAAA0X,OAAAwiB,cAAA,WAAA,OAAA,GACAl6B,EAAA0X,OAAAyiB,cAAA,WAAA,OAAA,GAEAn6B,GASAkzB,EAAA1M,IAAA,SAAAxmB,IACA,QAAA21B,GAAAlP,GACAzmB,EAAAkmB,eAAApB,EAAA6Q,GACAzC,EAAA1mB,MAAAxM,OAUAkzB,EAAAvM,KAAA,SAAA3mB,GACA+kB,EAAA/kB,EAAAkmB,iBASAgN,EAAA7qB,MAAA,SAAArI,GAKA,IAJA,GAAAk7B,GAAAl7B,EAAAk7B,UACAC,EAAAn7B,EAAAm7B,gBAGAD,EAAAa,SAAA,IACAb,EAAAc,YAAAd,EAAAa,SAAA,GAIA,MAAAZ,EAAAY,SAAA,IACAZ,EAAAa,YAAAb,EAAAY,SAAA,GAGA,IAAAE,GAAAj8B,EAAA47B,QAAA,OAGA57B,GAAAw1B,YACAx1B,EAAA47B,WACA57B,EAAA67B,cAGA77B,EAAA47B,QAAA,QAAAK,EACAA,GACAf,EAAAgB,WAAAD,EAAA,GAGAj8B,EAAAk7B,UAAAY,SAAA97B,EAAAm7B,iBAGAn7B,EAAA62B,kBAAA,KAGAqE,EAAAp2B,MAAA/D,IAAA,EAAA,GACAm6B,EAAA98B,SAAA2C,IAAA,EAAA,IAUAmyB,EAAAiJ,cAAA,SAAAn8B,EAAAi0B,GACA,GAAAj0B,EAAA62B,oBAAA5C,EAAA,CACA,GAAAmI,GAAAnI,EAAAjsB,UAAA,IAAAisB,EAAAjsB,QAAA,KACAi0B,EAAAj8B,EAAA47B,QAAA,OAEA,IAAAQ,EAAA,CAEA,GAAAC,GAAAp/B,EAAA4d,cAAAoZ,EACAj0B,GAAAi7B,SAAAO,gBAAAa,EAGAJ,GACAj8B,EAAAk7B,UAAAc,YAAAC,OAGA,KAAAA,EAAA,CACA,GAAA9C,GAAAC,EAAAp5B,EAAAi0B,EAEAgI,GAAAj8B,EAAA47B,QAAA,QAAA,GAAAH,MAAAa,OAAAnD,GACA8C,EAAA79B,SAAAC,EAAA,EACA49B,EAAA79B,SAAAE,EAAA,EACA0B,EAAAk7B,UAAAgB,WAAAD,EAAA,GAIAj8B,EAAA62B,kBAAA5C,IAUAf,EAAA1mB,MAAA,SAAAxM,GACA,GAQA5D,GARA+N,EAAAnK,EAAAmK,OACAqC,EAAArC,EAAAqC,MACAyuB,EAAAj7B,EAAAi7B,SACAC,EAAAl7B,EAAAk7B,UACAz9B,EAAAuC,EAAAvC,QACA+I,EAAAH,EAAAmC,UAAAgE,GACA/D,EAAApC,EAAAoC,eAAA+D,GACA/F,IAGAhJ,GAAA22B,WACAlB,EAAAiJ,cAAAn8B,EAAAvC,EAAAy2B,qBAEAhB,EAAAiJ,cAAAn8B,EAAAvC,EAAAw2B,WAIA,IAAAsC,GAAAv2B,EAAAgB,OAAAgB,IAAA3D,EAAA2B,EAAAgB,OAAAe,IAAA1D,EACAm4B,EAAAx2B,EAAAgB,OAAAgB,IAAA1D,EAAA0B,EAAAgB,OAAAe,IAAAzD,EACAm4B,EAAAF,EAAAv2B,EAAAvC,QAAA0kB,MACAuU,EAAAF,EAAAx2B,EAAAvC,QAAA4kB,MAEA,IAAA5kB,EAAA02B,UAAA,CAEA,IAAA/3B,EAAA,EAAAA,EAAAoK,EAAA/J,OAAAL,IAAA,CACA,GAAAqE,GAAA+F,EAAApK,EACAqE,GAAAT,OAAAG,OAAAF,QAAA/C,EAAAwN,SAAAjK,EAAAO,OAAAhB,EAAAgB,QAIA,IAAA5E,EAAA,EAAAA,EAAAqM,EAAAhM,OAAAL,IAAA,CACA,GAAAoL,GAAAiB,EAAArM,GACAmO,EAAA/C,EAAA+C,MACAC,EAAAhD,EAAAgD,MACAqM,EAAArP,EAAAsO,OACAgB,EAAAtP,EAAAuO,MAEAxL,KAAAsM,EAAA9Z,EAAAwH,IAAAgG,EAAAnM,SAAAoJ,EAAAsO,SACAtL,IAAAsM,EAAA/Z,EAAAwH,IAAAiG,EAAApM,SAAAoJ,EAAAuO,SAEAc,GAAAC,KAGA5Z,EAAAwT,SAAA1Q,EAAAgB,OAAA6V,IAAA3Z,EAAAwT,SAAA1Q,EAAAgB,OAAA8V,KACArQ,EAAAhD,KAAA+D,IAIA0zB,EAAAp2B,MAAA/D,IAAA,EAAA01B,EAAA,EAAAC,GACAwE,EAAA98B,SAAA2C,KAAAf,EAAAgB,OAAAe,IAAA1D,GAAA,EAAAo4B,IAAAz2B,EAAAgB,OAAAe,IAAAzD,GAAA,EAAAo4B,QAEAjwB,GAAAgC,CAGA,KAAArM,EAAA,EAAAA,EAAAoK,EAAA/J,OAAAL,IACA82B,EAAAzyB,KAAAT,EAAAwG,EAAApK,GAEA,KAAAA,EAAA,EAAAA,EAAAqK,EAAAhK,OAAAL,IACA82B,EAAA1rB,WAAAxH,EAAAyG,EAAArK,GAEA6+B,GAAAj7B,OAAAk7B,IAWAhI,EAAA1rB,WAAA,SAAAxH,EAAAwH,GACA,GACA+C,IADAvK,EAAAmK,OACA3C,EAAA+C,OACAC,EAAAhD,EAAAgD,MACAsL,EAAAtO,EAAAsO,OACAC,EAAAvO,EAAAuO,OACAmlB,EAAAl7B,EAAAk7B,UACAqB,EAAA/0B,EAAAxH,OACAw8B,EAAA,KAAAh1B,EAAA7J,GACA8+B,EAAAz8B,EAAA67B,WAAAW,EAOA,IAJAC,IACAA,EAAAz8B,EAAA67B,WAAAW,GAAA,GAAAf,MAAAiB,WAGAH,EAAAt8B,UAAAuH,EAAAsO,SAAAtO,EAAAuO,OAEA,WADA0mB,GAAAp0B,SAKA,IAAApL,EAAA+K,QAAAkzB,EAAAa,SAAAU,IACAvB,EAAAY,SAAAW,GAGAA,EAAAp0B,QACAo0B,EAAAE,UAAA,EAAA,GACAF,EAAAG,UAAAL,EAAA/7B,UAAAvD,EAAA4d,cAAA0hB,EAAAz6B,aAAA,GAEAyI,EACAkyB,EAAAnE,OAAA/tB,EAAAnM,SAAAC,EAAAyX,EAAAzX,EAAAkM,EAAAnM,SAAAE,EAAAwX,EAAAxX,GAEAm+B,EAAAnE,OAAAxiB,EAAAzX,EAAAyX,EAAAxX,GAGAkM,EACAiyB,EAAAjE,OAAAhuB,EAAApM,SAAAC,EAAA0X,EAAA1X,EAAAmM,EAAApM,SAAAE,EAAAyX,EAAAzX,GAEAm+B,EAAAjE,OAAAziB,EAAA1X,EAAA0X,EAAAzX,GAGAm+B,EAAAI,WAUA3J,EAAAzyB,KAAA,SAAAT,EAAAS,GACA,GACAq8B,IADA98B,EAAAmK,OACA1J,EAAAT,OAEA,IAAA88B,EAAA78B,QAGA,GAAA68B,EAAA38B,QAAA28B,EAAA38B,OAAAg5B,QAAA,CACA,GAAA4D,GAAA,KAAAt8B,EAAA9C,GACAwC,EAAAH,EAAA47B,QAAAmB,GACA5B,EAAAn7B,EAAAm7B,eAGAh7B,KACAA,EAAAH,EAAA47B,QAAAmB,GAAAC,EAAAh9B,EAAAS,KAGA,IAAAxD,EAAA+K,QAAAmzB,EAAAY,SAAA57B,IACAg7B,EAAAW,SAAA37B,GAGAA,EAAA/B,SAAAC,EAAAoC,EAAArC,SAAAC,EACA8B,EAAA/B,SAAAE,EAAAmC,EAAArC,SAAAE,EACA6B,EAAAqE,SAAA/D,EAAAxC,MACAkC,EAAA2E,MAAAzG,EAAAy+B,EAAA38B,OAAAC,QAAA,EACAD,EAAA2E,MAAAxG,EAAAw+B,EAAA38B,OAAAE,QAAA,MACA,CACA,GAAAm8B,GAAA,KAAA/7B,EAAA9C,GACA8+B,EAAAz8B,EAAA67B,WAAAW,GACAtB,EAAAl7B,EAAAk7B,SAGAuB,KACAA,EAAAz8B,EAAA67B,WAAAW,GAAAS,EAAAj9B,EAAAS,GACAg8B,EAAAS,aAAAz8B,EAAAxC,QAIA,IAAAhB,EAAA+K,QAAAkzB,EAAAa,SAAAU,IACAvB,EAAAY,SAAAW,GAGAA,EAAAr+B,SAAAC,EAAAoC,EAAArC,SAAAC,EACAo+B,EAAAr+B,SAAAE,EAAAmC,EAAArC,SAAAE,EACAm+B,EAAAj4B,SAAA/D,EAAAxC,MAAAw+B,EAAAS,cAaA,IAAAF,GAAA,SAAAh9B,EAAAS,GACA,GAAAq8B,GAAAr8B,EAAAT,OACAm9B,EAAAL,EAAA38B,OAAAg5B,QACAA,EAAAC,EAAAp5B,EAAAm9B,GACAh9B,EAAA,GAAAs7B,MAAAa,OAAAnD,EAKA,OAHAh5B,GAAAi9B,OAAA/+B,EAAAoC,EAAAT,OAAAG,OAAAG,QACAH,EAAAi9B,OAAA9+B,EAAAmC,EAAAT,OAAAG,OAAAI,QAEAJ,GAYA88B,EAAA,SAAAj9B,EAAAS,GACA,GAQAsC,GARA+5B,EAAAr8B,EAAAT,OACAvC,EAAAuC,EAAAvC,QACAg/B,EAAA,GAAAhB,MAAAiB,SACA76B,EAAA5E,EAAA4d,cAAAiiB,EAAAj7B,WACAC,EAAA7E,EAAA4d,cAAAiiB,EAAAh7B,aACAu7B,EAAApgC,EAAA4d,cAAAiiB,EAAAh7B,aACAw7B,EAAArgC,EAAA4d,cAAA,QACA0iB,EAAAtgC,EAAA4d,cAAA,UAGA4hB,GAAAp0B,OAGA,KAAA,GAAAwC,GAAApK,EAAA1C,MAAAtB,OAAA,EAAA,EAAA,EAAAoO,EAAApK,EAAA1C,MAAAtB,OAAAoO,IAAA,CACA9H,EAAAtC,EAAA1C,MAAA8M,GAEApN,EAAA22B,YAIAqI,EAAAE,UAAA,EAAA,GACAF,EAAAG,UAAA,EAAAU,EAAA,KAJAb,EAAAE,UAAA96B,EAAA,GACA46B,EAAAG,UAAAE,EAAAt8B,UAAAsB,EAAA,IAMA26B,EAAAnE,OAAAv1B,EAAA7E,SAAA,GAAAG,EAAAoC,EAAArC,SAAAC,EAAA0E,EAAA7E,SAAA,GAAAI,EAAAmC,EAAArC,SAAAE,EAEA,KAAA,GAAAqM,GAAA,EAAAA,EAAA5H,EAAA7E,SAAAzB,OAAAkO,IACA8xB,EAAAjE,OAAAz1B,EAAA7E,SAAAyM,GAAAtM,EAAAoC,EAAArC,SAAAC,EAAA0E,EAAA7E,SAAAyM,GAAArM,EAAAmC,EAAArC,SAAAE,EAGAm+B,GAAAjE,OAAAz1B,EAAA7E,SAAA,GAAAG,EAAAoC,EAAArC,SAAAC,EAAA0E,EAAA7E,SAAA,GAAAI,EAAAmC,EAAArC,SAAAE,GAEAm+B,EAAAI,WAGAp/B,EAAAq3B,oBAAAr3B,EAAAm3B,YACA6H,EAAAE,UAAA,EAAA,GAEAl/B,EAAA22B,WACAqI,EAAAG,UAAA,EAAAW,EAAA,GAEAd,EAAAG,UAAA,EAAAS,GAGAZ,EAAAnE,OAAAv1B,EAAA3E,SAAAC,EAAAoC,EAAArC,SAAAC,EAAA0E,EAAA3E,SAAAE,EAAAmC,EAAArC,SAAAE,GACAm+B,EAAAjE,QAAAz1B,EAAA7E,SAAA,GAAAG,EAAA0E,EAAA7E,SAAA6E,EAAA7E,SAAAzB,OAAA,GAAA4B,GAAA,EAAAoC,EAAArC,SAAAC,GACA0E,EAAA7E,SAAA,GAAAI,EAAAyE,EAAA7E,SAAA6E,EAAA7E,SAAAzB,OAAA,GAAA6B,GAAA,EAAAmC,EAAArC,SAAAE,GAEAm+B,EAAAI,WAIA,MAAAJ,IAYArD,EAAA,SAAAp5B,EAAA06B,GACA,GAAAvB,GAAAn5B,EAAAw1B,SAAAkF,EAKA,OAHAvB,KACAA,EAAAn5B,EAAAw1B,SAAAkF,GAAAe,KAAA+B,QAAAC,UAAA/C,IAEAvB,QAKA7gB,oBAAA,EAAAzS,iBAAA,GAAAmD,iBAAA,GAAAhD,qBAAA,GAAAC,qBAAA,UAAA,KAAA,6MCjiUA,IAAAy3B,GAAAvhC,EAAA,iBACAwhC,EAAAxhC,EAAA,kCACAyhC,EAAAzhC,EAAA,mBAGA0hC,EAAA,WASC,QAAAA,GAAYC,EAAkBtxB,GAE7B/Q,KAAKqiC,WAAaA,EAClBriC,KAAKsiC,WAAY,EACjBtiC,KAAKuiC,YAAa,EAClBviC,KAAKic,OAA4BuI,SAASge,eAAexiC,KAAKqiC,YAC9DriC,KAAK65B,QAAU75B,KAAKic,OAAO6d,WAAW,MACtC95B,KAAKyiC,YAAc,GAAIR,GAAAS,YAAY3xB,EAAM/Q,KAAK,GAAIkiC,GAAAS,8BA6FpD,MArFQP,GAAAxjB,UAAAgkB,YAAP,WACI5iC,KAAKsiC,WAAatiC,KAAKuiC,aAEzBviC,KAAK65B,QAAQgJ,UAAU,EAAG,EAAG7iC,KAAK8iC,WAAY9iC,KAAK+iC,aACnD/iC,KAAK65B,QAAQzzB,UAAY+7B,EAAAa,aAAaC,mBAAmB,YACzDjjC,KAAK65B,QAAQ0B,SAAS,EAAG,EAAGv7B,KAAK8iC,WAAY9iC,KAAK+iC,eAI7CX,EAAAxjB,UAAAskB,UAAP,WACC,MAAOljC,MAAW,QAGZoiC,EAAAxjB,UAAAkb,WAAP,WACC,MAAO95B,MAAY,SAGboiC,EAAAxjB,UAAAkkB,SAAP,WAEC,MAAO9iC,MAAKic,OAAY,OAGlBmmB,EAAAxjB,UAAAmkB,UAAP,WAEC,MAAO/iC,MAAKic,OAAa,QAGnBmmB,EAAAxjB,UAAAukB,gBAAP,WACC,MAAOnjC,MAAKojC,YAGNhB,EAAAxjB,UAAAykB,iBAAP,WACC,MAAOrjC,MAAKsjC,aAGb1lB,OAAA2lB,eAAWnB,EAAAxjB,UAAA,kBAAX,WACC,MAAO5e,MAAKwjC,iBAGb,SAAsB/8B,GACrBzG,KAAKwjC,YAAc/8B,mCAIpBmX,OAAA2lB,eAAWnB,EAAAxjB,UAAA,cAAX,WACC,MAAO5e,MAAKyjC,aAGb,SAAkBh9B,GACjBzG,KAAKyjC,QAAUh9B,mCAGhBmX,OAAA2lB,eAAWnB,EAAAxjB,UAAA,eAAX,WACC,MAAO5e,MAAK0jC,cAGb,SAAmBj9B,GAClBzG,KAAK0jC,SAAWj9B,mCAGjBmX,OAAA2lB,eAAWnB,EAAAxjB,UAAA,iBAAX,WACC,MAAO5e,MAAKojC,gBAGb,SAAqB38B,GACpBzG,KAAKojC,WAAa38B,mCAGnBmX,OAAA2lB,eAAWnB,EAAAxjB,UAAA,kBAAX,WACC,MAAO5e,MAAKsjC,iBAGb,SAAsB78B,GACrBzG,KAAKsjC,YAAc78B,mCAGpBmX,OAAA2lB,eAAWnB,EAAAxjB,UAAA,mBAAX,WACC,MAAO5e,MAAK2jC,kBAGb,SAAuBl9B,GACtBzG,KAAK2jC,aAAel9B,mCAItB27B,IA7Ga5iC,GAAA4iC,iBAAAA,+JCPb,IAAAwB,GAAAljC,EAAA,6BAMAgiC,EAAA,WAOC,QAAAA,GAAY3xB,EAAY8yB,EAAkCC,GAIzD,GAFA9jC,KAAK6jC,iBAAmBA,EACxB7jC,KAAK8jC,kBAAoBA,EACtBD,EAAiBV,kBACpB,CAECnjC,KAAKgK,OAAShK,KAAK+jC,iBACnB,IAAIhkC,GAAOC,IACXA,MAAK6jC,iBAAiB5nB,OAAOoJ,iBAAiB,cAAe,SAASrD,GAASjiB,EAAKikC,iBAAiBjzB,EAAMhR,EAAKiiB,KAAU,GAC1HhiB,KAAK6jC,iBAAiB5nB,OAAOoJ,iBAAiB,cAAc,SAASrD,GAASjiB,EAAKkkC,iBAAiBlzB,EAAMhR,EAAKiiB,KAAU,GACzHhiB,KAAK6jC,iBAAiB5nB,OAAOoJ,iBAAiB,YAAY,SAASrD,GAASjiB,EAAKmkC,eAAenzB,EAAMhR,EAAKiiB,KAAU,IAwExH,MAnES0gB,GAAA9jB,UAAAmlB,gBAAR,WAEI,GAAII,GAAa,EAChBC,EAAY,EACZ74B,EAAqBvL,KAAK6jC,iBAAiB5nB,MAC5C,GACA,CACO0M,MAAMpd,EAAO44B,cAEdA,GAAc54B,EAAO44B,YAEpBxb,MAAMpd,EAAO64B,aAEdA,GAAa74B,EAAO64B,UAE5B,IAAIloB,GAAc3Q,EAAO84B,YACkB94B,GAAxC2Q,EAAQvV,eAAe,gBAA0BuV,EACtC,WAEN3Q,EAEN,OAAM,IAAMq4B,GAAAU,cAAcH,EAAWC,IAGlC1B,EAAA9jB,UAAAolB,iBAAP,SAAwBjzB,EAAY0xB,EAAwBzgB,GAC3DhiB,KAAK8jC,kBAAkBE,iBAAiBjzB,EAAM0xB,EAAYzgB,IAGpD0gB,EAAA9jB,UAAAqlB,iBAAP,SAAwBlzB,EAAY0xB,EAAwBzgB,GAC3DhiB,KAAK8jC,kBAAkBG,iBAAiBlzB,EAAM0xB,EAAYzgB,IAIpD0gB,EAAA9jB,UAAAslB,eAAP,SAAsBnzB,EAAY0xB,EAAwBzgB,GAEzDhiB,KAAK8jC,kBAAkBI,eAAenzB,EAAM0xB,EAAYzgB,IAMzDpE,OAAA2lB,eAAWb,EAAA9jB,UAAA,cAAX,WACC,MAAO5e,MAAKukC,aAGb,SAAkB99B,GACjBzG,KAAKukC,QAAU99B,mCAGhBmX,OAAA2lB,eAAWb,EAAA9jB,UAAA,yBAAX,WACC,MAAO5e,MAAKwkC,wBAGb,SAA6B/9B,GAC5BzG,KAAKwkC,mBAAqB/9B,mCAI3BmX,OAAA2lB,eAAWb,EAAA9jB,UAAA,yBAAX,WACC,MAAO5e,MAAK6jC,sBAGb,SAA6Bp9B,GAC5BzG,KAAK6jC,iBAAmBp9B,mCAI1Bi8B,IA1FaljC,GAAAkjC,YAAAA,qHCNb,IAAA+B,GAAA/jC,EAAA,iBAGAkjC,EAAAljC,EAAA,6BAMAiiC,EAAA,WAKI,QAAAA,KAEI3iC,KAAK0kC,YAAc,GAAID,GAAAE,YACvB3kC,KAAK4kC,mBAAqB,KAC1B5kC,KAAK6kC,gBAAkB,KA4I/B,MAzIWlC,GAAA/jB,UAAAkmB,oBAAP,SAA2B/zB,EAAYiR,EAAiB+iB,KAIjDpC,EAAA/jB,UAAAomB,sBAAP,SAA6Bj0B,EAAYiR,KAIrC2gB,EAAA/jB,UAAAqmB,+BAAP,SAAsCl0B,EAAY0xB,EAAwBzgB,GAEzE,MADkC,IAAI4hB,GAAAU,cAActiB,EAAMqE,MAAMoc,EAAYz4B,OAAOpH,EAAEof,EAAMuE,MAAMkc,EAAYz4B,OAAOnH,IAI3G8/B,EAAA/jB,UAAAolB,iBAAP,SAAwBjzB,EAAY0xB,EAAwBzgB,GAG9D,GAAIkjB,GAA8BllC,KAAKilC,+BAA+Bl0B,EAAM0xB,EAAYzgB,EAExFrC,SAAQD,IAAI,oBAAoBylB,KAAKC,UAAUF,IAE/CllC,KAAK0kC,YAAYW,QAAS,EAC1BrlC,KAAK0kC,YAAYY,cAAgBJ,EACjCllC,KAAK0kC,YAAY/hC,SAAWuiC,EACA,MAAzBllC,KAAK4kC,qBAEP5kC,KAAK4kC,mBAAmBW,YAAa,EACrCvlC,KAAK4kC,mBAAmBY,YAAa,EACrCxlC,KAAK4kC,mBAAqB,KAG3B,IAAIa,GAAgC10B,EAAM20B,iCAAiCR,EAEtD,OAAlBO,GAA0BA,GAAkBzlC,KAAK6kC,kBAEnDllB,QAAQD,IAAI,qCAAqC+lB,EAAiBE,QAAQzjC,IAE1ElC,KAAK4kC,mBAAqBa,EAE1BzlC,KAAK0kC,YAAYY,cAAgBJ,EAAcz/B,QAE/CzF,KAAK4kC,mBAAmBY,YAAa,EACrCxlC,KAAK0kC,YAAYkB,YAAc5lC,KAAK4kC,mBAAmBiB,mBAAmBC,SAASZ,GAInFllC,KAAK8kC,oBAAoB/zB,EAAMiR,EAAMhiB,KAAK4kC,qBAGtB,MAAlBa,GAEFzlC,KAAKglC,sBAAsBj0B,EAAMiR,GAG/BhiB,KAAK6kC,kBAEP7kC,KAAKglC,sBAAsBj0B,EAAMiR,GACjChiB,KAAK6kC,gBAAgBW,YAAa,EAClCxlC,KAAK6kC,gBAAkB,OAOflC,EAAA/jB,UAAAqlB,iBAAP,SAAwBlzB,EAAY0xB,EAAwBzgB,GAC9D,GAAGhiB,KAAK0kC,YAAYW,OACpB,CACC,GAAIH,GAA8BllC,KAAKilC,+BAA+Bl0B,EAAM0xB,EAAYzgB,EAMxF,IAFAhiB,KAAKglC,sBAAsBj0B,EAAMiR,GAEL,MAAzBhiB,KAAK4kC,mBACR,CACC5kC,KAAK4kC,mBAAmBW,YAAa,EACrCvlC,KAAK0kC,YAAY/hC,SAAWuiC,CAC5B,IAAIa,GAAgB/lC,KAAK0kC,YAAYY,cAAcQ,SAASZ,GAIxDc,EAAOhmC,KAAK0kC,YAAYY,cAAc1iC,EACxCmjC,EAAcnjC,EACd5C,KAAK0kC,YAAYkB,YAAYhjC,EAE3BqjC,EAAOjmC,KAAK0kC,YAAYY,cAAcziC,EACxCkjC,EAAcljC,EACd7C,KAAK0kC,YAAYkB,YAAY/iC,CAE/B7C,MAAK4kC,mBAAmBsB,iBAAkB,GAAItC,GAAAU,cAAc0B,EAAKC,OAM1DtD,EAAA/jB,UAAAslB,eAAP,SAAsBnzB,EAAY0xB,EAAwBzgB,GAIhC,MAAzBhiB,KAAK4kC,qBAGP5kC,KAAK4kC,mBAAmBW,YAAa,EAErCvlC,KAAK6kC,gBAAkB7kC,KAAK4kC,mBAE5B5kC,KAAK4kC,mBAAqB,MAE3B5kC,KAAK0kC,YAAYW,QAAS,GAG3BznB,OAAA2lB,eAAWZ,EAAA/jB,UAAA,mBAAX,WACC,MAAO5e,MAAKmmC,kBAGb,SAAuB1/B,GACtBzG,KAAKmmC,aAAe1/B,mCAIrBmX,OAAA2lB,eAAWZ,EAAA/jB,UAAA,0BAAX,WACC,MAAO5e,MAAKomC,yBAGb,SAA8B3/B,GAC7BzG,KAAKomC,oBAAsB3/B,mCAI5BmX,OAAA2lB,eAAWZ,EAAA/jB,UAAA,uBAAX,WACC,MAAO5e,MAAKqmC,sBAGb,SAA2B5/B,GAC1BzG,KAAKqmC,iBAAmB5/B,mCAG1Bk8B,IArJanjC,GAAAmjC,6BAAAA,uICTb,IAAAiB,GAAAljC,EAAA,6BAEAikC,EAAA,WAaC,QAAAA,KAEC3kC,KAAKqlC,QAAS,EACdrlC,KAAKslC,cAAgB,GAAI1B,GAAAU,cAAc,EAAE,GACzCtkC,KAAK2C,SAAW,GAAIihC,GAAAU,cAAc,EAAE,GACpCtkC,KAAK4lC,YAAc,GAAIhC,GAAAU,cAAc,EAAE,GA2CzC,MApCC1mB,QAAA2lB,eAAWoB,EAAA/lB,UAAA,cAAX,WACC,MAAO5e,MAAKsmC,aAGb,SAAkB7/B,GACjBzG,KAAKsmC,QAAU7/B,mCAGhBmX,OAAA2lB,eAAWoB,EAAA/lB,UAAA,qBAAX,WACC,MAAO5e,MAAKumC,oBAGb,SAAyB9/B,GACxBzG,KAAKumC,eAAiB9/B,mCAIvBmX,OAAA2lB,eAAWoB,EAAA/lB,UAAA,gBAAX,WACC,MAAO5e,MAAKwmC,eAGb,SAAoB//B,GACnBzG,KAAKwmC,UAAY//B,mCAGlBmX,OAAA2lB,eAAWoB,EAAA/lB,UAAA,mBAAX,WACC,MAAO5e,MAAKymC,kBAGb,SAAuBhgC,GACtBzG,KAAKymC,aAAehgC,mCAMtBk+B,IA7DanlC,GAAAmlC,YAAAA,qHCCb,IAAAxC,GAAAzhC,EAAA,mBAKAgmC,EAAA,WAIC,QAAAA,KAEC1mC,KAAK2mC,kBAAoB,KAqC3B,MAlCQD,GAAA9nB,UAAAgoB,KAAP,SAAYD,EAAoC3kC,GAC/ChC,KAAK2mC,kBAAoBA,GAI1B/oB,OAAA2lB,eAAWmD,EAAA9nB,UAAA,yBAAX,WACC,MAAO5e,MAAK6mC,wBAGb,SAA6BpgC,GAC5BzG,KAAK6mC,mBAAqBpgC,mCAIpBigC,EAAA9nB,UAAAkoB,KAAP,SAAYjN,GASXA,EAAQzzB,UAAY+7B,EAAAa,aAAaC,mBAAmB,YACpDpJ,EAAQxzB,YAAc87B,EAAAa,aAAaC,mBAAmB,WACtD,IAAItgC,GAAyB3C,KAAK2mC,kBAAkBd,kBAEjDhM,GAAQ6C,YACR7C,EAAQ8C,IAAIh6B,EAASC,EAAED,EAASE,EAAE7C,KAAK2mC,kBAAkBI,YAAY,EAAY,EAAVp+B,KAAKykB,IAAQ,GACpFyM,EAAQ+C,YACR/C,EAAQoD,OACRpD,EAAQ90B,UAAY,EACvB80B,EAAQmD,UAEV0J,IA3CalnC,GAAAknC,mBAAAA,0GCHb,IAAA9C,GAAAljC,EAAA,0BAIAsiC,EAAA,WAAA,QAAAA,MAqJA,MA7IkBA,GAAAC,mBAAd,SAAiC5jB,GAa/B,MAXuB,IAApBA,EAAYre,SAEbqe,GAAe,MAGL,QACRG,SAASH,EAAY2nB,UAAU,EAAE,GAAI,IAAI,IACzCxnB,SAASH,EAAY2nB,UAAU,EAAE,GAAI,IAAI,IACzCxnB,SAASH,EAAY2nB,UAAU,EAAE,GAAI,IAAI,IACzCxnB,SAASH,EAAY2nB,UAAU,EAAE,GAAI,IAAI,IAAM,KAKvChE,EAAAiE,sBAAd,SAAoC9a,EAAc+a,GAIpD,IAAI,GAHAC,GAAY,GAAItnB,OAEhBunB,EAAW,IAAMF,EACb1kC,EAAM,EAAEA,GAAO,IAAIA,GAAY4kC,EACvC,CACC,GAAIC,GAAO7kC,GAASmG,KAAKykB,GAAG,IAC5B+Z,GAAUn/B,KACR,GAAI47B,GAAAU,cACFnY,EAAOxjB,KAAKM,IAAIo+B,GAChBlb,EAAOxjB,KAAKO,IAAIm+B;0DAIrB,MAAM,IAGOrE,EAAAsE,wBAAd,SAAsC5gB,EAAaE,GAClD,GAAIugB,GAAY,GAAItnB,MAOpB,OALAsnB,GAAUn/B,KAAK,GAAI47B,GAAAU,cAAc,GAAI1d,EAAO,IAC5CugB,EAAUn/B,KAAK,GAAI47B,GAAAU,cAAc5d,EAAM,EAAEE,EAAO,IAChDugB,EAAUn/B,KAAK,GAAI47B,GAAAU,eAAgB5d,EAAM,EAAGE,EAAO,IACnDugB,EAAUn/B,KAAK,GAAI47B,GAAAU,cAAc,GAAI1d,EAAO,IAEtC,GAGOoc,EAAAuE,yBAAd,SAAuC7gB,EAAaE,GACnD,GAAIugB,GAAY,GAAItnB,MAQpB,OANAsnB,GAAUn/B,KAAK,GAAI47B,GAAAU,eAAgB5d,EAAM,GAAKE,EAAO,IACrDugB,EAAUn/B,KAAK,GAAI47B,GAAAU,cAAe5d,EAAM,GAAKE,EAAO,IACpDugB,EAAUn/B,KAAK,GAAI47B,GAAAU,cAAe5d,EAAM,EAAIE,EAAO,IACnDugB,EAAUn/B,KAAK,GAAI47B,GAAAU,eAAgB5d,EAAM,EAAIE,EAAO,IACpDugB,EAAUn/B,KAAK,GAAI47B,GAAAU,eAAgB5d,EAAM,GAAKE,EAAO,IAE/C,GAGOoc,EAAAwE,mBAAd,SAAiCC,EAAgBC,EAAkBvb,EAAc+a,GAChF,GAAIC,GAAY,GAAItnB,OAGhBrd,EAAemG,KAAKC,IAAI6+B,EAASC,GACjCN,EAAkB5kC,EAAQ0kC,CAE9BC,GAAUn/B,KAAK,GAAI47B,GAAAU,cAAc,EAAE,GACnC,KAAI,GAAIqD,GAAMD,EACbC,GAAOF,GAAYL,EAAS,EAC5BO,GAAYP,EACb,CACMO,EAAMP,EAAYK,GAEnBE,GAAOF,IAAUE,EAAQF,EAE7B,IAAIJ,GAAOM,GAASh/B,KAAKykB,GAAG,IAC5B+Z,GAAUn/B,KACR,GAAI47B,GAAAU,cACFnY,EAAOxjB,KAAKM,IAAIo+B,GAChBlb,EAAOxjB,KAAKO,IAAIm+B,KAMrB,MAFAF,GAAUn/B,KAAK,GAAI47B,GAAAU,cAAc,EAAE,IAE7B,GAGUtB,EAAA4E,qBAAd,SAAmC/N,EAAiCwC,EAAYz5B,EAASC,EAASglC,EAAkBC,GAKnH,IAAI,GAHHC,GAAsB1L,EAAKne,MAAM4pB,GAG1B1nC,EAAI,EAAGA,EAAI2nC,EAAM/mC,OAAQZ,IAG/By5B,EAAQ4C,SAASsL,EAAM3nC,GAAIwC,EAAGC,GAC9BA,GAAMglC,CAERhO,GAAQ4C,SARU,GAQK75B,EAAGC,IAGbmgC,EAAAgF,wBAAd,SAAsCnO,EAAiCwC,EAAYwL,EAAkBC,GAMpG,IAAI,GAJHC,GAAsB1L,EAAKne,MAAM4pB,GAE9BG,EAAkB,EAClBC,EAAc,EACV9nC,EAAI,EAAGA,EAAI2nC,EAAM/mC,OAAQZ,IACjC,CACO,GAAI0hB,GAAsB+X,EAAQsO,YAAYJ,EAAM3nC,GACjD0hB,GAAQ4E,MAAMuhB,IAAUA,EAAWnmB,EAAQ4E,OAC9CwhB,GAA4BL,EAEnC,OAAQnhB,MAAMuhB,EAASrhB,OAAOshB,IAGjBlF,EAAAoF,YAAd,SAA0BvO,EAAiCj3B,EAASC,EAChEwlC,EAASC,EAASjoC,EAASkoC,EAAmBC,EAAmBC,GAEjEJ,EAAI,EAAIhoC,IAAGA,EAAIgoC,EAAI,GACnBC,EAAI,EAAIjoC,IAAGA,EAAIioC,EAAI,GACvBzO,EAAQ6C,YACR7C,EAAQgD,OAAOj6B,EAAEvC,EAAGwC,GACpBg3B,EAAQ6O,MAAM9lC,EAAEylC,EAAGxlC,EAAKD,EAAEylC,EAAGxlC,EAAEylC,EAAGjoC,GAClCw5B,EAAQ6O,MAAM9lC,EAAEylC,EAAGxlC,EAAEylC,EAAG1lC,EAAKC,EAAEylC,EAAGjoC,GAClCw5B,EAAQ6O,MAAM9lC,EAAKC,EAAEylC,EAAG1lC,EAAKC,EAAKxC,GAClCw5B,EAAQ6O,MAAM9lC,EAAKC,EAAKD,EAAEylC,EAAGxlC,EAAKxC,GAClCw5B,EAAQ+C,YAQP/C,EAAQ90B,UAAYwjC,EACpB1O,EAAQzzB,UAAYqiC,EACpB5O,EAAQxzB,YAAcmiC,EAEtB3O,EAAQmD,SACRnD,EAAQoD,QAGb+F,IArJaxjC,GAAAwjC,aAAAA,ybCPb,IAAA2F,GAAAjoC,EAAA,2BAMAkoC,EAAA,SAAAC,GAEI,QAAAD,GAAmBjD,SACrBkD,GAAA9nC,KAAAf,KAAM2lC,IAAQ3lC,KAsBhB,MAzB2C8oC,GAAAF,EAAAC,GASnCD,EAAAhqB,UAAAinB,iBAAP,WACC,MAAO7lC,MAAK+oC,iBAAiBlD,oBAEvB+C,EAAAhqB,UAAA/W,UAAP,SAAiBmhC,GAChBhpC,KAAK+oC,iBAAiBlhC,UAAUmhC,IAG1BJ,EAAAhqB,UAAAsnB,iBAAP,SAAwB8C,GACvBhpC,KAAK+oC,iBAAiB7C,iBAAiB8C,IAGjCJ,EAAAhqB,UAAAqqB,sBAAP,SAA6BD,GAC5B,MAAOhpC,MAAK+oC,iBAAiBE,sBAAsBD,IAIrDJ,GAzB2CD,EAAAO,YAArB1pC,GAAAopC,aAAAA,qHCRtB,SAAYO,GACJA,EAAA,eAAA,iBACAA,EAAA,aAAA,eACAA,EAAA,aAAA,eACAA,EAAA,YAAA,cACAA,EAAA,UAAA,YACAA,EAAA,SAAA,WACAA,EAAA,gBAAA,kBACAA,EAAA,aAAA,eACAA,EAAA,YAAA,eATI3pC,EAAA2pC,cAAA3pC,EAAA2pC,uGCAZ,IAAAC,GAAA1oC,EAAA,iBACA2oC,EAAA3oC,EAAA,wBAMAQ,EAAAR,EAAA,aAEA4oC,EAAA5oC,EAAA,wDAEA6oC,EAAA,WAYI,QAAAA,KACIvpC,KAAKwpC,YAAc,GAAIJ,GAAAK,YACvBzpC,KAAK0pC,uBAAyB,GAAIC,KAClC3pC,KAAK4pC,uBAAyB,GAAID,KAClC3pC,KAAK6pC,uBAAyB,GAAIF,KAGlC3pC,KAAK0O,OAASxN,EAAOkgB,OAAOrf,SAE5B/B,KAAK0O,OAAOqC,MAAMpD,QAAQ/K,EAAI,EAC9B5C,KAAK0O,OAAOqC,MAAMpD,QAAQ9K,EAAI,EAI9B7C,KAAKuE,OAASrD,EAAOmgB,OAAOtf,QAExBma,QAASsI,SAASxf,KAClB0J,OAAQ1O,KAAK0O,OACb1M,SACE02B,WAAU,EACV9R,OAAO,IACPF,MAAM,IACNiS,YAAW,KAKjB34B,KAAK8pC,eAyQb,MAtQWP,GAAA3qB,UAAAmrB,aAAP,SAAoBrjB,EAAaE,GAC/B,GAAIojB,GAAiB9oC,EAAOmT,OAAOS,UAAU4R,EAAM,EAAEE,EAAO,EAAEF,EAAME,MAChEqjB,EAAoBb,EAAAK,YAAYS,kBAAkBF,EAAe,EAAE,GACvEC,GAAMhmC,gBAAgBC,SAAWolC,EAAAa,mBAAmBC,aACpDH,EAAMpmC,YAAc,EACpB3C,EAAOE,KAAKwF,UAAUqjC,GAAM,GAC5B/oC,EAAOwM,MAAM5E,IAAI9I,KAAK0O,OAAOqC,OAAQk5B,KAGhCV,EAAA3qB,UAAAyrB,qBAAP,WACE,MAAQrqC,MAAKuE,OAAc,SAGrBglC,EAAA3qB,UAAA0rB,wBAAR,SAAgChnB,EAAYinB,GAC1C,MAAOjnB,GAAK,IAAIinB,GAGVhB,EAAA3qB,UAAA4rB,uBAAR,SAA+BlnB,EAAYinB,GACzC,MAAOjnB,GAAK,IAAIinB,GAGThB,EAAA3qB,UAAA6rB,uBAAP,SAA8BnnB,EAAYinB,EAAsBvoB,GAC9DhiB,KAAK4pC,uBAAuBtkC,IAAItF,KAAKwqC,uBAAuBlnB,EAAKinB,GAAWvoB,GAC5ErC,QAAQD,IAAI,oDAAoD1f,KAAK4pC,uBAAuBr3B,KAAKvR,SAG5FuoC,EAAA3qB,UAAA8rB,yBAAP,SAAgCpnB,EAAYinB,EAAsBvoB,GAChEhiB,KAAK4pC,uBAAuBe,OAAO3qC,KAAKwqC,uBAAuBlnB,EAAKinB,KAI/DhB,EAAA3qB,UAAAgsB,yBAAP,SAAgCtnB,EAAYinB,EAAsBvoB,GAChEhiB,KAAK6pC,uBAAuBvkC,IAAItF,KAAKsqC,wBAAwBhnB,EAAKinB,GAAWvoB,GAC7ErC,QAAQD,IAAI,sDAAsD1f,KAAK6pC,uBAAuBt3B,KAAKvR,SAG9FuoC,EAAA3qB,UAAAisB,2BAAP,SAAkCvnB,EAAYinB,EAAsBvoB,GAClEhiB,KAAK6pC,uBAAuBc,OAAO3qC,KAAKsqC,wBAAwBhnB,EAAKinB,KAa/DhB,EAAA3qB,UAAAksB,uBAAR,SAA+B9lC,EAAiBulC,GAC9C,MAAOvlC,GAAK9C,GAAG,IAAIqoC,GAGdhB,EAAA3qB,UAAAmsB,uBAAP,SAA8B/lC,EAAiBulC,EAAsBvoB,GACnEhiB,KAAK0pC,uBAAuBpkC,IAAItF,KAAK8qC,uBAAuB9lC,EAAKulC,GAAWvoB,IAGvEunB,EAAA3qB,UAAAosB,yBAAP,SAAgChmC,EAAiBulC,EAAsBvoB,GACrEhiB,KAAK0pC,uBAAuBiB,OAAO3qC,KAAK8qC,uBAAuB9lC,EAAKulC,KAG/DhB,EAAA3qB,UAAAqsB,oBAAP,SAA2BjmC,EAAiBulC,GAC1C,MAAOvqC,MAAK0pC,uBAAuBwB,IAAIlrC,KAAK8qC,uBAAuB9lC,EAAKulC,KAGnEhB,EAAA3qB,UAAAusB,oBAAP,SAA2BnmC,EAAiBulC,GAC1C,MAAQvqC,MAAK0pC,uBAAuBx8B,IAAIlN,KAAK8qC,uBAAuB9lC,EAAKulC,KAGpEhB,EAAA3qB,UAAAwsB,UAAP,SAAiB7mC,GACfvE,KAAKgc,MAAQ9a,EAAO6a,MAAMha,OAAOwC,EAAO0X,QACxCjc,KAAKmc,gBAAkBjb,EAAO4a,gBAAgB/Z,OAAO/B,KAAK0O,QAC1D1O,KAAKmc,gBAAgBH,MAAQhc,KAAKgc,MAClChc,KAAKmc,gBAAgBpQ,WAAWxH,OAAOC,SAAU,EACjDxE,KAAKmc,gBAAgBpQ,WAAW0O,UAAY,GAE5CvZ,EAAOwM,MAAM5E,IAAI9I,KAAK0O,OAAOqC,MAAO/Q,KAAKmc,iBAEzC5X,EAAO4L,WAAW6L,MAAQhc,KAAKgc,OAG5ButB,EAAA3qB,UAAAysB,mBAAP,SAA0B9mC,GACxB,GAAI+mC,GAAkBtrC,IAEtBkB,GAAO2J,OAAOuR,GAAG7X,EAAO8kC,EAAAF,YAAYoC,aAClC,SAASvpB,GACPspB,EAAGE,wBAAwBnC,EAAAF,YAAYoC,aAAavpB,KAExD9gB,EAAO2J,OAAOuR,GAAG7X,EAAO8kC,EAAAF,YAAYsC,YAClC,SAASzpB,GACPspB,EAAGE,wBAAwBnC,EAAAF,YAAYsC,YAAYzpB,MAGhDunB,EAAA3qB,UAAA8sB,cAAP,SAAqBC,GAEnBzqC,EAAO2J,OAAO2Y,IAAIxjB,KAAKqpC,EAAAF,YAAYyC,aAAa,SAAS5pB,MACzD9gB,EAAO2J,OAAO2Y,IAAIxjB,KAAKqpC,EAAAF,YAAYt1B,gBAAgB,SAASmO,MAC5D9gB,EAAO2J,OAAO2Y,IAAIxjB,KAAKqpC,EAAAF,YAAYr1B,aAAa,SAASkO,MACzD9gB,EAAO2J,OAAO2Y,IAAIxjB,KAAKqpC,EAAAF,YAAYv1B,eAAe,SAASoO,OAGrDunB,EAAA3qB,UAAAitB,2BAAR,SAAmCtB,EAAsBvoB,GAEvD,IAAI,GADApT,GAAuBoT,EAAMpT,MACzBjO,EAAE,EAAEA,EAAEiO,EAAM5N,OAAOL,IAEtBX,KAAKirC,oBAAoBr8B,EAAMjO,GAAGmO,MAAMy7B,IACzCvqC,KAAKmrC,oBAAoBv8B,EAAMjO,GAAGmO,MAAMy7B,GAAWvqC,KAAKuqC,EAAUvoB,GAEjEhiB,KAAKirC,oBAAoBr8B,EAAMjO,GAAGoO,MAAMw7B,IACzCvqC,KAAKmrC,oBAAoBv8B,EAAMjO,GAAGoO,MAAMw7B,GAAWvqC,KAAKuqC,EAAUvoB,IAIhEunB,EAAA3qB,UAAA4sB,wBAAR,SAAgCjB,EAAsBvoB,GAKpD,IAAI,GAFAzP,GAAOsN,MAAMisB,KAAO9rC,KAAK6pC,uBAAuBt3B,QAE5C5R,EAAE,EAAEA,EAAE4R,EAAKvR,OAAOL,IAAK,CAC7B,GAAIorC,GAAcx5B,EAAK5R,EAGvB,IAAGorC,EAAKC,SAASzB,GAAY,CAEWvqC,KAAK6pC,uBAAuB38B,IAAI6+B,GAC9D/rC,KAAKuqC,EAAUvoB,MAKrBunB,EAAA3qB,UAAAqtB,sBAAR,SAA8B1B,EAAsBvoB,GAKlD,IAAI,GAFAzP,GAAOsN,MAAMisB,KAAO9rC,KAAK4pC,uBAAuBr3B,QAE5C5R,EAAE,EAAEA,EAAE4R,EAAKvR,OAAOL,IAAK,CAC7B,GAAIurC,GAAc35B,EAAK5R,EAGvB,IAAGurC,EAAKF,SAASzB,GAAY,CAESvqC,KAAK4pC,uBAAuB18B,IAAIg/B,GAC5DlsC,KAAKuqC,EAAUvoB,MAcrBunB,EAAA3qB,UAAAkrB,aAAP,WACCnqB,QAAQD,IAAI,2BACZ,IAAI4rB,GAAkBtrC,IAEtBkB,GAAO2J,OAAOuR,GAAGpc,KAAK0O,OAAO26B,EAAAF,YAAYv1B,eACvC,SAASoO,GACPspB,EAAGO,2BAA2BxC,EAAAF,YAAYv1B,eAAeoO,KAE7D9gB,EAAO2J,OAAOuR,GAAGpc,KAAK0O,OAAO26B,EAAAF,YAAYr1B,aACvC,SAASkO,GACPspB,EAAGO,2BAA2BxC,EAAAF,YAAYr1B,aAAakO,KAE3D9gB,EAAO2J,OAAOuR,GAAGpc,KAAK0O,OAAO26B,EAAAF,YAAYr1B,aACvC,SAASkO,GACPspB,EAAGO,2BAA2BxC,EAAAF,YAAYr1B,aAAakO,KAE3D9gB,EAAO2J,OAAOuR,GAAGpc,KAAK0O,OAAO26B,EAAAF,YAAYyC,aACvC,SAAS5pB,GACPspB,EAAGE,wBAAwBnC,EAAAF,YAAYr1B,aAAakO,KAExD9gB,EAAO2J,OAAOuR,GAAGpc,KAAK0O,OAAO26B,EAAAF,YAAYgD,YACvC,SAASnqB,GACPspB,EAAGW,sBAAsB5C,EAAAF,YAAYgD,YAAYnqB,KAErD9gB,EAAO2J,OAAOuR,GAAGpc,KAAK0O,OAAO26B,EAAAF,YAAYiD,UACvC,SAASpqB,GACPspB,EAAGW,sBAAsB5C,EAAAF,YAAYiD,UAAUpqB,KAEnD9gB,EAAO2J,OAAOuR,GAAGpc,KAAK0O,OAAO26B,EAAAF,YAAYkD,SACvC,SAASrqB,GACPspB,EAAGW,sBAAsB5C,EAAAF,YAAYkD,SAASrqB,MAItDpE,OAAA2lB,eAAWgG,EAAA3qB,UAAA,cAAX,WACF,MAAO5e,MAAKssC,aAGb,SAAkB7lC,GACjBzG,KAAKssC,QAAU7lC,mCAGhBmX,OAAA2lB,eAAWgG,EAAA3qB,UAAA,mBAAX,WACC,MAAO5e,MAAKusC,kBAGb,SAAuB9lC,GACtBzG,KAAKusC,aAAe9lC,mCAIrBmX,OAAA2lB,eAAWgG,EAAA3qB,UAAA,uBAAX,WACC,MAAO5e,MAAKwsC,sBAGb,SAA2B/lC,GAC1BzG,KAAKwsC,iBAAmB/lC,mCAIzBmX,OAAA2lB,eAAWgG,EAAA3qB,UAAA,aAAX,WACC,MAAO5e,MAAKysC,YAGb,SAAiBhmC,GAChBzG,KAAKysC,OAAShmC,mCAIfmX,OAAA2lB,eAAWgG,EAAA3qB,UAAA,8BAAX,WACC,MAAO5e,MAAK0sC,6BAGb,SAAkCjmC,GACjCzG,KAAK0sC,wBAA0BjmC,mCAIhCmX,OAAA2lB,eAAWgG,EAAA3qB,UAAA,8BAAX,WACC,MAAO5e,MAAK2sC,6BAGb,SAAkClmC,GACjCzG,KAAK2sC,wBAA0BlmC,mCAIhCmX,OAAA2lB,eAAWgG,EAAA3qB,UAAA,8BAAX,WACC,MAAO5e,MAAK4sC,6BAGb,SAAkCnmC,GACjCzG,KAAK4sC,wBAA0BnmC,mCAGhCmX,OAAA2lB,eAAWgG,EAAA3qB,UAAA,cAAX,WACC,MAAO5e,MAAK6sC,aAGb,SAAkBpmC,GACjBzG,KAAK6sC,QAAUpmC,mCAKjB8iC,IAhTa/pC,GAAA+pC,aAAAA,2MCXb,IAAAroC,GAAAR,EAAA,aAEAkjC,EAAAljC,EAAA,6BAEA+oC,EAAA,WAAA,QAAAA,MAgLA,MA9KkBA,GAAAqD,cAAd,SAA4BC,EAAiBC,GAEzC,GAAIC,IAAWF,EAAGnqC,EAAEoqC,EAAGpqC,GAAG,EACtBsqC,GAAWH,EAAGlqC,EAAEmqC,EAAGnqC,GAAG,EAEtBsqC,EAAUxkC,KAAKC,IAAImkC,EAAGnqC,EAAEqqC,GACxBG,EAAUzkC,KAAKC,IAAImkC,EAAGlqC,EAAEqqC,GAGxBG,EAASN,EAAGnqC,EAAEoqC,EAAGpqC,EAAK,GAAK,EAC3B0qC,EAASP,EAAGlqC,EAAEmqC,EAAGnqC,EAAK,GAAK,EAE3B0qC,EAAmBrsC,EAAOI,OAAOS,OACjCgrC,EAAGnqC,EAAEuqC,EAAQE,EACbN,EAAGlqC,EAAEuqC,EAAQE,GAEbE,EAAmBtsC,EAAOI,OAAOS,OACjCirC,EAAGpqC,EAAEuqC,EAAQE,EACbL,EAAGnqC,EAAEuqC,EAAQE,GAEb3a,EAA8B,GAAI9S,MAGtC,OAFA8S,GAAO3qB,KAAKulC,GACZ5a,EAAO3qB,KAAKwlC,GACN,GAGI/D,EAAAgE,0BAAd,SAAwCzoC,GACtC,MAAM,IAAM4+B,GAAAU,cAAct/B,EAAKrC,SAASC,EAAEoC,EAAKrC,SAASE,IAG5C4mC,EAAAxG,mBAAd,SAAiC5jB,GAa/B,MAXuB,IAApBA,EAAYre,SAEbqe,GAAe,MAGL,QACRG,SAASH,EAAY2nB,UAAU,EAAE,GAAI,IAAI,IACzCxnB,SAASH,EAAY2nB,UAAU,EAAE,GAAI,IAAI,IACzCxnB,SAASH,EAAY2nB,UAAU,EAAE,GAAI,IAAI,IACzCxnB,SAASH,EAAY2nB,UAAU,EAAE,GAAI,IAAI,IAAM,KAKvCyC,EAAAiE,eAAd,SAA6BC,GAI3B,IAAI,GAFAC,GAAoC,GAAI/tB,OAEpCjd,EAAE,EAAEA,EAAE+qC,EAAW3sC,OAAO4B,IAChC,CACE,GAAIirB,GAAkB8f,EAAW/qC,EACjCgrC,GAAa5lC,KAAK9G,EAAOI,OAAOS,OAAO8rB,EAAEjrB,EAAEirB,EAAEhrB,IAE/C,MAAM,IAGM4mC,EAAAoE,0CAAd,SAAwD7jC,EAAqB8jC,GAE3E,IAAI,GADAF,GAAoC,GAAI/tB,OACpClf,EAAE,EAAEA,EAAEmtC,EAAc9sC,OAAOL,IAAKitC,EAAa5lC,KACnDhI,KAAK+tC,gCAAgC/jC,EAAO8jC,EAAcntC,IAC1D,OAAM,IAGI8oC,EAAAsE,gCAAd,SAA8C/jC,EAAqBrH,GAE/D,MADgBzB,GAAOI,OAAOS,OAAOY,EAASC,EAAEoH,EAAOpH,EAAED,EAASE,EAAEmH,EAAOnH,IAIjE4mC,EAAAuE,0BAAd,SAAwCtc,GAEpC,MADgC,IAAIkS,GAAAU,cAAc5S,EAAO9uB,EAAE8uB,EAAO7uB,IAIxD4mC,EAAAwE,0BAAd,SAAwCtrC,GAEpC,MADgBzB,GAAOI,OAAOS,OAAOY,EAASC,EAAED,EAASE,IAI/C4mC,EAAAyE,6BAAd,SAA2CC,EAAuBL,GAChE,GAAIF,GAAoC5tC,KAAK6tC,0CAA0CM,EAASL,EAGhG,OAD0B5sC,GAAOmT,OAAO1M,aAAawmC,EAASvrC,EAAEurC,EAAStrC,GAAG+qC,KAYhEnE,EAAAS,kBAAd,SAAgCllC,EAAiBopC,EAAkBC,GAC/D,GAAIC,GAAmCtuC,KAAK0tC,eAAe1oC,EAAKvC,SAChEvB,GAAOG,SAASgI,MAAMilC,EAAYF,EAAWA,EAAWppC,EAAKrC,SAE7D,IAAI4rC,GAAmCvuC,KAAK0tC,eAAe1oC,EAAKvC,SAChEvB,GAAOG,SAASgI,MAAMklC,EAAYF,EAAWA,EAAWrpC,EAAKrC,SAK7D,KAAI,GAHAoI,GAA4B,GAAI8U,OAG5Blf,EAAE,EAAEA,EAAE2tC,EAAYttC,OAAOL,IACjC,CACE,GAAIitC,GAAoC,GAAI/tB,OACxC3Q,EAAMvO,EAAE,IAAK2tC,EAAYttC,OAAU,EAAKL,EAAE,EAE1C6tC,EAA+BxuC,KAAK8sC,cAAcwB,EAAY3tC,GAAG2tC,EAAYp/B,IAC7Eu/B,EAAgCzuC,KAAK8sC,cAAcyB,EAAY5tC,GAAG4tC,EAAYr/B,GAClF0+B,GAAa5lC,KAAKwmC,EAAa,IAC/BZ,EAAa5lC,KAAKymC,EAAc,IAChCb,EAAa5lC,KAAKymC,EAAc,IAChCb,EAAa5lC,KAAKwmC,EAAa,GAS/B,IAAIhU,GAAuBt5B,EAAOG,SAASuG,OAAOgmC,GAC9Cc,EAAsBxtC,EAAOmT,OAAO1M,aAAa6yB,EAAO53B,EAAE43B,EAAO33B,GAAG+qC,IACjErpC,QAAQ6B,UAAU,cAAcC,YAAY,UAEnD0E,GAAO/C,KAAK0mC,GAGd,GAAIC,GAAsBztC,EAAOE,KAAKW,QAAQO,MAAOyI,GAGrD,OADA4jC,GAAQ9qC,YAAc,EAChB,GAII4lC,EAAAmF,yBAAd,SAAuC7B,EAAiBC,GAExD,GAAI6B,GAAI9B,EAAGnqC,EAAEoqC,EAAGpqC,EACZksC,EAAI/B,EAAGnqC,EAAEoqC,EAAGnqC,EACZksC,EAAI/B,EAAGpqC,EAAEmqC,EAAGnqC,EACZosC,EAAIhC,EAAGnqC,EAAEkqC,EAAGlqC,EAEZyT,EAAMu4B,EAAIE,EAAID,EAAIE,EAClBC,EAAgBF,EAAIA,EAAIC,EAAIA,EAC5BE,GAAS,CACQ,IAAjBD,IACAC,EAAQ54B,EAAM24B,EAElB,IAAI5hB,GAAIC,CAoBR,OAlBI4hB,GAAQ,GAEV7hB,EAAK0f,EAAGnqC,EACR0qB,EAAKyf,EAAGlqC,GAEDqsC,EAAQ,GACf7hB,EAAK2f,EAAGpqC,EACR0qB,EAAK0f,EAAGnqC,IAGRwqB,EAAK0f,EAAGnqC,EAAIssC,EAAQH,EACpBzhB,EAAKyf,EAAGlqC,EAAIqsC,EAAQF,GAOf9tC,EAAOI,OAAOS,OAAOsrB,EAAGC,IAGnCmc,IAhLajqC,GAAAiqC,YAAAA,2cCDb,IAAAvoC,GAAAR,EAAA,aACAyuC,EAAAzuC,EAAA,iBAGA4oC,EAAA5oC,EAAA,2DAKA0uC,EAAA,SAAAvG,GAOC,QAAAuG,GAAYzJ,EAAgB0J,EAAkBljB,EAAc+a,EAAmBvkC,EAAuBX,GAAtG,GAAAstC,GAECzG,EAAA9nC,KAAAf,KAAM2lC,EAAQ0J,IAASrvC,WAEvBsvC,GAAKnjB,OAASA,EACdmjB,EAAKpI,YAAcA,EACboI,EAAKC,WAAaruC,EAAOmT,OAAOyY,OAC5BnqB,EAASC,EAAED,EAASE,EACpBysC,EAAKnjB,OACLnqB,EACTstC,EAAKpI,aACLoI,EAAKC,WAAWtrC,gBAAgBC,SAAWolC,EAAAa,mBAAmBC,eAsCjE,MAxDkCtB,GAAAsG,EAAAvG,GAsB1BuG,EAAAxwB,UAAAmoB,UAAP,WACC,MAAO/mC,MAAW,QAGTovC,EAAAxwB,UAAA4wB,QAAP,WACF,MAAOxvC,MAAe,YAGvB4d,OAAA2lB,eAAW6L,EAAAxwB,UAAA,kBAAX,WACC,MAAO5e,MAAKyvC,iBAGb,SAAsBhpC,GACrBzG,KAAKyvC,YAAchpC,mCAGpBmX,OAAA2lB,eAAW6L,EAAAxwB,UAAA,mBAAX,WACC,MAAO5e,MAAK0vC,kBAGb,SAAuBjpC,GACtBzG,KAAK0vC,aAAejpC,mCAIrBmX,OAAA2lB,eAAW6L,EAAAxwB,UAAA,cAAX,WACC,MAAO5e,MAAK2vC,aAGb,SAAkBlpC,GACjBzG,KAAK2vC,QAAUlpC,mCAIjB2oC,GAxDkCD,EAAAS,YAArBpwC,GAAA4vC,aAAAA,4fCXb,IAAAhG,GAAA1oC,EAAA,kBAEAQ,EAAAR,EAAA,aAGAioC,EAAAjoC,EAAA,8BAMAkvC,EAAA,SAAA/G,GAII,QAAA+G,GAAYjK,EAAgB0J,GAA5B,GAAAC,GACFzG,EAAA9nC,KAAAf,KAAM2lC,IAAQ3lC,WACRsvC,GAAKD,SAAWA,IAsCxB,MA5C2CvG,GAAA8G,EAAA/G,GAWhC+G,EAAAhxB,UAAAinB,iBAAP,WACF,MAAQuD,GAAAK,YAAYgE,0BAA2BztC,KAAMwvC,YAG/CI,EAAAhxB,UAAA/W,UAAP,SAAiBmhC,GAChB9nC,EAAOE,KAAKyG,UAAW7H,KAAKwvC,UAC3BpG,EAAAK,YAAYwE,0BAA0BjF,KAGjC4G,EAAAhxB,UAAAsnB,iBAAP,SAAwB8C,GACvB9nC,EAAOE,KAAKyG,UAAW7H,KAAMwvC,UAC5BpG,EAAAK,YAAYwE,0BAA0BjF,KAGjC4G,EAAAhxB,UAAAqqB,sBAAP,SAA6BD,GAE5B,MAAQ9nC,GAAOG,SAAS4T,SAAUjV,KAAMwvC,UAAU/sC,SAAU2mC,EAAAK,YAAYwE,0BAA0BjF,KAGzF4G,EAAAhxB,UAAAixB,YAAP,WACI,MAAO7vC,MAAa,UAI3B4d,OAAA2lB,eAAWqM,EAAAhxB,UAAA,gBAAX,WACC,MAAO5e,MAAK8vC,eAGb,SAAoBrpC,GACnBzG,KAAK8vC,UAAYrpC,mCAInBmpC,GA5C2CjH,EAAAO,YAArB1pC,GAAAowC,YAAAA,wGCwBtB,SAAAG,KAEEh/B,EAAMi/B,UAAUC,mDAtClB,IAAAC,GAAAxvC,EAAA,qCACAyvC,EAAAzvC,EAAA,+BACA0vC,EAAA1vC,EAAA,+CACAkjC,EAAAljC,EAAA,yBACA2vC,EAAA3vC,EAAA,mBACA4vC,EAAA5vC,EAAA,sCACA6vC,EAAA7vC,EAAA,6CACAQ,EAAAR,EAAA,aAGIirC,EAAe,GAAI2E,GAAA/G,aACnBx4B,EAA4B,GAAIo/B,GAAAK,oBAAoB7E,GACpDsE,EAAgC,GAAIC,GAAA9N,iBAAiB,cAAcrxB,GAEnE0/B,EAAuB,GAAIF,GAAAnB,aAC3B,GAAIiB,GAAAK,QAAQ,WACZ,GAAIN,GAAA1J,mBACJ,GAAG,EAAE,GAAI9C,GAAAU,cAAc,IAAI,SAGvBqM,EAAuB,GAAIJ,GAAAnB,aAC7B,GAAIiB,GAAAK,QAAQ,WACZ,GAAIN,GAAA1J,mBACJ,GAAG,EAAE,GAAI9C,GAAAU,cAAc,IAAI,QAIjCvzB,GAAM6/B,iBAAiB5oC,KAAKyoC,GAC5B1/B,EAAM6/B,iBAAiB5oC,KAAK2oC,GAE5BhF,EAAa5B,aAAakG,EAAanN,WAAWmN,EAAalN,YAE/DpjB,SAAQD,IAAI,mBADU,IAAK,GACa,MACxCmxB,YAAYd,EAFU,IAAK,IAG3B7uC,EAAOkgB,OAAO2J,IAAI4gB,EAAaj9B,yWCjC/B,IAAA46B,GAAA5oC,EAAA,yBAEA0oC,EAAA1oC,EAAA,+CAEAQ,EAAAR,EAAA,aAIAowC,EAAA,WAKI,QAAAA,GAAmBC,EAAwBpF,EAAgCqF,GAC7EhxC,KAAKgxC,YAAcA,CACnB,IAAI9hC,GAAgBlP,KAAKixC,kBAAkBF,EAAYpF,GAAcuF,oBAErElxC,MAAKmxC,YAAcjwC,EAAOmT,OAAOyY,OAAO5d,EAAEvM,SAASC,EAAEsM,EAAEvM,SAASE,EAAE,IAEhEU,UAAS,EAETgB,QAAQ6B,UAAU,cAAcC,YAAY,QAC3C,GACHrG,KAAKoxC,YAAchI,EAAAK,YAAYS,kBAAkBlqC,KAAKmxC,YAAY,KAAK,KACvEnxC,KAAKoxC,YAAYntC,gBAAgBC,SAAWolC,EAAAa,mBAAmBC,aAI/DpqC,KAAKmxC,YAAYltC,gBAAgBC,SAAWolC,EAAAa,mBAAmBkH,qBAC/DrxC,KAAKmxC,YAAYltC,gBAAgBE,KAAOmlC,EAAAa,mBAAmBC,aAAad,EAAAa,mBAAmBmH,gBAE3FtxC,KAAKoxC,YAAYntC,gBAAgBC,SAAWolC,EAAAa,mBAAmBoH,uBAC/DvxC,KAAKoxC,YAAYntC,gBAAgBE,KAAOmlC,EAAAa,mBAAmBC,aAAad,EAAAa,mBAAmBqH,cAC3FxxC,KAAKoxC,YAAYvtC,YAAc,EAiDjC,MA9CQitC,GAAAlyB,UAAAqyB,kBAAP,SAAyBF,EAAwBpF,GAChD,MAAOA,GAAa8F,UAAUvkC,IAAIlN,KAAKgxC,YAAYU,YAAYX,GAAapL,QAAQzjC,KAG9E4uC,EAAAlyB,UAAA+yB,YAAP,SAAmBZ,EAAwBpF,GAC1CzqC,EAAOwM,MAAM5E,IAAI6iC,EAAaj9B,OAAOqC,OAAO/Q,KAAKoxC,YAAYpxC,KAAKmxC,cAClExF,EAAaiG,IAAI5xC,KAAKoxC,YAAYpxC,KAAKixC,kBAAkBF,EAAYpF,GAAcuF,sBACnFvF,EAAaiG,IAAI5xC,KAAKmxC,YAAYnxC,KAAKixC,kBAAkBF,EAAYpF,GAAcuF,uBAI7EJ,EAAAlyB,UAAAizB,eAAP,WACC,MAAO7xC,MAAgB,aAGjB8wC,EAAAlyB,UAAAkzB,mBAAP,WACC,MAAO9xC,MAAgB,aAGxB4d,OAAA2lB,eAAWuN,EAAAlyB,UAAA,mBAAX,WACC,MAAO5e,MAAK+xC,kBAGb,SAAuBtrC,GACtBzG,KAAK+xC,aAAetrC,mCAIrBmX,OAAA2lB,eAAYuN,EAAAlyB,UAAA,mBAAZ,WACC,MAAO5e,MAAKgyC,kBAGb,SAAwBvrC,GACvBzG,KAAKgyC,aAAevrC,mCAIrBmX,OAAA2lB,eAAYuN,EAAAlyB,UAAA,mBAAZ,WACC,MAAO5e,MAAKiyC,kBAGb,SAAwBxrC,GACvBzG,KAAKiyC,aAAexrC,mCAItBqqC,IA1EatxC,GAAAsxC,kBAAAA,wfCJb,IAAAoB,GAAAxxC,EAAA,kBAQAyxC,EAAA,SAAAtJ,GAEI,QAAAsJ,GAAmBpB,EAAwBpF,EAAgChG,SAC7EkD,GAAA9nC,KAAAf,KAAM2lC,IAAQ3lC,KAmBhB,MAtB8C8oC,GAAAqJ,EAAAtJ,GAsB9CsJ,GAtB8CD,EAAAE,aAAxB5yC,GAAA2yC,eAAAA,kbCXtB,IAAA7I,GAAA5oC,EAAA,yBACA0oC,EAAA1oC,EAAA,+CAMA6vC,EAAA7vC,EAAA,uDACA2xC,EAAA3xC,EAAA,oBAMAQ,EAAAR,EAAA,aAKA4xC,EAAA,SAAAzJ,GAKC,QAAAyJ,GAAmBvB,EAAwBpF,EAAgChG,EAAgBqD,GAA3F,GAAAsG,GACCzG,EAAA9nC,KAAAf,KAAM+wC,EAAYpF,EAAahG,IAAQ3lC,KACnC2C,EAAWymC,EAAAK,YAAYwE,0BAA0BjF,SAIrDsG,GAAKxiB,OAAS,GAAIyjB,GAAAnB,aAAa,eAAe,GADrB,EACoCpG,GAAezkC,QAAQguC,SAAQ,KAC5FjD,EAAKxiB,OAAOyiB,WAAWhrC,OAAOC,SAAU,EAExC8qC,EAAKkD,aAAelD,EAAKxiB,OAAOyiB,WAChCD,EAAKkD,aAAavuC,gBAAgBC,SAAWolC,EAAAa,mBAAmBsI,eAChEnD,EAAKkD,aAAavuC,gBAAgBE,KAAOmlC,EAAAa,mBAAmBsI,eAAenJ,EAAAa,mBAAmBC,aAE9FkF,EAAKoD,WAAaxxC,EAAOmT,OAAOyY,OAAOnqB,EAASC,EAAED,EAASE,EAAE,IAAI0B,QAAQ6B,UAAU,cAAcC,YAAY,UAAU,GACvHipC,EAAKoD,WAAWzuC,gBAAgBC,SAAWolC,EAAAa,mBAAmBwI,qBAC9DrD,EAAKoD,WAAWzuC,gBAAgBE,KAAOmlC,EAAAa,mBAAmBwI,qBAAqBrJ,EAAAa,mBAAmBC,aAIlGkF,EAAKqC,YAAYZ,EAAYpF,KA+D/B,MAvF8C7C,GAAAwJ,EAAAzJ,GA4BtCyJ,EAAA1zB,UAAAg0B,gBAAP,WACC,MAAM,OAGAN,EAAA1zB,UAAAi0B,UAAP,WACC,MAAO7yC,MAAW,QAIZsyC,EAAA1zB,UAAAinB,iBAAP,WACC,MAAQuD,GAAAK,YAAYgE,0BAA0BztC,KAAKwyC,eAG7CF,EAAA1zB,UAAA/W,UAAP,SAAiBmhC,GAChB9nC,EAAOE,KAAKyG,UAAU7H,KAAKwyC,aAAapJ,EAAAK,YAAYwE,0BAA0BjF,IAC9E9nC,EAAOE,KAAKyG,UAAU7H,KAAK0yC,WAAWtJ,EAAAK,YAAYwE,0BAA0BjF,KAGtEsJ,EAAA1zB,UAAA+yB,YAAP,SAAmBZ,EAAwBpF,GAC1CzqC,EAAOwM,MAAM5E,IAAI6iC,EAAaj9B,OAAOqC,OAAO/Q,KAAK0yC,WAAW1yC,KAAKwyC,eACjE7G,EAAaiG,IAAI5xC,KAAK0yC,WAAW1yC,KAAKwyC,cAEtCxyC,KAAK0yC,WAAWzuC,gBAAgBC,SAAWolC,EAAAa,mBAAmBwI,qBAC9D3yC,KAAK0yC,WAAWzuC,gBAAgBE,KAAOmlC,EAAAa,mBAAmBwI,qBAAqBrJ,EAAAa,mBAAmBC,cAG5FkI,EAAA1zB,UAAAk0B,gBAAP,WACC,MAAO9yC,MAAe,YAGhBsyC,EAAA1zB,UAAAsyB,mBAAP,WACC,MAAOlxC,MAAiB,cAGzB4d,OAAA2lB,eAAY+O,EAAA1zB,UAAA,kBAAZ,WACC,MAAO5e,MAAK+yC,iBAGb,SAAuBtsC,GACtBzG,KAAK+yC,YAActsC,mCAGpBmX,OAAA2lB,eAAW+O,EAAA1zB,UAAA,oBAAX,WACC,MAAO5e,MAAKgzC,mBAGb,SAAwBvsC,GACvBzG,KAAKgzC,cAAgBvsC,mCAGtBmX,OAAA2lB,eAAW+O,EAAA1zB,UAAA,cAAX,WACC,MAAO5e,MAAKizC,aAGb,SAAkBxsC,GACjBzG,KAAKizC,QAAUxsC,mCAIjB6rC,GAvF8CD,EAAAF,eAAjC3yC,GAAA8yC,wBAAAA,ukBCrBb,IAAAY,GAAAxyC,EAAA,iDAOA0xC,EAAA,SAAAvJ,GAAA,QAAAuJ,oDAGA,MAH2CtJ,GAAAsJ,EAAAvJ,GAG3CuJ,GAH2Cc,EAAAtK,aAArBppC,GAAA4yC,aAAAA,gdCNtB,IAAA9I,GAAA5oC,EAAA,yBAGAwxC,EAAAxxC,EAAA,kBAEA0oC,EAAA1oC,EAAA,+CAEA2oC,EAAA3oC,EAAA,sDAEAQ,EAAAR,EAAA,aAKAyyC,EAAA,SAAAtK,GAIC,QAAAsK,GAAmBpC,EAAwBpF,EAAgCyH,GAA3E,GAAA9D,GACCzG,EAAA9nC,KAAAf,KAAMozC,EAAOzN,UAAQ3lC,KAIjB2C,GAFkBgpC,EAAa8F,UAAUvkC,IAAIkmC,EAAOC,mBAAmBtC,GAAapL,QAAQzjC,IAAI4wC,kBAAkBlvC,QAEzF0rC,EAAKgE,2BAA2BF,EAAOzH,GAAckG,iBAAiBlvC,gBAEnG2sC,GAAKiE,WAAaryC,EAAOmT,OAAOyY,OAAOnqB,EAASC,EAAED,EAASE,EAAE,MAE5D,GAEDysC,EAAKiE,WAAW1vC,YAAc,EACxByrC,EAAKiE,WAAWtvC,gBAAgBC,SAAWolC,EAAAa,mBAAmBmH,gBACpEhC,EAAKiE,WAAWtvC,gBAAgBE,KAE/BmlC,EAAAa,mBAAmBmH,gBACnBhI,EAAAa,mBAAmBqH,cACnBlI,EAAAa,mBAAmBC,aACnBd,EAAAa,mBAAmBoH,uBACnBjI,EAAAa,mBAAmBkH,qBAEpB/B,EAAKiE,WAAWvvC,YAAc,GAC9BsrC,EAAKiE,WAAWhvC,OAAOC,SAAU,EAEjC8qC,EAAKkE,yBAA2BtyC,EAAO+Y,WAAWlY,QACxC+M,MAAOwgC,EAAKmE,gBACZ1kC,MAAO48B,EAAa+H,aAAaxmC,IAAIkmC,EAAOO,wBAAwBhO,QAAQzjC,IAAI2vC,iBAChFx3B,QAAUzX,GAAI,EAAGC,GAAI,GACrByX,QAAU1X,GAAI,EAAGC,GAAI,GACrB7B,OAAO,EAChByZ,UAAU,OAGX60B,EAAKkE,yBAAyBjvC,OAAOC,SAAQ,EAC7C8qC,EAAKsE,8BAA8B7C,EAAYpF,KAwFjD,MA9HmC7C,GAAAqK,EAAAtK,GAyC3BsK,EAAAv0B,UAAA/W,UAAP,SAAiBmhC,GAChB9nC,EAAOE,KAAKyG,UAAU7H,KAAKuzC,WAAWnK,EAAAK,YAAYwE,0BAA0BjF,KAGtEmK,EAAAv0B,UAAAinB,iBAAP,WACC,MAAQuD,GAAAK,YAAYgE,0BAA0BztC,KAAKuzC,aAK7CJ,EAAAv0B,UAAA00B,2BAAP,SAAkCF,EAAczH,GAG/C,MADEA,GAAa+H,aAAaxmC,IAAIkmC,EAAOO,wBAAwBhO,QAAQzjC,KAKjEixC,EAAAv0B,UAAA+yB,YAAP,SAAmByB,EAAcrC,EAAwBpF,GACxDzqC,EAAOwM,MAAM5E,IAAI6iC,EAAaj9B,OAAOqC,OAAO/Q,KAAKuzC,aACjDryC,EAAOwM,MAAM5E,IAAI6iC,EAAaj9B,OAAOqC,OAAO/Q,KAAKwzC,2BACjDxzC,KAAK6zC,mBAAmBT,EAAOrC,EAAYpF,IAGrCwH,EAAAv0B,UAAAk1B,2BAAP,SAAkC/C,EAAwBpF,GAEzD3rC,KAAKyzC,gBAAgBxvC,gBAAgBC,SAAYolC,EAAAa,mBAAmBqH,cACpExxC,KAAK+zC,8BAA8Bt5B,UAAY,GAIzC04B,EAAAv0B,UAAAg1B,8BAAP,SAAqC7C,EAAwBpF,GAE5D3rC,KAAKyzC,gBAAgBxvC,gBAAgBC,SAAYolC,EAAAa,mBAAmBmH,gBACpEtxC,KAAK+zC,8BAA8Bt5B,UAAY,KAIzC04B,EAAAv0B,UAAAi1B,mBAAP,SAA0BT,EAAcrC,EAAwBiD,GAE/D,GAAIC,GAA4Bj0C,IAEhCg0C,GAAmBjJ,uBAClB/qC,KAAKyzC,gBACLpK,EAAAF,YAAYt1B,gBACZ,SAAS83B,EAAgCpB,EAAsBvoB,GAC9D,GAAIkyB,GAA6BD,EAAaX,2BAA2BF,EAAOzH,GAAcmG,oBACxD5wC,GAAOG,SAAS4T,SACrDi/B,EAAczxC,SAASwxC,EAAaR,gBAAgB9wC,UAEzBsxC,EAAaH,2BAA2B/C,EAAYpF,GAC3EsI,EAAaL,8BAA8B7C,EAAYpF,GAGzDA,EAAaxvB,gBAAgBnX,OAAOivC,EAAaV,YAEnD5zB,QAAQD,IAAI,yCAMTyzB,EAAAv0B,UAAA60B,cAAP,WACC,MAAOzzC,MAAe,YAGhBmzC,EAAAv0B,UAAAm1B,4BAAP,WACC,MAAO/zC,MAA6B,0BAIrC4d,OAAA2lB,eAAW4P,EAAAv0B,UAAA,gCAAX,WACC,MAAO5e,MAAKm0C,+BAGb,SAAoC1tC,GACnCzG,KAAKm0C,0BAA4B1tC,mCAGlCmX,OAAA2lB,eAAW4P,EAAAv0B,UAAA,kBAAX,WACC,MAAO5e,MAAKo0C,iBAGb,SAAsB3tC,GACrBzG,KAAKo0C,YAAc3tC,mCAErB0sC,GA9HmCjB,EAAAE,aAAtB5yC,GAAA2zC,aAAAA,mkBCZb,IAAAvP,GAAAljC,EAAA,gCAGA2zC,EAAA3zC,EAAA,0BAIA4zC,EAAA5zC,EAAA,qCACA6zC,EAAA7zC,EAAA,gCACA4vC,EAAA5vC,EAAA,6CACA0oC,EAAA1oC,EAAA,4CAIA8zC,EAAA9zC,EAAA,0CAOAQ,EAAAR,EAAA,aAEAypC,EAAA,SAAAtB,GAeI,QAAAsB,KAAA,GAAAmF,GACIzG,EAAA9nC,KAAAf,OAAOA,WAEPsvC,GAAKmC,UAAY,GAAI9H,KACrB2F,EAAKoE,aAAe,GAAI/J,KACxB2F,EAAKmF,MAAQ,GAAI9K,KACjB2F,EAAKrvC,QAAU,GAAI0pC,KAEnB2F,EAAKoF,yBAsOb,MA7PwC5L,GAAAqB,EAAAtB,GA0B7BsB,EAAAvrB,UAAA8mB,iCAAP,SAAwCsD,GACtC,MAAM,OAGDmB,EAAAvrB,UAAA81B,qBAAP,aAmCOvK,EAAAvrB,UAAA+1B,QAAP,SAAe5D,EAAwBhzB,GACrC,IAAI/d,KAAKy0C,MAAMvJ,IAAIntB,EAAK4nB,QAAQzjC,IAE9B,GAAGlC,KAAKy0C,MAAMvJ,IAAImJ,EAAAO,KAAKC,UAAU92B,EAAK+2B,YAAY/2B,EAAKg3B,eAAe7yC,IAEpElC,KAAKy0C,MAAMnvC,IAAIyY,EAAK4nB,QAAQzjC,GAC1BlC,KAAKy0C,MAAMvnC,IAAImnC,EAAAO,KAAKC,UAAU92B,EAAK+2B,YAAY/2B,EAAKg3B,eAAe7yC,SAGvE,CAGE,GAAI8yC,GAAkCh1C,KAAKyxC,UAAUvkC,IAAI6Q,EAAKg3B,cAAcpP,QAAQzjC,IAAI4wC,kBAapFmC,EAAgCj1C,KAAKyxC,UAAUvkC,IAAI6Q,EAAK+2B,YAAYnP,QAAQzjC,IAAI4wC,kBAEhFoC,EAAah0C,EAAO+Y,WAAWlY,QAC/B+M,MAAOkmC,EACPjmC,MAAOkmC,EACP56B,QAAUzX,GAAI,EAAGC,GAAI,GACrByX,QAAU1X,GAAI,EAAGC,GAAI,GACrB7B,OAAO,GACPyZ,UAAU,KAEdza,MAAKy0C,MAAMnvC,IAAIyY,EAAK4nB,QAAQzjC,GAAGgzC,GAE/Bh0C,EAAOwM,MAAM5E,IAAI9I,KAAK0O,OAAOqC,OAAOmkC,MAKnC/K,EAAAvrB,UAAAu2B,wBAAP,SAA+BpE,EAAwBqC,EAAcpC,GACnE,GAAIiD,GAA4Bj0C,KAAKC,QAAQiN,IAAIkmC,EAAOzN,QAAQzjC,GAEhE+xC,GAAaF,8BAA8BhlC,MACvCklC,EAAaX,2BAA2BF,EAAOpzC,MAAM6xC,iBAEzDoC,EAAaL,8BAA8B7C,EAAY/wC,OAGlDmqC,EAAAvrB,UAAAw2B,UAAP,SAAiBrE,EAAwBqC,GACvC,IAAIpzC,KAAKC,QAAQirC,IAAIkI,EAAOzN,QAAQzjC,IACpC,CACE,GAAI+xC,GAA4B,GAAIM,GAAApB,aAAapC,EAAY/wC,KAAKozC,EAClEpzC,MAAKC,QAAQqF,IAAI8tC,EAAOzN,QAAQzjC,GAAG+xC,GACnCA,EAAatC,YAAYyB,EAAOrC,EAAY/wC,QAIzCmqC,EAAAvrB,UAAAy2B,eAAP,SAAsBtE,EAAwBC,GAC5C,IAAIhxC,KAAKs1C,cAAcpK,IAAI8F,EAAYrL,QAAQzjC,IAC/C,CACE,GAAIqzC,GAAoB,GAAIjB,GAAAxD,kBAAkBC,EAAY/wC,KAAKgxC,EAC/DhxC,MAAK0zC,aAAapuC,IAAI0rC,EAAYrL,QAAQzjC,GAAGqzC,GAC7CA,EAAkB5D,YAAYZ,EAAY/wC,QAIvCmqC,EAAAvrB,UAAA42B,YAAP,SAAmBC,GACjB,MAAOz1C,MAAKyxC,UAAUvG,IAAIuK,EAAS9P,QAAQzjC,KAGtCioC,EAAAvrB,UAAAqyB,kBAAP,SAAyBwE,GACvB,MAAOz1C,MAAKyxC,UAAUvkC,IAAIuoC,EAAS9P,QAAQzjC,KAGtCioC,EAAAvrB,UAAA82B,oBAAP,SAA2BD,GACzB,MAAQz1C,MAAK21C,iBAAiB31C,KAAKixC,kBAAkBwE,GAAU3C,kBAAkBnwC,WAU5EwnC,EAAAvrB,UAAA+2B,iBAAP,SAAwBjkB,GACtB,MAAM,IAAMkS,GAAAU,cAAc5S,EAAO9uB,EAAE8uB,EAAO7uB,IAI5CsnC,EAAAvrB,UAAAg3B,qBAAA,SAAqBH,EAAkBzM,EAA4B+H,GACjE,GAAI8E,GAAkD,GAAIrB,GAAAlC,wBAAwBvB,EAAY/wC,KAAKy1C,EAAS9P,QAAQqD,EAEpH,OADAhpC,MAAK81C,YAAY/E,EAAY0E,EAASI,GAChC,GAID1L,EAAAvrB,UAAAk3B,YAAP,SAAmB/E,EAAwB0E,EAAkBM,GAGvD/1C,KAAKw1C,YAAYC,KAIbz1C,KAAKyxC,UAAUnsC,IAAImwC,EAAS9P,QAAQzjC,GAAG6zC,GAEvCA,EAAepE,YAAYZ,EAAY/wC,QAiB1CmqC,EAAAvrB,UAAAo3B,sBAAP,SAA6BjF,EAAwBqC,KAI9CjJ,EAAAvrB,UAAAgzB,IAAP,SAAW9iC,EAAkBC,GAC3B,GAAI6iC,GAAM1wC,EAAO+Y,WAAWlY,QACpB+M,MAAOA,EACPC,MAAOA,GAGf7N,GAAOwM,MAAM5E,IAAI9I,KAAK0O,OAAOqC,OAAO6gC,KAG/BzH,EAAAvrB,UAAAmrB,aAAP,SAAoBrjB,EAAaE,GAC/B,GAAIojB,GAAiB9oC,EAAOmT,OAAOS,UAAU4R,EAAM,EAAEE,EAAO,EAAEF,EAAME,MAChEqjB,EAAoBb,EAAAK,YAAYS,kBAAkBF,EAAe,EAAE,GACvEC,GAAMhmC,gBAAgBC,SAAWimC,EAAmBC,aACpDH,EAAMpmC,YAAc,EACpB3C,EAAOE,KAAKwF,UAAUqjC,GAAM,GAC5B/oC,EAAOwM,MAAM5E,IAAI9I,KAAK0O,OAAOqC,OAAQk5B,KAMvCrsB,OAAA2lB,eAAW4G,EAAAvrB,UAAA,iBAAX,WACF,MAAO5e,MAAKi2C,gBAGb,SAAqBxvC,GACpBzG,KAAKi2C,WAAaxvC,mCAGhBmX,OAAA2lB,eAAW4G,EAAAvrB,UAAA,aAAX,WACF,MAAO5e,MAAKk2C,YAGb,SAAiBzvC,GAChBzG,KAAKk2C,OAASzvC,mCAGZmX,OAAA2lB,eAAW4G,EAAAvrB,UAAA,eAAX,WACF,MAAO5e,MAAKm2C,cAGb,SAAmB1vC,GAClBzG,KAAKm2C,SAAW1vC,mCAIjBmX,OAAA2lB,eAAW4G,EAAAvrB,UAAA,oBAAX,WACC,MAAO5e,MAAKs1C,mBAGb,SAAwB7uC,GACvBzG,KAAKs1C,cAAgB7uC,mCAhPL0jC,EAAAC,aAAsB,EACtBD,EAAAiM,aAAsB,EACtBjM,EAAAwI,qBAA8B,EAC9BxI,EAAAsI,eAAwB,EACxBtI,EAAAoH,uBAAgC,GAChCpH,EAAAkH,qBAA8B,GAC9BlH,EAAAmH,gBAAyB,GACzBnH,EAAAqH,cAAuB,IAgPzCrH,GA7PwCmG,EAAA/G,aAA3B/pC,GAAA2qC,mBAAAA,4rBCzBb,IAAAxB,GAAAjoC,EAAA,2BACA2vC,EAAA3vC,EAAA,uBAKAk0C,EAAA,SAAA/L,GAMI,QAAA+L,GAAmBG,EAAuBD,EAAqBuB,GAA/D,GAAA/G,GACDzG,EAAA9nC,KAAAf,KAAM40C,EAAKC,UAAUE,EAAcD,KAAa90C,WAChDsvC,GAAK+G,gBAAkBA,EACjB/G,EAAKyF,cAAgBA,EACrBzF,EAAKwF,YAAcA,IAqD5B,MA/D0BhM,GAAA8L,EAAA/L,GAaX+L,EAAAC,UAAd,SAAwBE,EAAuBD,GAC9C,MAAM,IAAKzE,GAAAK,QAAQqE,EAAcpP,QAAQzjC,GAAG,IAAI4yC,EAAYnP,QAAQzjC,KAGrE0b,OAAA2lB,eAAWqR,EAAAh2B,UAAA,qBAAX,WACC,MAAO5e,MAAKs2C,oBAGb,SAAyB7vC,GACxBzG,KAAKs2C,eAAiB7vC,mCAGvBmX,OAAA2lB,eAAWqR,EAAAh2B,UAAA,mBAAX,WACC,MAAO5e,MAAKu2C,kBAGb,SAAuB9vC,GACtBzG,KAAKu2C,aAAe9vC,mCAGrBmX,OAAA2lB,eAAWqR,EAAAh2B,UAAA,uBAAX,WACC,MAAO5e,MAAKw2C,sBAGb,SAA2B/vC,GAC1BzG,KAAKw2C,iBAAmB/vC,mCAIlBmuC,EAAAh2B,UAAAinB,iBAAP,WACC,MAAO7lC,MAAKq2C,gBAAgBxQ,oBAGtB+O,EAAAh2B,UAAA/W,UAAP,SAAiBmhC,GAChBhpC,KAAKq2C,gBAAgBxuC,UAAUmhC,IAIzB4L,EAAAh2B,UAAAsnB,iBAAP,SAAwB8C,GACvBhpC,KAAKq2C,gBAAgBnQ,iBAAiB8C,IAGhC4L,EAAAh2B,UAAAqqB,sBAAP,SAA6BD,GAC5B,MAAOhpC,MAAKq2C,gBAAgBpN,sBAAsBD,IAG5C4L,EAAAh2B,UAAAixB,YAAP,WACC,MAAO7vC,MAAKq2C,gBAAgBxG,eAG9B+E,GA/D0BjM,EAAAO,YAAb1pC,GAAAo1C,KAAAA,6ICIb,IAAAlnC,GAAA,WAKI,QAAAA,GAAY+oC,GACdz2C,KAAKy2C,YAAcA,EAerB,MARC74B,QAAA2lB,eAAW71B,EAAAkR,UAAA,mBAAX,WACC,MAAO5e,MAAK02C,kBAGb,SAAuBjwC,GACtBzG,KAAK02C,aAAejwC,mCAGtBiH,IArBsBlO,GAAAkO,MAAAA,wFCVtB,IAAAgjC,GAAA,WAGI,QAAAA,GAAmBiG,GACf32C,KAAKkC,GAAKy0C,EAWlB,MARC/4B,QAAA2lB,eAAWmN,EAAA9xB,UAAA,UAAX,WACC,MAAO5e,MAAK42C,SAGb,SAAcnwC,GACbzG,KAAK42C,IAAMnwC,mCAGbiqC,IAfalxC,GAAAkxC,QAAAA,wFCKb,IAAAxH,GAAA,WAUI,QAAAA,GAAmBvD,GACrB3lC,KAAK2lC,QAAUA,EA4DjB,MA9CC/nB,QAAA2lB,eAAW2F,EAAAtqB,UAAA,eAAX,WACC,MAAO5e,MAAK62C,cAGb,SAAmBpwC,GAClBzG,KAAK62C,SAAWpwC,mCAajBmX,OAAA2lB,eAAW2F,EAAAtqB,UAAA;oDAAX,WACC,MAAO5e,MAAK82C,iBAGb,SAAsBrwC,GACrBzG,KAAK82C,YAAcrwC,mCAGpBmX,OAAA2lB,eAAW2F,EAAAtqB,UAAA,kBAAX,WACC,MAAO5e,MAAK+2C,iBAGb,SAAsBtwC,GACrBzG,KAAK+2C,YAActwC,mCAerByiC,IAvEsB1pC,GAAA0pC,YAAAA,+ZCCtB,IAAA8N,GAAAt2C,EAAA,WAKA8vC,EAAA,SAAA3H,GAII,QAAA2H,GAAYiG,GAAZ,GAAAnH,GACIzG,EAAA9nC,KAAAf,KAAMy2C,IAAYz2C,WAClBsvC,GAAKsB,iBAAmB,GAAI/wB,SAgCpC,MAtCyCipB,GAAA0H,EAAA3H,GAUjC2H,EAAA5xB,UAAAoxB,UAAP,SAAiBC,GACV,GAAIpW,GAAUoW,EAAanW,YAC3BmW,GAAarN,aACb,KAAI,GAAIjiC,GAAE,EAAEA,EAAEX,KAAK4wC,iBAAiB5vC,OAAOL,IAAK,CACdX,KAAK4wC,iBAAiBjwC,GACxCkvC,cAAc/I,KAAKjN,KAIhC2W,EAAA5xB,UAAA8mB,iCAAP,SAAwCsD,GAEpC,IAAI,GADAiO,GAA0B,KACtBt2C,EAAE,EAAEA,EAAEX,KAAK4wC,iBAAiB5vC,OAAOL,IAAK,CAC5C,GAAIu2C,GAA0Bl3C,KAAK4wC,iBAAiBjwC,EACjDu2C,GAAYjO,sBAAsBD,KAAgBiO,EAAcC,GAEvE,MAAM,IAIbt5B,OAAA2lB,eAAWiN,EAAA5xB,UAAA,wBAAX,WACC,MAAO5e,MAAKm3C,uBAGb,SAA4B1wC,GAC3BzG,KAAKm3C,kBAAoB1wC,mCAI3B+pC,GAtCyCwG,EAAAtpC,MAA5BlO,GAAAgxC,oBAAAA,oGCTb,IAAAlM,GAAA,WAII,QAAAA,GAAmB1hC,EAASC,GACxB7C,KAAK4C,EAAIA,EACT5C,KAAK6C,EAAIA,EAyFjB,MAtFC+a,QAAA2lB,eAAWe,EAAA1lB,UAAA,SAAX,WACC,MAAO5e,MAAKo3C,QAGb,SAAa3wC,GACZzG,KAAKo3C,GAAK3wC,mCAGXmX,OAAA2lB,eAAWe,EAAA1lB,UAAA,SAAX,WACC,MAAO5e,MAAKq3C,QAGb,SAAa5wC,GACZzG,KAAKq3C,GAAK5wC,mCAGJ69B,EAAA1lB,UAAAnZ,MAAP,WACC,MAAM,IAAK6+B,GAActkC,KAAK4C,EAAE5C,KAAK6C,IAG/ByhC,EAAA1lB,UAAA04B,UAAP,SAAiBtO,GAEf,MAAOhpC,MAAK6C,EAAEmmC,EAAcnmC,GAGvByhC,EAAA1lB,UAAA24B,UAAP,SAAiBvO,GAEf,MAAOhpC,MAAK4C,EAAEomC,EAAcpmC,GAGvB0hC,EAAA1lB,UAAAknB,SAAP,SAAgBkD,GAEd,MAAM,IAAK1E,GAActkC,KAAKu3C,UAAUvO,GAAehpC,KAAKs3C,UAAUtO,KAGjE1E,EAAA1lB,UAAA44B,OAAP,SAAcxO,GAEb,MAAShpC,MAAK4C,GAAGomC,EAAcpmC,GAAO5C,KAAK6C,GAAGmmC,EAAcnmC,GAGtDyhC,EAAA1lB,UAAA64B,YAAP,SAAmBzO,GAElB,MAAQrgC,MAAKusB,KAAKvsB,KAAKiB,IAAI5J,KAAKu3C,UAAUvO,GAAgB,GAAKrgC,KAAKiB,IAAI5J,KAAKs3C,UAAUtO,GAAgB,KAG1F1E,EAAAoT,uCAAd,SAAqDC,GAIpD,IAAI,GAFA/0C,GAAI,EACJC,EAAI,EACAlC,EAAE,EAAEA,EAAEg3C,EAAa32C,OAAOL,IAClC,CACC,GAAIi3C,GAAID,EAAah3C,EACrBiC,IAAKg1C,EAAEh1C,EACPC,GAAK+0C,EAAE/0C,EAIR,MAFAD,IAAQ+0C,EAAa32C,OACrB6B,GAAQ80C,EAAa32C,OACf,GAAKsjC,GAAc1hC,EAAEC,IAGdyhC,EAAAuT,qCAAd,SAAmDC,GAIjD,IAAI,GAFAl1C,GAAI,EACJC,EAAI,EACAlC,EAAE,EAAEA,EAAEm3C,EAAgB92C,OAAOL,IACrC,CACC,GAAIi3C,GAAIE,EAAgBn3C,GAAGklC,kBAC3BjjC,IAAKg1C,EAAEh1C,EACPC,GAAK+0C,EAAE/0C,EAIR,MAFAD,IAAQk1C,EAAgB92C,OACxB6B,GAAQi1C,EAAgB92C,OAClB,GAAKsjC,GAAc1hC,EAAEC,IAGfyhC,EAAAyT,2BAAd,SAAyCD,GAGxC,IAAK,GADDE,GAAY,GAAIn4B,OACXlf,EAAI,EAAGA,EAAIm3C,EAAgB92C,OAAQL,IAE3Cq3C,EAAUhwC,KAAK8vC,EAAgBn3C,GAAGklC,mBAEnC,OAAM,IAIRvB,IA/Fa9kC,GAAA8kC,cAAAA","file":"walkers.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n* matter-js 0.13.0 by @liabru 2017-07-06\n* http://brm.io/matter-js/\n* License MIT\n*/\n\n/**\n * The MIT License (MIT)\n * \n * Copyright (c) Liam Brummitt and contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.Matter = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n/**\n* The `Matter.Body` module contains methods for creating and manipulating body models.\n* A `Matter.Body` is a rigid body that can be simulated by a `Matter.Engine`.\n* Factories for commonly used body configurations (such as rectangles, circles and other polygons) can be found in the module `Matter.Bodies`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n\n* @class Body\n*/\n\nvar Body = {};\n\nmodule.exports = Body;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\nvar Sleeping = _dereq_('../core/Sleeping');\nvar Render = _dereq_('../render/Render');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Axes = _dereq_('../geometry/Axes');\n\n(function() {\n\n    Body._inertiaScale = 4;\n    Body._nextCollidingGroupId = 1;\n    Body._nextNonCollidingGroupId = -1;\n    Body._nextCategory = 0x0001;\n\n    /**\n     * Creates a new rigid body model. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * Vertices must be specified in clockwise order.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {body} body\n     */\n    Body.create = function(options) {\n        var defaults = {\n            id: Common.nextId(),\n            type: 'body',\n            label: 'Body',\n            parts: [],\n            plugin: {},\n            angle: 0,\n            vertices: Vertices.fromPath('L 0 0 L 40 0 L 40 40 L 0 40'),\n            position: { x: 0, y: 0 },\n            force: { x: 0, y: 0 },\n            torque: 0,\n            positionImpulse: { x: 0, y: 0 },\n            constraintImpulse: { x: 0, y: 0, angle: 0 },\n            totalContacts: 0,\n            speed: 0,\n            angularSpeed: 0,\n            velocity: { x: 0, y: 0 },\n            angularVelocity: 0,\n            isSensor: false,\n            isStatic: false,\n            isSleeping: false,\n            motion: 0,\n            sleepThreshold: 60,\n            density: 0.001,\n            restitution: 0,\n            friction: 0.1,\n            frictionStatic: 0.5,\n            frictionAir: 0.01,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            },\n            slop: 0.05,\n            timeScale: 1,\n            render: {\n                visible: true,\n                opacity: 1,\n                sprite: {\n                    xScale: 1,\n                    yScale: 1,\n                    xOffset: 0,\n                    yOffset: 0\n                },\n                lineWidth: 0\n            }\n        };\n\n        var body = Common.extend(defaults, options);\n\n        _initProperties(body, options);\n\n        return body;\n    };\n\n    /**\n     * Returns the next unique group index for which bodies will collide.\n     * If `isNonColliding` is `true`, returns the next unique group index for which bodies will _not_ collide.\n     * See `body.collisionFilter` for more information.\n     * @method nextGroup\n     * @param {bool} [isNonColliding=false]\n     * @return {Number} Unique group index\n     */\n    Body.nextGroup = function(isNonColliding) {\n        if (isNonColliding)\n            return Body._nextNonCollidingGroupId--;\n\n        return Body._nextCollidingGroupId++;\n    };\n\n    /**\n     * Returns the next unique category bitfield (starting after the initial default category `0x0001`).\n     * There are 32 available. See `body.collisionFilter` for more information.\n     * @method nextCategory\n     * @return {Number} Unique category bitfield\n     */\n    Body.nextCategory = function() {\n        Body._nextCategory = Body._nextCategory << 1;\n        return Body._nextCategory;\n    };\n\n    /**\n     * Initialises body properties.\n     * @method _initProperties\n     * @private\n     * @param {body} body\n     * @param {} [options]\n     */\n    var _initProperties = function(body, options) {\n        options = options || {};\n\n        // init required properties (order is important)\n        Body.set(body, {\n            bounds: body.bounds || Bounds.create(body.vertices),\n            positionPrev: body.positionPrev || Vector.clone(body.position),\n            anglePrev: body.anglePrev || body.angle,\n            vertices: body.vertices,\n            parts: body.parts || [body],\n            isStatic: body.isStatic,\n            isSleeping: body.isSleeping,\n            parent: body.parent || body\n        });\n\n        Vertices.rotate(body.vertices, body.angle, body.position);\n        Axes.rotate(body.axes, body.angle);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n\n        // allow options to override the automatically calculated properties\n        Body.set(body, {\n            axes: options.axes || body.axes,\n            area: options.area || body.area,\n            mass: options.mass || body.mass,\n            inertia: options.inertia || body.inertia\n        });\n\n        // render properties\n        var defaultFillStyle = (body.isStatic ? '#2e2b44' : Common.choose(['#006BA6', '#0496FF', '#FFBC42', '#D81159', '#8F2D56'])),\n            defaultStrokeStyle = '#000';\n        body.render.fillStyle = body.render.fillStyle || defaultFillStyle;\n        body.render.strokeStyle = body.render.strokeStyle || defaultStrokeStyle;\n        body.render.sprite.xOffset += -(body.bounds.min.x - body.position.x) / (body.bounds.max.x - body.bounds.min.x);\n        body.render.sprite.yOffset += -(body.bounds.min.y - body.position.y) / (body.bounds.max.y - body.bounds.min.y);\n    };\n\n    /**\n     * Given a property and a value (or map of), sets the property(s) on the body, using the appropriate setter functions if they exist.\n     * Prefer to use the actual setter functions in performance critical situations.\n     * @method set\n     * @param {body} body\n     * @param {} settings A property name (or map of properties and values) to set on the body.\n     * @param {} value The value to set if `settings` is a single property name.\n     */\n    Body.set = function(body, settings, value) {\n        var property;\n\n        if (typeof settings === 'string') {\n            property = settings;\n            settings = {};\n            settings[property] = value;\n        }\n\n        for (property in settings) {\n            value = settings[property];\n\n            if (!settings.hasOwnProperty(property))\n                continue;\n\n            switch (property) {\n\n            case 'isStatic':\n                Body.setStatic(body, value);\n                break;\n            case 'isSleeping':\n                Sleeping.set(body, value);\n                break;\n            case 'mass':\n                Body.setMass(body, value);\n                break;\n            case 'density':\n                Body.setDensity(body, value);\n                break;\n            case 'inertia':\n                Body.setInertia(body, value);\n                break;\n            case 'vertices':\n                Body.setVertices(body, value);\n                break;\n            case 'position':\n                Body.setPosition(body, value);\n                break;\n            case 'angle':\n                Body.setAngle(body, value);\n                break;\n            case 'velocity':\n                Body.setVelocity(body, value);\n                break;\n            case 'angularVelocity':\n                Body.setAngularVelocity(body, value);\n                break;\n            case 'parts':\n                Body.setParts(body, value);\n                break;\n            default:\n                body[property] = value;\n\n            }\n        }\n    };\n\n    /**\n     * Sets the body as static, including isStatic flag and setting mass and inertia to Infinity.\n     * @method setStatic\n     * @param {body} body\n     * @param {bool} isStatic\n     */\n    Body.setStatic = function(body, isStatic) {\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.isStatic = isStatic;\n\n            if (isStatic) {\n                part._original = {\n                    restitution: part.restitution,\n                    friction: part.friction,\n                    mass: part.mass,\n                    inertia: part.inertia,\n                    density: part.density,\n                    inverseMass: part.inverseMass,\n                    inverseInertia: part.inverseInertia\n                };\n\n                part.restitution = 0;\n                part.friction = 1;\n                part.mass = part.inertia = part.density = Infinity;\n                part.inverseMass = part.inverseInertia = 0;\n\n                part.positionPrev.x = part.position.x;\n                part.positionPrev.y = part.position.y;\n                part.anglePrev = part.angle;\n                part.angularVelocity = 0;\n                part.speed = 0;\n                part.angularSpeed = 0;\n                part.motion = 0;\n            } else if (part._original) {\n                part.restitution = part._original.restitution;\n                part.friction = part._original.friction;\n                part.mass = part._original.mass;\n                part.inertia = part._original.inertia;\n                part.density = part._original.density;\n                part.inverseMass = part._original.inverseMass;\n                part.inverseInertia = part._original.inverseInertia;\n\n                delete part._original;\n            }\n        }\n    };\n\n    /**\n     * Sets the mass of the body. Inverse mass and density are automatically updated to reflect the change.\n     * @method setMass\n     * @param {body} body\n     * @param {number} mass\n     */\n    Body.setMass = function(body, mass) {\n        body.mass = mass;\n        body.inverseMass = 1 / body.mass;\n        body.density = body.mass / body.area;\n    };\n\n    /**\n     * Sets the density of the body. Mass is automatically updated to reflect the change.\n     * @method setDensity\n     * @param {body} body\n     * @param {number} density\n     */\n    Body.setDensity = function(body, density) {\n        Body.setMass(body, density * body.area);\n        body.density = density;\n    };\n\n    /**\n     * Sets the moment of inertia (i.e. second moment of area) of the body of the body. \n     * Inverse inertia is automatically updated to reflect the change. Mass is not changed.\n     * @method setInertia\n     * @param {body} body\n     * @param {number} inertia\n     */\n    Body.setInertia = function(body, inertia) {\n        body.inertia = inertia;\n        body.inverseInertia = 1 / body.inertia;\n    };\n\n    /**\n     * Sets the body's vertices and updates body properties accordingly, including inertia, area and mass (with respect to `body.density`).\n     * Vertices will be automatically transformed to be orientated around their centre of mass as the origin.\n     * They are then automatically translated to world space based on `body.position`.\n     *\n     * The `vertices` argument should be passed as an array of `Matter.Vector` points (or a `Matter.Vertices` array).\n     * Vertices must form a convex hull, concave hulls are not supported.\n     *\n     * @method setVertices\n     * @param {body} body\n     * @param {vector[]} vertices\n     */\n    Body.setVertices = function(body, vertices) {\n        // change vertices\n        if (vertices[0].body === body) {\n            body.vertices = vertices;\n        } else {\n            body.vertices = Vertices.create(vertices, body);\n        }\n\n        // update properties\n        body.axes = Axes.fromVertices(body.vertices);\n        body.area = Vertices.area(body.vertices);\n        Body.setMass(body, body.density * body.area);\n\n        // orient vertices around the centre of mass at origin (0, 0)\n        var centre = Vertices.centre(body.vertices);\n        Vertices.translate(body.vertices, centre, -1);\n\n        // update inertia while vertices are at origin (0, 0)\n        Body.setInertia(body, Body._inertiaScale * Vertices.inertia(body.vertices, body.mass));\n\n        // update geometry\n        Vertices.translate(body.vertices, body.position);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n    };\n\n    /**\n     * Sets the parts of the `body` and updates mass, inertia and centroid.\n     * Each part will have its parent set to `body`.\n     * By default the convex hull will be automatically computed and set on `body`, unless `autoHull` is set to `false.`\n     * Note that this method will ensure that the first part in `body.parts` will always be the `body`.\n     * @method setParts\n     * @param {body} body\n     * @param [body] parts\n     * @param {bool} [autoHull=true]\n     */\n    Body.setParts = function(body, parts, autoHull) {\n        var i;\n\n        // add all the parts, ensuring that the first part is always the parent body\n        parts = parts.slice(0);\n        body.parts.length = 0;\n        body.parts.push(body);\n        body.parent = body;\n\n        for (i = 0; i < parts.length; i++) {\n            var part = parts[i];\n            if (part !== body) {\n                part.parent = body;\n                body.parts.push(part);\n            }\n        }\n\n        if (body.parts.length === 1)\n            return;\n\n        autoHull = typeof autoHull !== 'undefined' ? autoHull : true;\n\n        // find the convex hull of all parts to set on the parent body\n        if (autoHull) {\n            var vertices = [];\n            for (i = 0; i < parts.length; i++) {\n                vertices = vertices.concat(parts[i].vertices);\n            }\n\n            Vertices.clockwiseSort(vertices);\n\n            var hull = Vertices.hull(vertices),\n                hullCentre = Vertices.centre(hull);\n\n            Body.setVertices(body, hull);\n            Vertices.translate(body.vertices, hullCentre);\n        }\n\n        // sum the properties of all compound parts of the parent body\n        var total = _totalProperties(body);\n\n        body.area = total.area;\n        body.parent = body;\n        body.position.x = total.centre.x;\n        body.position.y = total.centre.y;\n        body.positionPrev.x = total.centre.x;\n        body.positionPrev.y = total.centre.y;\n\n        Body.setMass(body, total.mass);\n        Body.setInertia(body, total.inertia);\n        Body.setPosition(body, total.centre);\n    };\n\n    /**\n     * Sets the position of the body instantly. Velocity, angle, force etc. are unchanged.\n     * @method setPosition\n     * @param {body} body\n     * @param {vector} position\n     */\n    Body.setPosition = function(body, position) {\n        var delta = Vector.sub(position, body.position);\n        body.positionPrev.x += delta.x;\n        body.positionPrev.y += delta.y;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.position.x += delta.x;\n            part.position.y += delta.y;\n            Vertices.translate(part.vertices, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Sets the angle of the body instantly. Angular velocity, position, force etc. are unchanged.\n     * @method setAngle\n     * @param {body} body\n     * @param {number} angle\n     */\n    Body.setAngle = function(body, angle) {\n        var delta = angle - body.angle;\n        body.anglePrev += delta;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.angle += delta;\n            Vertices.rotate(part.vertices, delta, body.position);\n            Axes.rotate(part.axes, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n            if (i > 0) {\n                Vector.rotateAbout(part.position, delta, body.position, part.position);\n            }\n        }\n    };\n\n    /**\n     * Sets the linear velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setVelocity\n     * @param {body} body\n     * @param {vector} velocity\n     */\n    Body.setVelocity = function(body, velocity) {\n        body.positionPrev.x = body.position.x - velocity.x;\n        body.positionPrev.y = body.position.y - velocity.y;\n        body.velocity.x = velocity.x;\n        body.velocity.y = velocity.y;\n        body.speed = Vector.magnitude(body.velocity);\n    };\n\n    /**\n     * Sets the angular velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setAngularVelocity\n     * @param {body} body\n     * @param {number} velocity\n     */\n    Body.setAngularVelocity = function(body, velocity) {\n        body.anglePrev = body.angle - velocity;\n        body.angularVelocity = velocity;\n        body.angularSpeed = Math.abs(body.angularVelocity);\n    };\n\n    /**\n     * Moves a body by a given vector relative to its current position, without imparting any velocity.\n     * @method translate\n     * @param {body} body\n     * @param {vector} translation\n     */\n    Body.translate = function(body, translation) {\n        Body.setPosition(body, Vector.add(body.position, translation));\n    };\n\n    /**\n     * Rotates a body by a given angle relative to its current angle, without imparting any angular velocity.\n     * @method rotate\n     * @param {body} body\n     * @param {number} rotation\n     * @param {vector} [point]\n     */\n    Body.rotate = function(body, rotation, point) {\n        if (!point) {\n            Body.setAngle(body, body.angle + rotation);\n        } else {\n            var cos = Math.cos(rotation),\n                sin = Math.sin(rotation),\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.setAngle(body, body.angle + rotation);\n        }\n    };\n\n    /**\n     * Scales the body, including updating physical properties (mass, area, axes, inertia), from a world-space point (default is body centre).\n     * @method scale\n     * @param {body} body\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} [point]\n     */\n    Body.scale = function(body, scaleX, scaleY, point) {\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            // scale vertices\n            Vertices.scale(part.vertices, scaleX, scaleY, body.position);\n\n            // update properties\n            part.axes = Axes.fromVertices(part.vertices);\n\n            if (!body.isStatic) {\n                part.area = Vertices.area(part.vertices);\n                Body.setMass(part, body.density * part.area);\n\n                // update inertia (requires vertices to be at origin)\n                Vertices.translate(part.vertices, { x: -part.position.x, y: -part.position.y });\n                Body.setInertia(part, Vertices.inertia(part.vertices, part.mass));\n                Vertices.translate(part.vertices, { x: part.position.x, y: part.position.y });\n            }\n\n            // update bounds\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n\n        // handle circles\n        if (body.circleRadius) { \n            if (scaleX === scaleY) {\n                body.circleRadius *= scaleX;\n            } else {\n                // body is no longer a circle\n                body.circleRadius = null;\n            }\n        }\n\n        if (!body.isStatic) {\n            var total = _totalProperties(body);\n            body.area = total.area;\n            Body.setMass(body, total.mass);\n            Body.setInertia(body, total.inertia);\n        }\n    };\n\n    /**\n     * Performs a simulation step for the given `body`, including updating position and angle using Verlet integration.\n     * @method update\n     * @param {body} body\n     * @param {number} deltaTime\n     * @param {number} timeScale\n     * @param {number} correction\n     */\n    Body.update = function(body, deltaTime, timeScale, correction) {\n        var deltaTimeSquared = Math.pow(deltaTime * timeScale * body.timeScale, 2);\n\n        // from the previous step\n        var frictionAir = 1 - body.frictionAir * timeScale * body.timeScale,\n            velocityPrevX = body.position.x - body.positionPrev.x,\n            velocityPrevY = body.position.y - body.positionPrev.y;\n\n        // update velocity with Verlet integration\n        body.velocity.x = (velocityPrevX * frictionAir * correction) + (body.force.x / body.mass) * deltaTimeSquared;\n        body.velocity.y = (velocityPrevY * frictionAir * correction) + (body.force.y / body.mass) * deltaTimeSquared;\n\n        body.positionPrev.x = body.position.x;\n        body.positionPrev.y = body.position.y;\n        body.position.x += body.velocity.x;\n        body.position.y += body.velocity.y;\n\n        // update angular velocity with Verlet integration\n        body.angularVelocity = ((body.angle - body.anglePrev) * frictionAir * correction) + (body.torque / body.inertia) * deltaTimeSquared;\n        body.anglePrev = body.angle;\n        body.angle += body.angularVelocity;\n\n        // track speed and acceleration\n        body.speed = Vector.magnitude(body.velocity);\n        body.angularSpeed = Math.abs(body.angularVelocity);\n\n        // transform the body geometry\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            Vertices.translate(part.vertices, body.velocity);\n            \n            if (i > 0) {\n                part.position.x += body.velocity.x;\n                part.position.y += body.velocity.y;\n            }\n\n            if (body.angularVelocity !== 0) {\n                Vertices.rotate(part.vertices, body.angularVelocity, body.position);\n                Axes.rotate(part.axes, body.angularVelocity);\n                if (i > 0) {\n                    Vector.rotateAbout(part.position, body.angularVelocity, body.position, part.position);\n                }\n            }\n\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Applies a force to a body from a given world-space position, including resulting torque.\n     * @method applyForce\n     * @param {body} body\n     * @param {vector} position\n     * @param {vector} force\n     */\n    Body.applyForce = function(body, position, force) {\n        body.force.x += force.x;\n        body.force.y += force.y;\n        var offset = { x: position.x - body.position.x, y: position.y - body.position.y };\n        body.torque += offset.x * force.y - offset.y * force.x;\n    };\n\n    /**\n     * Returns the sums of the properties of all compound parts of the parent body.\n     * @method _totalProperties\n     * @private\n     * @param {body} body\n     * @return {}\n     */\n    var _totalProperties = function(body) {\n        // from equations at:\n        // https://ecourses.ou.edu/cgi-bin/ebook.cgi?doc=&topic=st&chap_sec=07.2&page=theory\n        // http://output.to/sideway/default.asp?qno=121100087\n\n        var properties = {\n            mass: 0,\n            area: 0,\n            inertia: 0,\n            centre: { x: 0, y: 0 }\n        };\n\n        // sum the properties of all compound parts of the parent body\n        for (var i = body.parts.length === 1 ? 0 : 1; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            properties.mass += part.mass;\n            properties.area += part.area;\n            properties.inertia += part.inertia;\n            properties.centre = Vector.add(properties.centre, \n                                           Vector.mult(part.position, part.mass !== Infinity ? part.mass : 1));\n        }\n\n        properties.centre = Vector.div(properties.centre, \n                                       properties.mass !== Infinity ? properties.mass : body.parts.length);\n\n        return properties;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a body starts sleeping (where `this` is the body).\n    *\n    * @event sleepStart\n    * @this {body} The body that has started sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a body ends sleeping (where `this` is the body).\n    *\n    * @event sleepEnd\n    * @this {body} The body that has ended sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Body.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"body\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Body\"\n     */\n\n    /**\n     * An array of bodies that make up this body. \n     * The first body in the array must always be a self reference to the current body instance.\n     * All bodies in the `parts` array together form a single rigid compound body.\n     * Parts are allowed to overlap, have gaps or holes or even form concave bodies.\n     * Parts themselves should never be added to a `World`, only the parent body should be.\n     * Use `Body.setParts` when setting parts to ensure correct updates of all properties.\n     *\n     * @property parts\n     * @type body[]\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n    /**\n     * A self reference if the body is _not_ a part of another body.\n     * Otherwise this is a reference to the body that this is a part of.\n     * See `body.parts`.\n     *\n     * @property parent\n     * @type body\n     */\n\n    /**\n     * A `Number` specifying the angle of the body, in radians.\n     *\n     * @property angle\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * An array of `Vector` objects that specify the convex hull of the rigid body.\n     * These should be provided about the origin `(0, 0)`. E.g.\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * When passed via `Body.create`, the vertices are translated relative to `body.position` (i.e. world-space, and constantly updated by `Body.update` during simulation).\n     * The `Vector` objects are also augmented with additional properties required for efficient collision detection. \n     *\n     * Other properties such as `inertia` and `bounds` are automatically calculated from the passed vertices (unless provided via `options`).\n     * Concave hulls are not currently supported. The module `Matter.Vertices` contains useful methods for working with vertices.\n     *\n     * @property vertices\n     * @type vector[]\n     */\n\n    /**\n     * A `Vector` that specifies the current world-space position of the body.\n     *\n     * @property position\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the force to apply in the current step. It is zeroed after every `Body.update`. See also `Body.applyForce`.\n     *\n     * @property force\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the torque (turning force) to apply in the current step. It is zeroed after every `Body.update`.\n     *\n     * @property torque\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that _measures_ the current speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.velocity`).\n     *\n     * @readOnly\n     * @property speed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that _measures_ the current angular speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.angularVelocity`).\n     *\n     * @readOnly\n     * @property angularSpeed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Vector` that _measures_ the current velocity of the body after the last `Body.update`. It is read-only. \n     * If you need to modify a body's velocity directly, you should either apply a force or simply change the body's `position` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property velocity\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that _measures_ the current angular velocity of the body after the last `Body.update`. It is read-only. \n     * If you need to modify a body's angular velocity directly, you should apply a torque or simply change the body's `angle` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property angularVelocity\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A flag that indicates whether a body is considered static. A static body can never change position or angle and is completely fixed.\n     * If you need to set a body as static after its creation, you should use `Body.setStatic` as this requires more than just setting this flag.\n     *\n     * @property isStatic\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether a body is a sensor. Sensor triggers collision events, but doesn't react with colliding body physically.\n     *\n     * @property isSensor\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether the body is considered sleeping. A sleeping body acts similar to a static body, except it is only temporary and can be awoken.\n     * If you need to set a body as sleeping, you should use `Sleeping.set` as this requires more than just setting this flag.\n     *\n     * @property isSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that _measures_ the amount of movement a body currently has (a combination of `speed` and `angularSpeed`). It is read-only and always positive.\n     * It is used and updated by the `Matter.Sleeping` module during simulation to decide if a body has come to rest.\n     *\n     * @readOnly\n     * @property motion\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the number of updates in which this body must have near-zero velocity before it is set as sleeping by the `Matter.Sleeping` module (if sleeping is enabled by the engine).\n     *\n     * @property sleepThreshold\n     * @type number\n     * @default 60\n     */\n\n    /**\n     * A `Number` that defines the density of the body, that is its mass per unit area.\n     * If you pass the density via `Body.create` the `mass` property is automatically calculated for you based on the size (area) of the object.\n     * This is generally preferable to simply setting mass and allows for more intuitive definition of materials (e.g. rock has a higher density than wood).\n     *\n     * @property density\n     * @type number\n     * @default 0.001\n     */\n\n    /**\n     * A `Number` that defines the mass of the body, although it may be more appropriate to specify the `density` property instead.\n     * If you modify this value, you must also modify the `body.inverseMass` property (`1 / mass`).\n     *\n     * @property mass\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the inverse mass of the body (`1 / mass`).\n     * If you modify this value, you must also modify the `body.mass` property.\n     *\n     * @property inverseMass\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the moment of inertia (i.e. second moment of area) of the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) and density in `Body.create`.\n     * If you modify this value, you must also modify the `body.inverseInertia` property (`1 / inertia`).\n     *\n     * @property inertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the inverse moment of inertia of the body (`1 / inertia`).\n     * If you modify this value, you must also modify the `body.inertia` property.\n     *\n     * @property inverseInertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the restitution (elasticity) of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means collisions may be perfectly inelastic and no bouncing may occur. \n     * A value of `0.8` means the body may bounce back with approximately 80% of its kinetic energy.\n     * Note that collision response is based on _pairs_ of bodies, and that `restitution` values are _combined_ with the following formula:\n     *\n     *     Math.max(bodyA.restitution, bodyB.restitution)\n     *\n     * @property restitution\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the friction of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means that the body may slide indefinitely.\n     * A value of `1` means the body may come to a stop almost instantly after a force is applied.\n     *\n     * The effects of the value may be non-linear. \n     * High values may be unstable depending on the body.\n     * The engine uses a Coulomb friction model including static and kinetic friction.\n     * Note that collision response is based on _pairs_ of bodies, and that `friction` values are _combined_ with the following formula:\n     *\n     *     Math.min(bodyA.friction, bodyB.friction)\n     *\n     * @property friction\n     * @type number\n     * @default 0.1\n     */\n\n    /**\n     * A `Number` that defines the static friction of the body (in the Coulomb friction model). \n     * A value of `0` means the body will never 'stick' when it is nearly stationary and only dynamic `friction` is used.\n     * The higher the value (e.g. `10`), the more force it will take to initially get the body moving when nearly stationary.\n     * This value is multiplied with the `friction` property to make it easier to change `friction` and maintain an appropriate amount of static friction.\n     *\n     * @property frictionStatic\n     * @type number\n     * @default 0.5\n     */\n\n    /**\n     * A `Number` that defines the air friction of the body (air resistance). \n     * A value of `0` means the body will never slow as it moves through space.\n     * The higher the value, the faster a body slows when moving through space.\n     * The effects of the value are non-linear. \n     *\n     * @property frictionAir\n     * @type number\n     * @default 0.01\n     */\n\n    /**\n     * An `Object` that specifies the collision filtering properties of this body.\n     *\n     * Collisions between two bodies will obey the following rules:\n     * - If the two bodies have the same non-zero value of `collisionFilter.group`,\n     *   they will always collide if the value is positive, and they will never collide\n     *   if the value is negative.\n     * - If the two bodies have different values of `collisionFilter.group` or if one\n     *   (or both) of the bodies has a value of 0, then the category/mask rules apply as follows:\n     *\n     * Each body belongs to a collision category, given by `collisionFilter.category`. This\n     * value is used as a bit field and the category should have only one bit set, meaning that\n     * the value of this property is a power of two in the range [1, 2^31]. Thus, there are 32\n     * different collision categories available.\n     *\n     * Each body also defines a collision bitmask, given by `collisionFilter.mask` which specifies\n     * the categories it collides with (the value is the bitwise AND value of all these categories).\n     *\n     * Using the category/mask rules, two bodies `A` and `B` collide if each includes the other's\n     * category in its mask, i.e. `(categoryA & maskB) !== 0` and `(categoryB & maskA) !== 0`\n     * are both true.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n    /**\n     * An Integer `Number`, that specifies the collision group this body belongs to.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.group\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * A bit field that specifies the collision category this body belongs to.\n     * The category value should have only one bit set, for example `0x0001`.\n     * This means there are up to 32 unique collision categories available.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.category\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * A bit mask that specifies the collision categories this body may collide with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.mask\n     * @type object\n     * @default -1\n     */\n\n    /**\n     * A `Number` that specifies a tolerance on how far a body is allowed to 'sink' or rotate into other bodies.\n     * Avoid changing this value unless you understand the purpose of `slop` in physics engines.\n     * The default should generally suffice, although very large bodies may require larger values for stable stacking.\n     *\n     * @property slop\n     * @type number\n     * @default 0.05\n     */\n\n    /**\n     * A `Number` that allows per-body time scaling, e.g. a force-field where bodies inside are in slow-motion, while others are at full speed.\n     *\n     * @property timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the body should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * Sets the opacity to use when rendering.\n     *\n     * @property render.opacity\n     * @type number\n     * @default 1\n    */\n\n    /**\n     * An `Object` that defines the sprite properties to use when rendering, if any.\n     *\n     * @property render.sprite\n     * @type object\n     */\n\n    /**\n     * An `String` that defines the path to the image to use as the sprite texture, if any.\n     *\n     * @property render.sprite.texture\n     * @type string\n     */\n     \n    /**\n     * A `Number` that defines the scaling in the x-axis for the sprite, if any.\n     *\n     * @property render.sprite.xScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that defines the scaling in the y-axis for the sprite, if any.\n     *\n     * @property render.sprite.yScale\n     * @type number\n     * @default 1\n     */\n\n     /**\n      * A `Number` that defines the offset in the x-axis for the sprite (normalised by texture width).\n      *\n      * @property render.sprite.xOffset\n      * @type number\n      * @default 0\n      */\n\n     /**\n      * A `Number` that defines the offset in the y-axis for the sprite (normalised by texture height).\n      *\n      * @property render.sprite.yOffset\n      * @type number\n      * @default 0\n      */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the body outline (if a sprite is not defined).\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `String` that defines the fill style to use when rendering the body (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.fillStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the body outline (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * An array of unique axis vectors (edge normals) used for collision detection.\n     * These are automatically calculated from the given convex hull (`vertices` array) in `Body.create`.\n     * They are constantly updated by `Body.update` during the simulation.\n     *\n     * @property axes\n     * @type vector[]\n     */\n     \n    /**\n     * A `Number` that _measures_ the area of the body's convex hull, calculated at creation by `Body.create`.\n     *\n     * @property area\n     * @type string\n     * @default \n     */\n\n    /**\n     * A `Bounds` object that defines the AABB region for the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) in `Body.create` and constantly updated by `Body.update` during simulation.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n})();\n\n},{\"../core/Common\":14,\"../core/Sleeping\":22,\"../geometry/Axes\":25,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29,\"../render/Render\":31}],2:[function(_dereq_,module,exports){\n/**\n* The `Matter.Composite` module contains methods for creating and manipulating composite bodies.\n* A composite body is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`, therefore composites form a tree structure.\n* It is important to use the functions in this module to modify composites, rather than directly modifying their properties.\n* Note that the `Matter.World` object is also a type of `Matter.Composite` and as such all composite methods here can also operate on a `Matter.World`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composite\n*/\n\nvar Composite = {};\n\nmodule.exports = Composite;\n\nvar Events = _dereq_('../core/Events');\nvar Common = _dereq_('../core/Common');\nvar Body = _dereq_('./Body');\n\n(function() {\n\n    /**\n     * Creates a new composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properites section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} [options]\n     * @return {composite} A new composite\n     */\n    Composite.create = function(options) {\n        return Common.extend({ \n            id: Common.nextId(),\n            type: 'composite',\n            parent: null,\n            isModified: false,\n            bodies: [], \n            constraints: [], \n            composites: [],\n            label: 'Composite',\n            plugin: {}\n        }, options);\n    };\n\n    /**\n     * Sets the composite's `isModified` flag. \n     * If `updateParents` is true, all parents will be set (default: false).\n     * If `updateChildren` is true, all children will be set (default: false).\n     * @method setModified\n     * @param {composite} composite\n     * @param {boolean} isModified\n     * @param {boolean} [updateParents=false]\n     * @param {boolean} [updateChildren=false]\n     */\n    Composite.setModified = function(composite, isModified, updateParents, updateChildren) {\n        composite.isModified = isModified;\n\n        if (updateParents && composite.parent) {\n            Composite.setModified(composite.parent, isModified, updateParents, updateChildren);\n        }\n\n        if (updateChildren) {\n            for(var i = 0; i < composite.composites.length; i++) {\n                var childComposite = composite.composites[i];\n                Composite.setModified(childComposite, isModified, updateParents, updateChildren);\n            }\n        }\n    };\n\n    /**\n     * Generic add function. Adds one or many body(s), constraint(s) or a composite(s) to the given composite.\n     * Triggers `beforeAdd` and `afterAdd` events on the `composite`.\n     * @method add\n     * @param {composite} composite\n     * @param {} object\n     * @return {composite} The original composite with the objects added\n     */\n    Composite.add = function(composite, object) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeAdd', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                // skip adding compound parts\n                if (obj.parent !== obj) {\n                    Common.warn('Composite.add: skipped adding a compound body part (you must add its parent instead)');\n                    break;\n                }\n\n                Composite.addBody(composite, obj);\n                break;\n            case 'constraint':\n                Composite.addConstraint(composite, obj);\n                break;\n            case 'composite':\n                Composite.addComposite(composite, obj);\n                break;\n            case 'mouseConstraint':\n                Composite.addConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterAdd', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Generic remove function. Removes one or many body(s), constraint(s) or a composite(s) to the given composite.\n     * Optionally searching its children recursively.\n     * Triggers `beforeRemove` and `afterRemove` events on the `composite`.\n     * @method remove\n     * @param {composite} composite\n     * @param {} object\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the objects removed\n     */\n    Composite.remove = function(composite, object, deep) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeRemove', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                Composite.removeBody(composite, obj, deep);\n                break;\n            case 'constraint':\n                Composite.removeConstraint(composite, obj, deep);\n                break;\n            case 'composite':\n                Composite.removeComposite(composite, obj, deep);\n                break;\n            case 'mouseConstraint':\n                Composite.removeConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterRemove', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Adds a composite to the given composite.\n     * @private\n     * @method addComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @return {composite} The original compositeA with the objects from compositeB added\n     */\n    Composite.addComposite = function(compositeA, compositeB) {\n        compositeA.composites.push(compositeB);\n        compositeB.parent = compositeA;\n        Composite.setModified(compositeA, true, true, false);\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @param {boolean} [deep=false]\n     * @return {composite} The original compositeA with the composite removed\n     */\n    Composite.removeComposite = function(compositeA, compositeB, deep) {\n        var position = Common.indexOf(compositeA.composites, compositeB);\n        if (position !== -1) {\n            Composite.removeCompositeAt(compositeA, position);\n            Composite.setModified(compositeA, true, true, false);\n        }\n\n        if (deep) {\n            for (var i = 0; i < compositeA.composites.length; i++){\n                Composite.removeComposite(compositeA.composites[i], compositeB, true);\n            }\n        }\n\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite.\n     * @private\n     * @method removeCompositeAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the composite removed\n     */\n    Composite.removeCompositeAt = function(composite, position) {\n        composite.composites.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a body to the given composite.\n     * @private\n     * @method addBody\n     * @param {composite} composite\n     * @param {body} body\n     * @return {composite} The original composite with the body added\n     */\n    Composite.addBody = function(composite, body) {\n        composite.bodies.push(body);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeBody\n     * @param {composite} composite\n     * @param {body} body\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBody = function(composite, body, deep) {\n        var position = Common.indexOf(composite.bodies, body);\n        if (position !== -1) {\n            Composite.removeBodyAt(composite, position);\n            Composite.setModified(composite, true, true, false);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeBody(composite.composites[i], body, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeBodyAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBodyAt = function(composite, position) {\n        composite.bodies.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a constraint to the given composite.\n     * @private\n     * @method addConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @return {composite} The original composite with the constraint added\n     */\n    Composite.addConstraint = function(composite, constraint) {\n        composite.constraints.push(constraint);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a constraint from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraint = function(composite, constraint, deep) {\n        var position = Common.indexOf(composite.constraints, constraint);\n        if (position !== -1) {\n            Composite.removeConstraintAt(composite, position);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeConstraint(composite.composites[i], constraint, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeConstraintAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraintAt = function(composite, position) {\n        composite.constraints.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes all bodies, constraints and composites from the given composite.\n     * Optionally clearing its children recursively.\n     * @method clear\n     * @param {composite} composite\n     * @param {boolean} keepStatic\n     * @param {boolean} [deep=false]\n     */\n    Composite.clear = function(composite, keepStatic, deep) {\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.clear(composite.composites[i], keepStatic, true);\n            }\n        }\n        \n        if (keepStatic) {\n            composite.bodies = composite.bodies.filter(function(body) { return body.isStatic; });\n        } else {\n            composite.bodies.length = 0;\n        }\n\n        composite.constraints.length = 0;\n        composite.composites.length = 0;\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Returns all bodies in the given composite, including all bodies in its children, recursively.\n     * @method allBodies\n     * @param {composite} composite\n     * @return {body[]} All the bodies\n     */\n    Composite.allBodies = function(composite) {\n        var bodies = [].concat(composite.bodies);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            bodies = bodies.concat(Composite.allBodies(composite.composites[i]));\n\n        return bodies;\n    };\n\n    /**\n     * Returns all constraints in the given composite, including all constraints in its children, recursively.\n     * @method allConstraints\n     * @param {composite} composite\n     * @return {constraint[]} All the constraints\n     */\n    Composite.allConstraints = function(composite) {\n        var constraints = [].concat(composite.constraints);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            constraints = constraints.concat(Composite.allConstraints(composite.composites[i]));\n\n        return constraints;\n    };\n\n    /**\n     * Returns all composites in the given composite, including all composites in its children, recursively.\n     * @method allComposites\n     * @param {composite} composite\n     * @return {composite[]} All the composites\n     */\n    Composite.allComposites = function(composite) {\n        var composites = [].concat(composite.composites);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            composites = composites.concat(Composite.allComposites(composite.composites[i]));\n\n        return composites;\n    };\n\n    /**\n     * Searches the composite recursively for an object matching the type and id supplied, null if not found.\n     * @method get\n     * @param {composite} composite\n     * @param {number} id\n     * @param {string} type\n     * @return {object} The requested object, if found\n     */\n    Composite.get = function(composite, id, type) {\n        var objects,\n            object;\n\n        switch (type) {\n        case 'body':\n            objects = Composite.allBodies(composite);\n            break;\n        case 'constraint':\n            objects = Composite.allConstraints(composite);\n            break;\n        case 'composite':\n            objects = Composite.allComposites(composite).concat(composite);\n            break;\n        }\n\n        if (!objects)\n            return null;\n\n        object = objects.filter(function(object) { \n            return object.id.toString() === id.toString(); \n        });\n\n        return object.length === 0 ? null : object[0];\n    };\n\n    /**\n     * Moves the given object(s) from compositeA to compositeB (equal to a remove followed by an add).\n     * @method move\n     * @param {compositeA} compositeA\n     * @param {object[]} objects\n     * @param {compositeB} compositeB\n     * @return {composite} Returns compositeA\n     */\n    Composite.move = function(compositeA, objects, compositeB) {\n        Composite.remove(compositeA, objects);\n        Composite.add(compositeB, objects);\n        return compositeA;\n    };\n\n    /**\n     * Assigns new ids for all objects in the composite, recursively.\n     * @method rebase\n     * @param {composite} composite\n     * @return {composite} Returns composite\n     */\n    Composite.rebase = function(composite) {\n        var objects = Composite.allBodies(composite)\n                        .concat(Composite.allConstraints(composite))\n                        .concat(Composite.allComposites(composite));\n\n        for (var i = 0; i < objects.length; i++) {\n            objects[i].id = Common.nextId();\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Translates all children in the composite by a given vector relative to their current positions, \n     * without imparting any velocity.\n     * @method translate\n     * @param {composite} composite\n     * @param {vector} translation\n     * @param {bool} [recursive=true]\n     */\n    Composite.translate = function(composite, translation, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            Body.translate(bodies[i], translation);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Rotates all children in the composite by a given angle about the given point, without imparting any angular velocity.\n     * @method rotate\n     * @param {composite} composite\n     * @param {number} rotation\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.rotate = function(composite, rotation, point, recursive) {\n        var cos = Math.cos(rotation),\n            sin = Math.sin(rotation),\n            bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.rotate(body, rotation);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Scales all children in the composite, including updating physical properties (mass, area, axes, inertia), from a world-space point.\n     * @method scale\n     * @param {composite} composite\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.scale = function(composite, scaleX, scaleY, point, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + dx * scaleX,\n                y: point.y + dy * scaleY\n            });\n\n            Body.scale(body, scaleX, scaleY);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Returns the union of the bounds of all of the composite's bodies.\n     * @method bounds\n     * @param {composite} composite The composite.\n     * @returns {bounds} The composite bounds.\n     */\n    Composite.bounds = function(composite) {\n        var bodies = Matter.Composite.allBodies(composite),\n            vertices = [];\n\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i];\n            vertices.push(body.bounds.min, body.bounds.max);\n        }\n\n        return Matter.Bounds.create(vertices);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, before objects have been added.\n    *\n    * @event beforeAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, after objects have been added.\n    *\n    * @event afterAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, before objects have been removed.\n    *\n    * @event beforeRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, after objects have been removed.\n    *\n    * @event afterRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"composite\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage composites.\n     *\n     * @property label\n     * @type string\n     * @default \"Composite\"\n     */\n\n    /**\n     * A flag that specifies whether the composite has been modified during the current step.\n     * Most `Matter.Composite` methods will automatically set this flag to `true` to inform the engine of changes to be handled.\n     * If you need to change it manually, you should use the `Composite.setModified` method.\n     *\n     * @property isModified\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * The `Composite` that is the parent of this composite. It is automatically managed by the `Matter.Composite` methods.\n     *\n     * @property parent\n     * @type composite\n     * @default null\n     */\n\n    /**\n     * An array of `Body` that are _direct_ children of this composite.\n     * To add or remove bodies you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allBodies` method.\n     *\n     * @property bodies\n     * @type body[]\n     * @default []\n     */\n\n    /**\n     * An array of `Constraint` that are _direct_ children of this composite.\n     * To add or remove constraints you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allConstraints` method.\n     *\n     * @property constraints\n     * @type constraint[]\n     * @default []\n     */\n\n    /**\n     * An array of `Composite` that are _direct_ children of this composite.\n     * To add or remove composites you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allComposites` method.\n     *\n     * @property composites\n     * @type composite[]\n     * @default []\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n},{\"../core/Common\":14,\"../core/Events\":16,\"./Body\":1}],3:[function(_dereq_,module,exports){\n/**\n* The `Matter.World` module contains methods for creating and manipulating the world composite.\n* A `Matter.World` is a `Matter.Composite` body, which is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`.\n* A `Matter.World` has a few additional properties including `gravity` and `bounds`.\n* It is important to use the functions in the `Matter.Composite` module to modify the world composite, rather than directly modifying its properties.\n* There are also a few methods here that alias those in `Matter.Composite` for easier readability.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class World\n* @extends Composite\n*/\n\nvar World = {};\n\nmodule.exports = World;\n\nvar Composite = _dereq_('./Composite');\nvar Constraint = _dereq_('../constraint/Constraint');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new world composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @constructor\n     * @param {} options\n     * @return {world} A new world\n     */\n    World.create = function(options) {\n        var composite = Composite.create();\n\n        var defaults = {\n            label: 'World',\n            gravity: {\n                x: 0,\n                y: 1,\n                scale: 0.001\n            },\n            bounds: { \n                min: { x: -Infinity, y: -Infinity }, \n                max: { x: Infinity, y: Infinity } \n            }\n        };\n        \n        return Common.extend(composite, defaults, options);\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * The gravity to apply on the world.\n     *\n     * @property gravity\n     * @type object\n     */\n\n    /**\n     * The gravity x component.\n     *\n     * @property gravity.x\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * The gravity y component.\n     *\n     * @property gravity.y\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * The gravity scale factor.\n     *\n     * @property gravity.scale\n     * @type object\n     * @default 0.001\n     */\n\n    /**\n     * A `Bounds` object that defines the world bounds for collision detection.\n     *\n     * @property bounds\n     * @type bounds\n     * @default { min: { x: -Infinity, y: -Infinity }, max: { x: Infinity, y: Infinity } }\n     */\n\n    // World is a Composite body\n    // see src/module/Outro.js for these aliases:\n    \n    /**\n     * An alias for Composite.clear\n     * @method clear\n     * @param {world} world\n     * @param {boolean} keepStatic\n     */\n\n    /**\n     * An alias for Composite.add\n     * @method addComposite\n     * @param {world} world\n     * @param {composite} composite\n     * @return {world} The original world with the objects from composite added\n     */\n    \n     /**\n      * An alias for Composite.addBody\n      * @method addBody\n      * @param {world} world\n      * @param {body} body\n      * @return {world} The original world with the body added\n      */\n\n     /**\n      * An alias for Composite.addConstraint\n      * @method addConstraint\n      * @param {world} world\n      * @param {constraint} constraint\n      * @return {world} The original world with the constraint added\n      */\n\n})();\n\n},{\"../constraint/Constraint\":12,\"../core/Common\":14,\"./Composite\":2}],4:[function(_dereq_,module,exports){\n/**\n* The `Matter.Contact` module contains methods for creating and manipulating collision contacts.\n*\n* @class Contact\n*/\n\nvar Contact = {};\n\nmodule.exports = Contact;\n\n(function() {\n\n    /**\n     * Creates a new contact.\n     * @method create\n     * @param {vertex} vertex\n     * @return {contact} A new contact\n     */\n    Contact.create = function(vertex) {\n        return {\n            id: Contact.id(vertex),\n            vertex: vertex,\n            normalImpulse: 0,\n            tangentImpulse: 0\n        };\n    };\n    \n    /**\n     * Generates a contact id.\n     * @method id\n     * @param {vertex} vertex\n     * @return {string} Unique contactID\n     */\n    Contact.id = function(vertex) {\n        return vertex.body.id + '_' + vertex.index;\n    };\n\n})();\n\n},{}],5:[function(_dereq_,module,exports){\n/**\n* The `Matter.Detector` module contains methods for detecting collisions given a set of pairs.\n*\n* @class Detector\n*/\n\n// TODO: speculative contacts\n\nvar Detector = {};\n\nmodule.exports = Detector;\n\nvar SAT = _dereq_('./SAT');\nvar Pair = _dereq_('./Pair');\nvar Bounds = _dereq_('../geometry/Bounds');\n\n(function() {\n\n    /**\n     * Finds all collisions given a list of pairs.\n     * @method collisions\n     * @param {pair[]} broadphasePairs\n     * @param {engine} engine\n     * @return {array} collisions\n     */\n    Detector.collisions = function(broadphasePairs, engine) {\n        var collisions = [],\n            pairsTable = engine.pairs.table;\n\n        \n        for (var i = 0; i < broadphasePairs.length; i++) {\n            var bodyA = broadphasePairs[i][0], \n                bodyB = broadphasePairs[i][1];\n\n            if ((bodyA.isStatic || bodyA.isSleeping) && (bodyB.isStatic || bodyB.isSleeping))\n                continue;\n            \n            if (!Detector.canCollide(bodyA.collisionFilter, bodyB.collisionFilter))\n                continue;\n\n\n            // mid phase\n            if (Bounds.overlaps(bodyA.bounds, bodyB.bounds)) {\n                for (var j = bodyA.parts.length > 1 ? 1 : 0; j < bodyA.parts.length; j++) {\n                    var partA = bodyA.parts[j];\n\n                    for (var k = bodyB.parts.length > 1 ? 1 : 0; k < bodyB.parts.length; k++) {\n                        var partB = bodyB.parts[k];\n\n                        if ((partA === bodyA && partB === bodyB) || Bounds.overlaps(partA.bounds, partB.bounds)) {\n                            // find a previous collision we could reuse\n                            var pairId = Pair.id(partA, partB),\n                                pair = pairsTable[pairId],\n                                previousCollision;\n\n                            if (pair && pair.isActive) {\n                                previousCollision = pair.collision;\n                            } else {\n                                previousCollision = null;\n                            }\n\n                            // narrow phase\n                            var collision = SAT.collides(partA, partB, previousCollision);\n\n\n                            if (collision.collided) {\n                                collisions.push(collision);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns `true` if both supplied collision filters will allow a collision to occur.\n     * See `body.collisionFilter` for more information.\n     * @method canCollide\n     * @param {} filterA\n     * @param {} filterB\n     * @return {bool} `true` if collision can occur\n     */\n    Detector.canCollide = function(filterA, filterB) {\n        if (filterA.group === filterB.group && filterA.group !== 0)\n            return filterA.group > 0;\n\n        return (filterA.mask & filterB.category) !== 0 && (filterB.mask & filterA.category) !== 0;\n    };\n\n})();\n\n},{\"../geometry/Bounds\":26,\"./Pair\":7,\"./SAT\":11}],6:[function(_dereq_,module,exports){\n/**\n* The `Matter.Grid` module contains methods for creating and manipulating collision broadphase grid structures.\n*\n* @class Grid\n*/\n\nvar Grid = {};\n\nmodule.exports = Grid;\n\nvar Pair = _dereq_('./Pair');\nvar Detector = _dereq_('./Detector');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new grid.\n     * @method create\n     * @param {} options\n     * @return {grid} A new grid\n     */\n    Grid.create = function(options) {\n        var defaults = {\n            controller: Grid,\n            detector: Detector.collisions,\n            buckets: {},\n            pairs: {},\n            pairsList: [],\n            bucketWidth: 48,\n            bucketHeight: 48\n        };\n\n        return Common.extend(defaults, options);\n    };\n\n    /**\n     * The width of a single grid bucket.\n     *\n     * @property bucketWidth\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * The height of a single grid bucket.\n     *\n     * @property bucketHeight\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * Updates the grid.\n     * @method update\n     * @param {grid} grid\n     * @param {body[]} bodies\n     * @param {engine} engine\n     * @param {boolean} forceUpdate\n     */\n    Grid.update = function(grid, bodies, engine, forceUpdate) {\n        var i, col, row,\n            world = engine.world,\n            buckets = grid.buckets,\n            bucket,\n            bucketId,\n            gridChanged = false;\n\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isSleeping && !forceUpdate)\n                continue;\n\n            // don't update out of world bodies\n            if (body.bounds.max.x < world.bounds.min.x || body.bounds.min.x > world.bounds.max.x\n                || body.bounds.max.y < world.bounds.min.y || body.bounds.min.y > world.bounds.max.y)\n                continue;\n\n            var newRegion = _getRegion(grid, body);\n\n            // if the body has changed grid region\n            if (!body.region || newRegion.id !== body.region.id || forceUpdate) {\n\n\n                if (!body.region || forceUpdate)\n                    body.region = newRegion;\n\n                var union = _regionUnion(newRegion, body.region);\n\n                // update grid buckets affected by region change\n                // iterate over the union of both regions\n                for (col = union.startCol; col <= union.endCol; col++) {\n                    for (row = union.startRow; row <= union.endRow; row++) {\n                        bucketId = _getBucketId(col, row);\n                        bucket = buckets[bucketId];\n\n                        var isInsideNewRegion = (col >= newRegion.startCol && col <= newRegion.endCol\n                                                && row >= newRegion.startRow && row <= newRegion.endRow);\n\n                        var isInsideOldRegion = (col >= body.region.startCol && col <= body.region.endCol\n                                                && row >= body.region.startRow && row <= body.region.endRow);\n\n                        // remove from old region buckets\n                        if (!isInsideNewRegion && isInsideOldRegion) {\n                            if (isInsideOldRegion) {\n                                if (bucket)\n                                    _bucketRemoveBody(grid, bucket, body);\n                            }\n                        }\n\n                        // add to new region buckets\n                        if (body.region === newRegion || (isInsideNewRegion && !isInsideOldRegion) || forceUpdate) {\n                            if (!bucket)\n                                bucket = _createBucket(buckets, bucketId);\n                            _bucketAddBody(grid, bucket, body);\n                        }\n                    }\n                }\n\n                // set the new region\n                body.region = newRegion;\n\n                // flag changes so we can update pairs\n                gridChanged = true;\n            }\n        }\n\n        // update pairs list only if pairs changed (i.e. a body changed region)\n        if (gridChanged)\n            grid.pairsList = _createActivePairsList(grid);\n    };\n\n    /**\n     * Clears the grid.\n     * @method clear\n     * @param {grid} grid\n     */\n    Grid.clear = function(grid) {\n        grid.buckets = {};\n        grid.pairs = {};\n        grid.pairsList = [];\n    };\n\n    /**\n     * Finds the union of two regions.\n     * @method _regionUnion\n     * @private\n     * @param {} regionA\n     * @param {} regionB\n     * @return {} region\n     */\n    var _regionUnion = function(regionA, regionB) {\n        var startCol = Math.min(regionA.startCol, regionB.startCol),\n            endCol = Math.max(regionA.endCol, regionB.endCol),\n            startRow = Math.min(regionA.startRow, regionB.startRow),\n            endRow = Math.max(regionA.endRow, regionB.endRow);\n\n        return _createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Gets the region a given body falls in for a given grid.\n     * @method _getRegion\n     * @private\n     * @param {} grid\n     * @param {} body\n     * @return {} region\n     */\n    var _getRegion = function(grid, body) {\n        var bounds = body.bounds,\n            startCol = Math.floor(bounds.min.x / grid.bucketWidth),\n            endCol = Math.floor(bounds.max.x / grid.bucketWidth),\n            startRow = Math.floor(bounds.min.y / grid.bucketHeight),\n            endRow = Math.floor(bounds.max.y / grid.bucketHeight);\n\n        return _createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Creates a region.\n     * @method _createRegion\n     * @private\n     * @param {} startCol\n     * @param {} endCol\n     * @param {} startRow\n     * @param {} endRow\n     * @return {} region\n     */\n    var _createRegion = function(startCol, endCol, startRow, endRow) {\n        return { \n            id: startCol + ',' + endCol + ',' + startRow + ',' + endRow,\n            startCol: startCol, \n            endCol: endCol, \n            startRow: startRow, \n            endRow: endRow \n        };\n    };\n\n    /**\n     * Gets the bucket id at the given position.\n     * @method _getBucketId\n     * @private\n     * @param {} column\n     * @param {} row\n     * @return {string} bucket id\n     */\n    var _getBucketId = function(column, row) {\n        return 'C' + column + 'R' + row;\n    };\n\n    /**\n     * Creates a bucket.\n     * @method _createBucket\n     * @private\n     * @param {} buckets\n     * @param {} bucketId\n     * @return {} bucket\n     */\n    var _createBucket = function(buckets, bucketId) {\n        var bucket = buckets[bucketId] = [];\n        return bucket;\n    };\n\n    /**\n     * Adds a body to a bucket.\n     * @method _bucketAddBody\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    var _bucketAddBody = function(grid, bucket, body) {\n        // add new pairs\n        for (var i = 0; i < bucket.length; i++) {\n            var bodyB = bucket[i];\n\n            if (body.id === bodyB.id || (body.isStatic && bodyB.isStatic))\n                continue;\n\n            // keep track of the number of buckets the pair exists in\n            // important for Grid.update to work\n            var pairId = Pair.id(body, bodyB),\n                pair = grid.pairs[pairId];\n\n            if (pair) {\n                pair[2] += 1;\n            } else {\n                grid.pairs[pairId] = [body, bodyB, 1];\n            }\n        }\n\n        // add to bodies (after pairs, otherwise pairs with self)\n        bucket.push(body);\n    };\n\n    /**\n     * Removes a body from a bucket.\n     * @method _bucketRemoveBody\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    var _bucketRemoveBody = function(grid, bucket, body) {\n        // remove from bucket\n        bucket.splice(Common.indexOf(bucket, body), 1);\n\n        // update pair counts\n        for (var i = 0; i < bucket.length; i++) {\n            // keep track of the number of buckets the pair exists in\n            // important for _createActivePairsList to work\n            var bodyB = bucket[i],\n                pairId = Pair.id(body, bodyB),\n                pair = grid.pairs[pairId];\n\n            if (pair)\n                pair[2] -= 1;\n        }\n    };\n\n    /**\n     * Generates a list of the active pairs in the grid.\n     * @method _createActivePairsList\n     * @private\n     * @param {} grid\n     * @return [] pairs\n     */\n    var _createActivePairsList = function(grid) {\n        var pairKeys,\n            pair,\n            pairs = [];\n\n        // grid.pairs is used as a hashmap\n        pairKeys = Common.keys(grid.pairs);\n\n        // iterate over grid.pairs\n        for (var k = 0; k < pairKeys.length; k++) {\n            pair = grid.pairs[pairKeys[k]];\n\n            // if pair exists in at least one bucket\n            // it is a pair that needs further collision testing so push it\n            if (pair[2] > 0) {\n                pairs.push(pair);\n            } else {\n                delete grid.pairs[pairKeys[k]];\n            }\n        }\n\n        return pairs;\n    };\n    \n})();\n\n},{\"../core/Common\":14,\"./Detector\":5,\"./Pair\":7}],7:[function(_dereq_,module,exports){\n/**\n* The `Matter.Pair` module contains methods for creating and manipulating collision pairs.\n*\n* @class Pair\n*/\n\nvar Pair = {};\n\nmodule.exports = Pair;\n\nvar Contact = _dereq_('./Contact');\n\n(function() {\n    \n    /**\n     * Creates a pair.\n     * @method create\n     * @param {collision} collision\n     * @param {number} timestamp\n     * @return {pair} A new pair\n     */\n    Pair.create = function(collision, timestamp) {\n        var bodyA = collision.bodyA,\n            bodyB = collision.bodyB,\n            parentA = collision.parentA,\n            parentB = collision.parentB;\n\n        var pair = {\n            id: Pair.id(bodyA, bodyB),\n            bodyA: bodyA,\n            bodyB: bodyB,\n            contacts: {},\n            activeContacts: [],\n            separation: 0,\n            isActive: true,\n            isSensor: bodyA.isSensor || bodyB.isSensor,\n            timeCreated: timestamp,\n            timeUpdated: timestamp,\n            inverseMass: parentA.inverseMass + parentB.inverseMass,\n            friction: Math.min(parentA.friction, parentB.friction),\n            frictionStatic: Math.max(parentA.frictionStatic, parentB.frictionStatic),\n            restitution: Math.max(parentA.restitution, parentB.restitution),\n            slop: Math.max(parentA.slop, parentB.slop)\n        };\n\n        Pair.update(pair, collision, timestamp);\n\n        return pair;\n    };\n\n    /**\n     * Updates a pair given a collision.\n     * @method update\n     * @param {pair} pair\n     * @param {collision} collision\n     * @param {number} timestamp\n     */\n    Pair.update = function(pair, collision, timestamp) {\n        var contacts = pair.contacts,\n            supports = collision.supports,\n            activeContacts = pair.activeContacts,\n            parentA = collision.parentA,\n            parentB = collision.parentB;\n        \n        pair.collision = collision;\n        pair.inverseMass = parentA.inverseMass + parentB.inverseMass;\n        pair.friction = Math.min(parentA.friction, parentB.friction);\n        pair.frictionStatic = Math.max(parentA.frictionStatic, parentB.frictionStatic);\n        pair.restitution = Math.max(parentA.restitution, parentB.restitution);\n        pair.slop = Math.max(parentA.slop, parentB.slop);\n        activeContacts.length = 0;\n        \n        if (collision.collided) {\n            for (var i = 0; i < supports.length; i++) {\n                var support = supports[i],\n                    contactId = Contact.id(support),\n                    contact = contacts[contactId];\n\n                if (contact) {\n                    activeContacts.push(contact);\n                } else {\n                    activeContacts.push(contacts[contactId] = Contact.create(support));\n                }\n            }\n\n            pair.separation = collision.depth;\n            Pair.setActive(pair, true, timestamp);\n        } else {\n            if (pair.isActive === true)\n                Pair.setActive(pair, false, timestamp);\n        }\n    };\n    \n    /**\n     * Set a pair as active or inactive.\n     * @method setActive\n     * @param {pair} pair\n     * @param {bool} isActive\n     * @param {number} timestamp\n     */\n    Pair.setActive = function(pair, isActive, timestamp) {\n        if (isActive) {\n            pair.isActive = true;\n            pair.timeUpdated = timestamp;\n        } else {\n            pair.isActive = false;\n            pair.activeContacts.length = 0;\n        }\n    };\n\n    /**\n     * Get the id for the given pair.\n     * @method id\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {string} Unique pairId\n     */\n    Pair.id = function(bodyA, bodyB) {\n        if (bodyA.id < bodyB.id) {\n            return 'A' + bodyA.id + 'B' + bodyB.id;\n        } else {\n            return 'A' + bodyB.id + 'B' + bodyA.id;\n        }\n    };\n\n})();\n\n},{\"./Contact\":4}],8:[function(_dereq_,module,exports){\n/**\n* The `Matter.Pairs` module contains methods for creating and manipulating collision pair sets.\n*\n* @class Pairs\n*/\n\nvar Pairs = {};\n\nmodule.exports = Pairs;\n\nvar Pair = _dereq_('./Pair');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n    \n    var _pairMaxIdleLife = 1000;\n\n    /**\n     * Creates a new pairs structure.\n     * @method create\n     * @param {object} options\n     * @return {pairs} A new pairs structure\n     */\n    Pairs.create = function(options) {\n        return Common.extend({ \n            table: {},\n            list: [],\n            collisionStart: [],\n            collisionActive: [],\n            collisionEnd: []\n        }, options);\n    };\n\n    /**\n     * Updates pairs given a list of collisions.\n     * @method update\n     * @param {object} pairs\n     * @param {collision[]} collisions\n     * @param {number} timestamp\n     */\n    Pairs.update = function(pairs, collisions, timestamp) {\n        var pairsList = pairs.list,\n            pairsTable = pairs.table,\n            collisionStart = pairs.collisionStart,\n            collisionEnd = pairs.collisionEnd,\n            collisionActive = pairs.collisionActive,\n            activePairIds = [],\n            collision,\n            pairId,\n            pair,\n            i;\n\n        // clear collision state arrays, but maintain old reference\n        collisionStart.length = 0;\n        collisionEnd.length = 0;\n        collisionActive.length = 0;\n\n        for (i = 0; i < collisions.length; i++) {\n            collision = collisions[i];\n\n            if (collision.collided) {\n                pairId = Pair.id(collision.bodyA, collision.bodyB);\n                activePairIds.push(pairId);\n\n                pair = pairsTable[pairId];\n                \n                if (pair) {\n                    // pair already exists (but may or may not be active)\n                    if (pair.isActive) {\n                        // pair exists and is active\n                        collisionActive.push(pair);\n                    } else {\n                        // pair exists but was inactive, so a collision has just started again\n                        collisionStart.push(pair);\n                    }\n\n                    // update the pair\n                    Pair.update(pair, collision, timestamp);\n                } else {\n                    // pair did not exist, create a new pair\n                    pair = Pair.create(collision, timestamp);\n                    pairsTable[pairId] = pair;\n\n                    // push the new pair\n                    collisionStart.push(pair);\n                    pairsList.push(pair);\n                }\n            }\n        }\n\n        // deactivate previously active pairs that are now inactive\n        for (i = 0; i < pairsList.length; i++) {\n            pair = pairsList[i];\n            if (pair.isActive && Common.indexOf(activePairIds, pair.id) === -1) {\n                Pair.setActive(pair, false, timestamp);\n                collisionEnd.push(pair);\n            }\n        }\n    };\n    \n    /**\n     * Finds and removes pairs that have been inactive for a set amount of time.\n     * @method removeOld\n     * @param {object} pairs\n     * @param {number} timestamp\n     */\n    Pairs.removeOld = function(pairs, timestamp) {\n        var pairsList = pairs.list,\n            pairsTable = pairs.table,\n            indexesToRemove = [],\n            pair,\n            collision,\n            pairIndex,\n            i;\n\n        for (i = 0; i < pairsList.length; i++) {\n            pair = pairsList[i];\n            collision = pair.collision;\n            \n            // never remove sleeping pairs\n            if (collision.bodyA.isSleeping || collision.bodyB.isSleeping) {\n                pair.timeUpdated = timestamp;\n                continue;\n            }\n\n            // if pair is inactive for too long, mark it to be removed\n            if (timestamp - pair.timeUpdated > _pairMaxIdleLife) {\n                indexesToRemove.push(i);\n            }\n        }\n\n        // remove marked pairs\n        for (i = 0; i < indexesToRemove.length; i++) {\n            pairIndex = indexesToRemove[i] - i;\n            pair = pairsList[pairIndex];\n            delete pairsTable[pair.id];\n            pairsList.splice(pairIndex, 1);\n        }\n    };\n\n    /**\n     * Clears the given pairs structure.\n     * @method clear\n     * @param {pairs} pairs\n     * @return {pairs} pairs\n     */\n    Pairs.clear = function(pairs) {\n        pairs.table = {};\n        pairs.list.length = 0;\n        pairs.collisionStart.length = 0;\n        pairs.collisionActive.length = 0;\n        pairs.collisionEnd.length = 0;\n        return pairs;\n    };\n\n})();\n\n},{\"../core/Common\":14,\"./Pair\":7}],9:[function(_dereq_,module,exports){\n/**\n* The `Matter.Query` module contains methods for performing collision queries.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Query\n*/\n\nvar Query = {};\n\nmodule.exports = Query;\n\nvar Vector = _dereq_('../geometry/Vector');\nvar SAT = _dereq_('./SAT');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Bodies = _dereq_('../factory/Bodies');\nvar Vertices = _dereq_('../geometry/Vertices');\n\n(function() {\n\n    /**\n     * Casts a ray segment against a set of bodies and returns all collisions, ray width is optional. Intersection points are not provided.\n     * @method ray\n     * @param {body[]} bodies\n     * @param {vector} startPoint\n     * @param {vector} endPoint\n     * @param {number} [rayWidth]\n     * @return {object[]} Collisions\n     */\n    Query.ray = function(bodies, startPoint, endPoint, rayWidth) {\n        rayWidth = rayWidth || 1e-100;\n\n        var rayAngle = Vector.angle(startPoint, endPoint),\n            rayLength = Vector.magnitude(Vector.sub(startPoint, endPoint)),\n            rayX = (endPoint.x + startPoint.x) * 0.5,\n            rayY = (endPoint.y + startPoint.y) * 0.5,\n            ray = Bodies.rectangle(rayX, rayY, rayLength, rayWidth, { angle: rayAngle }),\n            collisions = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var bodyA = bodies[i];\n            \n            if (Bounds.overlaps(bodyA.bounds, ray.bounds)) {\n                for (var j = bodyA.parts.length === 1 ? 0 : 1; j < bodyA.parts.length; j++) {\n                    var part = bodyA.parts[j];\n\n                    if (Bounds.overlaps(part.bounds, ray.bounds)) {\n                        var collision = SAT.collides(part, ray);\n                        if (collision.collided) {\n                            collision.body = collision.bodyA = collision.bodyB = bodyA;\n                            collisions.push(collision);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns all bodies whose bounds are inside (or outside if set) the given set of bounds, from the given set of bodies.\n     * @method region\n     * @param {body[]} bodies\n     * @param {bounds} bounds\n     * @param {bool} [outside=false]\n     * @return {body[]} The bodies matching the query\n     */\n    Query.region = function(bodies, bounds, outside) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                overlaps = Bounds.overlaps(body.bounds, bounds);\n            if ((overlaps && !outside) || (!overlaps && outside))\n                result.push(body);\n        }\n\n        return result;\n    };\n\n    /**\n     * Returns all bodies whose vertices contain the given point, from the given set of bodies.\n     * @method point\n     * @param {body[]} bodies\n     * @param {vector} point\n     * @return {body[]} The bodies matching the query\n     */\n    Query.point = function(bodies, point) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            \n            if (Bounds.contains(body.bounds, point)) {\n                for (var j = body.parts.length === 1 ? 0 : 1; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n\n                    if (Bounds.contains(part.bounds, point)\n                        && Vertices.contains(part.vertices, point)) {\n                        result.push(body);\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n})();\n\n},{\"../factory/Bodies\":23,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29,\"./SAT\":11}],10:[function(_dereq_,module,exports){\n/**\n* The `Matter.Resolver` module contains methods for resolving collision pairs.\n*\n* @class Resolver\n*/\n\nvar Resolver = {};\n\nmodule.exports = Resolver;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\n\n(function() {\n\n    Resolver._restingThresh = 4;\n    Resolver._restingThreshTangent = 6;\n    Resolver._positionDampen = 0.9;\n    Resolver._positionWarming = 0.8;\n    Resolver._frictionNormalMultiplier = 5;\n\n    /**\n     * Prepare pairs for position solving.\n     * @method preSolvePosition\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolvePosition = function(pairs) {\n        var i,\n            pair,\n            activeCount;\n\n        // find total contacts on each body\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive)\n                continue;\n            \n            activeCount = pair.activeContacts.length;\n            pair.collision.parentA.totalContacts += activeCount;\n            pair.collision.parentB.totalContacts += activeCount;\n        }\n    };\n\n    /**\n     * Find a solution for pair positions.\n     * @method solvePosition\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Resolver.solvePosition = function(pairs, timeScale) {\n        var i,\n            pair,\n            collision,\n            bodyA,\n            bodyB,\n            normal,\n            bodyBtoA,\n            contactShare,\n            positionImpulse,\n            contactCount = {},\n            tempA = Vector._temp[0],\n            tempB = Vector._temp[1],\n            tempC = Vector._temp[2],\n            tempD = Vector._temp[3];\n\n        // find impulses required to resolve penetration\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n\n            // get current separation between body edges involved in collision\n            bodyBtoA = Vector.sub(Vector.add(bodyB.positionImpulse, bodyB.position, tempA), \n                                    Vector.add(bodyA.positionImpulse, \n                                        Vector.sub(bodyB.position, collision.penetration, tempB), tempC), tempD);\n\n            pair.separation = Vector.dot(normal, bodyBtoA);\n        }\n        \n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            positionImpulse = (pair.separation - pair.slop) * timeScale;\n\n            if (bodyA.isStatic || bodyB.isStatic)\n                positionImpulse *= 2;\n            \n            if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                contactShare = Resolver._positionDampen / bodyA.totalContacts;\n                bodyA.positionImpulse.x += normal.x * positionImpulse * contactShare;\n                bodyA.positionImpulse.y += normal.y * positionImpulse * contactShare;\n            }\n\n            if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                contactShare = Resolver._positionDampen / bodyB.totalContacts;\n                bodyB.positionImpulse.x -= normal.x * positionImpulse * contactShare;\n                bodyB.positionImpulse.y -= normal.y * positionImpulse * contactShare;\n            }\n        }\n    };\n\n    /**\n     * Apply position resolution.\n     * @method postSolvePosition\n     * @param {body[]} bodies\n     */\n    Resolver.postSolvePosition = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            // reset contact count\n            body.totalContacts = 0;\n\n            if (body.positionImpulse.x !== 0 || body.positionImpulse.y !== 0) {\n                // update body geometry\n                for (var j = 0; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n                    Vertices.translate(part.vertices, body.positionImpulse);\n                    Bounds.update(part.bounds, part.vertices, body.velocity);\n                    part.position.x += body.positionImpulse.x;\n                    part.position.y += body.positionImpulse.y;\n                }\n\n                // move the body without changing velocity\n                body.positionPrev.x += body.positionImpulse.x;\n                body.positionPrev.y += body.positionImpulse.y;\n\n                if (Vector.dot(body.positionImpulse, body.velocity) < 0) {\n                    // reset cached impulse if the body has velocity along it\n                    body.positionImpulse.x = 0;\n                    body.positionImpulse.y = 0;\n                } else {\n                    // warm the next iteration\n                    body.positionImpulse.x *= Resolver._positionWarming;\n                    body.positionImpulse.y *= Resolver._positionWarming;\n                }\n            }\n        }\n    };\n\n    /**\n     * Prepare pairs for velocity solving.\n     * @method preSolveVelocity\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolveVelocity = function(pairs) {\n        var i,\n            j,\n            pair,\n            contacts,\n            collision,\n            bodyA,\n            bodyB,\n            normal,\n            tangent,\n            contact,\n            contactVertex,\n            normalImpulse,\n            tangentImpulse,\n            offset,\n            impulse = Vector._temp[0],\n            tempA = Vector._temp[1];\n        \n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            contacts = pair.activeContacts;\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            tangent = collision.tangent;\n\n            // resolve each contact\n            for (j = 0; j < contacts.length; j++) {\n                contact = contacts[j];\n                contactVertex = contact.vertex;\n                normalImpulse = contact.normalImpulse;\n                tangentImpulse = contact.tangentImpulse;\n\n                if (normalImpulse !== 0 || tangentImpulse !== 0) {\n                    // total impulse from contact\n                    impulse.x = (normal.x * normalImpulse) + (tangent.x * tangentImpulse);\n                    impulse.y = (normal.y * normalImpulse) + (tangent.y * tangentImpulse);\n                    \n                    // apply impulse from contact\n                    if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                        offset = Vector.sub(contactVertex, bodyA.position, tempA);\n                        bodyA.positionPrev.x += impulse.x * bodyA.inverseMass;\n                        bodyA.positionPrev.y += impulse.y * bodyA.inverseMass;\n                        bodyA.anglePrev += Vector.cross(offset, impulse) * bodyA.inverseInertia;\n                    }\n\n                    if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                        offset = Vector.sub(contactVertex, bodyB.position, tempA);\n                        bodyB.positionPrev.x -= impulse.x * bodyB.inverseMass;\n                        bodyB.positionPrev.y -= impulse.y * bodyB.inverseMass;\n                        bodyB.anglePrev -= Vector.cross(offset, impulse) * bodyB.inverseInertia;\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Find a solution for pair velocities.\n     * @method solveVelocity\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Resolver.solveVelocity = function(pairs, timeScale) {\n        var timeScaleSquared = timeScale * timeScale,\n            impulse = Vector._temp[0],\n            tempA = Vector._temp[1],\n            tempB = Vector._temp[2],\n            tempC = Vector._temp[3],\n            tempD = Vector._temp[4],\n            tempE = Vector._temp[5];\n        \n        for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            var collision = pair.collision,\n                bodyA = collision.parentA,\n                bodyB = collision.parentB,\n                normal = collision.normal,\n                tangent = collision.tangent,\n                contacts = pair.activeContacts,\n                contactShare = 1 / contacts.length;\n\n            // update body velocities\n            bodyA.velocity.x = bodyA.position.x - bodyA.positionPrev.x;\n            bodyA.velocity.y = bodyA.position.y - bodyA.positionPrev.y;\n            bodyB.velocity.x = bodyB.position.x - bodyB.positionPrev.x;\n            bodyB.velocity.y = bodyB.position.y - bodyB.positionPrev.y;\n            bodyA.angularVelocity = bodyA.angle - bodyA.anglePrev;\n            bodyB.angularVelocity = bodyB.angle - bodyB.anglePrev;\n\n            // resolve each contact\n            for (var j = 0; j < contacts.length; j++) {\n                var contact = contacts[j],\n                    contactVertex = contact.vertex,\n                    offsetA = Vector.sub(contactVertex, bodyA.position, tempA),\n                    offsetB = Vector.sub(contactVertex, bodyB.position, tempB),\n                    velocityPointA = Vector.add(bodyA.velocity, Vector.mult(Vector.perp(offsetA), bodyA.angularVelocity), tempC),\n                    velocityPointB = Vector.add(bodyB.velocity, Vector.mult(Vector.perp(offsetB), bodyB.angularVelocity), tempD), \n                    relativeVelocity = Vector.sub(velocityPointA, velocityPointB, tempE),\n                    normalVelocity = Vector.dot(normal, relativeVelocity);\n\n                var tangentVelocity = Vector.dot(tangent, relativeVelocity),\n                    tangentSpeed = Math.abs(tangentVelocity),\n                    tangentVelocityDirection = Common.sign(tangentVelocity);\n\n                // raw impulses\n                var normalImpulse = (1 + pair.restitution) * normalVelocity,\n                    normalForce = Common.clamp(pair.separation + normalVelocity, 0, 1) * Resolver._frictionNormalMultiplier;\n\n                // coulomb friction\n                var tangentImpulse = tangentVelocity,\n                    maxFriction = Infinity;\n\n                if (tangentSpeed > pair.friction * pair.frictionStatic * normalForce * timeScaleSquared) {\n                    maxFriction = tangentSpeed;\n                    tangentImpulse = Common.clamp(\n                        pair.friction * tangentVelocityDirection * timeScaleSquared,\n                        -maxFriction, maxFriction\n                    );\n                }\n\n                // modify impulses accounting for mass, inertia and offset\n                var oAcN = Vector.cross(offsetA, normal),\n                    oBcN = Vector.cross(offsetB, normal),\n                    share = contactShare / (bodyA.inverseMass + bodyB.inverseMass + bodyA.inverseInertia * oAcN * oAcN  + bodyB.inverseInertia * oBcN * oBcN);\n\n                normalImpulse *= share;\n                tangentImpulse *= share;\n\n                // handle high velocity and resting collisions separately\n                if (normalVelocity < 0 && normalVelocity * normalVelocity > Resolver._restingThresh * timeScaleSquared) {\n                    // high normal velocity so clear cached contact normal impulse\n                    contact.normalImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // impulse constraint tends to 0\n                    var contactNormalImpulse = contact.normalImpulse;\n                    contact.normalImpulse = Math.min(contact.normalImpulse + normalImpulse, 0);\n                    normalImpulse = contact.normalImpulse - contactNormalImpulse;\n                }\n\n                // handle high velocity and resting collisions separately\n                if (tangentVelocity * tangentVelocity > Resolver._restingThreshTangent * timeScaleSquared) {\n                    // high tangent velocity so clear cached contact tangent impulse\n                    contact.tangentImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // tangent impulse tends to -tangentSpeed or +tangentSpeed\n                    var contactTangentImpulse = contact.tangentImpulse;\n                    contact.tangentImpulse = Common.clamp(contact.tangentImpulse + tangentImpulse, -maxFriction, maxFriction);\n                    tangentImpulse = contact.tangentImpulse - contactTangentImpulse;\n                }\n\n                // total impulse from contact\n                impulse.x = (normal.x * normalImpulse) + (tangent.x * tangentImpulse);\n                impulse.y = (normal.y * normalImpulse) + (tangent.y * tangentImpulse);\n                \n                // apply impulse from contact\n                if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                    bodyA.positionPrev.x += impulse.x * bodyA.inverseMass;\n                    bodyA.positionPrev.y += impulse.y * bodyA.inverseMass;\n                    bodyA.anglePrev += Vector.cross(offsetA, impulse) * bodyA.inverseInertia;\n                }\n\n                if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                    bodyB.positionPrev.x -= impulse.x * bodyB.inverseMass;\n                    bodyB.positionPrev.y -= impulse.y * bodyB.inverseMass;\n                    bodyB.anglePrev -= Vector.cross(offsetB, impulse) * bodyB.inverseInertia;\n                }\n            }\n        }\n    };\n\n})();\n\n},{\"../core/Common\":14,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],11:[function(_dereq_,module,exports){\n/**\n* The `Matter.SAT` module contains methods for detecting collisions using the Separating Axis Theorem.\n*\n* @class SAT\n*/\n\n// TODO: true circles and curves\n\nvar SAT = {};\n\nmodule.exports = SAT;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\n\n(function() {\n\n    /**\n     * Detect collision between two bodies using the Separating Axis Theorem.\n     * @method collides\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @param {collision} previousCollision\n     * @return {collision} collision\n     */\n    SAT.collides = function(bodyA, bodyB, previousCollision) {\n        var overlapAB,\n            overlapBA, \n            minOverlap,\n            collision,\n            canReusePrevCol = false;\n\n        if (previousCollision) {\n            // estimate total motion\n            var parentA = bodyA.parent,\n                parentB = bodyB.parent,\n                motion = parentA.speed * parentA.speed + parentA.angularSpeed * parentA.angularSpeed\n                       + parentB.speed * parentB.speed + parentB.angularSpeed * parentB.angularSpeed;\n\n            // we may be able to (partially) reuse collision result \n            // but only safe if collision was resting\n            canReusePrevCol = previousCollision && previousCollision.collided && motion < 0.2;\n\n            // reuse collision object\n            collision = previousCollision;\n        } else {\n            collision = { collided: false, bodyA: bodyA, bodyB: bodyB };\n        }\n\n        if (previousCollision && canReusePrevCol) {\n            // if we can reuse the collision result\n            // we only need to test the previously found axis\n            var axisBodyA = collision.axisBody,\n                axisBodyB = axisBodyA === bodyA ? bodyB : bodyA,\n                axes = [axisBodyA.axes[previousCollision.axisNumber]];\n\n            minOverlap = _overlapAxes(axisBodyA.vertices, axisBodyB.vertices, axes);\n            collision.reused = true;\n\n            if (minOverlap.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n        } else {\n            // if we can't reuse a result, perform a full SAT test\n\n            overlapAB = _overlapAxes(bodyA.vertices, bodyB.vertices, bodyA.axes);\n\n            if (overlapAB.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n\n            overlapBA = _overlapAxes(bodyB.vertices, bodyA.vertices, bodyB.axes);\n\n            if (overlapBA.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n\n            if (overlapAB.overlap < overlapBA.overlap) {\n                minOverlap = overlapAB;\n                collision.axisBody = bodyA;\n            } else {\n                minOverlap = overlapBA;\n                collision.axisBody = bodyB;\n            }\n\n            // important for reuse later\n            collision.axisNumber = minOverlap.axisNumber;\n        }\n\n        collision.bodyA = bodyA.id < bodyB.id ? bodyA : bodyB;\n        collision.bodyB = bodyA.id < bodyB.id ? bodyB : bodyA;\n        collision.collided = true;\n        collision.depth = minOverlap.overlap;\n        collision.parentA = collision.bodyA.parent;\n        collision.parentB = collision.bodyB.parent;\n        \n        bodyA = collision.bodyA;\n        bodyB = collision.bodyB;\n\n        // ensure normal is facing away from bodyA\n        if (Vector.dot(minOverlap.axis, Vector.sub(bodyB.position, bodyA.position)) < 0) {\n            collision.normal = {\n                x: minOverlap.axis.x,\n                y: minOverlap.axis.y\n            };\n        } else {\n            collision.normal = {\n                x: -minOverlap.axis.x,\n                y: -minOverlap.axis.y\n            };\n        }\n\n        collision.tangent = Vector.perp(collision.normal);\n\n        collision.penetration = collision.penetration || {};\n        collision.penetration.x = collision.normal.x * collision.depth;\n        collision.penetration.y = collision.normal.y * collision.depth; \n\n        // find support points, there is always either exactly one or two\n        var verticesB = _findSupports(bodyA, bodyB, collision.normal),\n            supports = [];\n\n        // find the supports from bodyB that are inside bodyA\n        if (Vertices.contains(bodyA.vertices, verticesB[0]))\n            supports.push(verticesB[0]);\n\n        if (Vertices.contains(bodyA.vertices, verticesB[1]))\n            supports.push(verticesB[1]);\n\n        // find the supports from bodyA that are inside bodyB\n        if (supports.length < 2) {\n            var verticesA = _findSupports(bodyB, bodyA, Vector.neg(collision.normal));\n                \n            if (Vertices.contains(bodyB.vertices, verticesA[0]))\n                supports.push(verticesA[0]);\n\n            if (supports.length < 2 && Vertices.contains(bodyB.vertices, verticesA[1]))\n                supports.push(verticesA[1]);\n        }\n\n        // account for the edge case of overlapping but no vertex containment\n        if (supports.length < 1)\n            supports = [verticesB[0]];\n        \n        collision.supports = supports;\n\n        return collision;\n    };\n\n    /**\n     * Find the overlap between two sets of vertices.\n     * @method _overlapAxes\n     * @private\n     * @param {} verticesA\n     * @param {} verticesB\n     * @param {} axes\n     * @return result\n     */\n    var _overlapAxes = function(verticesA, verticesB, axes) {\n        var projectionA = Vector._temp[0], \n            projectionB = Vector._temp[1],\n            result = { overlap: Number.MAX_VALUE },\n            overlap,\n            axis;\n\n        for (var i = 0; i < axes.length; i++) {\n            axis = axes[i];\n\n            _projectToAxis(projectionA, verticesA, axis);\n            _projectToAxis(projectionB, verticesB, axis);\n\n            overlap = Math.min(projectionA.max - projectionB.min, projectionB.max - projectionA.min);\n\n            if (overlap <= 0) {\n                result.overlap = overlap;\n                return result;\n            }\n\n            if (overlap < result.overlap) {\n                result.overlap = overlap;\n                result.axis = axis;\n                result.axisNumber = i;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Projects vertices on an axis and returns an interval.\n     * @method _projectToAxis\n     * @private\n     * @param {} projection\n     * @param {} vertices\n     * @param {} axis\n     */\n    var _projectToAxis = function(projection, vertices, axis) {\n        var min = Vector.dot(vertices[0], axis),\n            max = min;\n\n        for (var i = 1; i < vertices.length; i += 1) {\n            var dot = Vector.dot(vertices[i], axis);\n\n            if (dot > max) { \n                max = dot; \n            } else if (dot < min) { \n                min = dot; \n            }\n        }\n\n        projection.min = min;\n        projection.max = max;\n    };\n    \n    /**\n     * Finds supporting vertices given two bodies along a given direction using hill-climbing.\n     * @method _findSupports\n     * @private\n     * @param {} bodyA\n     * @param {} bodyB\n     * @param {} normal\n     * @return [vector]\n     */\n    var _findSupports = function(bodyA, bodyB, normal) {\n        var nearestDistance = Number.MAX_VALUE,\n            vertexToBody = Vector._temp[0],\n            vertices = bodyB.vertices,\n            bodyAPosition = bodyA.position,\n            distance,\n            vertex,\n            vertexA,\n            vertexB;\n\n        // find closest vertex on bodyB\n        for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            vertexToBody.x = vertex.x - bodyAPosition.x;\n            vertexToBody.y = vertex.y - bodyAPosition.y;\n            distance = -Vector.dot(normal, vertexToBody);\n\n            if (distance < nearestDistance) {\n                nearestDistance = distance;\n                vertexA = vertex;\n            }\n        }\n\n        // find next closest vertex using the two connected to it\n        var prevIndex = vertexA.index - 1 >= 0 ? vertexA.index - 1 : vertices.length - 1;\n        vertex = vertices[prevIndex];\n        vertexToBody.x = vertex.x - bodyAPosition.x;\n        vertexToBody.y = vertex.y - bodyAPosition.y;\n        nearestDistance = -Vector.dot(normal, vertexToBody);\n        vertexB = vertex;\n\n        var nextIndex = (vertexA.index + 1) % vertices.length;\n        vertex = vertices[nextIndex];\n        vertexToBody.x = vertex.x - bodyAPosition.x;\n        vertexToBody.y = vertex.y - bodyAPosition.y;\n        distance = -Vector.dot(normal, vertexToBody);\n        if (distance < nearestDistance) {\n            vertexB = vertex;\n        }\n\n        return [vertexA, vertexB];\n    };\n\n})();\n\n},{\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],12:[function(_dereq_,module,exports){\n/**\n* The `Matter.Constraint` module contains methods for creating and manipulating constraints.\n* Constraints are used for specifying that a fixed distance must be maintained between two bodies (or a body and a fixed world-space position).\n* The stiffness of constraints can be modified to create springs or elastic.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Constraint\n*/\n\nvar Constraint = {};\n\nmodule.exports = Constraint;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\nvar Sleeping = _dereq_('../core/Sleeping');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Axes = _dereq_('../geometry/Axes');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    Constraint._warming = 0.4;\n    Constraint._torqueDampen = 1;\n    Constraint._minLength = 0.000001;\n\n    /**\n     * Creates a new constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * To simulate a revolute constraint (or pin joint) set `length: 0` and a high `stiffness` value (e.g. `0.7` or above).\n     * If the constraint is unstable, try lowering the `stiffness` value and / or increasing `engine.constraintIterations`.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {constraint} constraint\n     */\n    Constraint.create = function(options) {\n        var constraint = options;\n\n        // if bodies defined but no points, use body centre\n        if (constraint.bodyA && !constraint.pointA)\n            constraint.pointA = { x: 0, y: 0 };\n        if (constraint.bodyB && !constraint.pointB)\n            constraint.pointB = { x: 0, y: 0 };\n\n        // calculate static length using initial world space points\n        var initialPointA = constraint.bodyA ? Vector.add(constraint.bodyA.position, constraint.pointA) : constraint.pointA,\n            initialPointB = constraint.bodyB ? Vector.add(constraint.bodyB.position, constraint.pointB) : constraint.pointB,\n            length = Vector.magnitude(Vector.sub(initialPointA, initialPointB));\n    \n        constraint.length = typeof constraint.length !== 'undefined' ? constraint.length : length;\n\n        // option defaults\n        constraint.id = constraint.id || Common.nextId();\n        constraint.label = constraint.label || 'Constraint';\n        constraint.type = 'constraint';\n        constraint.stiffness = constraint.stiffness || (constraint.length > 0 ? 1 : 0.7);\n        constraint.damping = constraint.damping || 0;\n        constraint.angularStiffness = constraint.angularStiffness || 0;\n        constraint.angleA = constraint.bodyA ? constraint.bodyA.angle : constraint.angleA;\n        constraint.angleB = constraint.bodyB ? constraint.bodyB.angle : constraint.angleB;\n        constraint.plugin = {};\n\n        // render\n        var render = {\n            visible: true,\n            lineWidth: 2,\n            strokeStyle: '#ffffff',\n            type: 'line',\n            anchors: true\n        };\n\n        if (constraint.length === 0 && constraint.stiffness > 0.1) {\n            render.type = 'pin';\n            render.anchors = false;\n        } else if (constraint.stiffness < 0.9) {\n            render.type = 'spring';\n        }\n\n        constraint.render = Common.extend(render, constraint.render);\n\n        return constraint;\n    };\n\n    /**\n     * Prepares for solving by constraint warming.\n     * @private\n     * @method preSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.preSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            body.position.x += impulse.x;\n            body.position.y += impulse.y;\n            body.angle += impulse.angle;\n        }\n    };\n\n    /**\n     * Solves all constraints in a list of collisions.\n     * @private\n     * @method solveAll\n     * @param {constraint[]} constraints\n     * @param {number} timeScale\n     */\n    Constraint.solveAll = function(constraints, timeScale) {\n        // Solve fixed constraints first.\n        for (var i = 0; i < constraints.length; i += 1) {\n            var constraint = constraints[i],\n                fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic),\n                fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (fixedA || fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n\n        // Solve free constraints last.\n        for (i = 0; i < constraints.length; i += 1) {\n            constraint = constraints[i];\n            fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic);\n            fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (!fixedA && !fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n    };\n\n    /**\n     * Solves a distance constraint with Gauss-Siedel method.\n     * @private\n     * @method solve\n     * @param {constraint} constraint\n     * @param {number} timeScale\n     */\n    Constraint.solve = function(constraint, timeScale) {\n        var bodyA = constraint.bodyA,\n            bodyB = constraint.bodyB,\n            pointA = constraint.pointA,\n            pointB = constraint.pointB;\n\n        if (!bodyA && !bodyB)\n            return;\n\n        // update reference angle\n        if (bodyA && !bodyA.isStatic) {\n            Vector.rotate(pointA, bodyA.angle - constraint.angleA, pointA);\n            constraint.angleA = bodyA.angle;\n        }\n        \n        // update reference angle\n        if (bodyB && !bodyB.isStatic) {\n            Vector.rotate(pointB, bodyB.angle - constraint.angleB, pointB);\n            constraint.angleB = bodyB.angle;\n        }\n\n        var pointAWorld = pointA,\n            pointBWorld = pointB;\n\n        if (bodyA) pointAWorld = Vector.add(bodyA.position, pointA);\n        if (bodyB) pointBWorld = Vector.add(bodyB.position, pointB);\n\n        if (!pointAWorld || !pointBWorld)\n            return;\n\n        var delta = Vector.sub(pointAWorld, pointBWorld),\n            currentLength = Vector.magnitude(delta);\n\n        // prevent singularity\n        if (currentLength < Constraint._minLength) {\n            currentLength = Constraint._minLength;\n        }\n\n        // solve distance constraint with Gauss-Siedel method\n        var difference = (currentLength - constraint.length) / currentLength,\n            stiffness = constraint.stiffness < 1 ? constraint.stiffness * timeScale : constraint.stiffness,\n            force = Vector.mult(delta, difference * stiffness),\n            massTotal = (bodyA ? bodyA.inverseMass : 0) + (bodyB ? bodyB.inverseMass : 0),\n            inertiaTotal = (bodyA ? bodyA.inverseInertia : 0) + (bodyB ? bodyB.inverseInertia : 0),\n            resistanceTotal = massTotal + inertiaTotal,\n            torque,\n            share,\n            normal,\n            normalVelocity,\n            relativeVelocity;\n\n        if (constraint.damping) {\n            var zero = Vector.create();\n            normal = Vector.div(delta, currentLength);\n\n            relativeVelocity = Vector.sub(\n                bodyB && Vector.sub(bodyB.position, bodyB.positionPrev) || zero,\n                bodyA && Vector.sub(bodyA.position, bodyA.positionPrev) || zero\n            );\n\n            normalVelocity = Vector.dot(normal, relativeVelocity);\n        }\n\n        if (bodyA && !bodyA.isStatic) {\n            share = bodyA.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyA.constraintImpulse.x -= force.x * share;\n            bodyA.constraintImpulse.y -= force.y * share;\n\n            // apply forces\n            bodyA.position.x -= force.x * share;\n            bodyA.position.y -= force.y * share;\n\n            // apply damping\n            if (constraint.damping) {\n                bodyA.positionPrev.x -= constraint.damping * normal.x * normalVelocity * share;\n                bodyA.positionPrev.y -= constraint.damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointA, force) / resistanceTotal) * Constraint._torqueDampen * bodyA.inverseInertia * (1 - constraint.angularStiffness);\n            bodyA.constraintImpulse.angle -= torque;\n            bodyA.angle -= torque;\n        }\n\n        if (bodyB && !bodyB.isStatic) {\n            share = bodyB.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyB.constraintImpulse.x += force.x * share;\n            bodyB.constraintImpulse.y += force.y * share;\n            \n            // apply forces\n            bodyB.position.x += force.x * share;\n            bodyB.position.y += force.y * share;\n\n            // apply damping\n            if (constraint.damping) {\n                bodyB.positionPrev.x += constraint.damping * normal.x * normalVelocity * share;\n                bodyB.positionPrev.y += constraint.damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointB, force) / resistanceTotal) * Constraint._torqueDampen * bodyB.inverseInertia * (1 - constraint.angularStiffness);\n            bodyB.constraintImpulse.angle += torque;\n            bodyB.angle += torque;\n        }\n\n    };\n\n    /**\n     * Performs body updates required after solving constraints.\n     * @private\n     * @method postSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.postSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            Sleeping.set(body, false);\n\n            // update geometry and reset\n            for (var j = 0; j < body.parts.length; j++) {\n                var part = body.parts[j];\n                \n                Vertices.translate(part.vertices, impulse);\n\n                if (j > 0) {\n                    part.position.x += impulse.x;\n                    part.position.y += impulse.y;\n                }\n\n                if (impulse.angle !== 0) {\n                    Vertices.rotate(part.vertices, impulse.angle, body.position);\n                    Axes.rotate(part.axes, impulse.angle);\n                    if (j > 0) {\n                        Vector.rotateAbout(part.position, impulse.angle, body.position, part.position);\n                    }\n                }\n\n                Bounds.update(part.bounds, part.vertices, body.velocity);\n            }\n\n            // dampen the cached impulse for warming next step\n            impulse.angle *= Constraint._warming;\n            impulse.x *= Constraint._warming;\n            impulse.y *= Constraint._warming;\n        }\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Constraint\"\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the constraint should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the constraint outline.\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the constraint outline.\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the constraint rendering type. \n     * The possible values are 'line', 'pin', 'spring'.\n     * An appropriate render type will be automatically chosen unless one is given in options.\n     *\n     * @property render.type\n     * @type string\n     * @default 'line'\n     */\n\n    /**\n     * A `Boolean` that defines if the constraint's anchor points should be rendered.\n     *\n     * @property render.anchors\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * The first possible `Body` that this constraint is attached to.\n     *\n     * @property bodyA\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The second possible `Body` that this constraint is attached to.\n     *\n     * @property bodyB\n     * @type body\n     * @default null\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyA` if defined, otherwise a world-space position.\n     *\n     * @property pointA\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyA` if defined, otherwise a world-space position.\n     *\n     * @property pointB\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the stiffness of the constraint, i.e. the rate at which it returns to its resting `constraint.length`.\n     * A value of `1` means the constraint should be very stiff.\n     * A value of `0.2` means the constraint acts like a soft spring.\n     *\n     * @property stiffness\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the damping of the constraint, \n     * i.e. the amount of resistance applied to each body based on their velocities to limit the amount of oscillation.\n     * Damping will only be apparent when the constraint also has a very low `stiffness`.\n     * A value of `0.1` means the constraint will apply heavy damping, resulting in little to no oscillation.\n     * A value of `0` means the constraint will apply no damping.\n     *\n     * @property damping\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that specifies the target resting length of the constraint. \n     * It is calculated automatically in `Constraint.create` from initial positions of the `constraint.bodyA` and `constraint.bodyB`.\n     *\n     * @property length\n     * @type number\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n},{\"../core/Common\":14,\"../core/Sleeping\":22,\"../geometry/Axes\":25,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],13:[function(_dereq_,module,exports){\n/**\n* The `Matter.MouseConstraint` module contains methods for creating mouse constraints.\n* Mouse constraints are used for allowing user interaction, providing the ability to move bodies via the mouse or touch.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class MouseConstraint\n*/\n\nvar MouseConstraint = {};\n\nmodule.exports = MouseConstraint;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Sleeping = _dereq_('../core/Sleeping');\nvar Mouse = _dereq_('../core/Mouse');\nvar Events = _dereq_('../core/Events');\nvar Detector = _dereq_('../collision/Detector');\nvar Constraint = _dereq_('./Constraint');\nvar Composite = _dereq_('../body/Composite');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\n\n(function() {\n\n    /**\n     * Creates a new mouse constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {engine} engine\n     * @param {} options\n     * @return {MouseConstraint} A new MouseConstraint\n     */\n    MouseConstraint.create = function(engine, options) {\n        var mouse = (engine ? engine.mouse : null) || (options ? options.mouse : null);\n\n        if (!mouse) {\n            if (engine && engine.render && engine.render.canvas) {\n                mouse = Mouse.create(engine.render.canvas);\n            } else if (options && options.element) {\n                mouse = Mouse.create(options.element);\n            } else {\n                mouse = Mouse.create();\n                Common.warn('MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected');\n            }\n        }\n\n        var constraint = Constraint.create({ \n            label: 'Mouse Constraint',\n            pointA: mouse.position,\n            pointB: { x: 0, y: 0 },\n            length: 0.01, \n            stiffness: 0.1,\n            angularStiffness: 1,\n            render: {\n                strokeStyle: '#90EE90',\n                lineWidth: 3\n            }\n        });\n\n        var defaults = {\n            type: 'mouseConstraint',\n            mouse: mouse,\n            element: null,\n            body: null,\n            constraint: constraint,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            }\n        };\n\n        var mouseConstraint = Common.extend(defaults, options);\n\n        Events.on(engine, 'beforeUpdate', function() {\n            var allBodies = Composite.allBodies(engine.world);\n            MouseConstraint.update(mouseConstraint, allBodies);\n            _triggerEvents(mouseConstraint);\n        });\n\n        return mouseConstraint;\n    };\n\n    /**\n     * Updates the given mouse constraint.\n     * @private\n     * @method update\n     * @param {MouseConstraint} mouseConstraint\n     * @param {body[]} bodies\n     */\n    MouseConstraint.update = function(mouseConstraint, bodies) {\n        var mouse = mouseConstraint.mouse,\n            constraint = mouseConstraint.constraint,\n            body = mouseConstraint.body;\n\n        if (mouse.button === 0) {\n            if (!constraint.bodyB) {\n                for (var i = 0; i < bodies.length; i++) {\n                    body = bodies[i];\n                    if (Bounds.contains(body.bounds, mouse.position) \n                            && Detector.canCollide(body.collisionFilter, mouseConstraint.collisionFilter)) {\n                        for (var j = body.parts.length > 1 ? 1 : 0; j < body.parts.length; j++) {\n                            var part = body.parts[j];\n                            if (Vertices.contains(part.vertices, mouse.position)) {\n                                constraint.pointA = mouse.position;\n                                constraint.bodyB = mouseConstraint.body = body;\n                                constraint.pointB = { x: mouse.position.x - body.position.x, y: mouse.position.y - body.position.y };\n                                constraint.angleB = body.angle;\n\n                                Sleeping.set(body, false);\n                                Events.trigger(mouseConstraint, 'startdrag', { mouse: mouse, body: body });\n\n                                break;\n                            }\n                        }\n                    }\n                }\n            } else {\n                Sleeping.set(constraint.bodyB, false);\n                constraint.pointA = mouse.position;\n            }\n        } else {\n            constraint.bodyB = mouseConstraint.body = null;\n            constraint.pointB = null;\n\n            if (body)\n                Events.trigger(mouseConstraint, 'enddrag', { mouse: mouse, body: body });\n        }\n    };\n\n    /**\n     * Triggers mouse constraint events.\n     * @method _triggerEvents\n     * @private\n     * @param {mouse} mouseConstraint\n     */\n    var _triggerEvents = function(mouseConstraint) {\n        var mouse = mouseConstraint.mouse,\n            mouseEvents = mouse.sourceEvents;\n\n        if (mouseEvents.mousemove)\n            Events.trigger(mouseConstraint, 'mousemove', { mouse: mouse });\n\n        if (mouseEvents.mousedown)\n            Events.trigger(mouseConstraint, 'mousedown', { mouse: mouse });\n\n        if (mouseEvents.mouseup)\n            Events.trigger(mouseConstraint, 'mouseup', { mouse: mouse });\n\n        // reset the mouse state ready for the next step\n        Mouse.clearSourceEvents(mouse);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when the mouse has moved (or a touch moves) during the last step\n    *\n    * @event mousemove\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is down (or a touch has started) during the last step\n    *\n    * @event mousedown\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is up (or a touch has ended) during the last step\n    *\n    * @event mouseup\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user starts dragging a body\n    *\n    * @event startdrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user ends dragging a body\n    *\n    * @event enddrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body that has stopped being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * The `Mouse` instance in use. If not supplied in `MouseConstraint.create`, one will be created.\n     *\n     * @property mouse\n     * @type mouse\n     * @default mouse\n     */\n\n    /**\n     * The `Body` that is currently being moved by the user, or `null` if no body.\n     *\n     * @property body\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The `Constraint` object that is used to move the body during interaction.\n     *\n     * @property constraint\n     * @type constraint\n     */\n\n    /**\n     * An `Object` that specifies the collision filter properties.\n     * The collision filter allows the user to define which types of body this mouse constraint can interact with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n})();\n\n},{\"../body/Composite\":2,\"../collision/Detector\":5,\"../core/Common\":14,\"../core/Events\":16,\"../core/Mouse\":19,\"../core/Sleeping\":22,\"../geometry/Bounds\":26,\"../geometry/Vertices\":29,\"./Constraint\":12}],14:[function(_dereq_,module,exports){\n/**\n* The `Matter.Common` module contains utility functions that are common to all modules.\n*\n* @class Common\n*/\n\nvar Common = {};\n\nmodule.exports = Common;\n\n(function() {\n\n    Common._nextId = 0;\n    Common._seed = 0;\n    Common._nowStartTime = +(new Date());\n\n    /**\n     * Extends the object in the first argument using the object in the second argument.\n     * @method extend\n     * @param {} obj\n     * @param {boolean} deep\n     * @return {} obj extended\n     */\n    Common.extend = function(obj, deep) {\n        var argsStart,\n            args,\n            deepClone;\n\n        if (typeof deep === 'boolean') {\n            argsStart = 2;\n            deepClone = deep;\n        } else {\n            argsStart = 1;\n            deepClone = true;\n        }\n\n        for (var i = argsStart; i < arguments.length; i++) {\n            var source = arguments[i];\n\n            if (source) {\n                for (var prop in source) {\n                    if (deepClone && source[prop] && source[prop].constructor === Object) {\n                        if (!obj[prop] || obj[prop].constructor === Object) {\n                            obj[prop] = obj[prop] || {};\n                            Common.extend(obj[prop], deepClone, source[prop]);\n                        } else {\n                            obj[prop] = source[prop];\n                        }\n                    } else {\n                        obj[prop] = source[prop];\n                    }\n                }\n            }\n        }\n        \n        return obj;\n    };\n\n    /**\n     * Creates a new clone of the object, if deep is true references will also be cloned.\n     * @method clone\n     * @param {} obj\n     * @param {bool} deep\n     * @return {} obj cloned\n     */\n    Common.clone = function(obj, deep) {\n        return Common.extend({}, deep, obj);\n    };\n\n    /**\n     * Returns the list of keys for the given object.\n     * @method keys\n     * @param {} obj\n     * @return {string[]} keys\n     */\n    Common.keys = function(obj) {\n        if (Object.keys)\n            return Object.keys(obj);\n\n        // avoid hasOwnProperty for performance\n        var keys = [];\n        for (var key in obj)\n            keys.push(key);\n        return keys;\n    };\n\n    /**\n     * Returns the list of values for the given object.\n     * @method values\n     * @param {} obj\n     * @return {array} Array of the objects property values\n     */\n    Common.values = function(obj) {\n        var values = [];\n        \n        if (Object.keys) {\n            var keys = Object.keys(obj);\n            for (var i = 0; i < keys.length; i++) {\n                values.push(obj[keys[i]]);\n            }\n            return values;\n        }\n        \n        // avoid hasOwnProperty for performance\n        for (var key in obj)\n            values.push(obj[key]);\n        return values;\n    };\n\n    /**\n     * Gets a value from `base` relative to the `path` string.\n     * @method get\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} The object at the given path\n     */\n    Common.get = function(obj, path, begin, end) {\n        path = path.split('.').slice(begin, end);\n\n        for (var i = 0; i < path.length; i += 1) {\n            obj = obj[path[i]];\n        }\n\n        return obj;\n    };\n\n    /**\n     * Sets a value on `base` relative to the given `path` string.\n     * @method set\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {} val The value to set\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} Pass through `val` for chaining\n     */\n    Common.set = function(obj, path, val, begin, end) {\n        var parts = path.split('.').slice(begin, end);\n        Common.get(obj, path, 0, -1)[parts[parts.length - 1]] = val;\n        return val;\n    };\n\n    /**\n     * Shuffles the given array in-place.\n     * The function uses a seeded random generator.\n     * @method shuffle\n     * @param {array} array\n     * @return {array} array shuffled randomly\n     */\n    Common.shuffle = function(array) {\n        for (var i = array.length - 1; i > 0; i--) {\n            var j = Math.floor(Common.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n        return array;\n    };\n\n    /**\n     * Randomly chooses a value from a list with equal probability.\n     * The function uses a seeded random generator.\n     * @method choose\n     * @param {array} choices\n     * @return {object} A random choice object from the array\n     */\n    Common.choose = function(choices) {\n        return choices[Math.floor(Common.random() * choices.length)];\n    };\n\n    /**\n     * Returns true if the object is a HTMLElement, otherwise false.\n     * @method isElement\n     * @param {object} obj\n     * @return {boolean} True if the object is a HTMLElement, otherwise false\n     */\n    Common.isElement = function(obj) {\n        return obj instanceof HTMLElement;\n    };\n\n    /**\n     * Returns true if the object is an array.\n     * @method isArray\n     * @param {object} obj\n     * @return {boolean} True if the object is an array, otherwise false\n     */\n    Common.isArray = function(obj) {\n        return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n\n    /**\n     * Returns true if the object is a function.\n     * @method isFunction\n     * @param {object} obj\n     * @return {boolean} True if the object is a function, otherwise false\n     */\n    Common.isFunction = function(obj) {\n        return typeof obj === \"function\";\n    };\n\n    /**\n     * Returns true if the object is a plain object.\n     * @method isPlainObject\n     * @param {object} obj\n     * @return {boolean} True if the object is a plain object, otherwise false\n     */\n    Common.isPlainObject = function(obj) {\n        return typeof obj === 'object' && obj.constructor === Object;\n    };\n\n    /**\n     * Returns true if the object is a string.\n     * @method isString\n     * @param {object} obj\n     * @return {boolean} True if the object is a string, otherwise false\n     */\n    Common.isString = function(obj) {\n        return toString.call(obj) === '[object String]';\n    };\n    \n    /**\n     * Returns the given value clamped between a minimum and maximum value.\n     * @method clamp\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @return {number} The value clamped between min and max inclusive\n     */\n    Common.clamp = function(value, min, max) {\n        if (value < min)\n            return min;\n        if (value > max)\n            return max;\n        return value;\n    };\n    \n    /**\n     * Returns the sign of the given value.\n     * @method sign\n     * @param {number} value\n     * @return {number} -1 if negative, +1 if 0 or positive\n     */\n    Common.sign = function(value) {\n        return value < 0 ? -1 : 1;\n    };\n    \n    /**\n     * Returns the current timestamp since the time origin (e.g. from page load).\n     * The result will be high-resolution including decimal places if available.\n     * @method now\n     * @return {number} the current timestamp\n     */\n    Common.now = function() {\n        if (window.performance) {\n            if (window.performance.now) {\n                return window.performance.now();\n            } else if (window.performance.webkitNow) {\n                return window.performance.webkitNow();\n            }\n        }\n\n        return (new Date()) - Common._nowStartTime;\n    };\n    \n    /**\n     * Returns a random value between a minimum and a maximum value inclusive.\n     * The function uses a seeded random generator.\n     * @method random\n     * @param {number} min\n     * @param {number} max\n     * @return {number} A random number between min and max inclusive\n     */\n    Common.random = function(min, max) {\n        min = (typeof min !== \"undefined\") ? min : 0;\n        max = (typeof max !== \"undefined\") ? max : 1;\n        return min + _seededRandom() * (max - min);\n    };\n\n    var _seededRandom = function() {\n        // https://en.wikipedia.org/wiki/Linear_congruential_generator\n        Common._seed = (Common._seed * 9301 + 49297) % 233280;\n        return Common._seed / 233280;\n    };\n\n    /**\n     * Converts a CSS hex colour string into an integer.\n     * @method colorToNumber\n     * @param {string} colorString\n     * @return {number} An integer representing the CSS hex string\n     */\n    Common.colorToNumber = function(colorString) {\n        colorString = colorString.replace('#','');\n\n        if (colorString.length == 3) {\n            colorString = colorString.charAt(0) + colorString.charAt(0)\n                        + colorString.charAt(1) + colorString.charAt(1)\n                        + colorString.charAt(2) + colorString.charAt(2);\n        }\n\n        return parseInt(colorString, 16);\n    };\n\n    /**\n     * The console logging level to use, where each level includes all levels above and excludes the levels below.\n     * The default level is 'debug' which shows all console messages.  \n     *\n     * Possible level values are:\n     * - 0 = None\n     * - 1 = Debug\n     * - 2 = Info\n     * - 3 = Warn\n     * - 4 = Error\n     * @property Common.logLevel\n     * @type {Number}\n     * @default 1\n     */\n    Common.logLevel = 1;\n\n    /**\n     * Shows a `console.log` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method log\n     * @param ...objs {} The objects to log.\n     */\n    Common.log = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.log.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.info` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method info\n     * @param ...objs {} The objects to log.\n     */\n    Common.info = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 2) {\n            console.info.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.warn` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method warn\n     * @param ...objs {} The objects to log.\n     */\n    Common.warn = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.warn.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Returns the next unique sequential ID.\n     * @method nextId\n     * @return {Number} Unique sequential ID\n     */\n    Common.nextId = function() {\n        return Common._nextId++;\n    };\n\n    /**\n     * A cross browser compatible indexOf implementation.\n     * @method indexOf\n     * @param {array} haystack\n     * @param {object} needle\n     * @return {number} The position of needle in haystack, otherwise -1.\n     */\n    Common.indexOf = function(haystack, needle) {\n        if (haystack.indexOf)\n            return haystack.indexOf(needle);\n\n        for (var i = 0; i < haystack.length; i++) {\n            if (haystack[i] === needle)\n                return i;\n        }\n\n        return -1;\n    };\n\n    /**\n     * A cross browser compatible array map implementation.\n     * @method map\n     * @param {array} list\n     * @param {function} func\n     * @return {array} Values from list transformed by func.\n     */\n    Common.map = function(list, func) {\n        if (list.map) {\n            return list.map(func);\n        }\n\n        var mapped = [];\n\n        for (var i = 0; i < list.length; i += 1) {\n            mapped.push(func(list[i]));\n        }\n\n        return mapped;\n    };\n\n    /**\n     * Takes a directed graph and returns the partially ordered set of vertices in topological order.\n     * Circular dependencies are allowed.\n     * @method topologicalSort\n     * @param {object} graph\n     * @return {array} Partially ordered set of vertices in topological order.\n     */\n    Common.topologicalSort = function(graph) {\n        // https://github.com/mgechev/javascript-algorithms\n        // Copyright (c) Minko Gechev (MIT license)\n        // Modifications: tidy formatting and naming\n        var result = [],\n            visited = [],\n            temp = [];\n\n        for (var node in graph) {\n            if (!visited[node] && !temp[node]) {\n                _topologicalSort(node, visited, temp, graph, result);\n            }\n        }\n\n        return result;\n    };\n\n    var _topologicalSort = function(node, visited, temp, graph, result) {\n        var neighbors = graph[node] || [];\n        temp[node] = true;\n\n        for (var i = 0; i < neighbors.length; i += 1) {\n            var neighbor = neighbors[i];\n\n            if (temp[neighbor]) {\n                // skip circular dependencies\n                continue;\n            }\n\n            if (!visited[neighbor]) {\n                _topologicalSort(neighbor, visited, temp, graph, result);\n            }\n        }\n\n        temp[node] = false;\n        visited[node] = true;\n\n        result.push(node);\n    };\n\n    /**\n     * Takes _n_ functions as arguments and returns a new function that calls them in order.\n     * The arguments applied when calling the new function will also be applied to every function passed.\n     * The value of `this` refers to the last value returned in the chain that was not `undefined`.\n     * Therefore if a passed function does not return a value, the previously returned value is maintained.\n     * After all passed functions have been called the new function returns the last returned value (if any).\n     * If any of the passed functions are a chain, then the chain will be flattened.\n     * @method chain\n     * @param ...funcs {function} The functions to chain.\n     * @return {function} A new function that calls the passed functions in order.\n     */\n    Common.chain = function() {\n        var funcs = [];\n\n        for (var i = 0; i < arguments.length; i += 1) {\n            var func = arguments[i];\n\n            if (func._chained) {\n                // flatten already chained functions\n                funcs.push.apply(funcs, func._chained);\n            } else {\n                funcs.push(func);\n            }\n        }\n\n        var chain = function() {\n            // https://github.com/GoogleChrome/devtools-docs/issues/53#issuecomment-51941358\n            var lastResult,\n                args = new Array(arguments.length);\n\n            for (var i = 0, l = arguments.length; i < l; i++) {\n                args[i] = arguments[i];\n            }\n\n            for (i = 0; i < funcs.length; i += 1) {\n                var result = funcs[i].apply(lastResult, args);\n\n                if (typeof result !== 'undefined') {\n                    lastResult = result;\n                }\n            }\n\n            return lastResult;\n        };\n\n        chain._chained = funcs;\n\n        return chain;\n    };\n\n    /**\n     * Chains a function to excute before the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathBefore\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain before the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathBefore = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            func,\n            Common.get(base, path)\n        ));\n    };\n\n    /**\n     * Chains a function to excute after the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathAfter\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain after the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathAfter = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            Common.get(base, path),\n            func\n        ));\n    };\n\n})();\n\n},{}],15:[function(_dereq_,module,exports){\n/**\n* The `Matter.Engine` module contains methods for creating and manipulating engines.\n* An engine is a controller that manages updating the simulation of the world.\n* See `Matter.Runner` for an optional game loop utility.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Engine\n*/\n\nvar Engine = {};\n\nmodule.exports = Engine;\n\nvar World = _dereq_('../body/World');\nvar Sleeping = _dereq_('./Sleeping');\nvar Resolver = _dereq_('../collision/Resolver');\nvar Render = _dereq_('../render/Render');\nvar Pairs = _dereq_('../collision/Pairs');\nvar Metrics = _dereq_('./Metrics');\nvar Grid = _dereq_('../collision/Grid');\nvar Events = _dereq_('./Events');\nvar Composite = _dereq_('../body/Composite');\nvar Constraint = _dereq_('../constraint/Constraint');\nvar Common = _dereq_('./Common');\nvar Body = _dereq_('../body/Body');\n\n(function() {\n\n    /**\n     * Creates a new engine. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {engine} engine\n     */\n    Engine.create = function(element, options) {\n        // options may be passed as the first (and only) argument\n        options = Common.isElement(element) ? options : element;\n        element = Common.isElement(element) ? element : null;\n        options = options || {};\n\n        if (element || options.render) {\n            Common.warn('Engine.create: engine.render is deprecated (see docs)');\n        }\n\n        var defaults = {\n            positionIterations: 6,\n            velocityIterations: 4,\n            constraintIterations: 2,\n            enableSleeping: false,\n            events: [],\n            plugin: {},\n            timing: {\n                timestamp: 0,\n                timeScale: 1\n            },\n            broadphase: {\n                controller: Grid\n            }\n        };\n\n        var engine = Common.extend(defaults, options);\n\n        // @deprecated\n        if (element || engine.render) {\n            var renderDefaults = {\n                element: element,\n                controller: Render\n            };\n            \n            engine.render = Common.extend(renderDefaults, engine.render);\n        }\n\n        // @deprecated\n        if (engine.render && engine.render.controller) {\n            engine.render = engine.render.controller.create(engine.render);\n        }\n\n        // @deprecated\n        if (engine.render) {\n            engine.render.engine = engine;\n        }\n\n        engine.world = options.world || World.create(engine.world);\n        engine.pairs = Pairs.create();\n        engine.broadphase = engine.broadphase.controller.create(engine.broadphase);\n        engine.metrics = engine.metrics || { extended: false };\n\n\n        return engine;\n    };\n\n    /**\n     * Moves the simulation forward in time by `delta` ms.\n     * The `correction` argument is an optional `Number` that specifies the time correction factor to apply to the update.\n     * This can help improve the accuracy of the simulation in cases where `delta` is changing between updates.\n     * The value of `correction` is defined as `delta / lastDelta`, i.e. the percentage change of `delta` over the last step.\n     * Therefore the value is always `1` (no correction) when `delta` constant (or when no correction is desired, which is the default).\n     * See the paper on <a href=\"http://lonesock.net/article/verlet.html\">Time Corrected Verlet</a> for more information.\n     *\n     * Triggers `beforeUpdate` and `afterUpdate` events.\n     * Triggers `collisionStart`, `collisionActive` and `collisionEnd` events.\n     * @method update\n     * @param {engine} engine\n     * @param {number} [delta=16.666]\n     * @param {number} [correction=1]\n     */\n    Engine.update = function(engine, delta, correction) {\n        delta = delta || 1000 / 60;\n        correction = correction || 1;\n\n        var world = engine.world,\n            timing = engine.timing,\n            broadphase = engine.broadphase,\n            broadphasePairs = [],\n            i;\n\n        // increment timestamp\n        timing.timestamp += delta * timing.timeScale;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(engine, 'beforeUpdate', event);\n\n        // get lists of all bodies and constraints, no matter what composites they are in\n        var allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world);\n\n\n        // if sleeping enabled, call the sleeping controller\n        if (engine.enableSleeping)\n            Sleeping.update(allBodies, timing.timeScale);\n\n        // applies gravity to all bodies\n        _bodiesApplyGravity(allBodies, world.gravity);\n\n        // update all body position and rotation by integration\n        _bodiesUpdate(allBodies, delta, timing.timeScale, correction, world.bounds);\n\n        // update all constraints (first pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // broadphase pass: find potential collision pairs\n        if (broadphase.controller) {\n            // if world is dirty, we must flush the whole grid\n            if (world.isModified)\n                broadphase.controller.clear(broadphase);\n\n            // update the grid buckets based on current bodies\n            broadphase.controller.update(broadphase, allBodies, engine, world.isModified);\n            broadphasePairs = broadphase.pairsList;\n        } else {\n            // if no broadphase set, we just pass all bodies\n            broadphasePairs = allBodies;\n        }\n\n        // clear all composite modified flags\n        if (world.isModified) {\n            Composite.setModified(world, false, false, true);\n        }\n\n        // narrowphase pass: find actual collisions, then create or update collision pairs\n        var collisions = broadphase.detector(broadphasePairs, engine);\n\n        // update collision pairs\n        var pairs = engine.pairs,\n            timestamp = timing.timestamp;\n        Pairs.update(pairs, collisions, timestamp);\n        Pairs.removeOld(pairs, timestamp);\n\n        // wake up bodies involved in collisions\n        if (engine.enableSleeping)\n            Sleeping.afterCollisions(pairs.list, timing.timeScale);\n\n        // trigger collision events\n        if (pairs.collisionStart.length > 0)\n            Events.trigger(engine, 'collisionStart', { pairs: pairs.collisionStart });\n\n        // iteratively resolve position between collisions\n        Resolver.preSolvePosition(pairs.list);\n        for (i = 0; i < engine.positionIterations; i++) {\n            Resolver.solvePosition(pairs.list, timing.timeScale);\n        }\n        Resolver.postSolvePosition(allBodies);\n\n        // update all constraints (second pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // iteratively resolve velocity between collisions\n        Resolver.preSolveVelocity(pairs.list);\n        for (i = 0; i < engine.velocityIterations; i++) {\n            Resolver.solveVelocity(pairs.list, timing.timeScale);\n        }\n\n        // trigger collision events\n        if (pairs.collisionActive.length > 0)\n            Events.trigger(engine, 'collisionActive', { pairs: pairs.collisionActive });\n\n        if (pairs.collisionEnd.length > 0)\n            Events.trigger(engine, 'collisionEnd', { pairs: pairs.collisionEnd });\n\n\n        // clear force buffers\n        _bodiesClearForces(allBodies);\n\n        Events.trigger(engine, 'afterUpdate', event);\n\n        return engine;\n    };\n    \n    /**\n     * Merges two engines by keeping the configuration of `engineA` but replacing the world with the one from `engineB`.\n     * @method merge\n     * @param {engine} engineA\n     * @param {engine} engineB\n     */\n    Engine.merge = function(engineA, engineB) {\n        Common.extend(engineA, engineB);\n        \n        if (engineB.world) {\n            engineA.world = engineB.world;\n\n            Engine.clear(engineA);\n\n            var bodies = Composite.allBodies(engineA.world);\n\n            for (var i = 0; i < bodies.length; i++) {\n                var body = bodies[i];\n                Sleeping.set(body, false);\n                body.id = Common.nextId();\n            }\n        }\n    };\n\n    /**\n     * Clears the engine including the world, pairs and broadphase.\n     * @method clear\n     * @param {engine} engine\n     */\n    Engine.clear = function(engine) {\n        var world = engine.world;\n        \n        Pairs.clear(engine.pairs);\n\n        var broadphase = engine.broadphase;\n        if (broadphase.controller) {\n            var bodies = Composite.allBodies(world);\n            broadphase.controller.clear(broadphase);\n            broadphase.controller.update(broadphase, bodies, engine, true);\n        }\n    };\n\n    /**\n     * Zeroes the `body.force` and `body.torque` force buffers.\n     * @method bodiesClearForces\n     * @private\n     * @param {body[]} bodies\n     */\n    var _bodiesClearForces = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            // reset force buffers\n            body.force.x = 0;\n            body.force.y = 0;\n            body.torque = 0;\n        }\n    };\n\n    /**\n     * Applys a mass dependant force to all given bodies.\n     * @method bodiesApplyGravity\n     * @private\n     * @param {body[]} bodies\n     * @param {vector} gravity\n     */\n    var _bodiesApplyGravity = function(bodies, gravity) {\n        var gravityScale = typeof gravity.scale !== 'undefined' ? gravity.scale : 0.001;\n\n        if ((gravity.x === 0 && gravity.y === 0) || gravityScale === 0) {\n            return;\n        }\n        \n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            // apply gravity\n            body.force.y += body.mass * gravity.y * gravityScale;\n            body.force.x += body.mass * gravity.x * gravityScale;\n        }\n    };\n\n    /**\n     * Applys `Body.update` to all given `bodies`.\n     * @method updateAll\n     * @private\n     * @param {body[]} bodies\n     * @param {number} deltaTime \n     * The amount of time elapsed between updates\n     * @param {number} timeScale\n     * @param {number} correction \n     * The Verlet correction factor (deltaTime / lastDeltaTime)\n     * @param {bounds} worldBounds\n     */\n    var _bodiesUpdate = function(bodies, deltaTime, timeScale, correction, worldBounds) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            Body.update(body, deltaTime, timeScale, correction);\n        }\n    };\n\n    /**\n     * An alias for `Runner.run`, see `Matter.Runner` for more information.\n     * @method run\n     * @param {engine} engine\n     */\n\n    /**\n    * Fired just before an update\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update and all collision events\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have started to collide in the current tick (if any)\n    *\n    * @event collisionStart\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that are colliding in the current tick (if any)\n    *\n    * @event collisionActive\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have ended collision in the current tick (if any)\n    *\n    * @event collisionEnd\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` that specifies the number of position iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property positionIterations\n     * @type number\n     * @default 6\n     */\n\n    /**\n     * An integer `Number` that specifies the number of velocity iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property velocityIterations\n     * @type number\n     * @default 4\n     */\n\n    /**\n     * An integer `Number` that specifies the number of constraint iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     * The default value of `2` is usually very adequate.\n     *\n     * @property constraintIterations\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A flag that specifies whether the engine should allow sleeping via the `Matter.Sleeping` module.\n     * Sleeping can improve stability and performance, but often at the expense of accuracy.\n     *\n     * @property enableSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * An `Object` containing properties regarding the timing systems of the engine. \n     *\n     * @property timing\n     * @type object\n     */\n\n    /**\n     * A `Number` that specifies the global scaling factor of time for all bodies.\n     * A value of `0` freezes the simulation.\n     * A value of `0.1` gives a slow-motion effect.\n     * A value of `1.2` gives a speed-up effect.\n     *\n     * @property timing.timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the current simulation-time in milliseconds starting from `0`. \n     * It is incremented on every `Engine.update` by the given `delta` argument. \n     *\n     * @property timing.timestamp\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * An instance of a `Render` controller. The default value is a `Matter.Render` instance created by `Engine.create`.\n     * One may also develop a custom renderer module based on `Matter.Render` and pass an instance of it to `Engine.create` via `options.render`.\n     *\n     * A minimal custom renderer object must define at least three functions: `create`, `clear` and `world` (see `Matter.Render`).\n     * It is also possible to instead pass the _module_ reference via `options.render.controller` and `Engine.create` will instantiate one for you.\n     *\n     * @property render\n     * @type render\n     * @deprecated see Demo.js for an example of creating a renderer\n     * @default a Matter.Render instance\n     */\n\n    /**\n     * An instance of a broadphase controller. The default value is a `Matter.Grid` instance created by `Engine.create`.\n     *\n     * @property broadphase\n     * @type grid\n     * @default a Matter.Grid instance\n     */\n\n    /**\n     * A `World` composite object that will contain all simulated bodies and constraints.\n     *\n     * @property world\n     * @type world\n     * @default a Matter.World instance\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n},{\"../body/Body\":1,\"../body/Composite\":2,\"../body/World\":3,\"../collision/Grid\":6,\"../collision/Pairs\":8,\"../collision/Resolver\":10,\"../constraint/Constraint\":12,\"../render/Render\":31,\"./Common\":14,\"./Events\":16,\"./Metrics\":18,\"./Sleeping\":22}],16:[function(_dereq_,module,exports){\n/**\n* The `Matter.Events` module contains methods to fire and listen to events on other objects.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Events\n*/\n\nvar Events = {};\n\nmodule.exports = Events;\n\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    /**\n     * Subscribes a callback function to the given object's `eventName`.\n     * @method on\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.on = function(object, eventNames, callback) {\n        var names = eventNames.split(' '),\n            name;\n\n        for (var i = 0; i < names.length; i++) {\n            name = names[i];\n            object.events = object.events || {};\n            object.events[name] = object.events[name] || [];\n            object.events[name].push(callback);\n        }\n\n        return callback;\n    };\n\n    /**\n     * Removes the given event callback. If no callback, clears all callbacks in `eventNames`. If no `eventNames`, clears all events.\n     * @method off\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.off = function(object, eventNames, callback) {\n        if (!eventNames) {\n            object.events = {};\n            return;\n        }\n\n        // handle Events.off(object, callback)\n        if (typeof eventNames === 'function') {\n            callback = eventNames;\n            eventNames = Common.keys(object.events).join(' ');\n        }\n\n        var names = eventNames.split(' ');\n\n        for (var i = 0; i < names.length; i++) {\n            var callbacks = object.events[names[i]],\n                newCallbacks = [];\n\n            if (callback && callbacks) {\n                for (var j = 0; j < callbacks.length; j++) {\n                    if (callbacks[j] !== callback)\n                        newCallbacks.push(callbacks[j]);\n                }\n            }\n\n            object.events[names[i]] = newCallbacks;\n        }\n    };\n\n    /**\n     * Fires all the callbacks subscribed to the given object's `eventName`, in the order they subscribed, if any.\n     * @method trigger\n     * @param {} object\n     * @param {string} eventNames\n     * @param {} event\n     */\n    Events.trigger = function(object, eventNames, event) {\n        var names,\n            name,\n            callbacks,\n            eventClone;\n\n        if (object.events) {\n            if (!event)\n                event = {};\n\n            names = eventNames.split(' ');\n\n            for (var i = 0; i < names.length; i++) {\n                name = names[i];\n                callbacks = object.events[name];\n\n                if (callbacks) {\n                    eventClone = Common.clone(event, false);\n                    eventClone.name = name;\n                    eventClone.source = object;\n\n                    for (var j = 0; j < callbacks.length; j++) {\n                        callbacks[j].apply(object, [eventClone]);\n                    }\n                }\n            }\n        }\n    };\n\n})();\n\n},{\"./Common\":14}],17:[function(_dereq_,module,exports){\n/**\n* The `Matter` module is the top level namespace. It also includes a function for installing plugins on top of the library.\n*\n* @class Matter\n*/\n\nvar Matter = {};\n\nmodule.exports = Matter;\n\nvar Plugin = _dereq_('./Plugin');\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    /**\n     * The library name.\n     * @property name\n     * @readOnly\n     * @type {String}\n     */\n    Matter.name = 'matter-js';\n\n    /**\n     * The library version.\n     * @property version\n     * @readOnly\n     * @type {String}\n     */\n    Matter.version = '0.13.0';\n\n    /**\n     * A list of plugin dependencies to be installed. These are normally set and installed through `Matter.use`.\n     * Alternatively you may set `Matter.uses` manually and install them by calling `Plugin.use(Matter)`.\n     * @property uses\n     * @type {Array}\n     */\n    Matter.uses = [];\n\n    /**\n     * The plugins that have been installed through `Matter.Plugin.install`. Read only.\n     * @property used\n     * @readOnly\n     * @type {Array}\n     */\n    Matter.used = [];\n\n    /**\n     * Installs the given plugins on the `Matter` namespace.\n     * This is a short-hand for `Plugin.use`, see it for more information.\n     * Call this function once at the start of your code, with all of the plugins you wish to install as arguments.\n     * Avoid calling this function multiple times unless you intend to manually control installation order.\n     * @method use\n     * @param ...plugin {Function} The plugin(s) to install on `base` (multi-argument).\n     */\n    Matter.use = function() {\n        Plugin.use(Matter, Array.prototype.slice.call(arguments));\n    };\n\n    /**\n     * Chains a function to excute before the original function on the given `path` relative to `Matter`.\n     * See also docs for `Common.chain`.\n     * @method before\n     * @param {string} path The path relative to `Matter`\n     * @param {function} func The function to chain before the original\n     * @return {function} The chained function that replaced the original\n     */\n    Matter.before = function(path, func) {\n        path = path.replace(/^Matter./, '');\n        return Common.chainPathBefore(Matter, path, func);\n    };\n\n    /**\n     * Chains a function to excute after the original function on the given `path` relative to `Matter`.\n     * See also docs for `Common.chain`.\n     * @method after\n     * @param {string} path The path relative to `Matter`\n     * @param {function} func The function to chain after the original\n     * @return {function} The chained function that replaced the original\n     */\n    Matter.after = function(path, func) {\n        path = path.replace(/^Matter./, '');\n        return Common.chainPathAfter(Matter, path, func);\n    };\n\n})();\n\n},{\"./Common\":14,\"./Plugin\":20}],18:[function(_dereq_,module,exports){\n\n},{\"../body/Composite\":2,\"./Common\":14}],19:[function(_dereq_,module,exports){\n/**\n* The `Matter.Mouse` module contains methods for creating and manipulating mouse inputs.\n*\n* @class Mouse\n*/\n\nvar Mouse = {};\n\nmodule.exports = Mouse;\n\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a mouse input.\n     * @method create\n     * @param {HTMLElement} element\n     * @return {mouse} A new mouse\n     */\n    Mouse.create = function(element) {\n        var mouse = {};\n\n        if (!element) {\n            Common.log('Mouse.create: element was undefined, defaulting to document.body', 'warn');\n        }\n        \n        mouse.element = element || document.body;\n        mouse.absolute = { x: 0, y: 0 };\n        mouse.position = { x: 0, y: 0 };\n        mouse.mousedownPosition = { x: 0, y: 0 };\n        mouse.mouseupPosition = { x: 0, y: 0 };\n        mouse.offset = { x: 0, y: 0 };\n        mouse.scale = { x: 1, y: 1 };\n        mouse.wheelDelta = 0;\n        mouse.button = -1;\n        mouse.pixelRatio = mouse.element.getAttribute('data-pixel-ratio') || 1;\n\n        mouse.sourceEvents = {\n            mousemove: null,\n            mousedown: null,\n            mouseup: null,\n            mousewheel: null\n        };\n        \n        mouse.mousemove = function(event) { \n            var position = _getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.sourceEvents.mousemove = event;\n        };\n        \n        mouse.mousedown = function(event) {\n            var position = _getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            } else {\n                mouse.button = event.button;\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mousedownPosition.x = mouse.position.x;\n            mouse.mousedownPosition.y = mouse.position.y;\n            mouse.sourceEvents.mousedown = event;\n        };\n        \n        mouse.mouseup = function(event) {\n            var position = _getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                event.preventDefault();\n            }\n            \n            mouse.button = -1;\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mouseupPosition.x = mouse.position.x;\n            mouse.mouseupPosition.y = mouse.position.y;\n            mouse.sourceEvents.mouseup = event;\n        };\n\n        mouse.mousewheel = function(event) {\n            mouse.wheelDelta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail));\n            event.preventDefault();\n        };\n\n        Mouse.setElement(mouse, mouse.element);\n\n        return mouse;\n    };\n\n    /**\n     * Sets the element the mouse is bound to (and relative to).\n     * @method setElement\n     * @param {mouse} mouse\n     * @param {HTMLElement} element\n     */\n    Mouse.setElement = function(mouse, element) {\n        mouse.element = element;\n\n        element.addEventListener('mousemove', mouse.mousemove);\n        element.addEventListener('mousedown', mouse.mousedown);\n        element.addEventListener('mouseup', mouse.mouseup);\n        \n        element.addEventListener('mousewheel', mouse.mousewheel);\n        element.addEventListener('DOMMouseScroll', mouse.mousewheel);\n\n        element.addEventListener('touchmove', mouse.mousemove);\n        element.addEventListener('touchstart', mouse.mousedown);\n        element.addEventListener('touchend', mouse.mouseup);\n    };\n\n    /**\n     * Clears all captured source events.\n     * @method clearSourceEvents\n     * @param {mouse} mouse\n     */\n    Mouse.clearSourceEvents = function(mouse) {\n        mouse.sourceEvents.mousemove = null;\n        mouse.sourceEvents.mousedown = null;\n        mouse.sourceEvents.mouseup = null;\n        mouse.sourceEvents.mousewheel = null;\n        mouse.wheelDelta = 0;\n    };\n\n    /**\n     * Sets the mouse position offset.\n     * @method setOffset\n     * @param {mouse} mouse\n     * @param {vector} offset\n     */\n    Mouse.setOffset = function(mouse, offset) {\n        mouse.offset.x = offset.x;\n        mouse.offset.y = offset.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n\n    /**\n     * Sets the mouse position scale.\n     * @method setScale\n     * @param {mouse} mouse\n     * @param {vector} scale\n     */\n    Mouse.setScale = function(mouse, scale) {\n        mouse.scale.x = scale.x;\n        mouse.scale.y = scale.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n    \n    /**\n     * Gets the mouse position relative to an element given a screen pixel ratio.\n     * @method _getRelativeMousePosition\n     * @private\n     * @param {} event\n     * @param {} element\n     * @param {number} pixelRatio\n     * @return {}\n     */\n    var _getRelativeMousePosition = function(event, element, pixelRatio) {\n        var elementBounds = element.getBoundingClientRect(),\n            rootNode = (document.documentElement || document.body.parentNode || document.body),\n            scrollX = (window.pageXOffset !== undefined) ? window.pageXOffset : rootNode.scrollLeft,\n            scrollY = (window.pageYOffset !== undefined) ? window.pageYOffset : rootNode.scrollTop,\n            touches = event.changedTouches,\n            x, y;\n        \n        if (touches) {\n            x = touches[0].pageX - elementBounds.left - scrollX;\n            y = touches[0].pageY - elementBounds.top - scrollY;\n        } else {\n            x = event.pageX - elementBounds.left - scrollX;\n            y = event.pageY - elementBounds.top - scrollY;\n        }\n\n        return { \n            x: x / (element.clientWidth / (element.width || element.clientWidth) * pixelRatio),\n            y: y / (element.clientHeight / (element.height || element.clientHeight) * pixelRatio)\n        };\n    };\n\n})();\n\n},{\"../core/Common\":14}],20:[function(_dereq_,module,exports){\n/**\n* The `Matter.Plugin` module contains functions for registering and installing plugins on modules.\n*\n* @class Plugin\n*/\n\nvar Plugin = {};\n\nmodule.exports = Plugin;\n\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    Plugin._registry = {};\n\n    /**\n     * Registers a plugin object so it can be resolved later by name.\n     * @method register\n     * @param plugin {} The plugin to register.\n     * @return {object} The plugin.\n     */\n    Plugin.register = function(plugin) {\n        if (!Plugin.isPlugin(plugin)) {\n            Common.warn('Plugin.register:', Plugin.toString(plugin), 'does not implement all required fields.');\n        }\n\n        if (plugin.name in Plugin._registry) {\n            var registered = Plugin._registry[plugin.name],\n                pluginVersion = Plugin.versionParse(plugin.version).number,\n                registeredVersion = Plugin.versionParse(registered.version).number;\n\n            if (pluginVersion > registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'was upgraded to', Plugin.toString(plugin));\n                Plugin._registry[plugin.name] = plugin;\n            } else if (pluginVersion < registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'can not be downgraded to', Plugin.toString(plugin));\n            } else if (plugin !== registered) {\n                Common.warn('Plugin.register:', Plugin.toString(plugin), 'is already registered to different plugin object');\n            }\n        } else {\n            Plugin._registry[plugin.name] = plugin;\n        }\n\n        return plugin;\n    };\n\n    /**\n     * Resolves a dependency to a plugin object from the registry if it exists. \n     * The `dependency` may contain a version, but only the name matters when resolving.\n     * @method resolve\n     * @param dependency {string} The dependency.\n     * @return {object} The plugin if resolved, otherwise `undefined`.\n     */\n    Plugin.resolve = function(dependency) {\n        return Plugin._registry[Plugin.dependencyParse(dependency).name];\n    };\n\n    /**\n     * Returns a pretty printed plugin name and version.\n     * @method toString\n     * @param plugin {} The plugin.\n     * @return {string} Pretty printed plugin name and version.\n     */\n    Plugin.toString = function(plugin) {\n        return typeof plugin === 'string' ? plugin : (plugin.name || 'anonymous') + '@' + (plugin.version || plugin.range || '0.0.0');\n    };\n\n    /**\n     * Returns `true` if the object meets the minimum standard to be considered a plugin.\n     * This means it must define the following properties:\n     * - `name`\n     * - `version`\n     * - `install`\n     * @method isPlugin\n     * @param obj {} The obj to test.\n     * @return {boolean} `true` if the object can be considered a plugin otherwise `false`.\n     */\n    Plugin.isPlugin = function(obj) {\n        return obj && obj.name && obj.version && obj.install;\n    };\n\n    /**\n     * Returns `true` if a plugin with the given `name` been installed on `module`.\n     * @method isUsed\n     * @param module {} The module.\n     * @param name {string} The plugin name.\n     * @return {boolean} `true` if a plugin with the given `name` been installed on `module`, otherwise `false`.\n     */\n    Plugin.isUsed = function(module, name) {\n        return module.used.indexOf(name) > -1;\n    };\n\n    /**\n     * Returns `true` if `plugin.for` is applicable to `module` by comparing against `module.name` and `module.version`.\n     * If `plugin.for` is not specified then it is assumed to be applicable.\n     * The value of `plugin.for` is a string of the format `'module-name'` or `'module-name@version'`.\n     * @method isFor\n     * @param plugin {} The plugin.\n     * @param module {} The module.\n     * @return {boolean} `true` if `plugin.for` is applicable to `module`, otherwise `false`.\n     */\n    Plugin.isFor = function(plugin, module) {\n        var parsed = plugin.for && Plugin.dependencyParse(plugin.for);\n        return !plugin.for || (module.name === parsed.name && Plugin.versionSatisfies(module.version, parsed.range));\n    };\n\n    /**\n     * Installs the plugins by calling `plugin.install` on each plugin specified in `plugins` if passed, otherwise `module.uses`.\n     * For installing plugins on `Matter` see the convenience function `Matter.use`.\n     * Plugins may be specified either by their name or a reference to the plugin object.\n     * Plugins themselves may specify further dependencies, but each plugin is installed only once.\n     * Order is important, a topological sort is performed to find the best resulting order of installation.\n     * This sorting attempts to satisfy every dependency's requested ordering, but may not be exact in all cases.\n     * This function logs the resulting status of each dependency in the console, along with any warnings.\n     * - A green tick ✅ indicates a dependency was resolved and installed.\n     * - An orange diamond 🔶 indicates a dependency was resolved but a warning was thrown for it or one if its dependencies.\n     * - A red cross ❌ indicates a dependency could not be resolved.\n     * Avoid calling this function multiple times on the same module unless you intend to manually control installation order.\n     * @method use\n     * @param module {} The module install plugins on.\n     * @param [plugins=module.uses] {} The plugins to install on module (optional, defaults to `module.uses`).\n     */\n    Plugin.use = function(module, plugins) {\n        module.uses = (module.uses || []).concat(plugins || []);\n\n        if (module.uses.length === 0) {\n            Common.warn('Plugin.use:', Plugin.toString(module), 'does not specify any dependencies to install.');\n            return;\n        }\n\n        var dependencies = Plugin.dependencies(module),\n            sortedDependencies = Common.topologicalSort(dependencies),\n            status = [];\n\n        for (var i = 0; i < sortedDependencies.length; i += 1) {\n            if (sortedDependencies[i] === module.name) {\n                continue;\n            }\n\n            var plugin = Plugin.resolve(sortedDependencies[i]);\n\n            if (!plugin) {\n                status.push('❌ ' + sortedDependencies[i]);\n                continue;\n            }\n\n            if (Plugin.isUsed(module, plugin.name)) {\n                continue;\n            }\n\n            if (!Plugin.isFor(plugin, module)) {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'is for', plugin.for, 'but installed on', Plugin.toString(module) + '.');\n                plugin._warned = true;\n            }\n\n            if (plugin.install) {\n                plugin.install(module);\n            } else {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'does not specify an install function.');\n                plugin._warned = true;\n            }\n\n            if (plugin._warned) {\n                status.push('🔶 ' + Plugin.toString(plugin));\n                delete plugin._warned;\n            } else {\n                status.push('✅ ' + Plugin.toString(plugin));\n            }\n\n            module.used.push(plugin.name);\n        }\n\n        if (status.length > 0) {\n            Common.info(status.join('  '));\n        }\n    };\n\n    /**\n     * Recursively finds all of a module's dependencies and returns a flat dependency graph.\n     * @method dependencies\n     * @param module {} The module.\n     * @return {object} A dependency graph.\n     */\n    Plugin.dependencies = function(module, tracked) {\n        var parsedBase = Plugin.dependencyParse(module),\n            name = parsedBase.name;\n\n        tracked = tracked || {};\n\n        if (name in tracked) {\n            return;\n        }\n\n        module = Plugin.resolve(module) || module;\n\n        tracked[name] = Common.map(module.uses || [], function(dependency) {\n            if (Plugin.isPlugin(dependency)) {\n                Plugin.register(dependency);\n            }\n\n            var parsed = Plugin.dependencyParse(dependency),\n                resolved = Plugin.resolve(dependency);\n\n            if (resolved && !Plugin.versionSatisfies(resolved.version, parsed.range)) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(resolved), 'does not satisfy',\n                    Plugin.toString(parsed), 'used by', Plugin.toString(parsedBase) + '.'\n                );\n\n                resolved._warned = true;\n                module._warned = true;\n            } else if (!resolved) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(dependency), 'used by',\n                    Plugin.toString(parsedBase), 'could not be resolved.'\n                );\n\n                module._warned = true;\n            }\n\n            return parsed.name;\n        });\n\n        for (var i = 0; i < tracked[name].length; i += 1) {\n            Plugin.dependencies(tracked[name][i], tracked);\n        }\n\n        return tracked;\n    };\n\n    /**\n     * Parses a dependency string into its components.\n     * The `dependency` is a string of the format `'module-name'` or `'module-name@version'`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * This function can also handle dependencies that are already resolved (e.g. a module object).\n     * @method dependencyParse\n     * @param dependency {string} The dependency of the format `'module-name'` or `'module-name@version'`.\n     * @return {object} The dependency parsed into its components.\n     */\n    Plugin.dependencyParse = function(dependency) {\n        if (Common.isString(dependency)) {\n            var pattern = /^[\\w-]+(@(\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-]+)?))?$/;\n\n            if (!pattern.test(dependency)) {\n                Common.warn('Plugin.dependencyParse:', dependency, 'is not a valid dependency string.');\n            }\n\n            return {\n                name: dependency.split('@')[0],\n                range: dependency.split('@')[1] || '*'\n            };\n        }\n\n        return {\n            name: dependency.name,\n            range: dependency.range || dependency.version\n        };\n    };\n\n    /**\n     * Parses a version string into its components.  \n     * Versions are strictly of the format `x.y.z` (as in [semver](http://semver.org/)).\n     * Versions may optionally have a prerelease tag in the format `x.y.z-alpha`.\n     * Ranges are a strict subset of [npm ranges](https://docs.npmjs.com/misc/semver#advanced-range-syntax).\n     * Only the following range types are supported:\n     * - Tilde ranges e.g. `~1.2.3`\n     * - Caret ranges e.g. `^1.2.3`\n     * - Exact version e.g. `1.2.3`\n     * - Any version `*`\n     * @method versionParse\n     * @param range {string} The version string.\n     * @return {object} The version range parsed into its components.\n     */\n    Plugin.versionParse = function(range) {\n        var pattern = /^\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-]+)?$/;\n\n        if (!pattern.test(range)) {\n            Common.warn('Plugin.versionParse:', range, 'is not a valid version or range.');\n        }\n\n        var identifiers = range.split('-');\n        range = identifiers[0];\n\n        var isRange = isNaN(Number(range[0])),\n            version = isRange ? range.substr(1) : range,\n            parts = Common.map(version.split('.'), function(part) {\n                return Number(part);\n            });\n\n        return {\n            isRange: isRange,\n            version: version,\n            range: range,\n            operator: isRange ? range[0] : '',\n            parts: parts,\n            prerelease: identifiers[1],\n            number: parts[0] * 1e8 + parts[1] * 1e4 + parts[2]\n        };\n    };\n\n    /**\n     * Returns `true` if `version` satisfies the given `range`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * If a version or range is not specified, then any version (`*`) is assumed to satisfy.\n     * @method versionSatisfies\n     * @param version {string} The version string.\n     * @param range {string} The range string.\n     * @return {boolean} `true` if `version` satisfies `range`, otherwise `false`.\n     */\n    Plugin.versionSatisfies = function(version, range) {\n        range = range || '*';\n\n        var rangeParsed = Plugin.versionParse(range),\n            rangeParts = rangeParsed.parts,\n            versionParsed = Plugin.versionParse(version),\n            versionParts = versionParsed.parts;\n\n        if (rangeParsed.isRange) {\n            if (rangeParsed.operator === '*' || version === '*') {\n                return true;\n            }\n\n            if (rangeParsed.operator === '~') {\n                return versionParts[0] === rangeParts[0] && versionParts[1] === rangeParts[1] && versionParts[2] >= rangeParts[2];\n            }\n\n            if (rangeParsed.operator === '^') {\n                if (rangeParts[0] > 0) {\n                    return versionParts[0] === rangeParts[0] && versionParsed.number >= rangeParsed.number;\n                }\n\n                if (rangeParts[1] > 0) {\n                    return versionParts[1] === rangeParts[1] && versionParts[2] >= rangeParts[2];\n                }\n\n                return versionParts[2] === rangeParts[2];\n            }\n        }\n\n        return version === range || version === '*';\n    };\n\n})();\n\n},{\"./Common\":14}],21:[function(_dereq_,module,exports){\n/**\n* The `Matter.Runner` module is an optional utility which provides a game loop, \n* that handles continuously updating a `Matter.Engine` for you within a browser.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* If you are using your own game loop instead, then you do not need the `Matter.Runner` module.\n* Instead just call `Engine.update(engine, delta)` in your own loop.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Runner\n*/\n\nvar Runner = {};\n\nmodule.exports = Runner;\n\nvar Events = _dereq_('./Events');\nvar Engine = _dereq_('./Engine');\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame;\n   \n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame \n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    if (!_requestAnimationFrame) {\n        var _frameTimeout;\n\n        _requestAnimationFrame = function(callback){ \n            _frameTimeout = setTimeout(function() { \n                callback(Common.now()); \n            }, 1000 / 60);\n        };\n\n        _cancelAnimationFrame = function() {\n            clearTimeout(_frameTimeout);\n        };\n    }\n\n    /**\n     * Creates a new Runner. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * @method create\n     * @param {} options\n     */\n    Runner.create = function(options) {\n        var defaults = {\n            fps: 60,\n            correction: 1,\n            deltaSampleSize: 60,\n            counterTimestamp: 0,\n            frameCounter: 0,\n            deltaHistory: [],\n            timePrev: null,\n            timeScalePrev: 1,\n            frameRequestId: null,\n            isFixed: false,\n            enabled: true\n        };\n\n        var runner = Common.extend(defaults, options);\n\n        runner.delta = runner.delta || 1000 / runner.fps;\n        runner.deltaMin = runner.deltaMin || 1000 / runner.fps;\n        runner.deltaMax = runner.deltaMax || 1000 / (runner.fps * 0.5);\n        runner.fps = 1000 / runner.delta;\n\n        return runner;\n    };\n\n    /**\n     * Continuously ticks a `Matter.Engine` by calling `Runner.tick` on the `requestAnimationFrame` event.\n     * @method run\n     * @param {engine} engine\n     */\n    Runner.run = function(runner, engine) {\n        // create runner if engine is first argument\n        if (typeof runner.positionIterations !== 'undefined') {\n            engine = runner;\n            runner = Runner.create();\n        }\n\n        (function render(time){\n            runner.frameRequestId = _requestAnimationFrame(render);\n\n            if (time && runner.enabled) {\n                Runner.tick(runner, engine, time);\n            }\n        })();\n\n        return runner;\n    };\n\n    /**\n     * A game loop utility that updates the engine and renderer by one step (a 'tick').\n     * Features delta smoothing, time correction and fixed or dynamic timing.\n     * Triggers `beforeTick`, `tick` and `afterTick` events on the engine.\n     * Consider just `Engine.update(engine, delta)` if you're using your own loop.\n     * @method tick\n     * @param {runner} runner\n     * @param {engine} engine\n     * @param {number} time\n     */\n    Runner.tick = function(runner, engine, time) {\n        var timing = engine.timing,\n            correction = 1,\n            delta;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(runner, 'beforeTick', event);\n        Events.trigger(engine, 'beforeTick', event); // @deprecated\n\n        if (runner.isFixed) {\n            // fixed timestep\n            delta = runner.delta;\n        } else {\n            // dynamic timestep based on wall clock between calls\n            delta = (time - runner.timePrev) || runner.delta;\n            runner.timePrev = time;\n\n            // optimistically filter delta over a few frames, to improve stability\n            runner.deltaHistory.push(delta);\n            runner.deltaHistory = runner.deltaHistory.slice(-runner.deltaSampleSize);\n            delta = Math.min.apply(null, runner.deltaHistory);\n            \n            // limit delta\n            delta = delta < runner.deltaMin ? runner.deltaMin : delta;\n            delta = delta > runner.deltaMax ? runner.deltaMax : delta;\n\n            // correction for delta\n            correction = delta / runner.delta;\n\n            // update engine timing object\n            runner.delta = delta;\n        }\n\n        // time correction for time scaling\n        if (runner.timeScalePrev !== 0)\n            correction *= timing.timeScale / runner.timeScalePrev;\n\n        if (timing.timeScale === 0)\n            correction = 0;\n\n        runner.timeScalePrev = timing.timeScale;\n        runner.correction = correction;\n\n        // fps counter\n        runner.frameCounter += 1;\n        if (time - runner.counterTimestamp >= 1000) {\n            runner.fps = runner.frameCounter * ((time - runner.counterTimestamp) / 1000);\n            runner.counterTimestamp = time;\n            runner.frameCounter = 0;\n        }\n\n        Events.trigger(runner, 'tick', event);\n        Events.trigger(engine, 'tick', event); // @deprecated\n\n        // if world has been modified, clear the render scene graph\n        if (engine.world.isModified \n            && engine.render\n            && engine.render.controller\n            && engine.render.controller.clear) {\n            engine.render.controller.clear(engine.render); // @deprecated\n        }\n\n        // update\n        Events.trigger(runner, 'beforeUpdate', event);\n        Engine.update(engine, delta, correction);\n        Events.trigger(runner, 'afterUpdate', event);\n\n        // render\n        // @deprecated\n        if (engine.render && engine.render.controller) {\n            Events.trigger(runner, 'beforeRender', event);\n            Events.trigger(engine, 'beforeRender', event); // @deprecated\n\n            engine.render.controller.world(engine.render);\n\n            Events.trigger(runner, 'afterRender', event);\n            Events.trigger(engine, 'afterRender', event); // @deprecated\n        }\n\n        Events.trigger(runner, 'afterTick', event);\n        Events.trigger(engine, 'afterTick', event); // @deprecated\n    };\n\n    /**\n     * Ends execution of `Runner.run` on the given `runner`, by canceling the animation frame request event loop.\n     * If you wish to only temporarily pause the engine, see `engine.enabled` instead.\n     * @method stop\n     * @param {runner} runner\n     */\n    Runner.stop = function(runner) {\n        _cancelAnimationFrame(runner.frameRequestId);\n    };\n\n    /**\n     * Alias for `Runner.run`.\n     * @method start\n     * @param {runner} runner\n     * @param {engine} engine\n     */\n    Runner.start = function(runner, engine) {\n        Runner.run(runner, engine);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired at the start of a tick, before any updates to the engine or timing\n    *\n    * @event beforeTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine timing updated, but just before update\n    *\n    * @event tick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired at the end of a tick, after engine update and after rendering\n    *\n    * @event afterTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired before update\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after update\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired before rendering\n    *\n    * @event beforeRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    * @deprecated\n    */\n\n    /**\n    * Fired after rendering\n    *\n    * @event afterRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    * @deprecated\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A flag that specifies whether the runner is running or not.\n     *\n     * @property enabled\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Boolean` that specifies if the runner should use a fixed timestep (otherwise it is variable).\n     * If timing is fixed, then the apparent simulation speed will change depending on the frame rate (but behaviour will be deterministic).\n     * If the timing is variable, then the apparent simulation speed will be constant (approximately, but at the cost of determininism).\n     *\n     * @property isFixed\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that specifies the time step between updates in milliseconds.\n     * If `engine.timing.isFixed` is set to `true`, then `delta` is fixed.\n     * If it is `false`, then `delta` can dynamically change to maintain the correct apparent simulation speed.\n     *\n     * @property delta\n     * @type number\n     * @default 1000 / 60\n     */\n\n})();\n\n},{\"./Common\":14,\"./Engine\":15,\"./Events\":16}],22:[function(_dereq_,module,exports){\n/**\n* The `Matter.Sleeping` module contains methods to manage the sleeping state of bodies.\n*\n* @class Sleeping\n*/\n\nvar Sleeping = {};\n\nmodule.exports = Sleeping;\n\nvar Events = _dereq_('./Events');\n\n(function() {\n\n    Sleeping._motionWakeThreshold = 0.18;\n    Sleeping._motionSleepThreshold = 0.08;\n    Sleeping._minBias = 0.9;\n\n    /**\n     * Puts bodies to sleep or wakes them up depending on their motion.\n     * @method update\n     * @param {body[]} bodies\n     * @param {number} timeScale\n     */\n    Sleeping.update = function(bodies, timeScale) {\n        var timeFactor = timeScale * timeScale * timeScale;\n\n        // update bodies sleeping status\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                motion = body.speed * body.speed + body.angularSpeed * body.angularSpeed;\n\n            // wake up bodies if they have a force applied\n            if (body.force.x !== 0 || body.force.y !== 0) {\n                Sleeping.set(body, false);\n                continue;\n            }\n\n            var minMotion = Math.min(body.motion, motion),\n                maxMotion = Math.max(body.motion, motion);\n        \n            // biased average motion estimation between frames\n            body.motion = Sleeping._minBias * minMotion + (1 - Sleeping._minBias) * maxMotion;\n            \n            if (body.sleepThreshold > 0 && body.motion < Sleeping._motionSleepThreshold * timeFactor) {\n                body.sleepCounter += 1;\n                \n                if (body.sleepCounter >= body.sleepThreshold)\n                    Sleeping.set(body, true);\n            } else if (body.sleepCounter > 0) {\n                body.sleepCounter -= 1;\n            }\n        }\n    };\n\n    /**\n     * Given a set of colliding pairs, wakes the sleeping bodies involved.\n     * @method afterCollisions\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Sleeping.afterCollisions = function(pairs, timeScale) {\n        var timeFactor = timeScale * timeScale * timeScale;\n\n        // wake up bodies involved in collisions\n        for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n            \n            // don't wake inactive pairs\n            if (!pair.isActive)\n                continue;\n\n            var collision = pair.collision,\n                bodyA = collision.bodyA.parent, \n                bodyB = collision.bodyB.parent;\n        \n            // don't wake if at least one body is static\n            if ((bodyA.isSleeping && bodyB.isSleeping) || bodyA.isStatic || bodyB.isStatic)\n                continue;\n        \n            if (bodyA.isSleeping || bodyB.isSleeping) {\n                var sleepingBody = (bodyA.isSleeping && !bodyA.isStatic) ? bodyA : bodyB,\n                    movingBody = sleepingBody === bodyA ? bodyB : bodyA;\n\n                if (!sleepingBody.isStatic && movingBody.motion > Sleeping._motionWakeThreshold * timeFactor) {\n                    Sleeping.set(sleepingBody, false);\n                }\n            }\n        }\n    };\n  \n    /**\n     * Set a body as sleeping or awake.\n     * @method set\n     * @param {body} body\n     * @param {boolean} isSleeping\n     */\n    Sleeping.set = function(body, isSleeping) {\n        var wasSleeping = body.isSleeping;\n\n        if (isSleeping) {\n            body.isSleeping = true;\n            body.sleepCounter = body.sleepThreshold;\n\n            body.positionImpulse.x = 0;\n            body.positionImpulse.y = 0;\n\n            body.positionPrev.x = body.position.x;\n            body.positionPrev.y = body.position.y;\n\n            body.anglePrev = body.angle;\n            body.speed = 0;\n            body.angularSpeed = 0;\n            body.motion = 0;\n\n            if (!wasSleeping) {\n                Events.trigger(body, 'sleepStart');\n            }\n        } else {\n            body.isSleeping = false;\n            body.sleepCounter = 0;\n\n            if (wasSleeping) {\n                Events.trigger(body, 'sleepEnd');\n            }\n        }\n    };\n\n})();\n\n},{\"./Events\":16}],23:[function(_dereq_,module,exports){\n(function (global){\n/**\n* The `Matter.Bodies` module contains factory methods for creating rigid body models \n* with commonly used body configurations (such as rectangles, circles and other polygons).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Bodies\n*/\n\n// TODO: true circle bodies\n\nvar Bodies = {};\n\nmodule.exports = Bodies;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Common = _dereq_('../core/Common');\nvar Body = _dereq_('../body/Body');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Vector = _dereq_('../geometry/Vector');\nvar decomp = (typeof window !== \"undefined\" ? window['decomp'] : typeof global !== \"undefined\" ? global['decomp'] : null);\n\n(function() {\n\n    /**\n     * Creates a new rigid body model with a rectangle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method rectangle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {object} [options]\n     * @return {body} A new rectangle body\n     */\n    Bodies.rectangle = function(x, y, width, height, options) {\n        options = options || {};\n\n        var rectangle = { \n            label: 'Rectangle Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath('L 0 0 L ' + width + ' 0 L ' + width + ' ' + height + ' L 0 ' + height)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            rectangle.vertices = Vertices.chamfer(rectangle.vertices, chamfer.radius, \n                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, rectangle, options));\n    };\n    \n    /**\n     * Creates a new rigid body model with a trapezoid hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method trapezoid\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {number} slope\n     * @param {object} [options]\n     * @return {body} A new trapezoid body\n     */\n    Bodies.trapezoid = function(x, y, width, height, slope, options) {\n        options = options || {};\n\n        slope *= 0.5;\n        var roof = (1 - (slope * 2)) * width;\n        \n        var x1 = width * slope,\n            x2 = x1 + roof,\n            x3 = x2 + x1,\n            verticesPath;\n\n        if (slope < 0.5) {\n            verticesPath = 'L 0 0 L ' + x1 + ' ' + (-height) + ' L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        } else {\n            verticesPath = 'L 0 0 L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        }\n\n        var trapezoid = { \n            label: 'Trapezoid Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(verticesPath)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            trapezoid.vertices = Vertices.chamfer(trapezoid.vertices, chamfer.radius, \n                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, trapezoid, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a circle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method circle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} radius\n     * @param {object} [options]\n     * @param {number} [maxSides]\n     * @return {body} A new circle body\n     */\n    Bodies.circle = function(x, y, radius, options, maxSides) {\n        options = options || {};\n\n        var circle = {\n            label: 'Circle Body',\n            circleRadius: radius\n        };\n        \n        // approximate circles with polygons until true circles implemented in SAT\n        maxSides = maxSides || 25;\n        var sides = Math.ceil(Math.max(10, Math.min(maxSides, radius)));\n\n        // optimisation: always use even number of sides (half the number of unique axes)\n        if (sides % 2 === 1)\n            sides += 1;\n\n        return Bodies.polygon(x, y, sides, radius, Common.extend({}, circle, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a regular polygon hull with the given number of sides. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method polygon\n     * @param {number} x\n     * @param {number} y\n     * @param {number} sides\n     * @param {number} radius\n     * @param {object} [options]\n     * @return {body} A new regular polygon body\n     */\n    Bodies.polygon = function(x, y, sides, radius, options) {\n        options = options || {};\n\n        if (sides < 3)\n            return Bodies.circle(x, y, radius, options);\n\n        var theta = 2 * Math.PI / sides,\n            path = '',\n            offset = theta * 0.5;\n\n        for (var i = 0; i < sides; i += 1) {\n            var angle = offset + (i * theta),\n                xx = Math.cos(angle) * radius,\n                yy = Math.sin(angle) * radius;\n\n            path += 'L ' + xx.toFixed(3) + ' ' + yy.toFixed(3) + ' ';\n        }\n\n        var polygon = { \n            label: 'Polygon Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(path)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            polygon.vertices = Vertices.chamfer(polygon.vertices, chamfer.radius, \n                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, polygon, options));\n    };\n\n    /**\n     * Creates a body using the supplied vertices (or an array containing multiple sets of vertices).\n     * If the vertices are convex, they will pass through as supplied.\n     * Otherwise if the vertices are concave, they will be decomposed if [poly-decomp.js](https://github.com/schteppe/poly-decomp.js) is available.\n     * Note that this process is not guaranteed to support complex sets of vertices (e.g. those with holes may fail).\n     * By default the decomposition will discard collinear edges (to improve performance).\n     * It can also optionally discard any parts that have an area less than `minimumArea`.\n     * If the vertices can not be decomposed, the result will fall back to using the convex hull.\n     * The options parameter is an object that specifies any `Matter.Body` properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method fromVertices\n     * @param {number} x\n     * @param {number} y\n     * @param [[vector]] vertexSets\n     * @param {object} [options]\n     * @param {bool} [flagInternal=false]\n     * @param {number} [removeCollinear=0.01]\n     * @param {number} [minimumArea=10]\n     * @return {body}\n     */\n    Bodies.fromVertices = function(x, y, vertexSets, options, flagInternal, removeCollinear, minimumArea) {\n        var body,\n            parts,\n            isConvex,\n            vertices,\n            i,\n            j,\n            k,\n            v,\n            z;\n\n        options = options || {};\n        parts = [];\n\n        flagInternal = typeof flagInternal !== 'undefined' ? flagInternal : false;\n        removeCollinear = typeof removeCollinear !== 'undefined' ? removeCollinear : 0.01;\n        minimumArea = typeof minimumArea !== 'undefined' ? minimumArea : 10;\n\n        if (!decomp) {\n            Common.warn('Bodies.fromVertices: poly-decomp.js required. Could not decompose vertices. Fallback to convex hull.');\n        }\n\n        // ensure vertexSets is an array of arrays\n        if (!Common.isArray(vertexSets[0])) {\n            vertexSets = [vertexSets];\n        }\n\n        for (v = 0; v < vertexSets.length; v += 1) {\n            vertices = vertexSets[v];\n            isConvex = Vertices.isConvex(vertices);\n\n            if (isConvex || !decomp) {\n                if (isConvex) {\n                    vertices = Vertices.clockwiseSort(vertices);\n                } else {\n                    // fallback to convex hull when decomposition is not possible\n                    vertices = Vertices.hull(vertices);\n                }\n\n                parts.push({\n                    position: { x: x, y: y },\n                    vertices: vertices\n                });\n            } else {\n                // initialise a decomposition\n                var concave = vertices.map(function(vertex) {\n                    return [vertex.x, vertex.y];\n                });\n\n                // vertices are concave and simple, we can decompose into parts\n                decomp.makeCCW(concave);\n                if (removeCollinear !== false)\n                    decomp.removeCollinearPoints(concave, removeCollinear);\n\n                // use the quick decomposition algorithm (Bayazit)\n                var decomposed = decomp.quickDecomp(concave);\n\n                // for each decomposed chunk\n                for (i = 0; i < decomposed.length; i++) {\n                    var chunk = decomposed[i];\n\n                    // convert vertices into the correct structure\n                    var chunkVertices = chunk.map(function(vertices) {\n                        return {\n                            x: vertices[0],\n                            y: vertices[1]\n                        };\n                    });\n\n                    // skip small chunks\n                    if (minimumArea > 0 && Vertices.area(chunkVertices) < minimumArea)\n                        continue;\n\n                    // create a compound part\n                    parts.push({\n                        position: Vertices.centre(chunkVertices),\n                        vertices: chunkVertices\n                    });\n                }\n            }\n        }\n\n        // create body parts\n        for (i = 0; i < parts.length; i++) {\n            parts[i] = Body.create(Common.extend(parts[i], options));\n        }\n\n        // flag internal edges (coincident part edges)\n        if (flagInternal) {\n            var coincident_max_dist = 5;\n\n            for (i = 0; i < parts.length; i++) {\n                var partA = parts[i];\n\n                for (j = i + 1; j < parts.length; j++) {\n                    var partB = parts[j];\n\n                    if (Bounds.overlaps(partA.bounds, partB.bounds)) {\n                        var pav = partA.vertices,\n                            pbv = partB.vertices;\n\n                        // iterate vertices of both parts\n                        for (k = 0; k < partA.vertices.length; k++) {\n                            for (z = 0; z < partB.vertices.length; z++) {\n                                // find distances between the vertices\n                                var da = Vector.magnitudeSquared(Vector.sub(pav[(k + 1) % pav.length], pbv[z])),\n                                    db = Vector.magnitudeSquared(Vector.sub(pav[k], pbv[(z + 1) % pbv.length]));\n\n                                // if both vertices are very close, consider the edge concident (internal)\n                                if (da < coincident_max_dist && db < coincident_max_dist) {\n                                    pav[k].isInternal = true;\n                                    pbv[z].isInternal = true;\n                                }\n                            }\n                        }\n\n                    }\n                }\n            }\n        }\n\n        if (parts.length > 1) {\n            // create the parent body to be returned, that contains generated compound parts\n            body = Body.create(Common.extend({ parts: parts.slice(0) }, options));\n            Body.setPosition(body, { x: x, y: y });\n\n            return body;\n        } else {\n            return parts[0];\n        }\n    };\n\n})();\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"../body/Body\":1,\"../core/Common\":14,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],24:[function(_dereq_,module,exports){\n/**\n* The `Matter.Composites` module contains factory methods for creating composite bodies\n* with commonly used configurations (such as stacks and chains).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composites\n*/\n\nvar Composites = {};\n\nmodule.exports = Composites;\n\nvar Composite = _dereq_('../body/Composite');\nvar Constraint = _dereq_('../constraint/Constraint');\nvar Common = _dereq_('../core/Common');\nvar Body = _dereq_('../body/Body');\nvar Bodies = _dereq_('./Bodies');\n\n(function() {\n\n    /**\n     * Create a new composite containing bodies created in the callback in a grid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method stack\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.stack = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        var stack = Composite.create({ label: 'Stack' }),\n            x = xx,\n            y = yy,\n            lastBody,\n            i = 0;\n\n        for (var row = 0; row < rows; row++) {\n            var maxHeight = 0;\n            \n            for (var column = 0; column < columns; column++) {\n                var body = callback(x, y, column, row, lastBody, i);\n                    \n                if (body) {\n                    var bodyHeight = body.bounds.max.y - body.bounds.min.y,\n                        bodyWidth = body.bounds.max.x - body.bounds.min.x; \n\n                    if (bodyHeight > maxHeight)\n                        maxHeight = bodyHeight;\n                    \n                    Body.translate(body, { x: bodyWidth * 0.5, y: bodyHeight * 0.5 });\n\n                    x = body.bounds.max.x + columnGap;\n\n                    Composite.addBody(stack, body);\n                    \n                    lastBody = body;\n                    i += 1;\n                } else {\n                    x += columnGap;\n                }\n            }\n            \n            y += maxHeight + rowGap;\n            x = xx;\n        }\n\n        return stack;\n    };\n    \n    /**\n     * Chains all bodies in the given composite together using constraints.\n     * @method chain\n     * @param {composite} composite\n     * @param {number} xOffsetA\n     * @param {number} yOffsetA\n     * @param {number} xOffsetB\n     * @param {number} yOffsetB\n     * @param {object} options\n     * @return {composite} A new composite containing objects chained together with constraints\n     */\n    Composites.chain = function(composite, xOffsetA, yOffsetA, xOffsetB, yOffsetB, options) {\n        var bodies = composite.bodies;\n        \n        for (var i = 1; i < bodies.length; i++) {\n            var bodyA = bodies[i - 1],\n                bodyB = bodies[i],\n                bodyAHeight = bodyA.bounds.max.y - bodyA.bounds.min.y,\n                bodyAWidth = bodyA.bounds.max.x - bodyA.bounds.min.x, \n                bodyBHeight = bodyB.bounds.max.y - bodyB.bounds.min.y,\n                bodyBWidth = bodyB.bounds.max.x - bodyB.bounds.min.x;\n        \n            var defaults = {\n                bodyA: bodyA,\n                pointA: { x: bodyAWidth * xOffsetA, y: bodyAHeight * yOffsetA },\n                bodyB: bodyB,\n                pointB: { x: bodyBWidth * xOffsetB, y: bodyBHeight * yOffsetB }\n            };\n            \n            var constraint = Common.extend(defaults, options);\n        \n            Composite.addConstraint(composite, Constraint.create(constraint));\n        }\n\n        composite.label += ' Chain';\n        \n        return composite;\n    };\n\n    /**\n     * Connects bodies in the composite with constraints in a grid pattern, with optional cross braces.\n     * @method mesh\n     * @param {composite} composite\n     * @param {number} columns\n     * @param {number} rows\n     * @param {boolean} crossBrace\n     * @param {object} options\n     * @return {composite} The composite containing objects meshed together with constraints\n     */\n    Composites.mesh = function(composite, columns, rows, crossBrace, options) {\n        var bodies = composite.bodies,\n            row,\n            col,\n            bodyA,\n            bodyB,\n            bodyC;\n        \n        for (row = 0; row < rows; row++) {\n            for (col = 1; col < columns; col++) {\n                bodyA = bodies[(col - 1) + (row * columns)];\n                bodyB = bodies[col + (row * columns)];\n                Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n            }\n\n            if (row > 0) {\n                for (col = 0; col < columns; col++) {\n                    bodyA = bodies[col + ((row - 1) * columns)];\n                    bodyB = bodies[col + (row * columns)];\n                    Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n\n                    if (crossBrace && col > 0) {\n                        bodyC = bodies[(col - 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n\n                    if (crossBrace && col < columns - 1) {\n                        bodyC = bodies[(col + 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n                }\n            }\n        }\n\n        composite.label += ' Mesh';\n        \n        return composite;\n    };\n    \n    /**\n     * Create a new composite containing bodies created in the callback in a pyramid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method pyramid\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.pyramid = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        return Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y, column, row, lastBody, i) {\n            var actualRows = Math.min(rows, Math.ceil(columns / 2)),\n                lastBodyWidth = lastBody ? lastBody.bounds.max.x - lastBody.bounds.min.x : 0;\n            \n            if (row > actualRows)\n                return;\n            \n            // reverse row order\n            row = actualRows - row;\n            \n            var start = row,\n                end = columns - 1 - row;\n\n            if (column < start || column > end)\n                return;\n            \n            // retroactively fix the first body's position, since width was unknown\n            if (i === 1) {\n                Body.translate(lastBody, { x: (column + (columns % 2 === 1 ? 1 : -1)) * lastBodyWidth, y: 0 });\n            }\n\n            var xOffset = lastBody ? column * lastBodyWidth : 0;\n            \n            return callback(xx + xOffset + column * columnGap, y, column, row, lastBody, i);\n        });\n    };\n\n    /**\n     * Creates a composite with a Newton's Cradle setup of bodies and constraints.\n     * @method newtonsCradle\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} number\n     * @param {number} size\n     * @param {number} length\n     * @return {composite} A new composite newtonsCradle body\n     */\n    Composites.newtonsCradle = function(xx, yy, number, size, length) {\n        var newtonsCradle = Composite.create({ label: 'Newtons Cradle' });\n\n        for (var i = 0; i < number; i++) {\n            var separation = 1.9,\n                circle = Bodies.circle(xx + i * (size * separation), yy + length, size, \n                            { inertia: Infinity, restitution: 1, friction: 0, frictionAir: 0.0001, slop: 1 }),\n                constraint = Constraint.create({ pointA: { x: xx + i * (size * separation), y: yy }, bodyB: circle });\n\n            Composite.addBody(newtonsCradle, circle);\n            Composite.addConstraint(newtonsCradle, constraint);\n        }\n\n        return newtonsCradle;\n    };\n    \n    /**\n     * Creates a composite with simple car setup of bodies and constraints.\n     * @method car\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} width\n     * @param {number} height\n     * @param {number} wheelSize\n     * @return {composite} A new composite car body\n     */\n    Composites.car = function(xx, yy, width, height, wheelSize) {\n        var group = Body.nextGroup(true),\n            wheelBase = 20,\n            wheelAOffset = -width * 0.5 + wheelBase,\n            wheelBOffset = width * 0.5 - wheelBase,\n            wheelYOffset = 0;\n    \n        var car = Composite.create({ label: 'Car' }),\n            body = Bodies.rectangle(xx, yy, width, height, { \n                collisionFilter: {\n                    group: group\n                },\n                chamfer: {\n                    radius: height * 0.5\n                },\n                density: 0.0002\n            });\n    \n        var wheelA = Bodies.circle(xx + wheelAOffset, yy + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var wheelB = Bodies.circle(xx + wheelBOffset, yy + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var axelA = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelAOffset, y: wheelYOffset },\n            bodyA: wheelA,\n            stiffness: 1,\n            length: 0\n        });\n                        \n        var axelB = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelBOffset, y: wheelYOffset },\n            bodyA: wheelB,\n            stiffness: 1,\n            length: 0\n        });\n        \n        Composite.addBody(car, body);\n        Composite.addBody(car, wheelA);\n        Composite.addBody(car, wheelB);\n        Composite.addConstraint(car, axelA);\n        Composite.addConstraint(car, axelB);\n\n        return car;\n    };\n\n    /**\n     * Creates a simple soft body like object.\n     * @method softBody\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {boolean} crossBrace\n     * @param {number} particleRadius\n     * @param {} particleOptions\n     * @param {} constraintOptions\n     * @return {composite} A new composite softBody\n     */\n    Composites.softBody = function(xx, yy, columns, rows, columnGap, rowGap, crossBrace, particleRadius, particleOptions, constraintOptions) {\n        particleOptions = Common.extend({ inertia: Infinity }, particleOptions);\n        constraintOptions = Common.extend({ stiffness: 0.2, render: { type: 'line', anchors: false } }, constraintOptions);\n\n        var softBody = Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y) {\n            return Bodies.circle(x, y, particleRadius, particleOptions);\n        });\n\n        Composites.mesh(softBody, columns, rows, crossBrace, constraintOptions);\n\n        softBody.label = 'Soft Body';\n\n        return softBody;\n    };\n\n})();\n\n},{\"../body/Body\":1,\"../body/Composite\":2,\"../constraint/Constraint\":12,\"../core/Common\":14,\"./Bodies\":23}],25:[function(_dereq_,module,exports){\n/**\n* The `Matter.Axes` module contains methods for creating and manipulating sets of axes.\n*\n* @class Axes\n*/\n\nvar Axes = {};\n\nmodule.exports = Axes;\n\nvar Vector = _dereq_('../geometry/Vector');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new set of axes from the given vertices.\n     * @method fromVertices\n     * @param {vertices} vertices\n     * @return {axes} A new axes from the given vertices\n     */\n    Axes.fromVertices = function(vertices) {\n        var axes = {};\n\n        // find the unique axes, using edge normal gradients\n        for (var i = 0; i < vertices.length; i++) {\n            var j = (i + 1) % vertices.length, \n                normal = Vector.normalise({ \n                    x: vertices[j].y - vertices[i].y, \n                    y: vertices[i].x - vertices[j].x\n                }),\n                gradient = (normal.y === 0) ? Infinity : (normal.x / normal.y);\n            \n            // limit precision\n            gradient = gradient.toFixed(3).toString();\n            axes[gradient] = normal;\n        }\n\n        return Common.values(axes);\n    };\n\n    /**\n     * Rotates a set of axes by the given angle.\n     * @method rotate\n     * @param {axes} axes\n     * @param {number} angle\n     */\n    Axes.rotate = function(axes, angle) {\n        if (angle === 0)\n            return;\n        \n        var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n\n        for (var i = 0; i < axes.length; i++) {\n            var axis = axes[i],\n                xx;\n            xx = axis.x * cos - axis.y * sin;\n            axis.y = axis.x * sin + axis.y * cos;\n            axis.x = xx;\n        }\n    };\n\n})();\n\n},{\"../core/Common\":14,\"../geometry/Vector\":28}],26:[function(_dereq_,module,exports){\n/**\n* The `Matter.Bounds` module contains methods for creating and manipulating axis-aligned bounding boxes (AABB).\n*\n* @class Bounds\n*/\n\nvar Bounds = {};\n\nmodule.exports = Bounds;\n\n(function() {\n\n    /**\n     * Creates a new axis-aligned bounding box (AABB) for the given vertices.\n     * @method create\n     * @param {vertices} vertices\n     * @return {bounds} A new bounds object\n     */\n    Bounds.create = function(vertices) {\n        var bounds = { \n            min: { x: 0, y: 0 }, \n            max: { x: 0, y: 0 }\n        };\n\n        if (vertices)\n            Bounds.update(bounds, vertices);\n        \n        return bounds;\n    };\n\n    /**\n     * Updates bounds using the given vertices and extends the bounds given a velocity.\n     * @method update\n     * @param {bounds} bounds\n     * @param {vertices} vertices\n     * @param {vector} velocity\n     */\n    Bounds.update = function(bounds, vertices, velocity) {\n        bounds.min.x = Infinity;\n        bounds.max.x = -Infinity;\n        bounds.min.y = Infinity;\n        bounds.max.y = -Infinity;\n\n        for (var i = 0; i < vertices.length; i++) {\n            var vertex = vertices[i];\n            if (vertex.x > bounds.max.x) bounds.max.x = vertex.x;\n            if (vertex.x < bounds.min.x) bounds.min.x = vertex.x;\n            if (vertex.y > bounds.max.y) bounds.max.y = vertex.y;\n            if (vertex.y < bounds.min.y) bounds.min.y = vertex.y;\n        }\n        \n        if (velocity) {\n            if (velocity.x > 0) {\n                bounds.max.x += velocity.x;\n            } else {\n                bounds.min.x += velocity.x;\n            }\n            \n            if (velocity.y > 0) {\n                bounds.max.y += velocity.y;\n            } else {\n                bounds.min.y += velocity.y;\n            }\n        }\n    };\n\n    /**\n     * Returns true if the bounds contains the given point.\n     * @method contains\n     * @param {bounds} bounds\n     * @param {vector} point\n     * @return {boolean} True if the bounds contain the point, otherwise false\n     */\n    Bounds.contains = function(bounds, point) {\n        return point.x >= bounds.min.x && point.x <= bounds.max.x \n               && point.y >= bounds.min.y && point.y <= bounds.max.y;\n    };\n\n    /**\n     * Returns true if the two bounds intersect.\n     * @method overlaps\n     * @param {bounds} boundsA\n     * @param {bounds} boundsB\n     * @return {boolean} True if the bounds overlap, otherwise false\n     */\n    Bounds.overlaps = function(boundsA, boundsB) {\n        return (boundsA.min.x <= boundsB.max.x && boundsA.max.x >= boundsB.min.x\n                && boundsA.max.y >= boundsB.min.y && boundsA.min.y <= boundsB.max.y);\n    };\n\n    /**\n     * Translates the bounds by the given vector.\n     * @method translate\n     * @param {bounds} bounds\n     * @param {vector} vector\n     */\n    Bounds.translate = function(bounds, vector) {\n        bounds.min.x += vector.x;\n        bounds.max.x += vector.x;\n        bounds.min.y += vector.y;\n        bounds.max.y += vector.y;\n    };\n\n    /**\n     * Shifts the bounds to the given position.\n     * @method shift\n     * @param {bounds} bounds\n     * @param {vector} position\n     */\n    Bounds.shift = function(bounds, position) {\n        var deltaX = bounds.max.x - bounds.min.x,\n            deltaY = bounds.max.y - bounds.min.y;\n            \n        bounds.min.x = position.x;\n        bounds.max.x = position.x + deltaX;\n        bounds.min.y = position.y;\n        bounds.max.y = position.y + deltaY;\n    };\n    \n})();\n\n},{}],27:[function(_dereq_,module,exports){\n/**\n* The `Matter.Svg` module contains methods for converting SVG images into an array of vector points.\n*\n* To use this module you also need the SVGPathSeg polyfill: https://github.com/progers/pathseg\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Svg\n*/\n\nvar Svg = {};\n\nmodule.exports = Svg;\n\nvar Bounds = _dereq_('../geometry/Bounds');\n\n(function() {\n\n    /**\n     * Converts an SVG path into an array of vector points.\n     * If the input path forms a concave shape, you must decompose the result into convex parts before use.\n     * See `Bodies.fromVertices` which provides support for this.\n     * Note that this function is not guaranteed to support complex paths (such as those with holes).\n     * @method pathToVertices\n     * @param {SVGPathElement} path\n     * @param {Number} [sampleLength=15]\n     * @return {Vector[]} points\n     */\n    Svg.pathToVertices = function(path, sampleLength) {\n        // https://github.com/wout/svg.topoly.js/blob/master/svg.topoly.js\n        var i, il, total, point, segment, segments, \n            segmentsQueue, lastSegment, \n            lastPoint, segmentIndex, points = [],\n            lx, ly, length = 0, x = 0, y = 0;\n\n        sampleLength = sampleLength || 15;\n\n        var addPoint = function(px, py, pathSegType) {\n            // all odd-numbered path types are relative except PATHSEG_CLOSEPATH (1)\n            var isRelative = pathSegType % 2 === 1 && pathSegType > 1;\n\n            // when the last point doesn't equal the current point add the current point\n            if (!lastPoint || px != lastPoint.x || py != lastPoint.y) {\n                if (lastPoint && isRelative) {\n                    lx = lastPoint.x;\n                    ly = lastPoint.y;\n                } else {\n                    lx = 0;\n                    ly = 0;\n                }\n\n                var point = {\n                    x: lx + px,\n                    y: ly + py\n                };\n\n                // set last point\n                if (isRelative || !lastPoint) {\n                    lastPoint = point;\n                }\n\n                points.push(point);\n\n                x = lx + px;\n                y = ly + py;\n            }\n        };\n\n        var addSegmentPoint = function(segment) {\n            var segType = segment.pathSegTypeAsLetter.toUpperCase();\n\n            // skip path ends\n            if (segType === 'Z') \n                return;\n\n            // map segment to x and y\n            switch (segType) {\n\n            case 'M':\n            case 'L':\n            case 'T':\n            case 'C':\n            case 'S':\n            case 'Q':\n                x = segment.x;\n                y = segment.y;\n                break;\n            case 'H':\n                x = segment.x;\n                break;\n            case 'V':\n                y = segment.y;\n                break;\n            }\n\n            addPoint(x, y, segment.pathSegType);\n        };\n\n        // ensure path is absolute\n        _svgPathToAbsolute(path);\n\n        // get total length\n        total = path.getTotalLength();\n\n        // queue segments\n        segments = [];\n        for (i = 0; i < path.pathSegList.numberOfItems; i += 1)\n            segments.push(path.pathSegList.getItem(i));\n\n        segmentsQueue = segments.concat();\n\n        // sample through path\n        while (length < total) {\n            // get segment at position\n            segmentIndex = path.getPathSegAtLength(length);\n            segment = segments[segmentIndex];\n\n            // new segment\n            if (segment != lastSegment) {\n                while (segmentsQueue.length && segmentsQueue[0] != segment)\n                    addSegmentPoint(segmentsQueue.shift());\n\n                lastSegment = segment;\n            }\n\n            // add points in between when curving\n            // TODO: adaptive sampling\n            switch (segment.pathSegTypeAsLetter.toUpperCase()) {\n\n            case 'C':\n            case 'T':\n            case 'S':\n            case 'Q':\n            case 'A':\n                point = path.getPointAtLength(length);\n                addPoint(point.x, point.y, 0);\n                break;\n\n            }\n\n            // increment by sample value\n            length += sampleLength;\n        }\n\n        // add remaining segments not passed by sampling\n        for (i = 0, il = segmentsQueue.length; i < il; ++i)\n            addSegmentPoint(segmentsQueue[i]);\n\n        return points;\n    };\n\n    var _svgPathToAbsolute = function(path) {\n        // http://phrogz.net/convert-svg-path-to-all-absolute-commands\n        // Copyright (c) Gavin Kistner\n        // http://phrogz.net/js/_ReuseLicense.txt\n        // Modifications: tidy formatting and naming\n        var x0, y0, x1, y1, x2, y2, segs = path.pathSegList,\n            x = 0, y = 0, len = segs.numberOfItems;\n\n        for (var i = 0; i < len; ++i) {\n            var seg = segs.getItem(i),\n                segType = seg.pathSegTypeAsLetter;\n\n            if (/[MLHVCSQTA]/.test(segType)) {\n                if ('x' in seg) x = seg.x;\n                if ('y' in seg) y = seg.y;\n            } else {\n                if ('x1' in seg) x1 = x + seg.x1;\n                if ('x2' in seg) x2 = x + seg.x2;\n                if ('y1' in seg) y1 = y + seg.y1;\n                if ('y2' in seg) y2 = y + seg.y2;\n                if ('x' in seg) x += seg.x;\n                if ('y' in seg) y += seg.y;\n\n                switch (segType) {\n\n                case 'm':\n                    segs.replaceItem(path.createSVGPathSegMovetoAbs(x, y), i);\n                    break;\n                case 'l':\n                    segs.replaceItem(path.createSVGPathSegLinetoAbs(x, y), i);\n                    break;\n                case 'h':\n                    segs.replaceItem(path.createSVGPathSegLinetoHorizontalAbs(x), i);\n                    break;\n                case 'v':\n                    segs.replaceItem(path.createSVGPathSegLinetoVerticalAbs(y), i);\n                    break;\n                case 'c':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicAbs(x, y, x1, y1, x2, y2), i);\n                    break;\n                case 's':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicSmoothAbs(x, y, x2, y2), i);\n                    break;\n                case 'q':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticAbs(x, y, x1, y1), i);\n                    break;\n                case 't':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticSmoothAbs(x, y), i);\n                    break;\n                case 'a':\n                    segs.replaceItem(path.createSVGPathSegArcAbs(x, y, seg.r1, seg.r2, seg.angle, seg.largeArcFlag, seg.sweepFlag), i);\n                    break;\n                case 'z':\n                case 'Z':\n                    x = x0;\n                    y = y0;\n                    break;\n\n                }\n            }\n\n            if (segType == 'M' || segType == 'm') {\n                x0 = x;\n                y0 = y;\n            }\n        }\n    };\n\n})();\n},{\"../geometry/Bounds\":26}],28:[function(_dereq_,module,exports){\n/**\n* The `Matter.Vector` module contains methods for creating and manipulating vectors.\n* Vectors are the basis of all the geometry related operations in the engine.\n* A `Matter.Vector` object is of the form `{ x: 0, y: 0 }`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vector\n*/\n\n// TODO: consider params for reusing vector objects\n\nvar Vector = {};\n\nmodule.exports = Vector;\n\n(function() {\n\n    /**\n     * Creates a new vector.\n     * @method create\n     * @param {number} x\n     * @param {number} y\n     * @return {vector} A new vector\n     */\n    Vector.create = function(x, y) {\n        return { x: x || 0, y: y || 0 };\n    };\n\n    /**\n     * Returns a new vector with `x` and `y` copied from the given `vector`.\n     * @method clone\n     * @param {vector} vector\n     * @return {vector} A new cloned vector\n     */\n    Vector.clone = function(vector) {\n        return { x: vector.x, y: vector.y };\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector.\n     * @method magnitude\n     * @param {vector} vector\n     * @return {number} The magnitude of the vector\n     */\n    Vector.magnitude = function(vector) {\n        return Math.sqrt((vector.x * vector.x) + (vector.y * vector.y));\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector (therefore saving a `sqrt` operation).\n     * @method magnitudeSquared\n     * @param {vector} vector\n     * @return {number} The squared magnitude of the vector\n     */\n    Vector.magnitudeSquared = function(vector) {\n        return (vector.x * vector.x) + (vector.y * vector.y);\n    };\n\n    /**\n     * Rotates the vector about (0, 0) by specified angle.\n     * @method rotate\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} [output]\n     * @return {vector} The vector rotated about (0, 0)\n     */\n    Vector.rotate = function(vector, angle, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = vector.x * cos - vector.y * sin;\n        output.y = vector.x * sin + vector.y * cos;\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Rotates the vector about a specified point by specified angle.\n     * @method rotateAbout\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} point\n     * @param {vector} [output]\n     * @return {vector} A new vector rotated about the point\n     */\n    Vector.rotateAbout = function(vector, angle, point, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = point.x + ((vector.x - point.x) * cos - (vector.y - point.y) * sin);\n        output.y = point.y + ((vector.x - point.x) * sin + (vector.y - point.y) * cos);\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Normalises a vector (such that its magnitude is `1`).\n     * @method normalise\n     * @param {vector} vector\n     * @return {vector} A new vector normalised\n     */\n    Vector.normalise = function(vector) {\n        var magnitude = Vector.magnitude(vector);\n        if (magnitude === 0)\n            return { x: 0, y: 0 };\n        return { x: vector.x / magnitude, y: vector.y / magnitude };\n    };\n\n    /**\n     * Returns the dot-product of two vectors.\n     * @method dot\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The dot product of the two vectors\n     */\n    Vector.dot = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.x) + (vectorA.y * vectorB.y);\n    };\n\n    /**\n     * Returns the cross-product of two vectors.\n     * @method cross\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The cross product of the two vectors\n     */\n    Vector.cross = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.y) - (vectorA.y * vectorB.x);\n    };\n\n    /**\n     * Returns the cross-product of three vectors.\n     * @method cross3\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} vectorC\n     * @return {number} The cross product of the three vectors\n     */\n    Vector.cross3 = function(vectorA, vectorB, vectorC) {\n        return (vectorB.x - vectorA.x) * (vectorC.y - vectorA.y) - (vectorB.y - vectorA.y) * (vectorC.x - vectorA.x);\n    };\n\n    /**\n     * Adds the two vectors.\n     * @method add\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB added\n     */\n    Vector.add = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x + vectorB.x;\n        output.y = vectorA.y + vectorB.y;\n        return output;\n    };\n\n    /**\n     * Subtracts the two vectors.\n     * @method sub\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB subtracted\n     */\n    Vector.sub = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x - vectorB.x;\n        output.y = vectorA.y - vectorB.y;\n        return output;\n    };\n\n    /**\n     * Multiplies a vector and a scalar.\n     * @method mult\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector multiplied by scalar\n     */\n    Vector.mult = function(vector, scalar) {\n        return { x: vector.x * scalar, y: vector.y * scalar };\n    };\n\n    /**\n     * Divides a vector and a scalar.\n     * @method div\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector divided by scalar\n     */\n    Vector.div = function(vector, scalar) {\n        return { x: vector.x / scalar, y: vector.y / scalar };\n    };\n\n    /**\n     * Returns the perpendicular vector. Set `negate` to true for the perpendicular in the opposite direction.\n     * @method perp\n     * @param {vector} vector\n     * @param {bool} [negate=false]\n     * @return {vector} The perpendicular vector\n     */\n    Vector.perp = function(vector, negate) {\n        negate = negate === true ? -1 : 1;\n        return { x: negate * -vector.y, y: negate * vector.x };\n    };\n\n    /**\n     * Negates both components of a vector such that it points in the opposite direction.\n     * @method neg\n     * @param {vector} vector\n     * @return {vector} The negated vector\n     */\n    Vector.neg = function(vector) {\n        return { x: -vector.x, y: -vector.y };\n    };\n\n    /**\n     * Returns the angle in radians between the two vectors relative to the x-axis.\n     * @method angle\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The angle in radians\n     */\n    Vector.angle = function(vectorA, vectorB) {\n        return Math.atan2(vectorB.y - vectorA.y, vectorB.x - vectorA.x);\n    };\n\n    /**\n     * Temporary vector pool (not thread-safe).\n     * @property _temp\n     * @type {vector[]}\n     * @private\n     */\n    Vector._temp = [\n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create()\n    ];\n\n})();\n},{}],29:[function(_dereq_,module,exports){\n/**\n* The `Matter.Vertices` module contains methods for creating and manipulating sets of vertices.\n* A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\n* A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vertices\n*/\n\nvar Vertices = {};\n\nmodule.exports = Vertices;\n\nvar Vector = _dereq_('../geometry/Vector');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new set of `Matter.Body` compatible vertices.\n     * The `points` argument accepts an array of `Matter.Vector` points orientated around the origin `(0, 0)`, for example:\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * The `Vertices.create` method returns a new array of vertices, which are similar to Matter.Vector objects,\n     * but with some additional references required for efficient collision detection routines.\n     *\n     * Vertices must be specified in clockwise order.\n     *\n     * Note that the `body` argument is not optional, a `Matter.Body` reference must be provided.\n     *\n     * @method create\n     * @param {vector[]} points\n     * @param {body} body\n     */\n    Vertices.create = function(points, body) {\n        var vertices = [];\n\n        for (var i = 0; i < points.length; i++) {\n            var point = points[i],\n                vertex = {\n                    x: point.x,\n                    y: point.y,\n                    index: i,\n                    body: body,\n                    isInternal: false\n                };\n\n            vertices.push(vertex);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Parses a string containing ordered x y pairs separated by spaces (and optionally commas), \n     * into a `Matter.Vertices` object for the given `Matter.Body`.\n     * For parsing SVG paths, see `Svg.pathToVertices`.\n     * @method fromPath\n     * @param {string} path\n     * @param {body} body\n     * @return {vertices} vertices\n     */\n    Vertices.fromPath = function(path, body) {\n        var pathPattern = /L?\\s*([\\-\\d\\.e]+)[\\s,]*([\\-\\d\\.e]+)*/ig,\n            points = [];\n\n        path.replace(pathPattern, function(match, x, y) {\n            points.push({ x: parseFloat(x), y: parseFloat(y) });\n        });\n\n        return Vertices.create(points, body);\n    };\n\n    /**\n     * Returns the centre (centroid) of the set of vertices.\n     * @method centre\n     * @param {vertices} vertices\n     * @return {vector} The centre point\n     */\n    Vertices.centre = function(vertices) {\n        var area = Vertices.area(vertices, true),\n            centre = { x: 0, y: 0 },\n            cross,\n            temp,\n            j;\n\n        for (var i = 0; i < vertices.length; i++) {\n            j = (i + 1) % vertices.length;\n            cross = Vector.cross(vertices[i], vertices[j]);\n            temp = Vector.mult(Vector.add(vertices[i], vertices[j]), cross);\n            centre = Vector.add(centre, temp);\n        }\n\n        return Vector.div(centre, 6 * area);\n    };\n\n    /**\n     * Returns the average (mean) of the set of vertices.\n     * @method mean\n     * @param {vertices} vertices\n     * @return {vector} The average point\n     */\n    Vertices.mean = function(vertices) {\n        var average = { x: 0, y: 0 };\n\n        for (var i = 0; i < vertices.length; i++) {\n            average.x += vertices[i].x;\n            average.y += vertices[i].y;\n        }\n\n        return Vector.div(average, vertices.length);\n    };\n\n    /**\n     * Returns the area of the set of vertices.\n     * @method area\n     * @param {vertices} vertices\n     * @param {bool} signed\n     * @return {number} The area\n     */\n    Vertices.area = function(vertices, signed) {\n        var area = 0,\n            j = vertices.length - 1;\n\n        for (var i = 0; i < vertices.length; i++) {\n            area += (vertices[j].x - vertices[i].x) * (vertices[j].y + vertices[i].y);\n            j = i;\n        }\n\n        if (signed)\n            return area / 2;\n\n        return Math.abs(area) / 2;\n    };\n\n    /**\n     * Returns the moment of inertia (second moment of area) of the set of vertices given the total mass.\n     * @method inertia\n     * @param {vertices} vertices\n     * @param {number} mass\n     * @return {number} The polygon's moment of inertia\n     */\n    Vertices.inertia = function(vertices, mass) {\n        var numerator = 0,\n            denominator = 0,\n            v = vertices,\n            cross,\n            j;\n\n        // find the polygon's moment of inertia, using second moment of area\n        // from equations at http://www.physicsforums.com/showthread.php?t=25293\n        for (var n = 0; n < v.length; n++) {\n            j = (n + 1) % v.length;\n            cross = Math.abs(Vector.cross(v[j], v[n]));\n            numerator += cross * (Vector.dot(v[j], v[j]) + Vector.dot(v[j], v[n]) + Vector.dot(v[n], v[n]));\n            denominator += cross;\n        }\n\n        return (mass / 6) * (numerator / denominator);\n    };\n\n    /**\n     * Translates the set of vertices in-place.\n     * @method translate\n     * @param {vertices} vertices\n     * @param {vector} vector\n     * @param {number} scalar\n     */\n    Vertices.translate = function(vertices, vector, scalar) {\n        var i;\n        if (scalar) {\n            for (i = 0; i < vertices.length; i++) {\n                vertices[i].x += vector.x * scalar;\n                vertices[i].y += vector.y * scalar;\n            }\n        } else {\n            for (i = 0; i < vertices.length; i++) {\n                vertices[i].x += vector.x;\n                vertices[i].y += vector.y;\n            }\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Rotates the set of vertices in-place.\n     * @method rotate\n     * @param {vertices} vertices\n     * @param {number} angle\n     * @param {vector} point\n     */\n    Vertices.rotate = function(vertices, angle, point) {\n        if (angle === 0)\n            return;\n\n        var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n\n        for (var i = 0; i < vertices.length; i++) {\n            var vertice = vertices[i],\n                dx = vertice.x - point.x,\n                dy = vertice.y - point.y;\n                \n            vertice.x = point.x + (dx * cos - dy * sin);\n            vertice.y = point.y + (dx * sin + dy * cos);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Returns `true` if the `point` is inside the set of `vertices`.\n     * @method contains\n     * @param {vertices} vertices\n     * @param {vector} point\n     * @return {boolean} True if the vertices contains point, otherwise false\n     */\n    Vertices.contains = function(vertices, point) {\n        for (var i = 0; i < vertices.length; i++) {\n            var vertice = vertices[i],\n                nextVertice = vertices[(i + 1) % vertices.length];\n            if ((point.x - vertice.x) * (nextVertice.y - vertice.y) + (point.y - vertice.y) * (vertice.x - nextVertice.x) > 0) {\n                return false;\n            }\n        }\n\n        return true;\n    };\n\n    /**\n     * Scales the vertices from a point (default is centre) in-place.\n     * @method scale\n     * @param {vertices} vertices\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     */\n    Vertices.scale = function(vertices, scaleX, scaleY, point) {\n        if (scaleX === 1 && scaleY === 1)\n            return vertices;\n\n        point = point || Vertices.centre(vertices);\n\n        var vertex,\n            delta;\n\n        for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            delta = Vector.sub(vertex, point);\n            vertices[i].x = point.x + delta.x * scaleX;\n            vertices[i].y = point.y + delta.y * scaleY;\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Chamfers a set of vertices by giving them rounded corners, returns a new set of vertices.\n     * The radius parameter is a single number or an array to specify the radius for each vertex.\n     * @method chamfer\n     * @param {vertices} vertices\n     * @param {number[]} radius\n     * @param {number} quality\n     * @param {number} qualityMin\n     * @param {number} qualityMax\n     */\n    Vertices.chamfer = function(vertices, radius, quality, qualityMin, qualityMax) {\n        radius = radius || [8];\n\n        if (!radius.length)\n            radius = [radius];\n\n        // quality defaults to -1, which is auto\n        quality = (typeof quality !== 'undefined') ? quality : -1;\n        qualityMin = qualityMin || 2;\n        qualityMax = qualityMax || 14;\n\n        var newVertices = [];\n\n        for (var i = 0; i < vertices.length; i++) {\n            var prevVertex = vertices[i - 1 >= 0 ? i - 1 : vertices.length - 1],\n                vertex = vertices[i],\n                nextVertex = vertices[(i + 1) % vertices.length],\n                currentRadius = radius[i < radius.length ? i : radius.length - 1];\n\n            if (currentRadius === 0) {\n                newVertices.push(vertex);\n                continue;\n            }\n\n            var prevNormal = Vector.normalise({ \n                x: vertex.y - prevVertex.y, \n                y: prevVertex.x - vertex.x\n            });\n\n            var nextNormal = Vector.normalise({ \n                x: nextVertex.y - vertex.y, \n                y: vertex.x - nextVertex.x\n            });\n\n            var diagonalRadius = Math.sqrt(2 * Math.pow(currentRadius, 2)),\n                radiusVector = Vector.mult(Common.clone(prevNormal), currentRadius),\n                midNormal = Vector.normalise(Vector.mult(Vector.add(prevNormal, nextNormal), 0.5)),\n                scaledVertex = Vector.sub(vertex, Vector.mult(midNormal, diagonalRadius));\n\n            var precision = quality;\n\n            if (quality === -1) {\n                // automatically decide precision\n                precision = Math.pow(currentRadius, 0.32) * 1.75;\n            }\n\n            precision = Common.clamp(precision, qualityMin, qualityMax);\n\n            // use an even value for precision, more likely to reduce axes by using symmetry\n            if (precision % 2 === 1)\n                precision += 1;\n\n            var alpha = Math.acos(Vector.dot(prevNormal, nextNormal)),\n                theta = alpha / precision;\n\n            for (var j = 0; j < precision; j++) {\n                newVertices.push(Vector.add(Vector.rotate(radiusVector, theta * j), scaledVertex));\n            }\n        }\n\n        return newVertices;\n    };\n\n    /**\n     * Sorts the input vertices into clockwise order in place.\n     * @method clockwiseSort\n     * @param {vertices} vertices\n     * @return {vertices} vertices\n     */\n    Vertices.clockwiseSort = function(vertices) {\n        var centre = Vertices.mean(vertices);\n\n        vertices.sort(function(vertexA, vertexB) {\n            return Vector.angle(centre, vertexA) - Vector.angle(centre, vertexB);\n        });\n\n        return vertices;\n    };\n\n    /**\n     * Returns true if the vertices form a convex shape (vertices must be in clockwise order).\n     * @method isConvex\n     * @param {vertices} vertices\n     * @return {bool} `true` if the `vertices` are convex, `false` if not (or `null` if not computable).\n     */\n    Vertices.isConvex = function(vertices) {\n        // http://paulbourke.net/geometry/polygonmesh/\n        // Copyright (c) Paul Bourke (use permitted)\n\n        var flag = 0,\n            n = vertices.length,\n            i,\n            j,\n            k,\n            z;\n\n        if (n < 3)\n            return null;\n\n        for (i = 0; i < n; i++) {\n            j = (i + 1) % n;\n            k = (i + 2) % n;\n            z = (vertices[j].x - vertices[i].x) * (vertices[k].y - vertices[j].y);\n            z -= (vertices[j].y - vertices[i].y) * (vertices[k].x - vertices[j].x);\n\n            if (z < 0) {\n                flag |= 1;\n            } else if (z > 0) {\n                flag |= 2;\n            }\n\n            if (flag === 3) {\n                return false;\n            }\n        }\n\n        if (flag !== 0){\n            return true;\n        } else {\n            return null;\n        }\n    };\n\n    /**\n     * Returns the convex hull of the input vertices as a new array of points.\n     * @method hull\n     * @param {vertices} vertices\n     * @return [vertex] vertices\n     */\n    Vertices.hull = function(vertices) {\n        // http://geomalgorithms.com/a10-_hull-1.html\n\n        var upper = [],\n            lower = [], \n            vertex,\n            i;\n\n        // sort vertices on x-axis (y-axis for ties)\n        vertices = vertices.slice(0);\n        vertices.sort(function(vertexA, vertexB) {\n            var dx = vertexA.x - vertexB.x;\n            return dx !== 0 ? dx : vertexA.y - vertexB.y;\n        });\n\n        // build lower hull\n        for (i = 0; i < vertices.length; i += 1) {\n            vertex = vertices[i];\n\n            while (lower.length >= 2 \n                   && Vector.cross3(lower[lower.length - 2], lower[lower.length - 1], vertex) <= 0) {\n                lower.pop();\n            }\n\n            lower.push(vertex);\n        }\n\n        // build upper hull\n        for (i = vertices.length - 1; i >= 0; i -= 1) {\n            vertex = vertices[i];\n\n            while (upper.length >= 2 \n                   && Vector.cross3(upper[upper.length - 2], upper[upper.length - 1], vertex) <= 0) {\n                upper.pop();\n            }\n\n            upper.push(vertex);\n        }\n\n        // concatenation of the lower and upper hulls gives the convex hull\n        // omit last points because they are repeated at the beginning of the other list\n        upper.pop();\n        lower.pop();\n\n        return upper.concat(lower);\n    };\n\n})();\n\n},{\"../core/Common\":14,\"../geometry/Vector\":28}],30:[function(_dereq_,module,exports){\nvar Matter = module.exports = _dereq_('../core/Matter');\n\nMatter.Body = _dereq_('../body/Body');\nMatter.Composite = _dereq_('../body/Composite');\nMatter.World = _dereq_('../body/World');\n\nMatter.Contact = _dereq_('../collision/Contact');\nMatter.Detector = _dereq_('../collision/Detector');\nMatter.Grid = _dereq_('../collision/Grid');\nMatter.Pairs = _dereq_('../collision/Pairs');\nMatter.Pair = _dereq_('../collision/Pair');\nMatter.Query = _dereq_('../collision/Query');\nMatter.Resolver = _dereq_('../collision/Resolver');\nMatter.SAT = _dereq_('../collision/SAT');\n\nMatter.Constraint = _dereq_('../constraint/Constraint');\nMatter.MouseConstraint = _dereq_('../constraint/MouseConstraint');\n\nMatter.Common = _dereq_('../core/Common');\nMatter.Engine = _dereq_('../core/Engine');\nMatter.Events = _dereq_('../core/Events');\nMatter.Mouse = _dereq_('../core/Mouse');\nMatter.Runner = _dereq_('../core/Runner');\nMatter.Sleeping = _dereq_('../core/Sleeping');\nMatter.Plugin = _dereq_('../core/Plugin');\n\n\nMatter.Bodies = _dereq_('../factory/Bodies');\nMatter.Composites = _dereq_('../factory/Composites');\n\nMatter.Axes = _dereq_('../geometry/Axes');\nMatter.Bounds = _dereq_('../geometry/Bounds');\nMatter.Svg = _dereq_('../geometry/Svg');\nMatter.Vector = _dereq_('../geometry/Vector');\nMatter.Vertices = _dereq_('../geometry/Vertices');\n\nMatter.Render = _dereq_('../render/Render');\nMatter.RenderPixi = _dereq_('../render/RenderPixi');\n\n// aliases\n\nMatter.World.add = Matter.Composite.add;\nMatter.World.remove = Matter.Composite.remove;\nMatter.World.addComposite = Matter.Composite.addComposite;\nMatter.World.addBody = Matter.Composite.addBody;\nMatter.World.addConstraint = Matter.Composite.addConstraint;\nMatter.World.clear = Matter.Composite.clear;\nMatter.Engine.run = Matter.Runner.run;\n\n},{\"../body/Body\":1,\"../body/Composite\":2,\"../body/World\":3,\"../collision/Contact\":4,\"../collision/Detector\":5,\"../collision/Grid\":6,\"../collision/Pair\":7,\"../collision/Pairs\":8,\"../collision/Query\":9,\"../collision/Resolver\":10,\"../collision/SAT\":11,\"../constraint/Constraint\":12,\"../constraint/MouseConstraint\":13,\"../core/Common\":14,\"../core/Engine\":15,\"../core/Events\":16,\"../core/Matter\":17,\"../core/Metrics\":18,\"../core/Mouse\":19,\"../core/Plugin\":20,\"../core/Runner\":21,\"../core/Sleeping\":22,\"../factory/Bodies\":23,\"../factory/Composites\":24,\"../geometry/Axes\":25,\"../geometry/Bounds\":26,\"../geometry/Svg\":27,\"../geometry/Vector\":28,\"../geometry/Vertices\":29,\"../render/Render\":31,\"../render/RenderPixi\":32}],31:[function(_dereq_,module,exports){\n/**\n* The `Matter.Render` module is a simple HTML5 canvas based renderer for visualising instances of `Matter.Engine`.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* It includes a number of drawing options including wireframe, vector with support for sprites and viewports.\n*\n* @class Render\n*/\n\nvar Render = {};\n\nmodule.exports = Render;\n\nvar Common = _dereq_('../core/Common');\nvar Composite = _dereq_('../body/Composite');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Events = _dereq_('../core/Events');\nvar Grid = _dereq_('../collision/Grid');\nvar Vector = _dereq_('../geometry/Vector');\nvar Mouse = _dereq_('../core/Mouse');\n\n(function() {\n    \n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame \n                                      || function(callback){ window.setTimeout(function() { callback(Common.now()); }, 1000 / 60); };\n   \n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame \n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    /**\n     * Creates a new renderer. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {render} A new renderer\n     */\n    Render.create = function(options) {\n        var defaults = {\n            controller: Render,\n            engine: null,\n            element: null,\n            canvas: null,\n            mouse: null,\n            frameRequestId: null,\n            options: {\n                width: 800,\n                height: 600,\n                pixelRatio: 1,\n                background: '#18181d',\n                wireframeBackground: '#0f0f13',\n                hasBounds: !!options.bounds,\n                enabled: true,\n                wireframes: true,\n                showSleeping: true,\n                showDebug: false,\n                showBroadphase: false,\n                showBounds: false,\n                showVelocity: false,\n                showCollisions: false,\n                showSeparations: false,\n                showAxes: false,\n                showPositions: false,\n                showAngleIndicator: false,\n                showIds: false,\n                showShadows: false,\n                showVertexNumbers: false,\n                showConvexHulls: false,\n                showInternalEdges: false,\n                showMousePosition: false\n            }\n        };\n\n        var render = Common.extend(defaults, options);\n\n        if (render.canvas) {\n            render.canvas.width = render.options.width || render.canvas.width;\n            render.canvas.height = render.options.height || render.canvas.height;\n        }\n\n        render.mouse = options.mouse;\n        render.engine = options.engine;\n        render.canvas = render.canvas || _createCanvas(render.options.width, render.options.height);\n        render.context = render.canvas.getContext('2d');\n        render.textures = {};\n\n        render.bounds = render.bounds || { \n            min: { \n                x: 0,\n                y: 0\n            }, \n            max: { \n                x: render.canvas.width,\n                y: render.canvas.height\n            }\n        };\n\n        if (render.options.pixelRatio !== 1) {\n            Render.setPixelRatio(render, render.options.pixelRatio);\n        }\n\n        if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n        } else {\n            Common.log('Render.create: options.element was undefined, render.canvas was created but not appended', 'warn');\n        }\n\n        return render;\n    };\n\n    /**\n     * Continuously updates the render canvas on the `requestAnimationFrame` event.\n     * @method run\n     * @param {render} render\n     */\n    Render.run = function(render) {\n        (function loop(time){\n            render.frameRequestId = _requestAnimationFrame(loop);\n            Render.world(render);\n        })();\n    };\n\n    /**\n     * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n     * @method stop\n     * @param {render} render\n     */\n    Render.stop = function(render) {\n        _cancelAnimationFrame(render.frameRequestId);\n    };\n\n    /**\n     * Sets the pixel ratio of the renderer and updates the canvas.\n     * To automatically detect the correct ratio, pass the string `'auto'` for `pixelRatio`.\n     * @method setPixelRatio\n     * @param {render} render\n     * @param {number} pixelRatio\n     */\n    Render.setPixelRatio = function(render, pixelRatio) {\n        var options = render.options,\n            canvas = render.canvas;\n\n        if (pixelRatio === 'auto') {\n            pixelRatio = _getPixelRatio(canvas);\n        }\n\n        options.pixelRatio = pixelRatio;\n        canvas.setAttribute('data-pixel-ratio', pixelRatio);\n        canvas.width = options.width * pixelRatio;\n        canvas.height = options.height * pixelRatio;\n        canvas.style.width = options.width + 'px';\n        canvas.style.height = options.height + 'px';\n        render.context.scale(pixelRatio, pixelRatio);\n    };\n\n    /**\n     * Positions and sizes the viewport around the given object bounds.\n     * Objects must have at least one of the following properties:\n     * - `object.bounds`\n     * - `object.position`\n     * - `object.min` and `object.max`\n     * - `object.x` and `object.y`\n     * @method lookAt\n     * @param {render} render\n     * @param {object[]} objects\n     * @param {vector} [padding]\n     * @param {bool} [center=true]\n     */\n    Render.lookAt = function(render, objects, padding, center) {\n        center = typeof center !== 'undefined' ? center : true;\n        objects = Common.isArray(objects) ? objects : [objects];\n        padding = padding || {\n            x: 0,\n            y: 0\n        };\n\n        // find bounds of all objects\n        var bounds = {\n            min: { x: Infinity, y: Infinity },\n            max: { x: -Infinity, y: -Infinity }\n        };\n\n        for (var i = 0; i < objects.length; i += 1) {\n            var object = objects[i],\n                min = object.bounds ? object.bounds.min : (object.min || object.position || object),\n                max = object.bounds ? object.bounds.max : (object.max || object.position || object); \n\n            if (min && max) { \n                if (min.x < bounds.min.x) \n                    bounds.min.x = min.x;\n                    \n                if (max.x > bounds.max.x) \n                    bounds.max.x = max.x;\n\n                if (min.y < bounds.min.y) \n                    bounds.min.y = min.y;\n\n                if (max.y > bounds.max.y) \n                    bounds.max.y = max.y;\n            }\n        }\n\n        // find ratios\n        var width = (bounds.max.x - bounds.min.x) + 2 * padding.x,\n            height = (bounds.max.y - bounds.min.y) + 2 * padding.y,\n            viewHeight = render.canvas.height,\n            viewWidth = render.canvas.width,\n            outerRatio = viewWidth / viewHeight,\n            innerRatio = width / height,\n            scaleX = 1,\n            scaleY = 1;\n\n        // find scale factor\n        if (innerRatio > outerRatio) {\n            scaleY = innerRatio / outerRatio;\n        } else {\n            scaleX = outerRatio / innerRatio;\n        }\n\n        // enable bounds\n        render.options.hasBounds = true;\n\n        // position and size\n        render.bounds.min.x = bounds.min.x;\n        render.bounds.max.x = bounds.min.x + width * scaleX;\n        render.bounds.min.y = bounds.min.y;\n        render.bounds.max.y = bounds.min.y + height * scaleY;\n\n        // center\n        if (center) {\n            render.bounds.min.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.max.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.min.y += height * 0.5 - (height * scaleY) * 0.5;\n            render.bounds.max.y += height * 0.5 - (height * scaleY) * 0.5;\n        }\n\n        // padding\n        render.bounds.min.x -= padding.x;\n        render.bounds.max.x -= padding.x;\n        render.bounds.min.y -= padding.y;\n        render.bounds.max.y -= padding.y;\n\n        // update mouse\n        if (render.mouse) {\n            Mouse.setScale(render.mouse, {\n                x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n                y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n            });\n\n            Mouse.setOffset(render.mouse, render.bounds.min);\n        }\n    };\n\n    /**\n     * Applies viewport transforms based on `render.bounds` to a render context.\n     * @method startViewTransform\n     * @param {render} render\n     */\n    Render.startViewTransform = function(render) {\n        var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n            boundsHeight = render.bounds.max.y - render.bounds.min.y,\n            boundsScaleX = boundsWidth / render.options.width,\n            boundsScaleY = boundsHeight / render.options.height;\n\n        render.context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n        render.context.translate(-render.bounds.min.x, -render.bounds.min.y);\n    };\n\n    /**\n     * Resets all transforms on the render context.\n     * @method endViewTransform\n     * @param {render} render\n     */\n    Render.endViewTransform = function(render) {\n        render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n    };\n\n    /**\n     * Renders the given `engine`'s `Matter.World` object.\n     * This is the entry point for all rendering and should be called every time the scene changes.\n     * @method world\n     * @param {render} render\n     */\n    Render.world = function(render) {\n        var engine = render.engine,\n            world = engine.world,\n            canvas = render.canvas,\n            context = render.context,\n            options = render.options,\n            allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world),\n            background = options.wireframes ? options.wireframeBackground : options.background,\n            bodies = [],\n            constraints = [],\n            i;\n\n        var event = {\n            timestamp: engine.timing.timestamp\n        };\n\n        Events.trigger(render, 'beforeRender', event);\n\n        // apply background if it has changed\n        if (render.currentBackground !== background)\n            _applyBackground(render, background);\n\n        // clear the canvas with a transparent fill, to allow the canvas background to show\n        context.globalCompositeOperation = 'source-in';\n        context.fillStyle = \"transparent\";\n        context.fillRect(0, 0, canvas.width, canvas.height);\n        context.globalCompositeOperation = 'source-over';\n\n        // handle bounds\n        if (options.hasBounds) {\n            // filter out bodies that are not in view\n            for (i = 0; i < allBodies.length; i++) {\n                var body = allBodies[i];\n                if (Bounds.overlaps(body.bounds, render.bounds))\n                    bodies.push(body);\n            }\n\n            // filter out constraints that are not in view\n            for (i = 0; i < allConstraints.length; i++) {\n                var constraint = allConstraints[i],\n                    bodyA = constraint.bodyA,\n                    bodyB = constraint.bodyB,\n                    pointAWorld = constraint.pointA,\n                    pointBWorld = constraint.pointB;\n\n                if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n                if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n\n                if (!pointAWorld || !pointBWorld)\n                    continue;\n\n                if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld))\n                    constraints.push(constraint);\n            }\n\n            // transform the view\n            Render.startViewTransform(render);\n\n            // update mouse\n            if (render.mouse) {\n                Mouse.setScale(render.mouse, {\n                    x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n                    y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n                });\n\n                Mouse.setOffset(render.mouse, render.bounds.min);\n            }\n        } else {\n            constraints = allConstraints;\n            bodies = allBodies;\n        }\n\n        if (!options.wireframes || (engine.enableSleeping && options.showSleeping)) {\n            // fully featured rendering of bodies\n            Render.bodies(render, bodies, context);\n        } else {\n            if (options.showConvexHulls)\n                Render.bodyConvexHulls(render, bodies, context);\n\n            // optimised method for wireframes only\n            Render.bodyWireframes(render, bodies, context);\n        }\n\n        if (options.showBounds)\n            Render.bodyBounds(render, bodies, context);\n\n        if (options.showAxes || options.showAngleIndicator)\n            Render.bodyAxes(render, bodies, context);\n        \n        if (options.showPositions)\n            Render.bodyPositions(render, bodies, context);\n\n        if (options.showVelocity)\n            Render.bodyVelocity(render, bodies, context);\n\n        if (options.showIds)\n            Render.bodyIds(render, bodies, context);\n\n        if (options.showSeparations)\n            Render.separations(render, engine.pairs.list, context);\n\n        if (options.showCollisions)\n            Render.collisions(render, engine.pairs.list, context);\n\n        if (options.showVertexNumbers)\n            Render.vertexNumbers(render, bodies, context);\n\n        if (options.showMousePosition)\n            Render.mousePosition(render, render.mouse, context);\n\n        Render.constraints(constraints, context);\n\n        if (options.showBroadphase && engine.broadphase.controller === Grid)\n            Render.grid(render, engine.broadphase, context);\n\n        if (options.showDebug)\n            Render.debug(render, context);\n\n        if (options.hasBounds) {\n            // revert view transforms\n            Render.endViewTransform(render);\n        }\n\n        Events.trigger(render, 'afterRender', event);\n    };\n\n    /**\n     * Description\n     * @private\n     * @method debug\n     * @param {render} render\n     * @param {RenderingContext} context\n     */\n    Render.debug = function(render, context) {\n        var c = context,\n            engine = render.engine,\n            world = engine.world,\n            metrics = engine.metrics,\n            options = render.options,\n            bodies = Composite.allBodies(world),\n            space = \"    \";\n\n        if (engine.timing.timestamp - (render.debugTimestamp || 0) >= 500) {\n            var text = \"\";\n\n            if (metrics.timing) {\n                text += \"fps: \" + Math.round(metrics.timing.fps) + space;\n            }\n\n\n            render.debugString = text;\n            render.debugTimestamp = engine.timing.timestamp;\n        }\n\n        if (render.debugString) {\n            c.font = \"12px Arial\";\n\n            if (options.wireframes) {\n                c.fillStyle = 'rgba(255,255,255,0.5)';\n            } else {\n                c.fillStyle = 'rgba(0,0,0,0.5)';\n            }\n\n            var split = render.debugString.split('\\n');\n\n            for (var i = 0; i < split.length; i++) {\n                c.fillText(split[i], 50, 50 + i * 18);\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method constraints\n     * @param {constraint[]} constraints\n     * @param {RenderingContext} context\n     */\n    Render.constraints = function(constraints, context) {\n        var c = context;\n\n        for (var i = 0; i < constraints.length; i++) {\n            var constraint = constraints[i];\n\n            if (!constraint.render.visible || !constraint.pointA || !constraint.pointB)\n                continue;\n\n            var bodyA = constraint.bodyA,\n                bodyB = constraint.bodyB,\n                start,\n                end;\n\n            if (bodyA) {\n                start = Vector.add(bodyA.position, constraint.pointA);\n            } else {\n                start = constraint.pointA;\n            }\n\n            if (constraint.render.type === 'pin') {\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n            } else {\n                if (bodyB) {\n                    end = Vector.add(bodyB.position, constraint.pointB);\n                } else {\n                    end = constraint.pointB;\n                }\n\n                c.beginPath();\n                c.moveTo(start.x, start.y);\n\n                if (constraint.render.type === 'spring') {\n                    var delta = Vector.sub(end, start),\n                        normal = Vector.perp(Vector.normalise(delta)),\n                        coils = Math.ceil(Common.clamp(constraint.length / 5, 12, 20)),\n                        offset;\n\n                    for (var j = 1; j < coils; j += 1) {\n                        offset = j % 2 === 0 ? 1 : -1;\n\n                        c.lineTo(\n                            start.x + delta.x * (j / coils) + normal.x * offset * 4,\n                            start.y + delta.y * (j / coils) + normal.y * offset * 4\n                        );\n                    }\n                }\n\n                c.lineTo(end.x, end.y);\n            }\n\n            if (constraint.render.lineWidth) {\n                c.lineWidth = constraint.render.lineWidth;\n                c.strokeStyle = constraint.render.strokeStyle;\n                c.stroke();\n            }\n\n            if (constraint.render.anchors) {\n                c.fillStyle = constraint.render.strokeStyle;\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.arc(end.x, end.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n                c.fill();\n            }\n        }\n    };\n    \n    /**\n     * Description\n     * @private\n     * @method bodyShadows\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyShadows = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            if (body.circleRadius) {\n                c.beginPath();\n                c.arc(body.position.x, body.position.y, body.circleRadius, 0, 2 * Math.PI);\n                c.closePath();\n            } else {\n                c.beginPath();\n                c.moveTo(body.vertices[0].x, body.vertices[0].y);\n                for (var j = 1; j < body.vertices.length; j++) {\n                    c.lineTo(body.vertices[j].x, body.vertices[j].y);\n                }\n                c.closePath();\n            }\n\n            var distanceX = body.position.x - render.options.width * 0.5,\n                distanceY = body.position.y - render.options.height * 0.2,\n                distance = Math.abs(distanceX) + Math.abs(distanceY);\n\n            c.shadowColor = 'rgba(0,0,0,0.15)';\n            c.shadowOffsetX = 0.05 * distanceX;\n            c.shadowOffsetY = 0.05 * distanceY;\n            c.shadowBlur = 1 + 12 * Math.min(1, distance / 1000);\n\n            c.fill();\n\n            c.shadowColor = null;\n            c.shadowOffsetX = null;\n            c.shadowOffsetY = null;\n            c.shadowBlur = null;\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method bodies\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodies = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            showInternalEdges = options.showInternalEdges || !options.wireframes,\n            body,\n            part,\n            i,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                if (!part.render.visible)\n                    continue;\n\n                if (options.showSleeping && body.isSleeping) {\n                    c.globalAlpha = 0.5 * part.render.opacity;\n                } else if (part.render.opacity !== 1) {\n                    c.globalAlpha = part.render.opacity;\n                }\n\n                if (part.render.sprite && part.render.sprite.texture && !options.wireframes) {\n                    // part sprite\n                    var sprite = part.render.sprite,\n                        texture = _getTexture(render, sprite.texture);\n\n                    c.translate(part.position.x, part.position.y); \n                    c.rotate(part.angle);\n\n                    c.drawImage(\n                        texture,\n                        texture.width * -sprite.xOffset * sprite.xScale, \n                        texture.height * -sprite.yOffset * sprite.yScale, \n                        texture.width * sprite.xScale, \n                        texture.height * sprite.yScale\n                    );\n\n                    // revert translation, hopefully faster than save / restore\n                    c.rotate(-part.angle);\n                    c.translate(-part.position.x, -part.position.y); \n                } else {\n                    // part polygon\n                    if (part.circleRadius) {\n                        c.beginPath();\n                        c.arc(part.position.x, part.position.y, part.circleRadius, 0, 2 * Math.PI);\n                    } else {\n                        c.beginPath();\n                        c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                        for (var j = 1; j < part.vertices.length; j++) {\n                            if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                                c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                            } else {\n                                c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                            }\n\n                            if (part.vertices[j].isInternal && !showInternalEdges) {\n                                c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                            }\n                        }\n                        \n                        c.lineTo(part.vertices[0].x, part.vertices[0].y);\n                        c.closePath();\n                    }\n\n                    if (!options.wireframes) {\n                        c.fillStyle = part.render.fillStyle;\n\n                        if (part.render.lineWidth) {\n                            c.lineWidth = part.render.lineWidth;\n                            c.strokeStyle = part.render.strokeStyle;\n                            c.stroke();\n                        }\n\n                        c.fill();\n                    } else {\n                        c.lineWidth = 1;\n                        c.strokeStyle = '#bbb';\n                        c.stroke();\n                    }\n                }\n\n                c.globalAlpha = 1;\n            }\n        }\n    };\n\n    /**\n     * Optimised method for drawing body wireframes in one pass\n     * @private\n     * @method bodyWireframes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyWireframes = function(render, bodies, context) {\n        var c = context,\n            showInternalEdges = render.options.showInternalEdges,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render all bodies\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                for (j = 1; j < part.vertices.length; j++) {\n                    if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                        c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                    } else {\n                        c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                    }\n\n                    if (part.vertices[j].isInternal && !showInternalEdges) {\n                        c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                    }\n                }\n                \n                c.lineTo(part.vertices[0].x, part.vertices[0].y);\n            }\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = '#bbb';\n        c.stroke();\n    };\n\n    /**\n     * Optimised method for drawing body convex hull wireframes in one pass\n     * @private\n     * @method bodyConvexHulls\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyConvexHulls = function(render, bodies, context) {\n        var c = context,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render convex hulls\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible || body.parts.length === 1)\n                continue;\n\n            c.moveTo(body.vertices[0].x, body.vertices[0].y);\n\n            for (j = 1; j < body.vertices.length; j++) {\n                c.lineTo(body.vertices[j].x, body.vertices[j].y);\n            }\n            \n            c.lineTo(body.vertices[0].x, body.vertices[0].y);\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = 'rgba(255,255,255,0.2)';\n        c.stroke();\n    };\n\n    /**\n     * Renders body vertex numbers.\n     * @private\n     * @method vertexNumbers\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.vertexNumbers = function(render, bodies, context) {\n        var c = context,\n            i,\n            j,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            var parts = bodies[i].parts;\n            for (k = parts.length > 1 ? 1 : 0; k < parts.length; k++) {\n                var part = parts[k];\n                for (j = 0; j < part.vertices.length; j++) {\n                    c.fillStyle = 'rgba(255,255,255,0.2)';\n                    c.fillText(i + '_' + j, part.position.x + (part.vertices[j].x - part.position.x) * 0.8, part.position.y + (part.vertices[j].y - part.position.y) * 0.8);\n                }\n            }\n        }\n    };\n\n    /**\n     * Renders mouse position.\n     * @private\n     * @method mousePosition\n     * @param {render} render\n     * @param {mouse} mouse\n     * @param {RenderingContext} context\n     */\n    Render.mousePosition = function(render, mouse, context) {\n        var c = context;\n        c.fillStyle = 'rgba(255,255,255,0.8)';\n        c.fillText(mouse.position.x + '  ' + mouse.position.y, mouse.position.x + 5, mouse.position.y - 5);\n    };\n\n    /**\n     * Draws body bounds\n     * @private\n     * @method bodyBounds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyBounds = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.render.visible) {\n                var parts = bodies[i].parts;\n                for (var j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    var part = parts[j];\n                    c.rect(part.bounds.min.x, part.bounds.min.y, part.bounds.max.x - part.bounds.min.x, part.bounds.max.y - part.bounds.min.y);\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,255,255,0.08)';\n        } else {\n            c.strokeStyle = 'rgba(0,0,0,0.1)';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Draws body angle indicators and axes\n     * @private\n     * @method bodyAxes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyAxes = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                parts = body.parts;\n\n            if (!body.render.visible)\n                continue;\n\n            if (options.showAxes) {\n                // render all axes\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        var axis = part.axes[k];\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo(part.position.x + axis.x * 20, part.position.y + axis.y * 20);\n                    }\n                }\n            } else {\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        // render a single axis indicator\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo((part.vertices[0].x + part.vertices[part.vertices.length-1].x) / 2, \n                                 (part.vertices[0].y + part.vertices[part.vertices.length-1].y) / 2);\n                    }\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'indianred';\n            c.lineWidth = 1;\n        } else {\n            c.strokeStyle = 'rgba(255, 255, 255, 0.4)';\n            c.globalCompositeOperation = 'overlay';\n            c.lineWidth = 2;\n        }\n\n        c.stroke();\n        c.globalCompositeOperation = 'source-over';\n    };\n\n    /**\n     * Draws body positions\n     * @private\n     * @method bodyPositions\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyPositions = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            body,\n            part,\n            i,\n            k;\n\n        c.beginPath();\n\n        // render current positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n                c.arc(part.position.x, part.position.y, 3, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'indianred';\n        } else {\n            c.fillStyle = 'rgba(0,0,0,0.5)';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render previous positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (body.render.visible) {\n                c.arc(body.positionPrev.x, body.positionPrev.y, 2, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        c.fillStyle = 'rgba(255,165,0,0.8)';\n        c.fill();\n    };\n\n    /**\n     * Draws body velocity\n     * @private\n     * @method bodyVelocity\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyVelocity = function(render, bodies, context) {\n        var c = context;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            c.moveTo(body.position.x, body.position.y);\n            c.lineTo(body.position.x + (body.position.x - body.positionPrev.x) * 2, body.position.y + (body.position.y - body.positionPrev.y) * 2);\n        }\n\n        c.lineWidth = 3;\n        c.strokeStyle = 'cornflowerblue';\n        c.stroke();\n    };\n\n    /**\n     * Draws body ids\n     * @private\n     * @method bodyIds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyIds = function(render, bodies, context) {\n        var c = context,\n            i,\n            j;\n\n        for (i = 0; i < bodies.length; i++) {\n            if (!bodies[i].render.visible)\n                continue;\n\n            var parts = bodies[i].parts;\n            for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                var part = parts[j];\n                c.font = \"12px Arial\";\n                c.fillStyle = 'rgba(255,255,255,0.5)';\n                c.fillText(part.id, part.position.x + 10, part.position.y - 10);\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method collisions\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.collisions = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render collision positions\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            for (j = 0; j < pair.activeContacts.length; j++) {\n                var contact = pair.activeContacts[j],\n                    vertex = contact.vertex;\n                c.rect(vertex.x - 1.5, vertex.y - 1.5, 3.5, 3.5);\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'rgba(255,255,255,0.7)';\n        } else {\n            c.fillStyle = 'orange';\n        }\n        c.fill();\n\n        c.beginPath();\n            \n        // render collision normals\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n\n            if (pair.activeContacts.length > 0) {\n                var normalPosX = pair.activeContacts[0].vertex.x,\n                    normalPosY = pair.activeContacts[0].vertex.y;\n\n                if (pair.activeContacts.length === 2) {\n                    normalPosX = (pair.activeContacts[0].vertex.x + pair.activeContacts[1].vertex.x) / 2;\n                    normalPosY = (pair.activeContacts[0].vertex.y + pair.activeContacts[1].vertex.y) / 2;\n                }\n                \n                if (collision.bodyB === collision.supports[0].body || collision.bodyA.isStatic === true) {\n                    c.moveTo(normalPosX - collision.normal.x * 8, normalPosY - collision.normal.y * 8);\n                } else {\n                    c.moveTo(normalPosX + collision.normal.x * 8, normalPosY + collision.normal.y * 8);\n                }\n\n                c.lineTo(normalPosX, normalPosY);\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.7)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method separations\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.separations = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render separations\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.bodyA;\n            bodyB = collision.bodyB;\n\n            var k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyB.isStatic) k = 0;\n\n            c.moveTo(bodyB.position.x, bodyB.position.y);\n            c.lineTo(bodyB.position.x - collision.penetration.x * k, bodyB.position.y - collision.penetration.y * k);\n\n            k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyA.isStatic) k = 0;\n\n            c.moveTo(bodyA.position.x, bodyA.position.y);\n            c.lineTo(bodyA.position.x + collision.penetration.x * k, bodyA.position.y + collision.penetration.y * k);\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.5)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method grid\n     * @param {render} render\n     * @param {grid} grid\n     * @param {RenderingContext} context\n     */\n    Render.grid = function(render, grid, context) {\n        var c = context,\n            options = render.options;\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,180,0,0.1)';\n        } else {\n            c.strokeStyle = 'rgba(255,180,0,0.5)';\n        }\n\n        c.beginPath();\n\n        var bucketKeys = Common.keys(grid.buckets);\n\n        for (var i = 0; i < bucketKeys.length; i++) {\n            var bucketId = bucketKeys[i];\n\n            if (grid.buckets[bucketId].length < 2)\n                continue;\n\n            var region = bucketId.split(/C|R/);\n            c.rect(0.5 + parseInt(region[1], 10) * grid.bucketWidth, \n                    0.5 + parseInt(region[2], 10) * grid.bucketHeight, \n                    grid.bucketWidth, \n                    grid.bucketHeight);\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method inspector\n     * @param {inspector} inspector\n     * @param {RenderingContext} context\n     */\n    Render.inspector = function(inspector, context) {\n        var engine = inspector.engine,\n            selected = inspector.selected,\n            render = inspector.render,\n            options = render.options,\n            bounds;\n\n        if (options.hasBounds) {\n            var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n                boundsHeight = render.bounds.max.y - render.bounds.min.y,\n                boundsScaleX = boundsWidth / render.options.width,\n                boundsScaleY = boundsHeight / render.options.height;\n            \n            context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n            context.translate(-render.bounds.min.x, -render.bounds.min.y);\n        }\n\n        for (var i = 0; i < selected.length; i++) {\n            var item = selected[i].data;\n\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.9)';\n            context.setLineDash([1,2]);\n\n            switch (item.type) {\n\n            case 'body':\n\n                // render body selections\n                bounds = item.bounds;\n                context.beginPath();\n                context.rect(Math.floor(bounds.min.x - 3), Math.floor(bounds.min.y - 3), \n                             Math.floor(bounds.max.x - bounds.min.x + 6), Math.floor(bounds.max.y - bounds.min.y + 6));\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            case 'constraint':\n\n                // render constraint selections\n                var point = item.pointA;\n                if (item.bodyA)\n                    point = item.pointB;\n                context.beginPath();\n                context.arc(point.x, point.y, 10, 0, 2 * Math.PI);\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            }\n\n            context.setLineDash([]);\n            context.translate(-0.5, -0.5);\n        }\n\n        // render selection region\n        if (inspector.selectStart !== null) {\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.6)';\n            context.fillStyle = 'rgba(255,165,0,0.1)';\n            bounds = inspector.selectBounds;\n            context.beginPath();\n            context.rect(Math.floor(bounds.min.x), Math.floor(bounds.min.y), \n                         Math.floor(bounds.max.x - bounds.min.x), Math.floor(bounds.max.y - bounds.min.y));\n            context.closePath();\n            context.stroke();\n            context.fill();\n            context.translate(-0.5, -0.5);\n        }\n\n        if (options.hasBounds)\n            context.setTransform(1, 0, 0, 1, 0, 0);\n    };\n\n    /**\n     * Description\n     * @method _createCanvas\n     * @private\n     * @param {} width\n     * @param {} height\n     * @return canvas\n     */\n    var _createCanvas = function(width, height) {\n        var canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        canvas.oncontextmenu = function() { return false; };\n        canvas.onselectstart = function() { return false; };\n        return canvas;\n    };\n\n    /**\n     * Gets the pixel ratio of the canvas.\n     * @method _getPixelRatio\n     * @private\n     * @param {HTMLElement} canvas\n     * @return {Number} pixel ratio\n     */\n    var _getPixelRatio = function(canvas) {\n        var context = canvas.getContext('2d'),\n            devicePixelRatio = window.devicePixelRatio || 1,\n            backingStorePixelRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio\n                                      || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio\n                                      || context.backingStorePixelRatio || 1;\n\n        return devicePixelRatio / backingStorePixelRatio;\n    };\n\n    /**\n     * Gets the requested texture (an Image) via its path\n     * @method _getTexture\n     * @private\n     * @param {render} render\n     * @param {string} imagePath\n     * @return {Image} texture\n     */\n    var _getTexture = function(render, imagePath) {\n        var image = render.textures[imagePath];\n\n        if (image)\n            return image;\n\n        image = render.textures[imagePath] = new Image();\n        image.src = imagePath;\n\n        return image;\n    };\n\n    /**\n     * Applies the background to the canvas using CSS.\n     * @method applyBackground\n     * @private\n     * @param {render} render\n     * @param {string} background\n     */\n    var _applyBackground = function(render, background) {\n        var cssBackground = background;\n\n        if (/(jpg|gif|png)$/.test(background))\n            cssBackground = 'url(' + background + ')';\n\n        render.canvas.style.background = cssBackground;\n        render.canvas.style.backgroundSize = \"contain\";\n        render.currentBackground = background;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired before rendering\n    *\n    * @event beforeRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after rendering\n    *\n    * @event afterRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A back-reference to the `Matter.Render` module.\n     *\n     * @property controller\n     * @type render\n     */\n\n    /**\n     * A reference to the `Matter.Engine` instance to be used.\n     *\n     * @property engine\n     * @type engine\n     */\n\n    /**\n     * A reference to the element where the canvas is to be inserted (if `render.canvas` has not been specified)\n     *\n     * @property element\n     * @type HTMLElement\n     * @default null\n     */\n\n    /**\n     * The canvas element to render to. If not specified, one will be created if `render.element` has been specified.\n     *\n     * @property canvas\n     * @type HTMLCanvasElement\n     * @default null\n     */\n\n    /**\n     * The configuration options of the renderer.\n     *\n     * @property options\n     * @type {}\n     */\n\n    /**\n     * The target width in pixels of the `render.canvas` to be created.\n     *\n     * @property options.width\n     * @type number\n     * @default 800\n     */\n\n    /**\n     * The target height in pixels of the `render.canvas` to be created.\n     *\n     * @property options.height\n     * @type number\n     * @default 600\n     */\n\n    /**\n     * A flag that specifies if `render.bounds` should be used when rendering.\n     *\n     * @property options.hasBounds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Bounds` object that specifies the drawing view region. \n     * Rendering will be automatically transformed and scaled to fit within the canvas size (`render.options.width` and `render.options.height`).\n     * This allows for creating views that can pan or zoom around the scene.\n     * You must also set `render.options.hasBounds` to `true` to enable bounded rendering.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n    /**\n     * The 2d rendering context from the `render.canvas` element.\n     *\n     * @property context\n     * @type CanvasRenderingContext2D\n     */\n\n    /**\n     * The sprite texture cache.\n     *\n     * @property textures\n     * @type {}\n     */\n\n})();\n\n},{\"../body/Composite\":2,\"../collision/Grid\":6,\"../core/Common\":14,\"../core/Events\":16,\"../core/Mouse\":19,\"../geometry/Bounds\":26,\"../geometry/Vector\":28}],32:[function(_dereq_,module,exports){\n/**\n* The `Matter.RenderPixi` module is an example renderer using pixi.js.\n* See also `Matter.Render` for a canvas based renderer.\n*\n* @class RenderPixi\n* @deprecated the Matter.RenderPixi module will soon be removed from the Matter.js core.\n* It will likely be moved to its own repository (but maintenance will be limited).\n*/\n\nvar RenderPixi = {};\n\nmodule.exports = RenderPixi;\n\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Composite = _dereq_('../body/Composite');\nvar Common = _dereq_('../core/Common');\nvar Events = _dereq_('../core/Events');\nvar Vector = _dereq_('../geometry/Vector');\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame \n                                      || function(callback){ window.setTimeout(function() { callback(Common.now()); }, 1000 / 60); };\n   \n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame \n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n    \n    /**\n     * Creates a new Pixi.js WebGL renderer\n     * @method create\n     * @param {object} options\n     * @return {RenderPixi} A new renderer\n     * @deprecated\n     */\n    RenderPixi.create = function(options) {\n        Common.warn('RenderPixi.create: Matter.RenderPixi is deprecated (see docs)');\n\n        var defaults = {\n            controller: RenderPixi,\n            engine: null,\n            element: null,\n            frameRequestId: null,\n            canvas: null,\n            renderer: null,\n            container: null,\n            spriteContainer: null,\n            pixiOptions: null,\n            options: {\n                width: 800,\n                height: 600,\n                background: '#fafafa',\n                wireframeBackground: '#222',\n                hasBounds: false,\n                enabled: true,\n                wireframes: true,\n                showSleeping: true,\n                showDebug: false,\n                showBroadphase: false,\n                showBounds: false,\n                showVelocity: false,\n                showCollisions: false,\n                showAxes: false,\n                showPositions: false,\n                showAngleIndicator: false,\n                showIds: false,\n                showShadows: false\n            }\n        };\n\n        var render = Common.extend(defaults, options),\n            transparent = !render.options.wireframes && render.options.background === 'transparent';\n\n        // init pixi\n        render.pixiOptions = render.pixiOptions || {\n            view: render.canvas,\n            transparent: transparent,\n            antialias: true,\n            backgroundColor: options.background\n        };\n\n        render.mouse = options.mouse;\n        render.engine = options.engine;\n        render.renderer = render.renderer || new PIXI.WebGLRenderer(render.options.width, render.options.height, render.pixiOptions);\n        render.container = render.container || new PIXI.Container();\n        render.spriteContainer = render.spriteContainer || new PIXI.Container();\n        render.canvas = render.canvas || render.renderer.view;\n        render.bounds = render.bounds || { \n            min: {\n                x: 0,\n                y: 0\n            }, \n            max: { \n                x: render.options.width,\n                y: render.options.height\n            }\n        };\n\n        // event listeners\n        Events.on(render.engine, 'beforeUpdate', function() {\n            RenderPixi.clear(render);\n        });\n\n        // caches\n        render.textures = {};\n        render.sprites = {};\n        render.primitives = {};\n\n        // use a sprite batch for performance\n        render.container.addChild(render.spriteContainer);\n\n        // insert canvas\n        if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n        } else {\n            Common.warn('No \"render.element\" passed, \"render.canvas\" was not inserted into document.');\n        }\n\n        // prevent menus on canvas\n        render.canvas.oncontextmenu = function() { return false; };\n        render.canvas.onselectstart = function() { return false; };\n\n        return render;\n    };\n\n    /**\n     * Continuously updates the render canvas on the `requestAnimationFrame` event.\n     * @method run\n     * @param {render} render\n     * @deprecated\n     */\n    RenderPixi.run = function(render) {\n        (function loop(time){\n            render.frameRequestId = _requestAnimationFrame(loop);\n            RenderPixi.world(render);\n        })();\n    };\n\n    /**\n     * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n     * @method stop\n     * @param {render} render\n     * @deprecated\n     */\n    RenderPixi.stop = function(render) {\n        _cancelAnimationFrame(render.frameRequestId);\n    };\n\n    /**\n     * Clears the scene graph\n     * @method clear\n     * @param {RenderPixi} render\n     * @deprecated\n     */\n    RenderPixi.clear = function(render) {\n        var container = render.container,\n            spriteContainer = render.spriteContainer;\n\n        // clear stage container\n        while (container.children[0]) { \n            container.removeChild(container.children[0]); \n        }\n\n        // clear sprite batch\n        while (spriteContainer.children[0]) { \n            spriteContainer.removeChild(spriteContainer.children[0]); \n        }\n\n        var bgSprite = render.sprites['bg-0'];\n\n        // clear caches\n        render.textures = {};\n        render.sprites = {};\n        render.primitives = {};\n\n        // set background sprite\n        render.sprites['bg-0'] = bgSprite;\n        if (bgSprite)\n            container.addChildAt(bgSprite, 0);\n\n        // add sprite batch back into container\n        render.container.addChild(render.spriteContainer);\n\n        // reset background state\n        render.currentBackground = null;\n\n        // reset bounds transforms\n        container.scale.set(1, 1);\n        container.position.set(0, 0);\n    };\n\n    /**\n     * Sets the background of the canvas \n     * @method setBackground\n     * @param {RenderPixi} render\n     * @param {string} background\n     * @deprecated\n     */\n    RenderPixi.setBackground = function(render, background) {\n        if (render.currentBackground !== background) {\n            var isColor = background.indexOf && background.indexOf('#') !== -1,\n                bgSprite = render.sprites['bg-0'];\n\n            if (isColor) {\n                // if solid background color\n                var color = Common.colorToNumber(background);\n                render.renderer.backgroundColor = color;\n\n                // remove background sprite if existing\n                if (bgSprite)\n                    render.container.removeChild(bgSprite); \n            } else {\n                // initialise background sprite if needed\n                if (!bgSprite) {\n                    var texture = _getTexture(render, background);\n\n                    bgSprite = render.sprites['bg-0'] = new PIXI.Sprite(texture);\n                    bgSprite.position.x = 0;\n                    bgSprite.position.y = 0;\n                    render.container.addChildAt(bgSprite, 0);\n                }\n            }\n\n            render.currentBackground = background;\n        }\n    };\n\n    /**\n     * Description\n     * @method world\n     * @param {engine} engine\n     * @deprecated\n     */\n    RenderPixi.world = function(render) {\n        var engine = render.engine,\n            world = engine.world,\n            renderer = render.renderer,\n            container = render.container,\n            options = render.options,\n            bodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world),\n            constraints = [],\n            i;\n\n        if (options.wireframes) {\n            RenderPixi.setBackground(render, options.wireframeBackground);\n        } else {\n            RenderPixi.setBackground(render, options.background);\n        }\n\n        // handle bounds\n        var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n            boundsHeight = render.bounds.max.y - render.bounds.min.y,\n            boundsScaleX = boundsWidth / render.options.width,\n            boundsScaleY = boundsHeight / render.options.height;\n\n        if (options.hasBounds) {\n            // Hide bodies that are not in view\n            for (i = 0; i < bodies.length; i++) {\n                var body = bodies[i];\n                body.render.sprite.visible = Bounds.overlaps(body.bounds, render.bounds);\n            }\n\n            // filter out constraints that are not in view\n            for (i = 0; i < allConstraints.length; i++) {\n                var constraint = allConstraints[i],\n                    bodyA = constraint.bodyA,\n                    bodyB = constraint.bodyB,\n                    pointAWorld = constraint.pointA,\n                    pointBWorld = constraint.pointB;\n\n                if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n                if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n\n                if (!pointAWorld || !pointBWorld)\n                    continue;\n\n                if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld))\n                    constraints.push(constraint);\n            }\n\n            // transform the view\n            container.scale.set(1 / boundsScaleX, 1 / boundsScaleY);\n            container.position.set(-render.bounds.min.x * (1 / boundsScaleX), -render.bounds.min.y * (1 / boundsScaleY));\n        } else {\n            constraints = allConstraints;\n        }\n\n        for (i = 0; i < bodies.length; i++)\n            RenderPixi.body(render, bodies[i]);\n\n        for (i = 0; i < constraints.length; i++)\n            RenderPixi.constraint(render, constraints[i]);\n\n        renderer.render(container);\n    };\n\n\n    /**\n     * Description\n     * @method constraint\n     * @param {engine} engine\n     * @param {constraint} constraint\n     * @deprecated\n     */\n    RenderPixi.constraint = function(render, constraint) {\n        var engine = render.engine,\n            bodyA = constraint.bodyA,\n            bodyB = constraint.bodyB,\n            pointA = constraint.pointA,\n            pointB = constraint.pointB,\n            container = render.container,\n            constraintRender = constraint.render,\n            primitiveId = 'c-' + constraint.id,\n            primitive = render.primitives[primitiveId];\n\n        // initialise constraint primitive if not existing\n        if (!primitive)\n            primitive = render.primitives[primitiveId] = new PIXI.Graphics();\n\n        // don't render if constraint does not have two end points\n        if (!constraintRender.visible || !constraint.pointA || !constraint.pointB) {\n            primitive.clear();\n            return;\n        }\n\n        // add to scene graph if not already there\n        if (Common.indexOf(container.children, primitive) === -1)\n            container.addChild(primitive);\n\n        // render the constraint on every update, since they can change dynamically\n        primitive.clear();\n        primitive.beginFill(0, 0);\n        primitive.lineStyle(constraintRender.lineWidth, Common.colorToNumber(constraintRender.strokeStyle), 1);\n        \n        if (bodyA) {\n            primitive.moveTo(bodyA.position.x + pointA.x, bodyA.position.y + pointA.y);\n        } else {\n            primitive.moveTo(pointA.x, pointA.y);\n        }\n\n        if (bodyB) {\n            primitive.lineTo(bodyB.position.x + pointB.x, bodyB.position.y + pointB.y);\n        } else {\n            primitive.lineTo(pointB.x, pointB.y);\n        }\n\n        primitive.endFill();\n    };\n    \n    /**\n     * Description\n     * @method body\n     * @param {engine} engine\n     * @param {body} body\n     * @deprecated\n     */\n    RenderPixi.body = function(render, body) {\n        var engine = render.engine,\n            bodyRender = body.render;\n\n        if (!bodyRender.visible)\n            return;\n\n        if (bodyRender.sprite && bodyRender.sprite.texture) {\n            var spriteId = 'b-' + body.id,\n                sprite = render.sprites[spriteId],\n                spriteContainer = render.spriteContainer;\n\n            // initialise body sprite if not existing\n            if (!sprite)\n                sprite = render.sprites[spriteId] = _createBodySprite(render, body);\n\n            // add to scene graph if not already there\n            if (Common.indexOf(spriteContainer.children, sprite) === -1)\n                spriteContainer.addChild(sprite);\n\n            // update body sprite\n            sprite.position.x = body.position.x;\n            sprite.position.y = body.position.y;\n            sprite.rotation = body.angle;\n            sprite.scale.x = bodyRender.sprite.xScale || 1;\n            sprite.scale.y = bodyRender.sprite.yScale || 1;\n        } else {\n            var primitiveId = 'b-' + body.id,\n                primitive = render.primitives[primitiveId],\n                container = render.container;\n\n            // initialise body primitive if not existing\n            if (!primitive) {\n                primitive = render.primitives[primitiveId] = _createBodyPrimitive(render, body);\n                primitive.initialAngle = body.angle;\n            }\n\n            // add to scene graph if not already there\n            if (Common.indexOf(container.children, primitive) === -1)\n                container.addChild(primitive);\n\n            // update body primitive\n            primitive.position.x = body.position.x;\n            primitive.position.y = body.position.y;\n            primitive.rotation = body.angle - primitive.initialAngle;\n        }\n    };\n\n    /**\n     * Creates a body sprite\n     * @method _createBodySprite\n     * @private\n     * @param {RenderPixi} render\n     * @param {body} body\n     * @return {PIXI.Sprite} sprite\n     * @deprecated\n     */\n    var _createBodySprite = function(render, body) {\n        var bodyRender = body.render,\n            texturePath = bodyRender.sprite.texture,\n            texture = _getTexture(render, texturePath),\n            sprite = new PIXI.Sprite(texture);\n\n        sprite.anchor.x = body.render.sprite.xOffset;\n        sprite.anchor.y = body.render.sprite.yOffset;\n\n        return sprite;\n    };\n\n    /**\n     * Creates a body primitive\n     * @method _createBodyPrimitive\n     * @private\n     * @param {RenderPixi} render\n     * @param {body} body\n     * @return {PIXI.Graphics} graphics\n     * @deprecated\n     */\n    var _createBodyPrimitive = function(render, body) {\n        var bodyRender = body.render,\n            options = render.options,\n            primitive = new PIXI.Graphics(),\n            fillStyle = Common.colorToNumber(bodyRender.fillStyle),\n            strokeStyle = Common.colorToNumber(bodyRender.strokeStyle),\n            strokeStyleIndicator = Common.colorToNumber(bodyRender.strokeStyle),\n            strokeStyleWireframe = Common.colorToNumber('#bbb'),\n            strokeStyleWireframeIndicator = Common.colorToNumber('#CD5C5C'),\n            part;\n\n        primitive.clear();\n\n        // handle compound parts\n        for (var k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n            part = body.parts[k];\n\n            if (!options.wireframes) {\n                primitive.beginFill(fillStyle, 1);\n                primitive.lineStyle(bodyRender.lineWidth, strokeStyle, 1);\n            } else {\n                primitive.beginFill(0, 0);\n                primitive.lineStyle(1, strokeStyleWireframe, 1);\n            }\n\n            primitive.moveTo(part.vertices[0].x - body.position.x, part.vertices[0].y - body.position.y);\n\n            for (var j = 1; j < part.vertices.length; j++) {\n                primitive.lineTo(part.vertices[j].x - body.position.x, part.vertices[j].y - body.position.y);\n            }\n\n            primitive.lineTo(part.vertices[0].x - body.position.x, part.vertices[0].y - body.position.y);\n\n            primitive.endFill();\n\n            // angle indicator\n            if (options.showAngleIndicator || options.showAxes) {\n                primitive.beginFill(0, 0);\n\n                if (options.wireframes) {\n                    primitive.lineStyle(1, strokeStyleWireframeIndicator, 1);\n                } else {\n                    primitive.lineStyle(1, strokeStyleIndicator);\n                }\n\n                primitive.moveTo(part.position.x - body.position.x, part.position.y - body.position.y);\n                primitive.lineTo(((part.vertices[0].x + part.vertices[part.vertices.length-1].x) / 2 - body.position.x), \n                                 ((part.vertices[0].y + part.vertices[part.vertices.length-1].y) / 2 - body.position.y));\n\n                primitive.endFill();\n            }\n        }\n\n        return primitive;\n    };\n\n    /**\n     * Gets the requested texture (a PIXI.Texture) via its path\n     * @method _getTexture\n     * @private\n     * @param {RenderPixi} render\n     * @param {string} imagePath\n     * @return {PIXI.Texture} texture\n     * @deprecated\n     */\n    var _getTexture = function(render, imagePath) {\n        var texture = render.textures[imagePath];\n\n        if (!texture)\n            texture = render.textures[imagePath] = PIXI.Texture.fromImage(imagePath);\n\n        return texture;\n    };\n\n})();\n\n},{\"../body/Composite\":2,\"../core/Common\":14,\"../core/Events\":16,\"../geometry/Bounds\":26,\"../geometry/Vector\":28}]},{},[30])(30)\n});","import { CanvasHolder } from \"./canvasholder\";\r\nimport { World } from \"../../world/world\";\r\nimport { CanvasMouse } from \"./canvasmouse\";\r\nimport { MouseEventHandlerWorldObject } from \"./mouseEventhandlerworldobject\";\r\nimport { WorldDisplay } from \"../worlddisplay\";\r\n\r\n\r\nexport class CanvasHolderHTML implements CanvasHolder\r\n{\r\n\tprivate _isVisable:boolean;\r\n\tprivate _isDrawable:boolean;\r\n\tprivate _canvasName:string;\r\n\tprivate _canvas:HTMLCanvasElement;\r\n\tprivate _context:CanvasRenderingContext2D;\r\n\tprivate _canvasMouse:CanvasMouse;\r\n\t\r\n\tconstructor(canvasName:string,world:World)\r\n\t{\r\n\t\tthis.canvasName = canvasName;\r\n\t\tthis.isVisable = true;\r\n\t\tthis.isDrawable = true;\r\n\t\tthis.canvas = <HTMLCanvasElement>document.getElementById(this.canvasName);\t\t\t\r\n\t\tthis.context = this.canvas.getContext(\"2d\");\r\n\t\tthis.canvasMouse = new CanvasMouse(world,this,new MouseEventHandlerWorldObject());\r\n\t\t/*if (typeof document !== 'undefined')\r\n\t\t{\r\n\t\t\tthis.canvas = document.getElementById(this.canvasName);\t\t\t\r\n\t\t\tthis.context = this.canvas.getContext('2d');\r\n\t\t}*/\r\n\t}\r\n\r\n\tpublic clearCanvas():void {\r\n\t\tif(this.isVisable && this.isDrawable)\r\n\t\t{\r\n\t\t\tthis.context.clearRect(0, 0, this.getWidth(), this.getHeight());\r\n\t\t\tthis.context.fillStyle = WorldDisplay.getColorFromString(\"ffffff\"+\"ff\");\r\n\t\t\tthis.context.fillRect(0, 0, this.getWidth(), this.getHeight());\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getCanvas():HTMLCanvasElement {\r\n\t\treturn(this.canvas);\r\n\t}\r\n\r\n\tpublic getContext():CanvasRenderingContext2D {\r\n\t\treturn(this.context);\r\n\t}\r\n\t\r\n\tpublic getWidth():number\r\n\t{\r\n\t\treturn(this.canvas.width);\r\n\t}\r\n\t\r\n\tpublic getHeight():number\r\n\t{\r\n\t\treturn(this.canvas.height);\r\n\t}\r\n\r\n\tpublic isCanvasVisable(): boolean {\r\n\t\treturn this._isVisable;\r\n\t}\r\n\r\n\tpublic isCanvasDrawable(): boolean {\r\n\t\treturn this._isDrawable;\r\n\t}\r\n\r\n\tpublic get canvasName(): string {\r\n\t\treturn this._canvasName;\r\n\t}\r\n\r\n\tpublic set canvasName(value: string) {\r\n\t\tthis._canvasName = value;\r\n\t}\r\n\r\n\r\n\tpublic get canvas(): HTMLCanvasElement {\r\n\t\treturn this._canvas;\r\n\t}\r\n\r\n\tpublic set canvas(value: HTMLCanvasElement) {\r\n\t\tthis._canvas = value;\r\n\t}\r\n\r\n\tpublic get context(): CanvasRenderingContext2D {\r\n\t\treturn this._context;\r\n\t}\r\n\r\n\tpublic set context(value: CanvasRenderingContext2D) {\r\n\t\tthis._context = value;\r\n\t}\r\n\r\n\tpublic get isVisable(): boolean {\r\n\t\treturn this._isVisable;\r\n\t}\r\n\r\n\tpublic set isVisable(value: boolean) {\r\n\t\tthis._isVisable = value;\r\n\t}\r\n\r\n\tpublic get isDrawable(): boolean {\r\n\t\treturn this._isDrawable;\r\n\t}\r\n\r\n\tpublic set isDrawable(value: boolean) {\r\n\t\tthis._isDrawable = value;\r\n\t}\r\n\r\n\tpublic get canvasMouse(): CanvasMouse {\r\n\t\treturn this._canvasMouse;\r\n\t}\r\n\r\n\tpublic set canvasMouse(value: CanvasMouse) {\r\n\t\tthis._canvasMouse = value;\r\n\t}\r\n\t\r\n\t\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t/*\r\n\tstatic createCanvasHolderFromClientJson(worldDef,json)\r\n\t{\r\n\t  var canvasHolder = new CanvasHolder(json.canavsName,worldDef);\r\n\t  return(canvasHolder);\r\n\t}\r\n\t*/\r\n\t/*\r\n\t  getClientJson()\r\n\t  {\r\n\t\t  var json = {};\r\n\t\t  \r\n\t\t  \r\n\t\t  json.canvasName = this.canvasName;\r\n\t\t  json.origin = this.origin;\r\n\t\t  json.width = this.getWidth();\r\n\t\t  json.height = this.getHeight();\r\n\t\t  json.worldDef = this.worldDef;\r\n\t\t  \r\n\t\t  JSON.stringify(json);\r\n\t\t  return(json)\r\n\t  }\r\n\t*/\r\n\r\n\t/*  \r\n\tgetConnector(connectorDefKey,name)\r\n\t{\r\n\t\tvar connector = this.getConnectorDef(connectorDefKey)(this.worldDef,name);\r\n\t\tconnector.connectorDefKey = connectorDefKey;\r\n\t\treturn(connector);\r\n\t}\r\n\t*/\r\n\r\n\t/*\r\n\tgetConnectorDef(connectorDefKey)\r\n\t{\r\n\t\tvar connectorDef = this.worldDef.worldDisplay.connectorDefs[\"generic\"];\r\n\t\t\r\n\t\tvar foundConnectorDef = false;\r\n\t\tif(this.worldDef.worldDisplay.connectorDefs.hasOwnProperty(connectorDefKey))\r\n\t\t{\r\n\t\t\tconnectorDef = this.worldDef.worldDisplay.connectorDefs[connectorDefKey];\r\n\t\t\tfoundConnectorDef = true;\r\n\t\t}\r\n\t\tif(!foundConnectorDef) console.trace(\"CanvasHolder:getConnectorDef:connectorDefKey=\\\"\"+connectorDefKey+ \"\\\" was not found using generic\");\r\n\t\telse console.log(\"found connector display :\"+connectorDefKey);\r\n\t\tconnectorDef.connectorDefKey = connectorDefKey;\r\n\t\treturn(connectorDef);\r\n\t}\r\n\t*/\r\n\r\n\t/*\r\n\tgetConnectorDisplay(connectorDisplayKey)\r\n\t{\r\n\t\tvar connectorDisplay = this.worldDef.worldDisplay.connectorDisplay[\"generic\"];\r\n\t\t\r\n\t\tvar foundConnectorDisplay = false;\r\n\t\tif(this.worldDef.worldDisplay.connectorDisplay.hasOwnProperty(connectorDisplayKey))\r\n\t\t{\r\n\t\t\tconnectorDisplay = this.worldDef.worldDisplay.connectorDisplay[connectorDisplayKey];\r\n\t\t\tfoundConnectorDisplay = true;\r\n\t\t}\r\n\t\tif(!foundConnectorDisplay) console.trace(\"CanvasHolder:getConnectorDisplay:connectorDisplayKey=\\\"\"+connectorDisplayKey+ \"\\\" was not found using generic\");\r\n\t\tconnectorDisplay.connectorDisplayKey = connectorDisplayKey;\r\n\t\treturn(connectorDisplay);\r\n\t}\r\n\t*/\r\n\r\n\t/*\r\n\tgetGraphData(graphDataKey)\r\n\t{\r\n\t\tvar graphData = this.worldDef.worldDisplay.nodeDisplay[\"generic\"];\t\r\n\t\tvar foundGraphData = false;\r\n\t\tif(this.worldDef.worldDisplay.nodeDisplay.hasOwnProperty(graphDataKey))\r\n\t\t{\r\n\t\t\tgraphData = this.worldDef.worldDisplay.nodeDisplay[graphDataKey];\r\n\t\t\tfoundGraphData = true;\r\n\t\t}\r\n\t\tif(!foundGraphData) console.trace(\"CanvasHolder:getGraphData:graphDataKey=\\\"\"+graphDataKey+ \"\\\" was not found using generic\")\r\n\t\t//console.trace(\"CanvasHolder:getGraphData:graphDataKey=\\\"\"+graphDataKey+ \"\\\" was not found using generic\")\r\n\t\t//console.log(\"FOR:\"+graphDataKey+Common.toString(graphData));\r\n\t\t//console.log(\"getGraphData:graphDataKey=\"+graphDataKey+\":clone=\"+graphData.nodeDisplay.displayInfo.clone);\r\n\r\n\t\t//if(graphData.nodeDisplay.displayInfo.clone)\r\n\t\tif(graphData.nodeDisplayFunction)\r\n\t\t{\r\n\t\t\t//console.log(\"getGraphData:graphDataKey:FOUND A FUNCTION:\"+graphDataKey);\r\n\t\t\tgraphData = Object.create(graphData);\r\n\t\t\tgraphData.nodeDisplay = graphData.nodeDisplayFunction();\r\n\t\t\t//console.log(\"CLONING:\"+graphDataKey+Common.toString(graphData));\r\n\t\t\t//graphData.nodeDisplay.displayInfo = Object.create(graphData.nodeDisplay.displayInfo);\r\n\t\t\t//graphData.nodeDisplay.displayInfo  = JSON.parse(JSON.stringify(graphData.nodeDisplay.displayInfo));\r\n\t\t\t//graphData.nodeDisplay.displayInfo  = JSON.parse(JSON.stringify(graphData.nodeDisplay.displayInfo));\r\n\t\t\t//graphData = Object.create(graphData);\r\n\t\t\t//graphData.nodeDisplay.displayInfo.ts = new Date().getTime();\r\n\r\n\r\n\t\t}\r\n\r\n\t\tgraphData.graphDataKey = graphDataKey;\r\n\t\treturn(graphData);\r\n\t}\r\n\t*/\r\n\t/*\r\n\tclone(origin)\r\n\t{\r\n\t\tvar canvasHolder = new CanvasHolderHTML(this.canvasName);\r\n\t\t//canvasHolder.origin = origin;\r\n\t\t\r\n\t\tvar canvasHolder = new Object();\r\n\t\tcanvasHolder.origin = origin;\r\n\t\t\r\n\t\tcanvasHolder.canvasName = this.canvasName;\r\n\t\tcanvasHolder.canvas = this.canvas;\r\n\t\tcanvasHolder.context = this.context;\r\n\t\tcanvasHolder.isCanvasVisable = this.isCanvasVisable;\r\n\t\tcanvasHolder.isCanvasDrawable = this.isCanvasDrawable;\r\n\t\tcanvasHolder.isDrawable = this.isDrawable;\r\n\t\tcanvasHolder.isVisable = this.isVisable;\r\n\t\tcanvasHolder.getWidth = this.getWidth;\r\n\t\tcanvasHolder.getHeight = this.getHeight;\r\n\t\tcanvasHolder.worldDef = this.worldDef;\r\n\t\tcanvasHolder.getGraphData = this.getGraphData;\r\n\t\t\r\n\t\t\r\n\t\treturn(canvasHolder);\r\n\t}\r\n\t*/","import { WorldPosition } from \"../../world/worldposition\";\r\nimport { CanvasHolderHTML } from \"./canvasholderhtml\";\r\nimport { MouseEventHandler } from \"./mouseeventhandler\";\r\nimport { World } from \"../../world/world\";\r\n\r\n\r\nexport class CanvasMouse\r\n{\r\n\tprivate _offset:WorldPosition;\r\n\tprivate canvasholderHTML:CanvasHolderHTML;\r\n\tprivate _mouseEventHandler:MouseEventHandler;\r\n\t\r\n\r\n\tconstructor(world:World,canvasholderHTML:CanvasHolderHTML,mouseEventHandler:MouseEventHandler)\r\n\t{\r\n\t\tthis.canvasholderHTML = canvasholderHTML;\r\n\t\tthis.mouseEventHandler = mouseEventHandler;\r\n\t\tif(canvasholderHTML.isCanvasVisable()) \r\n\t\t{\r\n\t\t\t//this.offset = NodeCanvasMouse.getCanvasOffset(this.canvasholder.canvas);\r\n\t\t\tthis.offset = this.getCanvasOffset();\t\t\r\n\t\t\tvar self = this;\r\n\t\t\tthis.canvasholderHTML.canvas.addEventListener(\"pointerdown\", function(event) { self.pointerDownEvent(world,self,event) }, false);\r\n\t\t\tthis.canvasholderHTML.canvas.addEventListener(\"pointermove\",function(event) { self.pointerMoveEvent(world,self,event) }, false);\r\n\t\t\tthis.canvasholderHTML.canvas.addEventListener(\"pointerup\",function(event) { self.pointerUpEvent(world,self,event) }, false);\r\n\t\t\t//this.nodeMouseMovment = {};\r\n\t\t}\r\n\t}\r\n\r\n\tprivate getCanvasOffset():WorldPosition\r\n\t{\r\n\t    let offsetLeft = 0;\r\n\t\tlet offsetTop = 0;\r\n\t\tlet object:HTMLElement = this.canvasholderHTML.canvas;\r\n\t    do\r\n\t    {\r\n\t      if (!isNaN(object.offsetLeft))\r\n\t      {\r\n\t          offsetLeft += object.offsetLeft;\r\n\t      }\r\n\t      if (!isNaN(object.offsetTop))\r\n\t      {\r\n\t          offsetTop += object.offsetTop;\r\n\t\t  }   \r\n\t\t let element:any = object.offsetParent;\r\n\t\t if(element.hasOwnProperty(\"offsetParent\")) object = element;\r\n\t\t else object = null;\r\n\t    }\r\n\t    while(object);\r\n\t    \r\n\t    return( new WorldPosition(offsetLeft,offsetTop) );\r\n\t}\r\n\r\n\tpublic pointerDownEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent) {\r\n\t\tthis.mouseEventHandler.pointerDownEvent(world,canvasMouse,event);\r\n\t}\r\n\t\r\n\tpublic pointerMoveEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent)\t{\r\n\t\tthis.mouseEventHandler.pointerMoveEvent(world,canvasMouse,event);\r\n\r\n\t}\r\n\t\r\n\tpublic pointerUpEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent)\r\n\t{\r\n\t\tthis.mouseEventHandler.pointerUpEvent(world,canvasMouse,event);\r\n\r\n\t}\r\n\t\r\n\r\n\t\r\n\tpublic get offset(): WorldPosition {\r\n\t\treturn this._offset;\r\n\t}\r\n\r\n\tpublic set offset(value: WorldPosition) {\r\n\t\tthis._offset = value;\r\n\t}\r\n\r\n\tpublic get mouseEventHandler(): MouseEventHandler {\r\n\t\treturn this._mouseEventHandler;\r\n\t}\r\n\r\n\tpublic set mouseEventHandler(value: MouseEventHandler) {\r\n\t\tthis._mouseEventHandler = value;\r\n\t}\r\n\r\n\r\n\tpublic get $canvasholderHTML(): CanvasHolderHTML {\r\n\t\treturn this.canvasholderHTML;\r\n\t}\r\n\r\n\tpublic set $canvasholderHTML(value: CanvasHolderHTML) {\r\n\t\tthis.canvasholderHTML = value;\r\n\t}\r\n\t\r\n\r\n}\r\n","import { MouseStatus } from \"./mousestatus\";\r\nimport { WorldObject } from \"../../world/worldobject\";\r\nimport { MouseEventHandler } from \"./mouseeventhandler\";\r\nimport { WorldPosition } from \"../../world/worldposition\";\r\nimport { World } from \"../../world/world\";\r\nimport { CanvasMouse } from \"./canvasmouse\";\r\n\r\n\r\n\r\nexport class MouseEventHandlerWorldObject implements MouseEventHandler {\r\n   private _mouseStatus:MouseStatus;\r\n   private _currentWorldObject:WorldObject;\r\n   private _lastWorldObject:WorldObject;\r\n\r\n    constructor()\r\n    {\r\n        this.mouseStatus = new MouseStatus();\r\n        this.currentWorldObject = null;\r\n        this.lastWorldObject = null;\r\n    }\r\n\r\n    public worldObjectSelected(world:World,event:MouseEvent,wWorldObject:WorldObject):void {\r\n\r\n    }\r\n\r\n    public worldObjectDeselected(world:World,event:MouseEvent):void {\r\n\r\n\t}\r\n\t\r\n\tpublic getWorldPositionFromMouseEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent):WorldPosition {\r\n\t\tvar eventPosition:WorldPosition = new WorldPosition(event.pageX-canvasMouse.offset.x,event.pageY-canvasMouse.offset.y);\r\n\t\treturn(eventPosition);\r\n\t}\r\n   \r\n    public pointerDownEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent):void\r\n\t{\r\n\t\t//console.log(\"pointerDownEvent:\"+JSON.stringify(event));;\r\n\t\tvar eventPosition:WorldPosition = this.getWorldPositionFromMouseEvent(world,canvasMouse,event);\r\n\t\t//this.hideCurrentNodeInfo();\r\n\t\tconsole.log(\"pointerDownEvent:\"+JSON.stringify(eventPosition));;\r\n\r\n\t\tthis.mouseStatus.isDown = true;\r\n\t\tthis.mouseStatus.startPosition = eventPosition;\r\n\t\tthis.mouseStatus.position = eventPosition;\r\n\t\tif(this.currentWorldObject!=null)\r\n\t\t{\r\n\t\t\tthis.currentWorldObject.isAnimated = true;\r\n\t\t\tthis.currentWorldObject.isSelected = false;\r\n\t\t\tthis.currentWorldObject = null;\r\n\t\t}\r\n\t\t\r\n\t\tlet clickWorldObject:WorldObject =  world.getWorldObjectContainingPosition(eventPosition);\r\n\t\r\n\t\tif(clickWorldObject!=null && clickWorldObject!=this.lastWorldObject)\r\n\t\t{\r\n\t\t\tconsole.log(\"pointerDownEvent:clickWorldObject=\"+clickWorldObject.worldId.id);\r\n\r\n\t\t\tthis.currentWorldObject = clickWorldObject;\r\n\r\n\t\t\tthis.mouseStatus.startPosition = eventPosition.clone();\r\n\r\n\t\t\tthis.currentWorldObject.isSelected = true;\r\n\t\t\tthis.mouseStatus.clickOffset = this.currentWorldObject.getWorldPosition().getDelta(eventPosition);\r\n\r\n\t\t\t/////////////////this.mouseStatus.clickOffset = clickWorldObject.getWorldPosition().getDelta(eventPosition);\r\n\t\t\t//this.mouseEventHandler.pointerDown(this.mouseStatus);\t\t\t\r\n\t\t\tthis.worldObjectSelected(world,event,this.currentWorldObject);\r\n\t\t}\r\n\t\t\r\n\t\tif(clickWorldObject==null)\r\n\t\t{\r\n\t\t\tthis.worldObjectDeselected(world,event);\r\n\t\t}\r\n\t\t\r\n\t\tif(this.lastWorldObject)\r\n\t\t{\r\n\t\t\tthis.worldObjectDeselected(world,event);\r\n\t\t\tthis.lastWorldObject.isSelected = false;\r\n\t\t\tthis.lastWorldObject = null;\r\n\t\t}\r\n\t\r\n    }\r\n    \r\n    \r\n\r\n    public pointerMoveEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent):void {\r\n\t\tif(this.mouseStatus.isDown)\r\n\t\t{\r\n\t\t\tvar eventPosition:WorldPosition = this.getWorldPositionFromMouseEvent(world,canvasMouse,event);\r\n\r\n\t\t\t////////////console.log(\"pointerMoveEvent:\"+event);\r\n\r\n\t\t\tthis.worldObjectDeselected(world,event);\r\n\r\n\t\t\tif(this.currentWorldObject!=null)\r\n\t\t\t{\r\n\t\t\t\tthis.currentWorldObject.isAnimated = false;\r\n\t\t\t\tthis.mouseStatus.position = eventPosition;\r\n\t\t\t\tvar deltaPosition = this.mouseStatus.startPosition.getDelta(eventPosition);\r\n\r\n\r\n\t\t\t\t\t\t\r\n\t\t\t\tlet newX = this.mouseStatus.startPosition.x-\r\n\t\t\t\t\t\tdeltaPosition.x+\r\n\t\t\t\t\t\tthis.mouseStatus.clickOffset.x;\r\n\t\t\t\t\r\n\t\t\t\tlet newY = this.mouseStatus.startPosition.y-\r\n\t\t\t\t\t\tdeltaPosition.y+\r\n\t\t\t\t\t\tthis.mouseStatus.clickOffset.y;\r\n\r\n\t\t\t\tthis.currentWorldObject.setWorldPosition( new WorldPosition(newX,newY));\r\n\t\t\t}\r\n\t\t}\r\n    }\r\n            \r\n\r\n    public pointerUpEvent(world:World,canvasMouse:CanvasMouse,event:MouseEvent):void \t{\r\n\t\t//console.log(\"pointerUpEvent:\"+JSON.stringify(event));\r\n\t\t//var eventPosition:WorldPosition = this.getWorldPositionFromMouseEvent(world,canvasMouse,event);\r\n\r\n\t\tif(this.currentWorldObject!=null)\r\n\t\t{\r\n\t\t\t///this.nodeCanvas.pointerUp(this.mouseStatus.node);\r\n\t\t\tthis.currentWorldObject.isAnimated = true;\r\n\t\t\t//this.mouseStatus.node.isSelected = false;\r\n\t\t\tthis.lastWorldObject = this.currentWorldObject;\r\n\t\r\n\t\t\tthis.currentWorldObject = null;\r\n\t\t}\r\n\t\tthis.mouseStatus.isDown = false;\r\n\t}\r\n\r\n\tpublic get mouseStatus(): MouseStatus {\r\n\t\treturn this._mouseStatus;\r\n\t}\r\n\r\n\tpublic set mouseStatus(value: MouseStatus) {\r\n\t\tthis._mouseStatus = value;\r\n\t}\r\n\r\n\r\n\tpublic get currentWorldObject(): WorldObject {\r\n\t\treturn this._currentWorldObject;\r\n\t}\r\n\r\n\tpublic set currentWorldObject(value: WorldObject) {\r\n\t\tthis._currentWorldObject = value;\r\n\t}\r\n\r\n\r\n\tpublic get lastWorldObject(): WorldObject {\r\n\t\treturn this._lastWorldObject;\r\n\t}\r\n\r\n\tpublic set lastWorldObject(value: WorldObject) {\r\n\t\tthis._lastWorldObject = value;\r\n\t}\r\n    \r\n}","import { WorldPosition } from \"../../world/worldposition\";\r\n\r\nexport class MouseStatus\r\n{\r\n\tprivate _isDown:boolean;\r\n\tprivate _startPosition:WorldPosition;\r\n\tprivate _position:WorldPosition;\r\n\t//private _worldObject:WorldObject;\r\n\t//private _objectStartPosition:WorldPosition;\r\n\tprivate _clickOffset:WorldPosition;\r\n\t//private _lastWorldObject:WorldObject;\r\n\t\r\n\t\r\n\t\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tthis.isDown = false;\r\n\t\tthis.startPosition = new WorldPosition(0,0);\r\n\t\tthis.position = new WorldPosition(0,0);\r\n\t\tthis.clickOffset = new WorldPosition(0,0);\r\n\r\n\t\t//this.objectStartPosition = null\r\n\t}\r\n// \t\t\tnodeCanvasMouse.mouseStatus = new MouseStatus(false,new Position(0,0),new Position(0,0),null,null);\r\n\r\n\r\n\tpublic get isDown(): boolean {\r\n\t\treturn this._isDown;\r\n\t}\r\n\r\n\tpublic set isDown(value: boolean) {\r\n\t\tthis._isDown = value;\r\n\t}\r\n\r\n\tpublic get startPosition(): WorldPosition {\r\n\t\treturn this._startPosition;\r\n\t}\r\n\r\n\tpublic set startPosition(value: WorldPosition) {\r\n\t\tthis._startPosition = value;\r\n\t}\r\n\t\r\n\r\n\tpublic get position(): WorldPosition {\r\n\t\treturn this._position;\r\n\t}\r\n\r\n\tpublic set position(value: WorldPosition) {\r\n\t\tthis._position = value;\r\n\t}\r\n\r\n\tpublic get clickOffset(): WorldPosition {\r\n\t\treturn this._clickOffset;\r\n\t}\r\n\r\n\tpublic set clickOffset(value: WorldPosition) {\r\n\t\tthis._clickOffset = value;\r\n\t}\r\n\r\n\r\n\r\n\t\r\n}\r\n","import { Drawable } from \"../drawable\";\r\nimport { WorldPosition } from \"../../world/worldposition\";\r\n//import { WalkerWorld } from \"../../walkers/walkerworld/walkerworld\";\r\nimport { WorldDisplay } from \"../worlddisplay\";\r\nimport { CircleEngineShape } from \"../../engine/shapes/circleengineshape\";\r\n//import { WalkerEngine } from \"../../walkerworld/walkerengine\";\r\n\r\n\r\nexport class CircleDisplayShape implements Drawable\r\n{\r\n\tprivate _circleEngineShape:CircleEngineShape;\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tthis.circleEngineShape = null;\r\n\t}\r\n\r\n\tpublic init(circleEngineShape:CircleEngineShape,options:any):void {\r\n\t\tthis.circleEngineShape = circleEngineShape;\t\t\r\n\t}\r\n\t\r\n\r\n\tpublic get circleEngineShape(): CircleEngineShape {\r\n\t\treturn this._circleEngineShape;\r\n\t}\r\n\r\n\tpublic set circleEngineShape(value: CircleEngineShape) {\r\n\t\tthis._circleEngineShape = value;\r\n\t}\r\n\t\r\n\t\r\n\tpublic draw(context:CanvasRenderingContext2D):void\r\n\t{\r\n\t\t//super.drawConnector(canvasHolder,node);\r\n\t\t/*\r\n\t\tsuper.drawNode(canvasHolder,node);\r\n\r\n\t\t*/\r\n\t\t//console.log(\"CircleDisplayShape.drawShape\");\r\n\r\n\t\tcontext.fillStyle = WorldDisplay.getColorFromString(\"ff0000ff\");\r\n\t\tcontext.strokeStyle = WorldDisplay.getColorFromString(\"0000ffff\");\r\n\t\tlet position:WorldPosition = this.circleEngineShape.getWorldPosition();\r\n\t\t\r\n\t    context.beginPath();\r\n\t    context.arc(position.x,position.y,this.circleEngineShape.getRadius(),0,Math.PI * 2, false);\r\n\t    context.closePath();\r\n\t    context.fill();\r\n\t    context.lineWidth = 2;\r\n\t\tcontext.stroke();\r\n\t}\r\n}\r\n","//import { MatterTools } from \"../matterengine/mattertools\";\r\n//import { World } from \"../walkerworld/world\";\r\n//import { MatterEvent } from \"../matterengine/matterevent\";\r\n//import { MatterCollisionEvent } from \"../matterengine/mattercollisionevent\";\r\n//import { MatterCompositeEvent } from \"../matterengine/mattercompositeevent\";\r\nimport { WorldPosition } from \"../world/worldposition\";\r\n\r\n//import * as Matter from \"matter-js\";\r\n\r\nexport class WorldDisplay  {\r\n    /*\r\n    static world(render:Matter.Render) {\r\n\r\n        Matter.Render.world(render);\r\n        console.log(\"doing some redering...\");\r\n    }\r\n    */    \r\n    public static getColorFromString(colorString:string):string\r\n    {\r\n      if(colorString.length==6)\r\n      {\r\n        colorString += \"ff\";\r\n      }\r\n      \r\n      let color = \"rgba(\"+\r\n          parseInt(colorString.substring(0,2), 16)+\",\"+\r\n          parseInt(colorString.substring(2,4), 16)+\",\"+\r\n          parseInt(colorString.substring(4,6), 16)+\",\"+\r\n          parseInt(colorString.substring(6,8), 16)/255.0+\")\";\r\n      \r\n      return(color);\r\n    }\r\n\r\n    public static getCirclePositionList(radius:number,curvePoints:number):Array<WorldPosition> {\r\n\t\tlet pointList = new Array<WorldPosition>();\r\n\t\t\r\n\t\tlet angleInc = 360 / curvePoints;\r\n\t\tfor(let angle=0;angle<=360;angle=angle+angleInc)\r\n\t\t{\r\n\t\t\tlet rads = angle * (Math.PI/180);\r\n\t\t\tpointList.push(\r\n\t\t\t\t\tnew WorldPosition(\r\n\t\t\t\t\t\t\tradius*Math.cos(rads),\r\n\t\t\t\t\t\t\tradius*Math.sin(rads))\r\n\t\t\t\t\t);\t\r\n\t\t}\r\n\t\t\r\n\t\treturn(pointList);\r\n\t}\r\n\r\n\tpublic static getTrianglePositionList(width:number,height:number):Array<WorldPosition> {\r\n\t\tlet pointList = new Array<WorldPosition>();\r\n\t\t\r\n\t\tpointList.push(new WorldPosition(0,-(height/2)));\r\n\t\tpointList.push(new WorldPosition(width/2,height/2));\r\n\t\tpointList.push(new WorldPosition(-(width/2),height/2));\r\n\t\tpointList.push(new WorldPosition(0,-(height/2)));\r\n\t\t\r\n\t\treturn(pointList);;\r\n\t}\r\n\t\r\n\tpublic static getRectanglePositionList(width:number,height:number):Array<WorldPosition> {\r\n\t\tlet pointList = new Array<WorldPosition>();\r\n\t\t\r\n\t\tpointList.push(new WorldPosition(-(width/2),-(height/2)));\r\n\t\tpointList.push(new WorldPosition((width/2),-(height/2)));\r\n\t\tpointList.push(new WorldPosition((width/2),(height/2)));\r\n\t\tpointList.push(new WorldPosition(-(width/2),(height/2)));\t\r\n\t\tpointList.push(new WorldPosition(-(width/2),-(height/2)));\r\n\t\r\n\t\treturn(pointList);;\r\n\t}\r\n\r\n\tpublic static getArcPositionList(endAngle:number,startAngle:number,radius:number,curvePoints:number):Array<WorldPosition> {\r\n\t\tlet pointList = new Array<WorldPosition>();\r\n\t\t\r\n\t\t// bug durring the port to javascript... it was just expecting one arg so probably endAngle was used\r\n\t\tlet angle:number = Math.abs(endAngle-startAngle);\r\n\t\tlet angleInc:number = angle / curvePoints;\r\n\t\t\r\n\t\tpointList.push(new WorldPosition(0,0));\r\n\t\tfor(let angle=startAngle;\r\n\t\t\tangle<=endAngle && angleInc>0;\r\n\t\t\tangle=angle+angleInc)\r\n\t\t{\r\n\t\t\tif( (angle+angleInc) > endAngle )\r\n\t\t\t{\r\n\t\t\t\tif(angle!=endAngle) angle = endAngle ;\r\n\t\t\t}\r\n\t\t\tvar rads = angle * (Math.PI/180);\r\n\t\t\tpointList.push(\r\n\t\t\t\t\tnew WorldPosition(\r\n\t\t\t\t\t\t\tradius*Math.cos(rads),\r\n\t\t\t\t\t\t\tradius*Math.sin(rads))\r\n\t\t\t\t\t);\t\r\n\t\t}\r\n\t\t\r\n\t\tpointList.push(new WorldPosition(0,0));\r\n\t\t\r\n\t\treturn(pointList);\r\n\t}\r\n\r\n    public static fillTextMutipleLines(context:CanvasRenderingContext2D,text:string,x:number,y:number,lineHeight:number,splitChar:string)\r\n\t{\r\n\t\tlet lines:Array<string> = text.split(splitChar);\r\n\t    let line:string = '';\r\n\t\r\n\t    for(let n = 0; n < lines.length; n++)\r\n\t    {\r\n\t      //let metrics:TextMetrics = context.measureText(lines[n]);\r\n\t      context.fillText(lines[n], x, y);\r\n\t      y = y+lineHeight; \r\n\t    }\r\n\t    context.fillText(line, x, y);\r\n\t }\r\n\t\r\n    public static metricsTextMutipleLines(context:CanvasRenderingContext2D,text:string,lineHeight:number,splitChar:string)\r\n\t{\r\n\t\tlet lines:Array<string> = text.split(splitChar);\r\n\t    //let line:string = '';\r\n\t    let maxWidth:number = 0;\r\n\t    let totalHeight = 0;\r\n\t    for(var n = 0; n < lines.length; n++)\r\n\t    {\r\n            let metrics:TextMetrics = context.measureText(lines[n]);\r\n            if(metrics.width>maxWidth) maxWidth = metrics.width;\r\n            totalHeight = totalHeight + lineHeight;\r\n\t    }\r\n\t    return({width:maxWidth,height:totalHeight});\r\n\t }\r\n\t\r\n    public static roundedRect(context:CanvasRenderingContext2D,x:number,y:number,\r\n        w:number,h:number,r:number,borderWitdh:number,borderColor:string,rectColor:string):void\r\n\t{\r\n\t\t  if (w < 2 * r) r = w / 2;\r\n\t\t  if (h < 2 * r) r = h / 2;\r\n\t\t  context.beginPath();\r\n\t\t  context.moveTo(x+r, y);\r\n\t\t  context.arcTo(x+w, y,   x+w, y+h, r);\r\n\t\t  context.arcTo(x+w, y+h, x,   y+h, r);\r\n\t\t  context.arcTo(x,   y+h, x,   y,   r);\r\n\t\t  context.arcTo(x,   y,   x+w, y,   r);\r\n\t\t  context.closePath();\r\n\t\t/*\r\n\t    context.beginPath();\r\n\t    context.moveTo(x, y);\r\n\t    context.lineTo(x + width - cornerRadius, y);\r\n\t    context.arcTo(x + width, y, x + width, y + cornerRadius, cornerRadius);\r\n\t    context.lineTo(x + width, y + height);\r\n\t   */ \r\n\t    context.lineWidth = borderWitdh;\r\n\t    context.fillStyle = rectColor;\r\n\t    context.strokeStyle = borderColor;\r\n\t    \r\n\t    context.stroke();\r\n\t    context.fill();\r\n\t\r\n\t}\r\n}\r\n","import { WorldId } from \"../../world/worldid\";\r\nimport { WorldPosition } from \"../../world/worldposition\";\r\nimport { WorldObject } from \"../../world/worldobject\";\r\nimport { EngineShape } from \"../shapes/engineshape\";\r\n\r\n//import { WorldObjectDisplay } from \"../display/worldobjectdisplay\";\r\n\r\n\r\nexport abstract class EngineObject extends WorldObject {\r\n    \r\n    public constructor(worldId:WorldId) {\r\n\t\tsuper(worldId);  \r\n\t\t//this.worldId = worldId;        \r\n\t}\r\n\t\r\n\tpublic abstract getEngineShape():EngineShape;\t\r\n\r\n\tpublic getWorldPosition() {\r\n\t\treturn(this.getEngineShape().getWorldPosition());\r\n\t}\r\n\tpublic translate(worldPosition:WorldPosition):void {\r\n\t\tthis.getEngineShape().translate(worldPosition);\r\n\r\n\t}\r\n\tpublic setWorldPosition(worldPosition:WorldPosition) {\r\n\t\tthis.getEngineShape().setWorldPosition(worldPosition);\r\n\r\n\t}\r\n\tpublic containsWorldPosition(worldPosition:WorldPosition):boolean {\r\n\t\treturn(this.getEngineShape().containsWorldPosition(worldPosition));\r\n\t}\r\n\r\n\t\r\n}","export enum MatterEvent {\r\n        collisionStart = 'collisionStart',\r\n        collisionEnd = 'collisionEnd',\r\n        beforeUpdate = 'beforeUpdate',\r\n        afterUpdate = 'afterUpdate',\r\n        beforeAdd = 'beforeAdd',\r\n        afterAdd = 'afterAdd',\r\n        collisionActive = 'collisionActive',\r\n        beforeRender = 'beforeRender',\r\n        afterRender = 'afterRender',\r\n    };","import { MatterTools } from \"./mattertools\";\r\nimport { MatterEvent } from \"./events/matterevent\";\r\nimport { MatterCollisionEvent } from \"./events/mattercollisionevent\";\r\nimport { MatterCompositeEvent } from \"./events/mattercompositeevent\";\r\nimport { MatterTimestampedEvent } from \"./events/mattertimestampedevent\";\r\n\r\n\r\nimport * as Matter from \"matter-js\";\r\nimport { WorldEngine } from \"../worldengine\";\r\nimport { MatterWalkerEngine } from \"../../walkers/engine/matterengine/matterwalkerengine\";\r\n\r\nexport class MatterEngine  implements WorldEngine {\r\n    private _matterTools:MatterTools ;\r\n    private _collisionEventHandlers : Map<string,MatterCollisionEvent>;\r\n    private _compositeEventHandlers : Map<string,MatterCompositeEvent>;\r\n    private _timestampEventHandlers : Map<string,MatterTimestampedEvent>;\r\n    \r\n    private _engine : Matter.Engine;\r\n    private _render : Matter.Render;\r\n    \r\n    private _mouse:Matter.Mouse;\r\n    private _mouseConstraint:Matter.MouseConstraint;\r\n\r\n    public constructor() {\r\n        this.matterTools = new MatterTools();\r\n        this.collisionEventHandlers = new Map<string,MatterCollisionEvent>(); \r\n        this.compositeEventHandlers = new Map<string,MatterCompositeEvent>();\r\n        this.timestampEventHandlers = new Map<string,MatterTimestampedEvent>();\r\n\r\n        \r\n        this.engine = Matter.Engine.create(); \r\n        \r\n        this.engine.world.gravity.x = 0.0;\r\n        this.engine.world.gravity.y = 0.0;\r\n\r\n\r\n        //let x:Matter.IRenderDefinition = null;\r\n        this.render = Matter.Render.create({\r\n          //let render = WalkerRenderer.create({\r\n            element: document.body,\r\n            engine: this.engine,\r\n            options : {\r\n              hasBounds:false,\r\n              height:600,\r\n              width:800,\r\n              wireframes:false, \r\n              \r\n              \r\n            },\r\n          }); \r\n        this.enableEvents();\r\n    }\r\n\r\n    public createBounds(width:number,height:number):void {\r\n      let wallBoundsRect = Matter.Bodies.rectangle(width/2,height/2,width,height,{});\r\n      let walls:Matter.Body = MatterTools.createBoundObject(wallBoundsRect,1,10);\r\n      walls.collisionFilter.category = MatterWalkerEngine.boundsFilter;\r\n      walls.restitution = 1.0;\r\n      Matter.Body.setStatic(walls,true);\r\n      Matter.World.add(this.engine.world, [walls]);\r\n    }\r\n\r\n    public get2DGraphicsContext():CanvasRenderingContext2D {\r\n      return( this.render.context );\r\n    }\r\n\r\n    private geTimestampedEventMapId(name:string,eventType:MatterEvent):string {\r\n      return(name+\":\"+eventType);\r\n    }\r\n\r\n    private getCompositeEventMapId(name:string,eventType:MatterEvent):string {\r\n      return(name+\":\"+eventType);\r\n    }\r\n\r\n      public registerCompositeEvent(name:string,eventType:MatterEvent,event:MatterCompositeEvent):void {\r\n        this.compositeEventHandlers.set(this.getCompositeEventMapId(name,eventType),event);    \r\n        console.log(\"MatterEngine:registerCompositeEvent:.keys.length=\"+this.compositeEventHandlers.keys.length);\r\n      }\r\n  \r\n      public deregisterCompositeEvent(name:string,eventType:MatterEvent,event:MatterCompositeEvent):void {\r\n        this.compositeEventHandlers.delete(this.getCompositeEventMapId(name,eventType));    \r\n      }\r\n\r\n\r\n      public registerTimestampedEvent(name:string,eventType:MatterEvent,event:MatterTimestampedEvent):void {\r\n        this.timestampEventHandlers.set(this.geTimestampedEventMapId(name,eventType),event);    \r\n        console.log(\"MatterEngine:registerTimestampedEvent:.keys.length=\"+this.timestampEventHandlers.keys.length);\r\n      }\r\n  \r\n      public deregisterTimestampedEvent(name:string,eventType:MatterEvent,event:MatterTimestampedEvent):void {\r\n        this.timestampEventHandlers.delete(this.geTimestampedEventMapId(name,eventType));    \r\n      }\r\n  \r\n      /*\r\n      private hasCompositeHandler(name:string,eventType:MatterEvent):boolean {\r\n        return(this.compositeEventHandlers.has(this.getCompositeEventMapId(name,eventType)));\r\n      }\r\n  \r\n      private getCompositeHandler(name:string,eventType:MatterEvent):MatterCompositeEvent {\r\n        return( this.compositeEventHandlers.get(this.getCompositeEventMapId(name,eventType)) );\r\n      }      \r\n      */\r\n\r\n      private getCollisionEventMapId(body:Matter.Body,eventType:MatterEvent):string {\r\n        return(body.id+\":\"+eventType);\r\n      }\r\n  \r\n      public registerCollisionEvent(body:Matter.Body,eventType:MatterEvent,event:MatterCollisionEvent):void {\r\n        this.collisionEventHandlers.set(this.getCollisionEventMapId(body,eventType),event);    \r\n      }\r\n  \r\n      public deregisterCollisionEvent(body:Matter.Body,eventType:MatterEvent,event:MatterCollisionEvent):void {\r\n        this.collisionEventHandlers.delete(this.getCollisionEventMapId(body,eventType));    \r\n      }\r\n  \r\n      public hasCollisionHandler(body:Matter.Body,eventType:MatterEvent):boolean {\r\n        return(this.collisionEventHandlers.has(this.getCollisionEventMapId(body,eventType)))\r\n      }\r\n  \r\n      public getCollisionHandler(body:Matter.Body,eventType:MatterEvent):MatterCollisionEvent {\r\n        return( this.collisionEventHandlers.get(this.getCollisionEventMapId(body,eventType)) );\r\n      }\r\n\r\n      public initMouse(render:Matter.Render):void {\r\n        this.mouse = Matter.Mouse.create(render.canvas);\r\n        this.mouseConstraint = Matter.MouseConstraint.create(this.engine);\r\n        this.mouseConstraint.mouse = this.mouse;\r\n        this.mouseConstraint.constraint.render.visible = false;\r\n        this.mouseConstraint.constraint.stiffness = 0.2;\r\n        \r\n        Matter.World.add(this.engine.world, this.mouseConstraint);        \r\n        // keep the mouse in sync with rendering\r\n        render.controller.mouse = this.mouse;\r\n    }\r\n\r\n    public initRendererEvents(render:Matter.Render):void {\r\n      let me:MatterEngine = this;\r\n\r\n      Matter.Events.on(render,MatterEvent.beforeRender,\r\n        function(event:Matter.IEventTimestamped<Matter.Engine>)\r\n        { me.processTimestampedEvent(MatterEvent.beforeRender,event) } );    \r\n\r\n      Matter.Events.on(render,MatterEvent.afterRender,\r\n        function(event:Matter.IEventTimestamped<Matter.Engine>)\r\n        { me.processTimestampedEvent(MatterEvent.afterRender,event) } );   \r\n    }\r\n  \r\n      public disableEvents(matterEngine:MatterEngine):void {\r\n        // what does the function passed to deregistger an event even mean?!?!?\r\n        Matter.Events.off(this,MatterEvent.beforeUpdate,function(event) {});\r\n        Matter.Events.off(this,MatterEvent.collisionActive,function(event) {});\t\r\n        Matter.Events.off(this,MatterEvent.collisionEnd,function(event) {});\t\t\r\n        Matter.Events.off(this,MatterEvent.collisionStart,function(event) {});\t\t      \r\n      }\r\n  \r\n      private processCollisionPairsEvent(eventType:MatterEvent,event: Matter.IEventCollision<Matter.Engine>):void {\r\n        var pairs:Matter.IPair[] = event.pairs;\r\n        for(let i=0;i<pairs.length;i++){\r\n          // TODO this is the collision loop...  we can probably drop from 4 hash lookps to 2\r\n          if(this.hasCollisionHandler(pairs[i].bodyA,eventType))\r\n            this.getCollisionHandler(pairs[i].bodyA,eventType)(this,eventType,event);\r\n  \r\n          if(this.hasCollisionHandler(pairs[i].bodyB,eventType))\r\n            this.getCollisionHandler(pairs[i].bodyB,eventType)(this,eventType,event);\r\n        }\r\n      }\r\n  \r\n      private processTimestampedEvent(eventType:MatterEvent,event:Matter.IEventTimestamped<Matter.Engine>):void  {      \r\n        //console.log(\"MatterEngine:processTimestampedEvent:keys.length=\"+ Array.from(  this.timestampEventHandlers.keys() ).length);\r\n\r\n        let keys = Array.from(  this.timestampEventHandlers.keys() );\r\n        //console.log(\"MatterEngine:processTimestampedEvent:keys.length=\"+keys.length);\r\n        for(let i=0;i<keys.length;i++ ){\r\n          let name:string = keys[i];\r\n          //console.log(\"-----MasterEngine:processTimestampedEvent:looking at:name=\"+name);\r\n          \r\n          if(name.endsWith(eventType)) {\r\n            //console.log(\"----------MatterEngine:processTimestampedEvent:has:name=\"+name);\r\n            let handler:MatterTimestampedEvent =  this.timestampEventHandlers.get(name);\r\n            handler(this,eventType,event);\r\n          }          \r\n        }\r\n      }\r\n  \r\n      private processCompositeEvent(eventType:MatterEvent,event: Matter.IEventComposite<Matter.Composite>):void  {  \r\n\r\n\r\n        let keys = Array.from(  this.compositeEventHandlers.keys() );\r\n        //console.log(\"MatterEngine:processCompositeEvent:yes.length=\"+keys.length);\r\n        for(let i=0;i<keys.length;i++ ){\r\n          let name:string = keys[i];\r\n          //console.log(\"-----MasterEngine:processCompositeEvent:looking at:name=\"+name);\r\n          \r\n          if(name.endsWith(eventType)) {\r\n            //console.log(\"----------MatterEngine:processCompositeEvent:has:name=\"+name);\r\n            let handler:MatterCompositeEvent =  this.compositeEventHandlers.get(name);\r\n            handler(this,eventType,event);\r\n          }          \r\n        }\r\n\r\n        /*\r\n        for(let name in this.compositeEventHandlers.keys){\r\n          console.log(\"MatterEngine:processCompositeEvent:name=\"+name);\r\n          let handler:MatterCompositeEvent = this.compositeEventHandlers.get(name);\r\n          handler(this,eventType,event);\r\n        } \r\n        */\r\n        \r\n       }\r\n  \r\n       public enableEvents():void {\r\n        console.log(\"World:event:enableEvents\")\r\n        let me:MatterEngine = this;\r\n  \r\n        Matter.Events.on(this.engine,MatterEvent.collisionStart,\r\n          function(event:Matter.IEventCollision<Matter.Engine>)\r\n          { me.processCollisionPairsEvent(MatterEvent.collisionStart,event) } ); \r\n        \r\n        Matter.Events.on(this.engine,MatterEvent.collisionEnd,\r\n          function(event:Matter.IEventCollision<Matter.Engine>)\r\n          { me.processCollisionPairsEvent(MatterEvent.collisionEnd,event) } ); \r\n        \r\n        Matter.Events.on(this.engine,MatterEvent.collisionEnd,\r\n          function(event:Matter.IEventCollision<Matter.Engine>)\r\n          { me.processCollisionPairsEvent(MatterEvent.collisionEnd,event) } ); \r\n              \r\n        Matter.Events.on(this.engine,MatterEvent.beforeUpdate,\r\n          function(event:Matter.IEventTimestamped<Matter.Engine>)\r\n          { me.processTimestampedEvent(MatterEvent.collisionEnd,event) } ); \r\n    \r\n        Matter.Events.on(this.engine,MatterEvent.afterUpdate,\r\n          function(event:Matter.IEventComposite<Matter.Composite>)\r\n          { me.processCompositeEvent(MatterEvent.afterUpdate,event) } ); \r\n      \r\n        Matter.Events.on(this.engine,MatterEvent.beforeAdd,\r\n          function(event:Matter.IEventComposite<Matter.Composite>)\r\n          { me.processCompositeEvent(MatterEvent.beforeAdd,event) } ); \r\n    \r\n        Matter.Events.on(this.engine,MatterEvent.afterAdd,\r\n          function(event:Matter.IEventComposite<Matter.Composite>)\r\n          { me.processCompositeEvent(MatterEvent.afterAdd,event) } ); \r\n\r\n      }\r\n\r\n    public get engine(): Matter.Engine {\r\n\t\treturn this._engine;\r\n\t}\r\n\r\n\tpublic set engine(value: Matter.Engine) {\r\n\t\tthis._engine = value;\r\n  }\r\n  \r\n\tpublic get matterTools(): MatterTools  {\r\n\t\treturn this._matterTools;\r\n\t}\r\n\r\n\tpublic set matterTools(value: MatterTools ) {\r\n\t\tthis._matterTools = value;\r\n\t}\r\n\r\n\r\n\tpublic get mouseConstraint(): Matter.MouseConstraint {\r\n\t\treturn this._mouseConstraint;\r\n\t}\r\n\r\n\tpublic set mouseConstraint(value: Matter.MouseConstraint) {\r\n\t\tthis._mouseConstraint = value;\r\n\t}\r\n  \r\n\r\n\tpublic get mouse(): Matter.Mouse {\r\n\t\treturn this._mouse;\r\n\t}\r\n\r\n\tpublic set mouse(value: Matter.Mouse) {\r\n\t\tthis._mouse = value;\r\n\t}\r\n  \r\n\r\n\tpublic get collisionEventHandlers(): Map<string,MatterCollisionEvent> {\r\n\t\treturn this._collisionEventHandlers;\r\n\t}\r\n\r\n\tpublic set collisionEventHandlers(value: Map<string,MatterCollisionEvent>) {\r\n\t\tthis._collisionEventHandlers = value;\r\n\t}\r\n  \r\n\r\n\tpublic get compositeEventHandlers(): Map<string,MatterCompositeEvent> {\r\n\t\treturn this._compositeEventHandlers;\r\n\t}\r\n\r\n\tpublic set compositeEventHandlers(value: Map<string,MatterCompositeEvent>) {\r\n\t\tthis._compositeEventHandlers = value;\r\n  }\r\n  \r\n\r\n\tpublic get timestampEventHandlers(): Map<string,MatterTimestampedEvent> {\r\n\t\treturn this._timestampEventHandlers;\r\n\t}\r\n\r\n\tpublic set timestampEventHandlers(value: Map<string,MatterTimestampedEvent>) {\r\n\t\tthis._timestampEventHandlers = value;\r\n\t}\r\n\r\n\tpublic get render(): Matter.Render {\r\n\t\treturn this._render;\r\n\t}\r\n\r\n\tpublic set render(value: Matter.Render) {\r\n\t\tthis._render = value;\r\n\t}\r\n\r\n\r\n  \r\n}","import * as Matter from \"matter-js\";\r\n//import { MatterWalkerEngine } from \"./matterwalkerengine\";\r\nimport { WorldPosition } from \"../../world/worldposition\";\r\n\r\nexport class MatterTools  {\r\n\r\n    public static getLongerLine(p1:Matter.Vector,p2:Matter.Vector):Matter.Vector[] {\r\n\r\n        let middleX = (p1.x+p2.x)/2;\r\n        let middleY = (p1.y+p2.y)/2;\r\n\r\n        let adjustX = Math.abs(p1.x-middleX);\r\n        let adjustY = Math.abs(p1.y-middleY);\r\n        \r\n\r\n        let signX = (p1.x<p2.x) ? 1 : -1;\r\n        let signY = (p1.y<p2.y) ? 1 : -1;\r\n\r\n        let n1:Matter.Vector = Matter.Vector.create(\r\n            p1.x-adjustX*signX,\r\n            p1.y-adjustY*signY);\r\n\r\n        let n2:Matter.Vector = Matter.Vector.create(\r\n            p2.x+adjustX*signX,\r\n            p2.y+adjustY*signY);\r\n        \r\n        let points:Array<Matter.Vector> = new Array<Matter.Vector>();\r\n        points.push(n1);\r\n        points.push(n2);\r\n        return(points);\r\n    }\r\n\r\n    public static bodyPostion2WorldPosition(body:Matter.Body):WorldPosition {\r\n      return( new WorldPosition(body.position.x,body.position.y) );\r\n    }\r\n\r\n    public static getColorFromString(colorString:string):string\r\n    {\r\n      if(colorString.length==6)\r\n      {\r\n        colorString += \"ff\";\r\n      }\r\n      \r\n      let color = \"rgba(\"+\r\n          parseInt(colorString.substring(0,2), 16)+\",\"+\r\n          parseInt(colorString.substring(2,4), 16)+\",\"+\r\n          parseInt(colorString.substring(4,6), 16)+\",\"+\r\n          parseInt(colorString.substring(6,8), 16)/255.0+\")\";\r\n      \r\n      return(color);\r\n    }\r\n\r\n    public static cloneVerticies(inVertices:Array<Matter.Vector>):Array<Matter.Vector>\r\n    {\r\n      let newVeritices:Array<Matter.Vector> = new Array<Matter.Vector>();\r\n      \r\n      for(let x=0;x<inVertices.length;x++)\r\n      {\r\n        let v:Matter.Vector = inVertices[x];\r\n        newVeritices.push(Matter.Vector.create(v.x,v.y));\r\n      }\r\n      return(newVeritices);\r\n    }\r\n\r\n    public static getVectorArrayFromWorldPostionOffsetArray(offset:WorldPosition,positionArray:Array<WorldPosition>):Array<Matter.Vector> {\r\n      let newVeritices:Array<Matter.Vector> = new Array<Matter.Vector>();\r\n      for(let i=0;i<positionArray.length;i++) newVeritices.push( \r\n        this.getVectorFromWorldPostionOffset(offset,positionArray[i]) );\r\n        return(newVeritices);\r\n    }\r\n\r\n    public static getVectorFromWorldPostionOffset(offset:WorldPosition,position:WorldPosition):Matter.Vector {\r\n      let newVeritice = Matter.Vector.create(position.x+offset.x,position.y+offset.y) ;\r\n        return(newVeritice);\r\n    }\r\n\r\n    public static getWorldPostionFromVector(vector:Matter.Vector):WorldPosition {\r\n      let worldPosition:WorldPosition = new WorldPosition(vector.x,vector.y) ;\r\n        return(worldPosition);\r\n    }\r\n\r\n    public static getVectorFromWorldPostion(position:WorldPosition):Matter.Vector {\r\n      let newVeritice = Matter.Vector.create(position.x,position.y) ;\r\n        return(newVeritice);\r\n    }\r\n\r\n    public static getBodyFromWorldPostionArray(location:WorldPosition,positionArray:Array<WorldPosition>):Matter.Body {\r\n      let newVeritices:Array<Matter.Vector> = this.getVectorArrayFromWorldPostionOffsetArray(location,positionArray);\r\n      //let center:Matter.Vector = Matter.Vertices.centre(newVeritices);\r\n      let newBody:Matter.Body = Matter.Bodies.fromVertices(location.x,location.y,[newVeritices]);\r\n      return(newBody);\r\n    }\r\n\r\n    /*\r\n    public static getBodyFromWorldShape(location:WorldPosition,shape:WorldShape):Matter.Body {\r\n      let newVeritices:Array<Matter.Vector> = this.getVectorArrayFromWorldPostionOffsetArray(location,shape.shapePoints);\r\n      let newBody:Matter.Body = Matter.Bodies.fromVertices(location.x,location.y,[newVeritices]);\r\n      return(newBody);\r\n    }\r\n    */\r\n\r\n    public static createBoundObject(body:Matter.Body,scaleInner:number,scaleOuter:number):Matter.Body {     \r\n        let pointsInner:Array<Matter.Vector> = this.cloneVerticies(body.vertices);\r\n        Matter.Vertices.scale(pointsInner,scaleInner,scaleInner,body.position);\r\n  \r\n        let pointsOuter:Array<Matter.Vector> = this.cloneVerticies(body.vertices);\r\n        Matter.Vertices.scale(pointsOuter,scaleOuter,scaleOuter,body.position);\r\n       \r\n        let bodies:Array<Matter.Body> = new Array<Matter.Body>();\r\n        \r\n        // go all around the inner\r\n        for(let i=0;i<pointsInner.length;i++)\r\n        {\r\n          let newVeritices:Array<Matter.Vector> = new Array<Matter.Vector>();\r\n          let j = ((i+1)===pointsInner.length) ? 0 : (i+1);\r\n          \r\n          let insidePoints:Matter.Vector[] = this.getLongerLine(pointsInner[i],pointsInner[j]);\r\n          let outsidePoints:Matter.Vector[] = this.getLongerLine(pointsOuter[i],pointsOuter[j]);\r\n          newVeritices.push(insidePoints[0]);\r\n          newVeritices.push(outsidePoints[0]);\r\n          newVeritices.push(outsidePoints[1]);\r\n          newVeritices.push(insidePoints[1]);\r\n          /*\r\n          newVeritices.push(pointsInner[i]);\r\n          newVeritices.push(pointsOuter[i]);\r\n          newVeritices.push(pointsOuter[j]);\r\n          newVeritices.push(pointsInner[j]);\r\n          */     \r\n          //newVeritices.push(pointsInner[i]);\r\n          \r\n          let center:Matter.Vector = Matter.Vertices.centre(newVeritices);\r\n          let newBody:Matter.Body = Matter.Bodies.fromVertices(center.x,center.y,[newVeritices],\r\n                {render:{fillStyle:\"transparent\",strokeStyle:\"white\"}});\r\n           \r\n          bodies.push(newBody);\r\n        }\r\n  \r\n        let newBody:Matter.Body = Matter.Body.create({parts: bodies });        \r\n\r\n        newBody.restitution = 1.0; \r\n        return(newBody);\r\n    }\r\n\t\r\n   \r\n    public static findClosestPostionOnLine(p1:Matter.Vector,p2:Matter.Vector):Matter.Vector\r\n\t{\r\n\t\t  var A = p1.x-p2.x;\r\n\t\t  var B = p1.x-p2.y;\r\n\t\t  var C = p2.x-p1.x;\r\n\t\t  var D = p2.y-p1.y;\r\n\t\r\n\t\t  var dot = A * C + B * D;\r\n\t\t  var lengthSquared = C * C + D * D;\r\n\t\t  var param = -1;\r\n\t\t  if (lengthSquared != 0) //in case of 0 length line\r\n\t\t      param = dot / lengthSquared;\r\n\t\r\n\t\t  var xx, yy;\r\n\t\r\n\t\t  if (param < 0)\r\n\t\t  {\r\n\t\t    xx = p1.x;\r\n\t\t    yy = p1.y;\r\n\t\t  }\r\n\t\t  else if (param > 1) {\r\n\t\t    xx = p2.x;\r\n\t\t    yy = p2.y;\r\n\t\t  }\r\n\t\t  else {\r\n\t\t    xx = p1.x + param * C;\r\n\t\t    yy = p1.y + param * D;\r\n\t\t  }\r\n\t/*\r\n\t\t  var dx = x - xx;\r\n\t\t  var dy = y - yy;\r\n\t\t  return Math.sqrt(dx * dx + dy * dy);\r\n\t\t  */\r\n\t\t  return(Matter.Vector.create(xx,yy));\r\n\t}\r\n\t\r\n}","import { CircleEngineShape } from \"../../shapes/circleengineshape\";\r\nimport { WorldPosition } from \"../../../world/worldposition\";\r\n\r\nimport * as Matter from \"matter-js\";\r\nimport { MatterShape } from \"./mattershape\";\r\nimport { Drawable } from \"../../../display/drawable\";\r\nimport { WorldId } from \"../../../world/worldid\";\r\nimport { MatterWalkerEngine } from \"../../../walkers/engine/matterengine/matterwalkerengine\";\r\n\r\n//import { World } from \"../../walkerworld/world\";\r\n//import { WorldObjectDisplay } from \"../worldobjectdisplay\";\r\n\r\nexport class MatterCircle extends MatterShape implements CircleEngineShape\r\n{\r\n\tprivate _circleBody:Matter.Body;\r\n\tprivate _curvePoints:number;\r\n\tprivate _radius:number;\r\n\t\r\n\r\n\tconstructor(worldId:WorldId,drawable:Drawable,radius:number,curvePoints:number,position:WorldPosition,options:any)\r\n\t{\r\n\t\tsuper(worldId,drawable);\r\n\t\t//super(shapeName,radius);\r\n\t\tthis.radius = radius;\r\n\t\tthis.curvePoints = curvePoints;\r\n        this.circleBody = Matter.Bodies.circle(\r\n            position.x,position.y,\r\n            this.radius,\r\n            options,\r\n\t\t\tthis.curvePoints);\t\r\n\t\t\tthis.circleBody.collisionFilter.category = MatterWalkerEngine.boundsFilter;\r\n\t\t\t\t\t\t\t\r\n\t}\r\n\r\n\tpublic getRadius():number {\r\n\t\treturn(this.radius);\r\n\t}\r\n\r\n    public getBody():Matter.Body {\r\n\t\treturn(this.circleBody);\r\n\t}\r\n\r\n\tpublic get circleBody(): Matter.Body {\r\n\t\treturn this._circleBody;\r\n\t}\r\n\r\n\tpublic set circleBody(value: Matter.Body) {\r\n\t\tthis._circleBody = value;\r\n\t}\r\n\r\n\tpublic get curvePoints(): number {\r\n\t\treturn this._curvePoints;\r\n\t}\r\n\r\n\tpublic set curvePoints(value: number) {\r\n\t\tthis._curvePoints = value;\r\n\t}\r\n\t\r\n\r\n\tpublic get radius(): number {\r\n\t\treturn this._radius;\r\n\t}\r\n\r\n\tpublic set radius(value: number) {\r\n\t\tthis._radius = value;\r\n\t}\r\n\r\n\r\n}\r\n","import { WorldPosition } from \"../../../world/worldposition\";\r\nimport { MatterTools } from \"../mattertools\";\r\n\r\nimport * as Matter from \"matter-js\";\r\nimport { EngineShape } from \"../../shapes/engineshape\";\r\nimport { Drawable } from \"../../../display/drawable\";\r\nimport { WorldObject } from \"../../../world/worldobject\";\r\nimport { WorldId } from \"../../../world/worldid\";\r\n\r\n//import { World } from \"../../walkerworld/world\";\r\n//import { WorldObjectDisplay } from \"../worldobjectdisplay\";\r\n\r\nexport abstract class MatterShape  extends WorldObject implements EngineShape\r\n{\r\n    private _drawable:Drawable;\r\n\r\n    constructor(worldId:WorldId,drawable:Drawable) {\r\n\t\tsuper(worldId);\r\n        this.drawable = drawable;\r\n    }\r\n    \r\n    public abstract getBody():Matter.Body;\r\n\r\n    public getWorldPosition():WorldPosition {\r\n\t\treturn( MatterTools.bodyPostion2WorldPosition( this. getBody() ) );\r\n\t}\r\n\r\n\tpublic translate(worldPosition:WorldPosition):void {\r\n\t\tMatter.Body.translate( this.getBody(),\r\n\t\t\tMatterTools.getVectorFromWorldPostion(worldPosition));\r\n\t}\r\n\t\r\n\tpublic setWorldPosition(worldPosition:WorldPosition):void {\r\n\t\tMatter.Body.translate( this. getBody(),\r\n\t\t\tMatterTools.getVectorFromWorldPostion(worldPosition));\r\n\t}\r\n\t\r\n\tpublic containsWorldPosition(worldPosition:WorldPosition):boolean {\r\n\r\n\t\treturn( Matter.Vertices.contains( this. getBody().vertices, MatterTools.getVectorFromWorldPostion(worldPosition)) );\r\n\t}\r\n\r\n    public getDrawable():Drawable {\r\n        return(this.drawable);\r\n    }\r\n\r\n\r\n\tpublic get drawable(): Drawable {\r\n\t\treturn this._drawable;\r\n\t}\r\n\r\n\tpublic set drawable(value: Drawable) {\r\n\t\tthis._drawable = value;\r\n\t}\r\n    \r\n\r\n}\r\n","import { CanvasHolderHTML } from \"./display/canvas/canvasholderhtml\";\r\nimport { WorldOfWorldObjects } from \"./world/worldofworldobjects\";\r\nimport { CircleDisplayShape } from \"./display/drawableshapes/circledisplayshape\";\r\nimport { WorldPosition } from \"./world/worldposition\";\r\nimport { WorldId } from \"./world/worldid\";\r\nimport { MatterEngine } from \"./engine/matterengine/matterengine\";\r\nimport { MatterCircle } from \"./engine/matterengine/shapes/mattercircle\";\r\nimport * as Matter from \"matter-js\";\r\n\r\n\r\nlet matterEngine = new MatterEngine();\r\nlet world:WorldOfWorldObjects = new WorldOfWorldObjects(matterEngine);\r\nlet canvasHolder:CanvasHolderHTML = new CanvasHolderHTML(\"worldCanvas\",world);\r\n\r\nlet circle1:MatterCircle = new MatterCircle(\r\n    new WorldId(\"circle1\"),\r\n    new CircleDisplayShape(),\r\n    30,8,new WorldPosition(400,400),\r\n    {});\r\n\r\n    let circle2:MatterCircle = new MatterCircle(\r\n      new WorldId(\"circle2\"),\r\n      new CircleDisplayShape(),\r\n      30,8,new WorldPosition(200,200),\r\n      {});\r\n  \r\n      \r\nworld.worldObjectArray.push(circle1);\r\nworld.worldObjectArray.push(circle2);\r\n\r\nmatterEngine.createBounds(canvasHolder.getWidth(),canvasHolder.getHeight());\r\nlet interval:number = 1000/30; //one millisecond over beat per second\r\nconsole.log(\"drawing every : \"+interval+\"ms\");\r\nsetInterval(doDraw,interval);\r\nMatter.Engine.run(matterEngine.engine);\r\n\r\nfunction doDraw()\r\n{\r\n  world.drawWorld(canvasHolder);\t\r\n}\r\n\r\n\r\n","import { Destination } from \"../../../walkerworld/destination\";\r\nimport { MatterWalkerEngine } from \"../matterwalkerengine\";\r\nimport { MatterJunction } from \"./matterjunction\";\r\nimport { MatterTools } from \"../../../../engine/matterengine/mattertools\";\r\nimport { WalkerWorld } from \"../../../walkerworld/walkerworld\";\r\nimport * as Matter from \"matter-js\";\r\n\r\n\r\n\r\nexport class MatterDestination  {\r\n    private _destination:Destination;\r\n    private _boundryBody:Matter.Body;\r\n    private _spatialBody:Matter.Body;\r\n\r\n    public constructor(walkerWorld:WalkerWorld,matterEngine:MatterWalkerEngine,destination:Destination) {\r\n\t\tthis.destination = destination;\r\n\t\tlet j:Matter.Body = this.getMatterJunction(walkerWorld,matterEngine).getBoundryJunction();\r\n\t\t//this.spatialBody = this.getMatterJunction(world,matterEngine).getBoundryJunction();\r\n\t\tthis.spatialBody = Matter.Bodies.circle(j.position.x,j.position.y,40,\r\n\t\t\t{\r\n\t\t\t\tisSensor:true,\r\n\t\t\t\t\r\n\t\t\t\trender:{fillStyle:\"transparent\",strokeStyle:\"red\"},\r\n\t\t\t},8);\r\n\t\tthis.boundryBody = MatterTools.createBoundObject(this.spatialBody,1.05,1.5);\r\n\t\tthis.boundryBody.collisionFilter.category = MatterWalkerEngine.boundsFilter;\r\n\r\n\r\n\t\t//this.spatialBody.render.fillStyle=\"red\";\r\n\t\tthis.spatialBody.collisionFilter.category = MatterWalkerEngine.boundrySpatialFilter;\r\n\t\tthis.spatialBody.collisionFilter.mask = MatterWalkerEngine.boundsFilter|MatterWalkerEngine.walkerTravleing;\r\n\t\t\r\n\t\tthis.boundryBody.collisionFilter.category = MatterWalkerEngine.boundryContainerFilter;\r\n\t\tthis.boundryBody.collisionFilter.mask = MatterWalkerEngine.boundsFilter|MatterWalkerEngine.walkerArrived;\r\n\t\tthis.boundryBody.restitution = 0.0;\r\n\t}\r\n\r\n\tpublic getMatterJunction(walkerWorld:WalkerWorld,matterEngine:MatterWalkerEngine):MatterJunction {\r\n\t\treturn(matterEngine.junctions.get(this.destination.getJunction(walkerWorld).worldId.id));\r\n\t}\r\n\t\r\n\tpublic addToEngine(walkerWorld:WalkerWorld,matterEngine:MatterWalkerEngine):void {\r\n\t\tMatter.World.add(matterEngine.engine.world,[this.boundryBody,this.spatialBody]);\r\n\t\tmatterEngine.pin(this.boundryBody,this.getMatterJunction(walkerWorld,matterEngine).getBoundryJunction());\t\t\r\n\t\tmatterEngine.pin(this.spatialBody,this.getMatterJunction(walkerWorld,matterEngine).getBoundryJunction());\t\t\t\r\n\t\t\r\n\t}\r\n\t\r\n\tpublic getSpatialBody():Matter.Body {\r\n\t\treturn(this.spatialBody);\r\n\t}\r\n\r\n\tpublic getWalkerContainer():Matter.Body {\r\n\t\treturn(this.boundryBody);\r\n\t}\r\n\r\n\tpublic get destination(): Destination {\r\n\t\treturn this._destination;\r\n\t}\r\n\r\n\tpublic set destination(value: Destination) {\r\n\t\tthis._destination = value;\r\n\t}\r\n\r\n\r\n\tprivate get spatialBody(): Matter.Body {\r\n\t\treturn this._spatialBody;\r\n\t}\r\n\r\n\tprivate set spatialBody(value: Matter.Body) {\r\n\t\tthis._spatialBody = value;\r\n\t}\r\n\t\r\n\r\n\tprivate get boundryBody(): Matter.Body {\r\n\t\treturn this._boundryBody;\r\n\t}\r\n\r\n\tprivate set boundryBody(value: Matter.Body) {\r\n\t\tthis._boundryBody = value;\r\n\t}\r\n\r\n    \r\n}","//import { Junction } from \"../../walkerworld/junction\";\r\nimport { WorldPosition } from \"../../../../world/worldposition\";\r\nimport { WorldId } from \"../../../../world/worldid\";\r\n//import { WorldObjectDisplay } from \"../../display/worldobjectdisplay\";\r\nimport { MatterWalkerEngine } from \"../matterwalkerengine\";\r\nimport { MatterObject } from \"./matterobject\";\r\nimport { WalkerWorld } from \"../../../walkerworld/walkerworld\";\r\n//import { MatterEngine } from \"../matterengine\";\r\nimport * as Matter from \"matter-js\";\r\n//import { MatterTools } from \"./mattertools\";\r\n\r\n\r\n\r\nexport abstract class MatterJunction  extends MatterObject {\r\n\r\n    public constructor(walkerWorld:WalkerWorld,matterEngine:MatterWalkerEngine,worldId:WorldId) {\r\n\t\tsuper(worldId);\t\t\r\n\t\t\r\n\t\t//////////this.registerRenderer(walkerWorld,matterEngine,worldId,worldObjectDisplay);\r\n\t\t//this.addToEngine(walkerWorld,matterEngine);\r\n\t}\r\n\r\n\tpublic abstract getWorldPosition():WorldPosition\r\n\r\n\tpublic abstract translate(worldPosition:WorldPosition):void;\r\n\r\n\t//////////public abstract registerRenderer(walkerWorld:WalkerWorld,matterEngine:MatterEngine,worldId:WorldId,worldObjectDisplay:WorldObjectDisplay):void;\r\n\r\n\tpublic abstract addToEngine(walkerWorld:WalkerWorld,matterEngine:MatterWalkerEngine):void;\r\n\t\r\n\tpublic abstract getAreaJunction():Matter.Body;\r\n\r\n\tpublic abstract getBoundryJunction():Matter.Body;\r\n\r\n    \r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t\t/**\r\n\t\tlet junctionBodyShape:WorldShape = junction.worldObjectDisplay.getShape(junction,Junction.junctionBody);\r\n\t\tthis.junctionBody = matterEngine.matterTools.getBodyFromWorldShape(\r\n\t\t\tnew WorldPosition(position.x,position.y),\r\n\t\t\tjunctionBodyShape);\r\n\t\t//this.junctionBody = Matter.Bodies.circle(position.x,position.y,30,{render:{fillStyle:\"blue\",strokeStyle:\"white\"}},8);\t\t\t\r\n\t\t\r\n\t\tthis.junctionBody.collisionFilter.category = MatterWalkerEngine.junctionFilter;\r\n\t\tthis.junctionBody.collisionFilter.mask = MatterWalkerEngine.junctionFilter|MatterWalkerEngine.boundsFilter;\t\t\t\r\n*/\r\n\r\n/*\r\n\t\tlet spacerBodyShape:WorldShape = junction.worldObjectDisplay.getShape(junction,Junction.junctionBody);\r\n\t\tthis.spacerBody = matterEngine.matterTools.getBodyFromWorldShape(\r\n\t\t\tnew WorldPosition(position.x,position.y),\r\n\t\t\tspacerBodyShape);\t\r\n\t\tMatter.Body.scale(this.spacerBody,2.0,2.0,this.spacerBody.position);\r\n*/\t\t\t\t\t\r\n\t\r\n/*\r\n\t\tmatterEngine.matterTools.getVectorArrayFromWorldPostionArray(\r\n\t\t\t\tnew WorldPosition(position.x,position.y),\r\n\t\t\t\tjunctionBodyShape.shapePoints)\r\n\t\t\t);\r\n\t\tvar polygon = { \r\n\t\t\tlabel: 'Polygon Body',\r\n\t\t\tposition: { x: x, y: y },\r\n\t\t\tvertices: Matter.Vertices.\r\n\t\t};\r\n\r\n\t\tif (options.chamfer) {\r\n\t\t\tvar chamfer = options.chamfer;\r\n\t\t\tpolygon.vertices = Vertices.chamfer(polygon.vertices, chamfer.radius, \r\n\t\t\t\t\t\t\t\t\tchamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\r\n\t\t\tdelete options.chamfer;\r\n\t\t}\r\n\r\n\t\treturn Body.create(Common.extend({}, polygon, options));\r\n\t\t*/\r\n\t\t//this.spacerBody = Matter.Bodies.circle(position.x,position.y,60,{render:{fillStyle:\"transparent\",strokeStyle:\"white\"}},8);\r\n\t\t//this.spacerBody.collisionFilter.category = MatterWalkerEngine.junctionSpacerFilter;\r\n\t\t//this.spacerBody.collisionFilter.mask = MatterWalkerEngine.junctionSpacerFilter|MatterWalkerEngine.boundsFilter;\r\n\t\t//let spacerPosition = matterEngine.matterTools.getVectorFromWorldPostion(\r\n\t\t//\tnew WorldPosition(0,0),\r\n\t\t//\tnew WorldPosition(position.x,position.y));\r\n\t\t/*\r\n\t\tthis.spacerBody = Matter.Body.create(\r\n\t\t\t//Matter.Common.extend({},\r\n\t\t\t{\r\n\t\t\t\tposition: { x: position.x, y: position.y },\r\n\t\t\t\tvertices: matterEngine.matterTools.getVectorArrayFromWorldPostionArray(\r\n\t\t\t\t\tnew WorldPosition(position.x,position.y),\r\n\t\t\t\t\tjunctionBodyShape.shapePoints)\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t{collisionFilter:{\r\n\t\t\t\tcategory:MatterWalkerEngine.junctionSpacerFilter,\r\n\t\t\t\tgroup:0,\r\n\t\t\t\tmask:MatterWalkerEngine.junctionSpacerFilter|MatterWalkerEngine.boundsFilter\r\n\t\t\t}\r\n\t\t}\r\n\t\t\t\r\n\t\t);\r\n\t\tthis.spacerBody.collisionFilter.category = MatterWalkerEngine.junctionSpacerFilter;\r\n\t\tthis.spacerBody.collisionFilter.mask = MatterWalkerEngine.junctionSpacerFilter|MatterWalkerEngine.boundsFilter;\r\n\t\t*/\r\n\t\t/*\r\n\t\tMatter.Body.setVertices(\r\n\t\t\tthis.spacerBody,\r\n\t\t\tmatterEngine.matterTools.getVectorArrayFromWorldPostionArray(\r\n\t\t\t\tnew WorldPosition(position.x,position.y),\r\n\t\t\t\tjunctionBodyShape.shapePoints)\r\n\t\t\t);\r\n\t\t\t*/\r\n\t\t//Matter.Body.scale(this.spacerBody,2.0,2.0,this.spacerBody.position);\r\n\t\t//////////////Matter.Body.translate(this.spacerBody,spacerPosition);\r\n","//import { Junction } from \"../../walkerworld/junction\";\r\nimport { WorldPosition } from \"../../../../world/worldposition\";\r\nimport { MatterWalkerEngine } from \"../matterwalkerengine\";\r\nimport { MatterTools } from \"../../../../engine/matterengine/mattertools\";\r\nimport { WalkerWorld } from \"../../../walkerworld/walkerworld\";\r\nimport { WorldId } from \"../../../../world/worldid\";\r\n//import { WorldObjectDisplay } from \"../../display/worldobjectdisplay\";\r\n//import { MatterEngine } from \"../matterengine\";\r\n//import { MatterEvent } from \"../events/matterevent\";\r\nimport { MatterCircle } from \"../../../../engine/matterengine/shapes/mattercircle\";\r\nimport { MatterJunction } from \"./matterjunction\";\r\nimport { JunctionOneCircle } from \"../../engineobjects/junctiononecircle\";\r\nimport { EngineObject } from \"../../../../engine/engineobjects/engineobject\";\r\nimport { CircleEngineShape } from \"../../../../engine/shapes/circleengineshape\";\r\n\r\n\r\nimport * as Matter from \"matter-js\";\r\n//import { MatterTools } from \"./mattertools\";\r\n\r\n\r\n\r\nexport class MatterJunctionOneCircle  extends MatterJunction implements JunctionOneCircle{\r\n\tprivate _spacerBody:Matter.Body;\r\n\tprivate _junctionBody:Matter.Body;\r\n\tprivate _circle:MatterCircle;\r\n\r\n\tpublic constructor(walkerWorld:WalkerWorld,matterEngine:MatterWalkerEngine,worldId:WorldId,worldPosition:WorldPosition) {\r\n\t\tsuper(walkerWorld,matterEngine,worldId);\r\n\t\tlet position = MatterTools.getVectorFromWorldPostion(worldPosition);\r\n\t\t\r\n\t\t////////////let options:any =  {};//{render:{fillStyle:\"blue\",strokeStyle:\"white\"}};\r\n\t\tlet curvePoints:number = 8;\r\n\t\tthis.circle = new MatterCircle(\"junctionBody\",20,curvePoints,worldPosition,{render:{visable:false}}) ;\r\n\t\tthis.circle.circleBody.render.visible = false;\r\n\t\t\r\n\t\tthis.junctionBody = this.circle.circleBody;\r\n\t\tthis.junctionBody.collisionFilter.category = MatterWalkerEngine.junctionFilter;\r\n\t\tthis.junctionBody.collisionFilter.mask = MatterWalkerEngine.junctionFilter|MatterWalkerEngine.boundsFilter;\t\t\r\n\r\n\t\tthis.spacerBody = Matter.Bodies.circle(position.x,position.y,30,{render:{fillStyle:\"transparent\",strokeStyle:\"white\"}},8);\r\n\t\tthis.spacerBody.collisionFilter.category = MatterWalkerEngine.junctionSpacerFilter;\r\n\t\tthis.spacerBody.collisionFilter.mask = MatterWalkerEngine.junctionSpacerFilter|MatterWalkerEngine.boundsFilter;\r\n\r\n\t\t///this.registerRenderer(walkerWorld,matterEngine,junction.worldId,junction.worldObjectDisplay);\r\n\r\n\t\tthis.addToEngine(walkerWorld,matterEngine);\r\n\t\t\r\n\t}\r\n\r\n\tpublic getEngineObject():EngineObject {\r\n\t\treturn(this);\r\n\t}\r\n\r\n\tpublic getCircle(): CircleEngineShape {\r\n\t\treturn(this.circle);\r\n\t}\r\n\r\n\r\n\tpublic getWorldPosition():WorldPosition {\r\n\t\treturn( MatterTools.bodyPostion2WorldPosition(this.junctionBody) );\r\n\t}\r\n\r\n\tpublic translate(worldPosition:WorldPosition):void {\r\n\t\tMatter.Body.translate(this.junctionBody,MatterTools.getVectorFromWorldPostion(worldPosition));\r\n\t\tMatter.Body.translate(this.spacerBody,MatterTools.getVectorFromWorldPostion(worldPosition));\r\n\t}\r\n\r\n\tpublic addToEngine(walkerWorld:WalkerWorld,matterEngine:MatterWalkerEngine):void {\r\n\t\tMatter.World.add(matterEngine.engine.world,[this.spacerBody,this.junctionBody]);\r\n\t\tmatterEngine.pin(this.spacerBody,this.junctionBody);\r\n\r\n\t\tthis.spacerBody.collisionFilter.category = MatterWalkerEngine.junctionSpacerFilter;\r\n\t\tthis.spacerBody.collisionFilter.mask = MatterWalkerEngine.junctionSpacerFilter|MatterWalkerEngine.boundsFilter;\t\t\r\n\t}\r\n\t\r\n\tpublic getAreaJunction():Matter.Body {\r\n\t\treturn(this.spacerBody);\r\n\t}\r\n\r\n\tpublic getBoundryJunction():Matter.Body {\r\n\t\treturn(this.junctionBody);\r\n\t}\r\n\r\n\tprivate get spacerBody(): Matter.Body {\r\n\t\treturn this._spacerBody;\r\n\t}\r\n\r\n\tprivate set spacerBody(value: Matter.Body) {\r\n\t\tthis._spacerBody = value;\r\n\t}\r\n\r\n\tpublic get junctionBody(): Matter.Body {\r\n\t\treturn this._junctionBody;\r\n\t}\r\n\r\n\tpublic set junctionBody(value: Matter.Body) {\r\n\t\tthis._junctionBody = value;\r\n\t}\r\n\r\n\tpublic get circle(): MatterCircle {\r\n\t\treturn this._circle;\r\n\t}\r\n\r\n\tpublic set circle(value: MatterCircle) {\r\n\t\tthis._circle = value;\r\n\t}\r\n\t\r\n    \r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t\t/**\r\n\t\tlet junctionBodyShape:WorldShape = junction.worldObjectDisplay.getShape(junction,Junction.junctionBody);\r\n\t\tthis.junctionBody = matterEngine.matterTools.getBodyFromWorldShape(\r\n\t\t\tnew WorldPosition(position.x,position.y),\r\n\t\t\tjunctionBodyShape);\r\n\t\t//this.junctionBody = Matter.Bodies.circle(position.x,position.y,30,{render:{fillStyle:\"blue\",strokeStyle:\"white\"}},8);\t\t\t\r\n\t\t\r\n\t\tthis.junctionBody.collisionFilter.category = MatterWalkerEngine.junctionFilter;\r\n\t\tthis.junctionBody.collisionFilter.mask = MatterWalkerEngine.junctionFilter|MatterWalkerEngine.boundsFilter;\t\t\t\r\n*/\r\n\r\n/*\r\n\t\tlet spacerBodyShape:WorldShape = junction.worldObjectDisplay.getShape(junction,Junction.junctionBody);\r\n\t\tthis.spacerBody = matterEngine.matterTools.getBodyFromWorldShape(\r\n\t\t\tnew WorldPosition(position.x,position.y),\r\n\t\t\tspacerBodyShape);\t\r\n\t\tMatter.Body.scale(this.spacerBody,2.0,2.0,this.spacerBody.position);\r\n*/\t\t\t\t\t\r\n\t\r\n/*\r\n\t\tmatterEngine.matterTools.getVectorArrayFromWorldPostionArray(\r\n\t\t\t\tnew WorldPosition(position.x,position.y),\r\n\t\t\t\tjunctionBodyShape.shapePoints)\r\n\t\t\t);\r\n\t\tvar polygon = { \r\n\t\t\tlabel: 'Polygon Body',\r\n\t\t\tposition: { x: x, y: y },\r\n\t\t\tvertices: Matter.Vertices.\r\n\t\t};\r\n\r\n\t\tif (options.chamfer) {\r\n\t\t\tvar chamfer = options.chamfer;\r\n\t\t\tpolygon.vertices = Vertices.chamfer(polygon.vertices, chamfer.radius, \r\n\t\t\t\t\t\t\t\t\tchamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\r\n\t\t\tdelete options.chamfer;\r\n\t\t}\r\n\r\n\t\treturn Body.create(Common.extend({}, polygon, options));\r\n\t\t*/\r\n\t\t//this.spacerBody = Matter.Bodies.circle(position.x,position.y,60,{render:{fillStyle:\"transparent\",strokeStyle:\"white\"}},8);\r\n\t\t//this.spacerBody.collisionFilter.category = MatterWalkerEngine.junctionSpacerFilter;\r\n\t\t//this.spacerBody.collisionFilter.mask = MatterWalkerEngine.junctionSpacerFilter|MatterWalkerEngine.boundsFilter;\r\n\t\t//let spacerPosition = matterEngine.matterTools.getVectorFromWorldPostion(\r\n\t\t//\tnew WorldPosition(0,0),\r\n\t\t//\tnew WorldPosition(position.x,position.y));\r\n\t\t/*\r\n\t\tthis.spacerBody = Matter.Body.create(\r\n\t\t\t//Matter.Common.extend({},\r\n\t\t\t{\r\n\t\t\t\tposition: { x: position.x, y: position.y },\r\n\t\t\t\tvertices: matterEngine.matterTools.getVectorArrayFromWorldPostionArray(\r\n\t\t\t\t\tnew WorldPosition(position.x,position.y),\r\n\t\t\t\t\tjunctionBodyShape.shapePoints)\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t{collisionFilter:{\r\n\t\t\t\tcategory:MatterWalkerEngine.junctionSpacerFilter,\r\n\t\t\t\tgroup:0,\r\n\t\t\t\tmask:MatterWalkerEngine.junctionSpacerFilter|MatterWalkerEngine.boundsFilter\r\n\t\t\t}\r\n\t\t}\r\n\t\t\t\r\n\t\t);\r\n\t\tthis.spacerBody.collisionFilter.category = MatterWalkerEngine.junctionSpacerFilter;\r\n\t\tthis.spacerBody.collisionFilter.mask = MatterWalkerEngine.junctionSpacerFilter|MatterWalkerEngine.boundsFilter;\r\n\t\t*/\r\n\t\t/*\r\n\t\tMatter.Body.setVertices(\r\n\t\t\tthis.spacerBody,\r\n\t\t\tmatterEngine.matterTools.getVectorArrayFromWorldPostionArray(\r\n\t\t\t\tnew WorldPosition(position.x,position.y),\r\n\t\t\t\tjunctionBodyShape.shapePoints)\r\n\t\t\t);\r\n\t\t\t*/\r\n\t\t//Matter.Body.scale(this.spacerBody,2.0,2.0,this.spacerBody.position);\r\n\t\t//////////////Matter.Body.translate(this.spacerBody,spacerPosition);\r\n","import { EngineObject } from \"../../../../engine/engineobjects/engineobject\";\r\n\r\n//import { MatterEngine } from \"./matterengine\";\r\n//import { WorldId } from \"../world/worldid\";\r\n//import { WorldPosition } from \"../world/worldposition\";\r\n//import * as Matter from \"matter-js\";\r\n\r\nexport abstract class MatterObject extends EngineObject {\r\n\t\r\n\r\n}","import { Walker } from \"../../../walkerworld/walker\";\r\nimport { MatterWalkerEngine } from \"../matterwalkerengine\";\r\nimport { MatterDestination } from \"./matterdestination\";\r\nimport { WalkerWorld } from \"../../../walkerworld/walkerworld\";\r\nimport { MatterObject } from \"./matterobject\";\r\nimport { WorldPosition } from \"../../../../world/worldposition\";\r\nimport { MatterTools } from \"../../../../engine/matterengine/mattertools\";\r\nimport { MatterEngine } from \"../../../../engine/matterengine/matterengine\";\r\nimport { MatterEvent } from \"../../../../engine/matterengine/events/matterevent\";\r\n\r\nimport * as Matter from \"matter-js\";\r\n\r\n\r\n\r\n\r\nexport class MatterWalker  extends MatterObject {\r\n    private _walkerBody:Matter.Body;\r\n    private _walker2DestinationSpring:Matter.Constraint\t;\r\n\r\n\tpublic constructor(walkerWorld:WalkerWorld,matterEngine:MatterWalkerEngine,walker:Walker) {\r\n\t\tsuper(walker.worldId);\r\n\r\n\t\tlet junctionDensity = matterEngine.junctions.get(walker.getCurrentJunction(walkerWorld).worldId.id).getAreaJunction().density;\r\n\t\t\r\n\t\tlet position:Matter.Vector = this.getCurrentMaterDestination(walker,matterEngine).getSpatialBody().position;\r\n\t\t\r\n\t\tthis.walkerBody = Matter.Bodies.circle(position.x,position.y,10,\r\n\t\t\t{},//{render:{fillStyle:\"transparent\",strokeStyle:\"transparent\"},density:junctionDensity/1000},\r\n\t\t\t8);\r\n\t\t\r\n\t\tthis.walkerBody.restitution = 0.0;\r\n        this.walkerBody.collisionFilter.category = MatterWalkerEngine.walkerTravleing;\r\n\t\tthis.walkerBody.collisionFilter.mask = \r\n\t\t\t//MatterEngine.walkerFilter|\r\n\t\t\tMatterWalkerEngine.walkerTravleing|\r\n\t\t\tMatterWalkerEngine.walkerArrived|\t\t\t\r\n\t\t\tMatterWalkerEngine.boundsFilter|\r\n\t\t\tMatterWalkerEngine.boundryContainerFilter|\r\n\t\t\tMatterWalkerEngine.boundrySpatialFilter;\r\n  \r\n\t\tthis.walkerBody.frictionAir = 0.5;\r\n\t\tthis.walkerBody.render.visible = false;\r\n\r\n\t\tthis.walker2DestinationSpring = Matter.Constraint.create({\r\n            bodyA: this.getAreaWalker(),\r\n            bodyB: matterEngine.destinations.get(walker.getCurrentDestination().worldId.id).getSpatialBody(),  \r\n            pointA: { x: -0, y: -0 },\r\n            pointB: { x: -0, y: -0 },\r\n            length:0,\r\n\t\t\tstiffness:0.0001,\r\n\t\t\t\r\n\t\t  });\r\n\t\tthis.walker2DestinationSpring.render.visible=false;\r\n\t\tthis.walkerTravelingTotDestination(walkerWorld,matterEngine);\t\r\n\t}\r\n\r\n\tpublic translate(worldPosition:WorldPosition):void {\r\n\t\tMatter.Body.translate(this.walkerBody,MatterTools.getVectorFromWorldPostion(worldPosition));\r\n\t}\r\n\t\r\n\tpublic getWorldPosition():WorldPosition {\r\n\t\treturn( MatterTools.bodyPostion2WorldPosition(this.walkerBody) );\r\n\t}\r\n \r\n\r\n\r\n\tpublic getCurrentMaterDestination(walker:Walker,matterEngine:MatterWalkerEngine) {\r\n\t\tlet matterDestination:MatterDestination = \r\n\t\t\t\tmatterEngine.destinations.get(walker.getCurrentDestination().worldId.id);\r\n\t\treturn(matterDestination);\r\n\r\n\t}\r\n\r\n\tpublic addToEngine(walker:Walker,walkerWorld:WalkerWorld,matterEngine:MatterWalkerEngine):void {\r\n\t\tMatter.World.add(matterEngine.engine.world,[this.walkerBody]);\r\n\t\tMatter.World.add(matterEngine.engine.world,[this.walker2DestinationSpring]);\r\n\t\tthis.enableWalkerEvents(walker,walkerWorld,matterEngine);\r\n\t}\r\n\r\n\tpublic walkerArrivedAtDestination(walkerWorld:WalkerWorld,matterEngine:MatterWalkerEngine) : void {\r\n\t\t//console.log(\"walkerArrivedAtDestination:walker=\"+this.walker.worldId.id+\":arrived!\");\r\n\t\tthis.getAreaWalker().collisionFilter.category  = MatterWalkerEngine.walkerArrived;\r\n\t\tthis.getWalker2DestinationSpring().stiffness = 0.0;\r\n\t\t//this.getAreaWalker().collisionFilter.category  |= ~MatterEngine.walkerArrived;\t\t\t\t\r\n\t}\r\n\r\n\tpublic walkerTravelingTotDestination(walkerWorld:WalkerWorld,matterEngine:MatterWalkerEngine) : void {\r\n\t\t//console.log(\"walkerTravelingTotDestination:walker=\"+this.walker.worldId.id+\":arrived!\");\r\n\t\tthis.getAreaWalker().collisionFilter.category  = MatterWalkerEngine.walkerTravleing;\r\n\t\tthis.getWalker2DestinationSpring().stiffness = 0.01;\t\t\r\n\t\t//this.getAreaWalker().collisionFilter.category  |= ~MatterEngine.walkerTravleing;\t\r\n\t}\r\n\r\n\tpublic enableWalkerEvents(walker:Walker,walkerWorld:WalkerWorld,matterWalkerEngine:MatterWalkerEngine):void {\r\n\r\n\t\tlet matterWalker:MatterWalker = this;\r\n\r\n\t\tmatterWalkerEngine.registerCollisionEvent(\r\n\t\t\tthis.getAreaWalker(),\r\n\t\t\tMatterEvent.collisionActive,\r\n\t\t\tfunction(matterEngine:MatterWalkerEngine,eventType:MatterEvent,event: Matter.IEventCollision<Matter.Engine>):void{\r\n\t\t\t\tlet containerDest:Matter.Body =  matterWalker.getCurrentMaterDestination(walker,matterEngine).getWalkerContainer();\t\t\t\t\r\n\t\t\t\tlet isWalkerInisdeContainer:boolean = Matter.Vertices.contains(\r\n\t\t\t\t\tcontainerDest.vertices,matterWalker.getAreaWalker().position);\r\n\t\t\t\t\r\n\t\t\t\tif(isWalkerInisdeContainer) matterWalker.walkerArrivedAtDestination(walkerWorld,matterEngine);\r\n\t\t\t\telse matterWalker.walkerTravelingTotDestination(walkerWorld,matterEngine);\r\n\r\n\r\n\t\t\t\tif(matterEngine.mouseConstraint.body===matterWalker.walkerBody)\r\n\t\t\t\t{\r\n\t\t\t\t\tconsole.log(\"collisionStart:walker:mouseClick!!\");\t\t\t\t\t\r\n\t\t\t\t}\r\n\r\n\t\t\t});\r\n\t}\r\n\r\n\tpublic getAreaWalker():Matter.Body {\r\n\t\treturn(this.walkerBody);\r\n\t}\r\n\r\n\tpublic getWalker2DestinationSpring():Matter.Constraint {\r\n\t\treturn(this.walker2DestinationSpring);\r\n\t}\r\n\r\n\r\n\tpublic get walker2DestinationSpring(): Matter.Constraint\t {\r\n\t\treturn this._walker2DestinationSpring;\r\n\t}\r\n\r\n\tpublic set walker2DestinationSpring(value: Matter.Constraint\t) {\r\n\t\tthis._walker2DestinationSpring = value;\r\n\t}\r\n\t\r\n\tpublic get walkerBody(): Matter.Body {\r\n\t\treturn this._walkerBody;\r\n\t}\r\n\r\n\tpublic set walkerBody(value: Matter.Body) {\r\n\t\tthis._walkerBody = value;\r\n\t}    \r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t/***\r\n\tpublic registerRenderer(matterEngine:MatterEngine,walker:Walker):void {\r\n\t\tlet matterWalker:MatterWalker = this;\r\n\t\tmatterEngine.registerTimestampedEvent(\r\n\t\t\twalker.worldId.id,\r\n\t\t\tMatterEvent.afterRender,\r\n\t\t\tfunction(matterEngine:MatterEngine,eventType:MatterEvent,event: Matter.IEventTimestamped<Matter.Engine>):void{\r\n\t\t\t  //console.log(\"afterRender!!!!!!!!!!!!!!!!!!!!\");\t\r\n\t\t\t  //walker.worldObjectDisplay.drawObject();\r\n\t\t\t  let context:CanvasRenderingContext2D = matterEngine.render.context;\r\n\t\t\t  \t\t\r\n\t\t\t  context.fillStyle = MatterTools.getColorFromString(\"ff0000ff\");\r\n\t\t\t  context.strokeStyle = MatterTools.getColorFromString(\"0000ffff\");\r\n\r\n\t\t\t  context.beginPath();\r\n\t\t\t  context.arc(matterWalker.walkerBody.position.x,\r\n\t\t\t\tmatterWalker.walkerBody.position.y,\r\n\t\t\t\t10,\r\n\t\t\t\t0,Math.PI * 2, false);\r\n\t\t\t  context.closePath();\r\n\t\t\t  context.fill();\r\n\t\t\t  context.lineWidth = 1;\r\n\t\t\t  context.stroke();\r\n\t\t\t});    \r\n\t}\r\n***/","import { Walker } from \"../../walkerworld/walker\";\r\nimport { Junction } from \"../../walkerworld/junction\";\r\nimport { Destination } from \"../../walkerworld/destination\";\r\nimport { WorldPosition } from \"../../../world/worldposition\";\r\nimport { WorldObject } from \"../../../world/worldobject\";\r\n\r\nimport { Path } from \"../../walkerworld/path\";\r\nimport { WalkerEngine } from \"../../walkerworld/walkerengine\";\r\nimport { WalkerWorld } from \"../../walkerworld/walkerworld\";\r\nimport { MatterJunction } from \"./engineobjects/matterjunction\";\r\nimport { MatterDestination } from \"./engineobjects/matterdestination\";\r\nimport { MatterWalker } from \"./engineobjects/matterwalker\";\r\nimport { MatterEngine } from \"../../../engine/matterengine/matterengine\";\r\nimport { MatterTools } from \"../../../engine/matterengine/mattertools\";\r\n//import { CircleEngineShape } from \"../engine/shapes/circleengineshape\";\r\n//import { MatterCircle } from \"./shapes/mattercircle\";\r\nimport { JunctionOneCircle } from \"../../engine/engineobjects/junctiononecircle\";\r\nimport { MatterJunctionOneCircle } from \"./engineobjects/matterjunctiononecirle\";\r\nimport { DisplayHolder } from \"../../../display/displayholder\";\r\n\r\n\r\n\r\n//import { MatterEvent } from \"./matterevent\";\r\n\r\nimport * as Matter from \"matter-js\";\r\n\r\nexport class MatterWalkerEngine extends MatterEngine implements WalkerEngine,DisplayHolder {\r\n    private _junctions : Map<string,MatterJunction>;\r\n    private _destinations : Map<string,MatterDestination>;\r\n    private _walkers : Map<string,MatterWalker>;\r\n    private _paths : Map<string,Matter.Constraint>;\r\n\r\n    public static boundsFilter:number = 1;//0x0001;\r\n    public static walkerFilter:number = 2;\r\n    public static junctionSpacerFilter:number = 4;\r\n    public static junctionFilter:number = 8;\r\n    public static boundryContainerFilter:number = 16;\r\n    public static boundrySpatialFilter:number = 32;\r\n    public static walkerTravleing:number = 64;\r\n    public static walkerArrived:number = 128;\r\n\r\n    public constructor() {\r\n        super();\r\n\r\n        this.junctions = new Map<string,MatterJunction>();\r\n        this.destinations = new Map<string,MatterDestination>();\r\n        this.paths = new Map<string,Matter.Constraint>();    \r\n        this.walkers = new Map<string,MatterWalker>(); \r\n        \r\n        this.registerWalkerEvents();\r\n    }\r\n\r\n    public getWorldObjectContainingPosition(worldPosition:WorldPosition):WorldObject {\r\n      return(null);\r\n    }\r\n\r\n    public registerWalkerEvents():void {\r\n\r\n      /*\r\n      this.registerCompositeEvent(\r\n        \"junctionSpacer\",\r\n        MatterEvent.afterUpdate,\r\n        function(matterEngine:MatterEngine,eventType:MatterEvent,event: Matter.IEventComposite<Matter.Composite>):void{\r\n        // console.log(\"junctionSpacer!!!!!!!!!!!!!!!!!!!!\");\t\t\t\t\t\r\n        });\r\n\r\n        \r\n      this.registerTimestampedEvent(\r\n        \"beforeRender\",\r\n        MatterEvent.beforeRender,\r\n        function(matterEngine:MatterEngine,eventType:MatterEvent,event: Matter.IEventTimestamped<Matter.Engine>):void{\r\n          //console.log(\"beforeRender!!!!!!!!!!!!!!!!!!!!\");\t\t\t\t\t\r\n        });\r\n*/\r\n       \r\n      \r\n  \r\n    }\r\n\r\n    /*\r\n    public getNewCircleEngineShape(shapeName:string,radius:number,worldPosition:WorldPosition):CircleEngineShape {\r\n      let options:any =  {render:{fillStyle:\"blue\",strokeStyle:\"white\"}};\r\n      let curvePoints:number = 8;\r\n      return( new MatterCircle(shapeName,radius,curvePoints,worldPosition,options) );\r\n\r\n    }\r\n*/\r\n    //     public constructor(walkerWorld:WalkerWorld,matterEngine:MatterWalkerEngine,junction:Junction,worldPosition:WorldPosition,matterCircle:MatterCircle) {\r\n\r\n    \r\n\r\n    public addPath(walkerWorld:WalkerWorld,path:Path):void {    \r\n      if(!this.paths.has(path.worldId.id))\r\n      {\r\n        if(this.paths.has(Path.getPathId(path.endJunction,path.startJunction).id))\r\n        {\r\n          this.paths.set(path.worldId.id,\r\n            this.paths.get(Path.getPathId(path.endJunction,path.startJunction).id) );\r\n        }\r\n        else\r\n        {\r\n          //let endPosition:Matter.Vector = (this.hasJunction(world,path.endJunction)) ? null : null;\r\n          //this.addJunction(world,path.startJunction,);\r\n          let matterStartJunction:Matter.Body = this.junctions.get(path.startJunction.worldId.id).getAreaJunction();\r\n          /*\r\n             getJunctionOneCircle(junction:Junction,worldPosition:WorldPosition,walkerWorld:WalkerWorld):JunctionOneCircle {\r\n              let matterJunctionOneCircle:MatterJunctionOneCircle = new MatterJunctionOneCircle(walkerWorld,this,junction,worldPosition);\r\n                this.addJunction(walkerWorld,junction,matterJunctionOneCircle);\r\n              return(matterJunctionOneCircle);\r\n            }\r\n            */\r\n          \r\n          \r\n          //this.addJunction(walkerWorld,path.endJunction,\r\n          //  MatterTools.getWorldPostionFromVector(matterStartJunction.position));\r\n\r\n          let matterEndJunction:Matter.Body = this.junctions.get(path.endJunction.worldId.id).getAreaJunction();\r\n          \r\n          let matterPath = Matter.Constraint.create({\r\n              bodyA: matterStartJunction,\r\n              bodyB: matterEndJunction,  \r\n              pointA: { x: -0, y: -0 },\r\n              pointB: { x: -0, y: -0 },\r\n              length:59,\r\n              stiffness:0.01,\r\n            });\r\n          this.paths.set(path.worldId.id,matterPath);\r\n        \r\n          Matter.World.add(this.engine.world,[matterPath]);           \r\n        } \r\n      }\r\n    }\r\n\r\n    public changeWalkerDestination(walkerWorld:WalkerWorld,walker:Walker,destination:Destination):void{\r\n      let matterWalker:MatterWalker = this.walkers.get(walker.worldId.id);\r\n\r\n      matterWalker.getWalker2DestinationSpring().bodyB =  \r\n          matterWalker.getCurrentMaterDestination(walker,this).getSpatialBody();\r\n\r\n      matterWalker.walkerTravelingTotDestination(walkerWorld,this);\r\n    }       \r\n    \r\n    public addWalker(walkerWorld:WalkerWorld,walker:Walker):void { \r\n      if(!this.walkers.has(walker.worldId.id))\r\n      {\r\n        let matterWalker:MatterWalker = new MatterWalker(walkerWorld,this,walker);\r\n        this.walkers.set(walker.worldId.id,matterWalker);\r\n        matterWalker.addToEngine(walker,walkerWorld,this);\r\n      }\r\n    }\r\n\r\n    public addDestination(walkerWorld:WalkerWorld,destination:Destination):void { \r\n      if(!this._destinations.has(destination.worldId.id))\r\n      {\r\n        let matterDestination = new MatterDestination(walkerWorld,this,destination);\r\n        this.destinations.set(destination.worldId.id,matterDestination);\r\n        matterDestination.addToEngine(walkerWorld,this);         \r\n      }\r\n    }\r\n\r\n    public hasJunction(junction:Junction):boolean {\r\n      return(this.junctions.has(junction.worldId.id));\r\n    }\r\n\r\n    public getMatterJunction(junction:Junction):MatterJunction {\r\n      return(this.junctions.get(junction.worldId.id));\r\n    }\r\n\r\n    public getJunctionPosition(junction:Junction):WorldPosition {\r\n      return( this.vectorToPosition(this.getMatterJunction(junction).getAreaJunction().position) );                       \r\n  \r\n    }\r\n\r\n    /*\r\n    public setJunctionPosition(junction:Junction,position:WorldPosition):void{\r\n      this.getMatterJunction(junction).setPosition(this,position);\r\n    }\r\n    */\r\n\r\n    public vectorToPosition(vector:Matter.Vector):WorldPosition {\r\n      return( new WorldPosition(vector.x,vector.y));\r\n    }\r\n\r\n\r\n    getJunctionOneCircle(junction:Junction,worldPosition:WorldPosition,walkerWorld:WalkerWorld):JunctionOneCircle {\r\n      let matterJunctionOneCircle:MatterJunctionOneCircle = new MatterJunctionOneCircle(walkerWorld,this,junction.worldId,worldPosition);\r\n      this.addJunction(walkerWorld,junction,matterJunctionOneCircle);\r\n      return(matterJunctionOneCircle);\r\n    }\r\n    \r\n    \r\n    public addJunction(walkerWorld:WalkerWorld,junction:Junction,matterJunction:MatterJunction):void {\r\n      //this.addJunctionMatterPosition(walkerWorld,junction,Matter.Vector.create(position.x,position.y));                       \r\n\r\n      if(!this.hasJunction(junction))\r\n      {\r\n              //let matterJunction = new MatterJunction(walkerWorld,this,junction,position);    \r\n              \r\n              this.junctions.set(junction.worldId.id,matterJunction);\r\n\r\n              matterJunction.addToEngine(walkerWorld,this);                       \r\n      }\r\n  \r\n    }\r\n    \r\n    \r\n/*\r\n    public addJunctionMatterPosition(walkerWorld:WalkerWorld,junction:Junction,position:Matter.Vector):void {\r\n      if(!this.hasJunction(junction))\r\n      {\r\n              let matterJunction = new MatterJunction(walkerWorld,this,junction,position);      \r\n              this.junctions.set(junction.worldId.id,matterJunction);\r\n              matterJunction.addToEngine(walkerWorld,this);                       \r\n      }\r\n    }\r\n*/\r\n\r\n    public isWalkerAtDestination(walkerWorld:WalkerWorld,walker:Walker):void {\r\n      //let matterDestination = this.destinations.get(walker.getCurrentDestination().worldId.id);      \r\n    }       \r\n    \r\n    public pin(bodyA:Matter.Body,bodyB:Matter.Body):void {\r\n      let pin = Matter.Constraint.create({\r\n              bodyA: bodyA,\r\n              bodyB: bodyB,  \r\n            });\r\n  \r\n      Matter.World.add(this.engine.world,[pin]);\r\n    }\r\n    \r\n    public createBounds(width:number,height:number):void {\r\n      let wallBoundsRect = Matter.Bodies.rectangle(width/2,height/2,width,height,{});\r\n      let walls:Matter.Body = MatterTools.createBoundObject(wallBoundsRect,1,10);\r\n      walls.collisionFilter.category = MatterWalkerEngine.boundsFilter;\r\n      walls.restitution = 1.0;\r\n      Matter.Body.setStatic(walls,true);\r\n      Matter.World.add(this.engine.world, [walls]);\r\n      \r\n      \r\n  \r\n    }\r\n\r\n    public get junctions(): Map<string,MatterJunction> {\r\n\t\treturn this._junctions;\r\n\t}\r\n\r\n\tpublic set junctions(value: Map<string,MatterJunction>) {\r\n\t\tthis._junctions = value;\r\n    }\r\n    \r\n    public get paths(): Map<string,Matter.Constraint> {\r\n\t\treturn this._paths;\r\n\t}\r\n\r\n\tpublic set paths(value: Map<string,Matter.Constraint>) {\r\n\t\tthis._paths = value;\r\n    }\r\n\r\n    public get walkers(): Map<string,MatterWalker> {\r\n\t\treturn this._walkers;\r\n\t}\r\n\r\n\tpublic set walkers(value: Map<string,MatterWalker>) {\r\n\t\tthis._walkers = value;\r\n  }\r\n  \r\n\r\n\tpublic get destinations(): Map<string,MatterDestination> {\r\n\t\treturn this._destinations;\r\n\t}\r\n\r\n\tpublic set destinations(value: Map<string,MatterDestination>) {\r\n\t\tthis._destinations = value;\r\n\t}\r\n  \r\n    \r\n  \r\n\r\n    \r\n}","import { Junction } from \"./junction\";\r\nimport { WorldObject } from \"../../world/worldobject\";\r\nimport { WorldId } from \"../../world/worldid\";\r\nimport { WorldPosition } from \"../../world/worldposition\";\r\nimport { Drawable } from \"../../display/drawable\";\r\n\r\n\r\nexport class Path extends WorldObject {\r\n\r\n    private _startJunction: Junction;    \r\n\tprivate _endJunction: Junction;\r\n\tprivate _pathWorldObject:WorldObject;\r\n    \r\n    public constructor(startJunction:Junction,endJunction:Junction,pathWorldObject:WorldObject)  {\r\n\t\t super(Path.getPathId(startJunction,endJunction));\r\n\t\t this.pathWorldObject = pathWorldObject;\r\n         this.startJunction = startJunction;\r\n         this.endJunction = endJunction;\r\n\t}\r\n\t\r\n\tpublic static getPathId(startJunction:Junction,endJunction:Junction):WorldId{\r\n\t\treturn(new WorldId(startJunction.worldId.id+\":\"+endJunction.worldId.id));\r\n\t}\r\n\r\n\tpublic get startJunction(): Junction {\r\n\t\treturn this._startJunction;\r\n\t}\r\n\r\n\tpublic set startJunction(value: Junction) {\r\n\t\tthis._startJunction = value;\r\n\t}\r\n\r\n\tpublic get endJunction(): Junction {\r\n\t\treturn this._endJunction;\r\n\t}\r\n\r\n\tpublic set endJunction(value: Junction) {\r\n\t\tthis._endJunction = value;\r\n\t}\r\n\r\n\tpublic get pathWorldObject(): WorldObject {\r\n\t\treturn this._pathWorldObject;\r\n\t}\r\n\r\n\tpublic set pathWorldObject(value: WorldObject) {\r\n\t\tthis._pathWorldObject = value;\r\n\t}\r\n\r\n\r\n\tpublic getWorldPosition():WorldPosition {\r\n\t\treturn(this.pathWorldObject.getWorldPosition());\r\n\t}\r\n\r\n\tpublic translate(worldPosition:WorldPosition):void {\r\n\t\tthis.pathWorldObject.translate(worldPosition);\r\n\t}\r\n\r\n\r\n\tpublic setWorldPosition(worldPosition:WorldPosition):void {\r\n\t\tthis.pathWorldObject.setWorldPosition(worldPosition);\r\n\t}\r\n\r\n\tpublic containsWorldPosition(worldPosition:WorldPosition):boolean {\r\n\t\treturn(this.pathWorldObject.containsWorldPosition(worldPosition));\r\n\t}\r\n\r\n\tpublic getDrawable():Drawable {\r\n\t\treturn(this.pathWorldObject.getDrawable());\r\n\t}\r\n\r\n}\r\n","//import { MatterTools } from \"../matterengine/mattertools\";\r\n//import { World } from \"../walkerworld/world\";\r\n//import { MatterEvent } from \"../matterengine/matterevent\";\r\n//import { MatterCollisionEvent } from \"../matterengine/mattercollisionevent\";\r\n//import { DisplayHolder } from \"../display/displayholder\";\r\nimport { WorldEngine } from \"../engine/worldengine\";\r\nimport { WorldPosition } from \"./worldposition\";\r\nimport { WorldObject } from \"./worldobject\";\r\nimport { CanvasHolder } from \"../display/canvas/canvasholder\";\r\n\r\n\r\nexport abstract class World {\r\n\r\n   // private _displayHolder:DisplayHolder;\r\n\tprivate _worldEngine:WorldEngine;\r\n\r\n    constructor(worldEngine:WorldEngine){\r\n\t\tthis.worldEngine = worldEngine;\r\n\t}\r\n\t\r\n\tpublic abstract getWorldObjectContainingPosition(worldPosition:WorldPosition):WorldObject;\r\n\r\n\tpublic abstract drawWorld(canvasHolder:CanvasHolder):void;\r\n\r\n\tpublic get worldEngine(): WorldEngine {\r\n\t\treturn this._worldEngine;\r\n\t}\r\n\r\n\tpublic set worldEngine(value: WorldEngine) {\r\n\t\tthis._worldEngine = value;\r\n\t}\r\n    \r\n}","\r\nexport class WorldId {\r\n    private _id:string;\r\n\r\n    public constructor(woldObjectId:string) {\r\n        this.id = woldObjectId;\r\n    }\r\n\r\n\tpublic get id(): string {\r\n\t\treturn this._id;\r\n\t}\r\n\r\n\tpublic set id(value: string) {\r\n\t\tthis._id = value;\r\n\t}\r\n\r\n}","import { WorldId } from \"./worldid\";\r\nimport { WorldPosition } from \"./worldposition\";\r\nimport { Drawable } from \"../display/drawable\";\r\n//import { WorldObjectDisplay } from \"../display/worldobjectdisplay\";\r\n//import { EngineObject } from \"../engine/engineobjects/engineobject\";\r\n\r\nexport abstract class WorldObject {\r\n\t\r\n\tprivate _worldId : WorldId;  \r\n\t//private _worldObjectDisplayArray:Array<WorldObjectDisplay>;\r\n\tprivate _isAnimated:boolean;\r\n\tprivate _isSelected:boolean;\r\n\t//private _drawable:Drawable;\r\n\t//private _worldPosition:WorldPosition;\r\n\t////private _engineObject:EngineObject;\r\n    \r\n    public constructor(worldId:WorldId) {\r\n\t\tthis.worldId = worldId;   \r\n\t\t//this.worldObjectDisplayArray = new Array<WorldObjectDisplay>();\r\n        //console.log(\"WorldObject:\"+this.worldId.id);\r\n\t}\r\n\r\n\r\n    public abstract getWorldPosition():WorldPosition;\r\n\tpublic abstract translate(worldPosition:WorldPosition):void;\r\n\tpublic abstract setWorldPosition(worldPosition:WorldPosition):void;\r\n\tpublic abstract containsWorldPosition(worldPosition:WorldPosition):boolean;\r\n\tpublic abstract getDrawable():Drawable;\r\n\r\n\r\n\r\n\tpublic get worldId(): WorldId {\r\n\t\treturn this._worldId;\r\n\t}\r\n\r\n\tpublic set worldId(value: WorldId) {\r\n\t\tthis._worldId = value;\r\n\t}\r\n\r\n/*\r\n\tpublic get worldObjectDisplayArray(): Array<WorldObjectDisplay> {\r\n\t\treturn this._worldObjectDisplayArray;\r\n\t}\r\n\r\n\tpublic set worldObjectDisplayArray(value: Array<WorldObjectDisplay>) {\r\n\t\tthis._worldObjectDisplayArray = value;\r\n\t}\r\n*/\r\n\r\n\tpublic get isAnimated(): boolean {\r\n\t\treturn this._isAnimated;\r\n\t}\r\n\r\n\tpublic set isAnimated(value: boolean) {\r\n\t\tthis._isAnimated = value;\r\n\t}\r\n\r\n\tpublic get isSelected(): boolean {\r\n\t\treturn this._isSelected;\r\n\t}\r\n\r\n\tpublic set isSelected(value: boolean) {\r\n\t\tthis._isSelected = value;\r\n\t}\r\n\r\n/*\r\n\tpublic get drawable(): Drawable {\r\n\t\treturn this._drawable;\r\n\t}\r\n\r\n\tpublic set drawable(value: Drawable) {\r\n\t\tthis._drawable = value;\r\n\t}\r\n*/\r\n\r\n\r\n\t\r\n}","//import { MatterTools } from \"../matterengine/mattertools\";\r\n//import { World } from \"../walkerworld/world\";\r\n//import { MatterEvent } from \"../matterengine/matterevent\";\r\n//import { MatterCollisionEvent } from \"../matterengine/mattercollisionevent\";\r\n//import { DisplayHolder } from \"../display/displayholder\";\r\nimport { WorldEngine } from \"../engine/worldengine\";\r\nimport { WorldObject } from \"./worldobject\";\r\nimport { World } from \"./world\";\r\nimport { CanvasHolder } from \"../display/canvas/canvasholder\";\r\nimport { WorldPosition } from \"./worldposition\";\r\n\r\n\r\nexport class WorldOfWorldObjects extends World{\r\n\r\n    private _worldObjectArray:Array<WorldObject>;\r\n\r\n    constructor(worldEngine:WorldEngine){\r\n        super(worldEngine);\r\n        this.worldObjectArray = new Array<WorldObject>();\r\n\t}\r\n\t\r\n\t\r\n\tpublic drawWorld(canvasHolder:CanvasHolder):void {\r\n        let context = canvasHolder.getContext();\r\n        canvasHolder.clearCanvas();\r\n        for(let i=0;i<this.worldObjectArray.length;i++) {\r\n            let worldObject:WorldObject = this.worldObjectArray[i];\r\n            worldObject.getDrawable().draw(context);\r\n        }\r\n    }\r\n\r\n    public getWorldObjectContainingPosition(worldPosition:WorldPosition):WorldObject {\r\n        let foundObject:WorldObject = null;\r\n        for(let i=0;i<this.worldObjectArray.length;i++) {\r\n            let worldObject:WorldObject = this.worldObjectArray[i];\r\n            if(worldObject.containsWorldPosition(worldPosition)) foundObject = worldObject;\r\n        }\r\n        return(foundObject);\r\n    }\r\n\r\n\r\n\tpublic get worldObjectArray(): Array<WorldObject> {\r\n\t\treturn this._worldObjectArray;\r\n\t}\r\n\r\n\tpublic set worldObjectArray(value: Array<WorldObject>) {\r\n\t\tthis._worldObjectArray = value;\r\n\t}\r\n\r\n    \r\n}","import { WorldObject } from \"./worldobject\";\r\n\r\n\r\nexport class WorldPosition {\r\n    private _x:number;\r\n    private _y:number;\r\n\r\n    public constructor(x:number,y:number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n\tpublic get x(): number {\r\n\t\treturn this._x;\r\n\t}\r\n\r\n\tpublic set x(value: number) {\r\n\t\tthis._x = value;\r\n\t}\r\n\r\n\tpublic get y(): number {\r\n\t\treturn this._y;\r\n\t}\r\n\r\n\tpublic set y(value: number) {\r\n\t\tthis._y = value;\r\n\t}\r\n\r\n\tpublic clone():WorldPosition {\r\n\t\treturn(new WorldPosition(this.x,this.y));\r\n\t}\r\n\r\n\tpublic getDeltaY(worldPosition:WorldPosition):number\r\n\t{\r\n\t\t\treturn(this.y-worldPosition.y);\r\n\t}\r\n\r\n\tpublic getDeltaX(worldPosition:WorldPosition):number\r\n\t{\r\n\t\t\treturn(this.x-worldPosition.x);\r\n\t}\r\n\r\n\tpublic getDelta(worldPosition:WorldPosition):WorldPosition\r\n\t{\r\n\t\t\treturn(new WorldPosition(this.getDeltaX(worldPosition),this.getDeltaY(worldPosition)));\r\n\t}\r\n\r\n\tpublic equals(worldPosition:WorldPosition):boolean\r\n\t{\r\n\t\treturn( (this.x==worldPosition.x) && (this.y==worldPosition.y) ) ;\r\n\t}\r\n\r\n\tpublic getDistance(worldPosition:WorldPosition):number\r\n\t{\r\n\t\treturn (Math.sqrt(Math.pow(this.getDeltaX(worldPosition), 2) + Math.pow(this.getDeltaY(worldPosition), 2)));\r\n\t}\r\n\r\n\tpublic static getAveragePostionFromWorldPositionList(positionList:Array<WorldPosition>):WorldPosition\r\n\t{\r\n\t\tlet x = 0.0;\r\n\t\tlet y = 0.0;\r\n\t\tfor(let i=0;i<positionList.length;i++)\r\n\t\t{\r\n\t\t\tlet p = positionList[i];\r\n\t\t\tx += p.x;\r\n\t\t\ty += p.y;\r\n\t\t}\r\n\t\tx = x / positionList.length;\r\n\t\ty = y / positionList.length;\r\n\t\treturn(new WorldPosition(x,y));\r\n\t}\r\n\r\n\tpublic static getAveragePostionFromWorldObjectList(worldObjectList:Array<WorldObject>):WorldPosition\r\n\t{\r\n\t  let x = 0.0;\r\n\t  let y = 0.0;\r\n\t  for(var i=0;i<worldObjectList.length;i++)\r\n\t  {\r\n\t\t  var p = worldObjectList[i].getWorldPosition();\r\n\t\t  x += p.x;\r\n\t\t  y += p.y;\r\n\t  }\r\n\t  x = x / worldObjectList.length;\r\n\t  y = y / worldObjectList.length;\r\n\t  return(new WorldPosition(x,y));\r\n\t}\r\n\r\n\tpublic static getPostionListFromNodeList(worldObjectList:Array<WorldObject>):Array<WorldPosition>\r\n\t{\r\n\t\tvar positions = new Array<WorldPosition>();\r\n\t\tfor (var i = 0; i < worldObjectList.length; i++)\r\n\t\t{\r\n\t\t\tpositions.push(worldObjectList[i].getWorldPosition());\r\n\t\t}\r\n\t\treturn(positions);\r\n\t}\r\n\r\n\r\n}"]}