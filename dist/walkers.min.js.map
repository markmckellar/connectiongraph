{"version":3,"sources":["node_modules/browser-pack/_prelude.js","source/display/canvas/canvasholderhtml.ts","source/display/canvas/canvasmouse.ts","source/display/canvas/mouseEventhandlerworldobject.ts","source/display/canvas/mousestatus.ts","source/display/drawableshapes/circledisplayshape.ts","source/display/worlddisplay.ts","source/engine/mockengine/mockengine.ts","source/engine/mockengine/shapes/mockcircle.ts","source/engine/mockengine/shapes/mockshape.ts","source/main.ts","source/world/world.ts","source/world/worldid.ts","source/world/worldobject.ts","source/world/worldofworldobjects.ts","source/world/worldposition.ts"],"names":["f","exports","module","define","amd","g","window","global","self","this","walkers","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","canvasmouse_1","mouseEventhandlerworldobject_1","worlddisplay_1","CanvasHolderHTML","canvasName","world","isVisable","isDrawable","canvas","document","getElementById","context","getContext","canvasMouse","CanvasMouse","MouseEventHandlerWorldObject","prototype","clearCanvas","clearRect","getWidth","getHeight","fillStyle","WorldDisplay","getColorFromString","fillRect","getCanvas","isCanvasVisable","_isVisable","isCanvasDrawable","_isDrawable","Object","defineProperty","_canvasName","value","_canvas","_context","_canvasMouse","worldposition_1","canvasholderHTML","mouseEventHandler","offset","getCanvasOffset","addEventListener","event","pointerDownEvent","pointerMoveEvent","pointerUpEvent","offsetLeft","offsetTop","object","isNaN","element","offsetParent","hasOwnProperty","WorldPosition","_offset","_mouseEventHandler","mousestatus_1","mouseStatus","MouseStatus","currentWorldObject","lastWorldObject","worldObjectSelected","wWorldObject","worldObjectDeselected","console","log","JSON","stringify","eventPosition","pageX","pageY","isDown","startPosition","position","isAnimated","isSelected","clickWorldObject","getWorldObjectContainingPosition","worldId","id","clone","clickOffset","getWorldPosition","getDelta","deltaPosition","newX","x","newY","y","setWorldPosition","_mouseStatus","_currentWorldObject","_lastWorldObject","_isDown","_startPosition","_position","_clickOffset","CircleDisplayShape","circleEngineShape","init","options","_circleEngineShape","draw","strokeStyle","beginPath","arc","getRadius","Math","PI","closePath","fill","lineWidth","stroke","colorString","parseInt","substring","getCirclePositionList","radius","curvePoints","pointList","Array","angleInc","angle","rads","push","cos","sin","getTrianglePositionList","width","height","getRectanglePositionList","getArcPositionList","endAngle","startAngle","abs","angle_1","fillTextMutipleLines","text","lineHeight","splitChar","lines","split","fillText","metricsTextMutipleLines","maxWidth","totalHeight","metrics","measureText","roundedRect","w","h","borderWitdh","borderColor","rectColor","moveTo","arcTo","MockEngine","mockshape_1","MockCircle","_super","drawable","_this","__extends","containsWorldPosition","worldPosition","getDistance","_curvePoints","_radius","MockShape","worldobject_1","drawObject","translate","getDrawable","_drawable","WorldObject","doDraw","drawWorld","canvasHolder","canvasholderhtml_1","mockengine_1","worldofworldobjects_1","mockcircle_1","circledisplayshape_1","worldid_1","mockEngine","WorldOfWorldObjects","circle1","WorldId","circle2","worldObjectArray","setInterval","World","worldEngine","_worldEngine","woldObjectId","_id","_worldId","_isAnimated","_isSelected","world_1","foundObject","worldObject","_worldObjectArray","_x","_y","getDeltaY","getDeltaX","equals","sqrt","pow","getAveragePostionFromWorldPositionList","positionList","p","getAveragePostionFromWorldObjectList","worldObjectList","getPostionListFromNodeList","positions"],"mappings":"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","file":"walkers.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import { CanvasHolder } from \"./canvasholder\";\r\nimport { World } from \"../../world/world\";\r\nimport { CanvasMouse } from \"./canvasmouse\";\r\nimport { MouseEventHandlerWorldObject } from \"./mouseEventhandlerworldobject\";\r\nimport { WorldDisplay } from \"../worlddisplay\";\r\n\r\n\r\nexport class CanvasHolderHTML implements CanvasHolder\r\n{\r\n\tprivate _isVisable:boolean;\r\n\tprivate _isDrawable:boolean;\r\n\tprivate _canvasName:string;\r\n\tprivate _canvas:HTMLCanvasElement;\r\n\tprivate _context:CanvasRenderingContext2D;\r\n\tprivate _canvasMouse:CanvasMouse;\r\n\t\r\n\tconstructor(canvasName:string,world:World)\r\n\t{\r\n\t\tthis.canvasName = canvasName;\r\n\t\tthis.isVisable = true;\r\n\t\tthis.isDrawable = true;\r\n\t\tthis.canvas = <HTMLCanvasElement>document.getElementById(this.canvasName);\t\t\t\r\n\t\tthis.context = this.canvas.getContext(\"2d\");\r\n\t\tthis.canvasMouse = new CanvasMouse(world,this,new MouseEventHandlerWorldObject());\r\n\t\t/*if (typeof document !== 'undefined')\r\n\t\t{\r\n\t\t\tthis.canvas = document.getElementById(this.canvasName);\t\t\t\r\n\t\t\tthis.context = this.canvas.getContext('2d');\r\n\t\t}*/\r\n\t}\r\n\r\n\tpublic clearCanvas():void {\r\n\t\tif(this.isVisable && this.isDrawable)\r\n\t\t{\r\n\t\t\tthis.context.clearRect(0, 0, this.getWidth(), this.getHeight());\r\n\t\t\tthis.context.fillStyle = WorldDisplay.getColorFromString(\"ffffff\"+\"ff\");\r\n\t\t\tthis.context.fillRect(0, 0, this.getWidth(), this.getHeight());\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getCanvas():HTMLCanvasElement {\r\n\t\treturn(this.canvas);\r\n\t}\r\n\r\n\tpublic getContext():CanvasRenderingContext2D {\r\n\t\treturn(this.context);\r\n\t}\r\n\t\r\n\tpublic getWidth():number\r\n\t{\r\n\t\treturn(this.canvas.width);\r\n\t}\r\n\t\r\n\tpublic getHeight():number\r\n\t{\r\n\t\treturn(this.canvas.height);\r\n\t}\r\n\r\n\tpublic isCanvasVisable(): boolean {\r\n\t\treturn this._isVisable;\r\n\t}\r\n\r\n\tpublic isCanvasDrawable(): boolean {\r\n\t\treturn this._isDrawable;\r\n\t}\r\n\r\n\tpublic get canvasName(): string {\r\n\t\treturn this._canvasName;\r\n\t}\r\n\r\n\tpublic set canvasName(value: string) {\r\n\t\tthis._canvasName = value;\r\n\t}\r\n\r\n\r\n\tpublic get canvas(): HTMLCanvasElement {\r\n\t\treturn this._canvas;\r\n\t}\r\n\r\n\tpublic set canvas(value: HTMLCanvasElement) {\r\n\t\tthis._canvas = value;\r\n\t}\r\n\r\n\tpublic get context(): CanvasRenderingContext2D {\r\n\t\treturn this._context;\r\n\t}\r\n\r\n\tpublic set context(value: CanvasRenderingContext2D) {\r\n\t\tthis._context = value;\r\n\t}\r\n\r\n\tpublic get isVisable(): boolean {\r\n\t\treturn this._isVisable;\r\n\t}\r\n\r\n\tpublic set isVisable(value: boolean) {\r\n\t\tthis._isVisable = value;\r\n\t}\r\n\r\n\tpublic get isDrawable(): boolean {\r\n\t\treturn this._isDrawable;\r\n\t}\r\n\r\n\tpublic set isDrawable(value: boolean) {\r\n\t\tthis._isDrawable = value;\r\n\t}\r\n\r\n\tpublic get canvasMouse(): CanvasMouse {\r\n\t\treturn this._canvasMouse;\r\n\t}\r\n\r\n\tpublic set canvasMouse(value: CanvasMouse) {\r\n\t\tthis._canvasMouse = value;\r\n\t}\r\n\t\r\n\t\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t/*\r\n\tstatic createCanvasHolderFromClientJson(worldDef,json)\r\n\t{\r\n\t  var canvasHolder = new CanvasHolder(json.canavsName,worldDef);\r\n\t  return(canvasHolder);\r\n\t}\r\n\t*/\r\n\t/*\r\n\t  getClientJson()\r\n\t  {\r\n\t\t  var json = {};\r\n\t\t  \r\n\t\t  \r\n\t\t  json.canvasName = this.canvasName;\r\n\t\t  json.origin = this.origin;\r\n\t\t  json.width = this.getWidth();\r\n\t\t  json.height = this.getHeight();\r\n\t\t  json.worldDef = this.worldDef;\r\n\t\t  \r\n\t\t  JSON.stringify(json);\r\n\t\t  return(json)\r\n\t  }\r\n\t*/\r\n\r\n\t/*  \r\n\tgetConnector(connectorDefKey,name)\r\n\t{\r\n\t\tvar connector = this.getConnectorDef(connectorDefKey)(this.worldDef,name);\r\n\t\tconnector.connectorDefKey = connectorDefKey;\r\n\t\treturn(connector);\r\n\t}\r\n\t*/\r\n\r\n\t/*\r\n\tgetConnectorDef(connectorDefKey)\r\n\t{\r\n\t\tvar connectorDef = this.worldDef.worldDisplay.connectorDefs[\"generic\"];\r\n\t\t\r\n\t\tvar foundConnectorDef = false;\r\n\t\tif(this.worldDef.worldDisplay.connectorDefs.hasOwnProperty(connectorDefKey))\r\n\t\t{\r\n\t\t\tconnectorDef = this.worldDef.worldDisplay.connectorDefs[connectorDefKey];\r\n\t\t\tfoundConnectorDef = true;\r\n\t\t}\r\n\t\tif(!foundConnectorDef) console.trace(\"CanvasHolder:getConnectorDef:connectorDefKey=\\\"\"+connectorDefKey+ \"\\\" was not found using generic\");\r\n\t\telse console.log(\"found connector display :\"+connectorDefKey);\r\n\t\tconnectorDef.connectorDefKey = connectorDefKey;\r\n\t\treturn(connectorDef);\r\n\t}\r\n\t*/\r\n\r\n\t/*\r\n\tgetConnectorDisplay(connectorDisplayKey)\r\n\t{\r\n\t\tvar connectorDisplay = this.worldDef.worldDisplay.connectorDisplay[\"generic\"];\r\n\t\t\r\n\t\tvar foundConnectorDisplay = false;\r\n\t\tif(this.worldDef.worldDisplay.connectorDisplay.hasOwnProperty(connectorDisplayKey))\r\n\t\t{\r\n\t\t\tconnectorDisplay = this.worldDef.worldDisplay.connectorDisplay[connectorDisplayKey];\r\n\t\t\tfoundConnectorDisplay = true;\r\n\t\t}\r\n\t\tif(!foundConnectorDisplay) console.trace(\"CanvasHolder:getConnectorDisplay:connectorDisplayKey=\\\"\"+connectorDisplayKey+ \"\\\" was not found using generic\");\r\n\t\tconnectorDisplay.connectorDisplayKey = connectorDisplayKey;\r\n\t\treturn(connectorDisplay);\r\n\t}\r\n\t*/\r\n\r\n\t/*\r\n\tgetGraphData(graphDataKey)\r\n\t{\r\n\t\tvar graphData = this.worldDef.worldDisplay.nodeDisplay[\"generic\"];\t\r\n\t\tvar foundGraphData = false;\r\n\t\tif(this.worldDef.worldDisplay.nodeDisplay.hasOwnProperty(graphDataKey))\r\n\t\t{\r\n\t\t\tgraphData = this.worldDef.worldDisplay.nodeDisplay[graphDataKey];\r\n\t\t\tfoundGraphData = true;\r\n\t\t}\r\n\t\tif(!foundGraphData) console.trace(\"CanvasHolder:getGraphData:graphDataKey=\\\"\"+graphDataKey+ \"\\\" was not found using generic\")\r\n\t\t//console.trace(\"CanvasHolder:getGraphData:graphDataKey=\\\"\"+graphDataKey+ \"\\\" was not found using generic\")\r\n\t\t//console.log(\"FOR:\"+graphDataKey+Common.toString(graphData));\r\n\t\t//console.log(\"getGraphData:graphDataKey=\"+graphDataKey+\":clone=\"+graphData.nodeDisplay.displayInfo.clone);\r\n\r\n\t\t//if(graphData.nodeDisplay.displayInfo.clone)\r\n\t\tif(graphData.nodeDisplayFunction)\r\n\t\t{\r\n\t\t\t//console.log(\"getGraphData:graphDataKey:FOUND A FUNCTION:\"+graphDataKey);\r\n\t\t\tgraphData = Object.create(graphData);\r\n\t\t\tgraphData.nodeDisplay = graphData.nodeDisplayFunction();\r\n\t\t\t//console.log(\"CLONING:\"+graphDataKey+Common.toString(graphData));\r\n\t\t\t//graphData.nodeDisplay.displayInfo = Object.create(graphData.nodeDisplay.displayInfo);\r\n\t\t\t//graphData.nodeDisplay.displayInfo  = JSON.parse(JSON.stringify(graphData.nodeDisplay.displayInfo));\r\n\t\t\t//graphData.nodeDisplay.displayInfo  = JSON.parse(JSON.stringify(graphData.nodeDisplay.displayInfo));\r\n\t\t\t//graphData = Object.create(graphData);\r\n\t\t\t//graphData.nodeDisplay.displayInfo.ts = new Date().getTime();\r\n\r\n\r\n\t\t}\r\n\r\n\t\tgraphData.graphDataKey = graphDataKey;\r\n\t\treturn(graphData);\r\n\t}\r\n\t*/\r\n\t/*\r\n\tclone(origin)\r\n\t{\r\n\t\tvar canvasHolder = new CanvasHolderHTML(this.canvasName);\r\n\t\t//canvasHolder.origin = origin;\r\n\t\t\r\n\t\tvar canvasHolder = new Object();\r\n\t\tcanvasHolder.origin = origin;\r\n\t\t\r\n\t\tcanvasHolder.canvasName = this.canvasName;\r\n\t\tcanvasHolder.canvas = this.canvas;\r\n\t\tcanvasHolder.context = this.context;\r\n\t\tcanvasHolder.isCanvasVisable = this.isCanvasVisable;\r\n\t\tcanvasHolder.isCanvasDrawable = this.isCanvasDrawable;\r\n\t\tcanvasHolder.isDrawable = this.isDrawable;\r\n\t\tcanvasHolder.isVisable = this.isVisable;\r\n\t\tcanvasHolder.getWidth = this.getWidth;\r\n\t\tcanvasHolder.getHeight = this.getHeight;\r\n\t\tcanvasHolder.worldDef = this.worldDef;\r\n\t\tcanvasHolder.getGraphData = this.getGraphData;\r\n\t\t\r\n\t\t\r\n\t\treturn(canvasHolder);\r\n\t}\r\n\t*/","import { WorldPosition } from \"../../world/worldposition\";\r\nimport { CanvasHolderHTML } from \"./canvasholderhtml\";\r\nimport { MouseEventHandler } from \"./mouseeventhandler\";\r\nimport { World } from \"../../world/world\";\r\n\r\n\r\nexport class CanvasMouse\r\n{\r\n\tprivate _offset:WorldPosition;\r\n\tprivate canvasholderHTML:CanvasHolderHTML;\r\n\tprivate _mouseEventHandler:MouseEventHandler;\r\n\t\r\n\r\n\tconstructor(world:World,canvasholderHTML:CanvasHolderHTML,mouseEventHandler:MouseEventHandler)\r\n\t{\r\n\t\tthis.canvasholderHTML = canvasholderHTML;\r\n\t\tthis.mouseEventHandler = mouseEventHandler;\r\n\t\tif(canvasholderHTML.isCanvasVisable()) \r\n\t\t{\r\n\t\t\t//this.offset = NodeCanvasMouse.getCanvasOffset(this.canvasholder.canvas);\r\n\t\t\tthis.offset = this.getCanvasOffset();\t\t\r\n\t\t\tvar self = this;\r\n\t\t\tthis.canvasholderHTML.canvas.addEventListener(\"pointerdown\", function(event) { self.pointerDownEvent(world,event) }, false);\r\n\t\t\tthis.canvasholderHTML.canvas.addEventListener(\"pointermove\",function(event) { self.pointerMoveEvent(world,event) }, false);\r\n\t\t\tthis.canvasholderHTML.canvas.addEventListener(\"pointerup\",function(event) { self.pointerUpEvent(world,event) }, false);\r\n\t\t\t//this.nodeMouseMovment = {};\r\n\t\t}\r\n\t}\r\n\r\n\tprivate getCanvasOffset():WorldPosition\r\n\t{\r\n\t    let offsetLeft = 0;\r\n\t\tlet offsetTop = 0;\r\n\t\tlet object:HTMLElement = this.canvasholderHTML.canvas;\r\n\t    do\r\n\t    {\r\n\t      if (!isNaN(object.offsetLeft))\r\n\t      {\r\n\t          offsetLeft += object.offsetLeft;\r\n\t      }\r\n\t      if (!isNaN(object.offsetTop))\r\n\t      {\r\n\t          offsetTop += object.offsetTop;\r\n\t\t  }   \r\n\t\t let element:any = object.offsetParent;\r\n\t\t if(element.hasOwnProperty(\"offsetParent\")) object = element;\r\n\t\t else object = null;\r\n\t    }\r\n\t    while(object);\r\n\t    \r\n\t    return( new WorldPosition(offsetLeft,offsetTop) );\r\n\t}\r\n\r\n\tpublic pointerDownEvent(world:World,event:MouseEvent) {\r\n\t\tthis.mouseEventHandler.pointerDownEvent(world,event);\r\n\t}\r\n\t\r\n\tpublic pointerMoveEvent(world:World,event:MouseEvent)\t{\r\n\t\tthis.mouseEventHandler.pointerMoveEvent(world,event);\r\n\r\n\t}\r\n\t\r\n\tpublic pointerUpEvent(world:World,event:MouseEvent)\r\n\t{\r\n\t\tthis.mouseEventHandler.pointerUpEvent(world,event);\r\n\r\n\t}\r\n\t\r\n\r\n\t\r\n\tpublic get offset(): WorldPosition {\r\n\t\treturn this._offset;\r\n\t}\r\n\r\n\tpublic set offset(value: WorldPosition) {\r\n\t\tthis._offset = value;\r\n\t}\r\n\r\n\tpublic get mouseEventHandler(): MouseEventHandler {\r\n\t\treturn this._mouseEventHandler;\r\n\t}\r\n\r\n\tpublic set mouseEventHandler(value: MouseEventHandler) {\r\n\t\tthis._mouseEventHandler = value;\r\n\t}\r\n\r\n\r\n\tpublic get $canvasholderHTML(): CanvasHolderHTML {\r\n\t\treturn this.canvasholderHTML;\r\n\t}\r\n\r\n\tpublic set $canvasholderHTML(value: CanvasHolderHTML) {\r\n\t\tthis.canvasholderHTML = value;\r\n\t}\r\n\t\r\n\r\n}\r\n","import { MouseStatus } from \"./mousestatus\";\r\nimport { WorldObject } from \"../../world/worldobject\";\r\nimport { MouseEventHandler } from \"./mouseeventhandler\";\r\nimport { WorldPosition } from \"../../world/worldposition\";\r\nimport { World } from \"../../world/world\";\r\n\r\n\r\n\r\nexport class MouseEventHandlerWorldObject implements MouseEventHandler {\r\n   private _mouseStatus:MouseStatus;\r\n   private _currentWorldObject:WorldObject;\r\n   private _lastWorldObject:WorldObject;\r\n\r\n    constructor()\r\n    {\r\n        this.mouseStatus = new MouseStatus();\r\n        this.currentWorldObject = null;\r\n        this.lastWorldObject = null;\r\n    }\r\n\r\n    public worldObjectSelected(world:World,event:MouseEvent,wWorldObject:WorldObject):void {\r\n\r\n    }\r\n\r\n    public worldObjectDeselected(world:World,event:MouseEvent):void {\r\n\r\n    }\r\n   \r\n    public pointerDownEvent(world:World,event:MouseEvent):void\r\n\t{\r\n\t\tconsole.log(\"pointerDownEvent:\"+JSON.stringify(event));;\r\n\t\tvar eventPosition:WorldPosition = new WorldPosition(event.pageX,event.pageY);\r\n\t\t//this.hideCurrentNodeInfo();\r\n\t\r\n\t\tthis.mouseStatus.isDown = true;\r\n\t\tthis.mouseStatus.startPosition = eventPosition;\r\n\t\tthis.mouseStatus.position = eventPosition;\r\n\t\tif(this.currentWorldObject!=null)\r\n\t\t{\r\n\t\t\tthis.currentWorldObject.isAnimated = true;\r\n\t\t\tthis.currentWorldObject.isSelected = false;\r\n\t\t\tthis.currentWorldObject = null;\r\n\t\t}\r\n\t\t\r\n\t\tlet clickWorldObject:WorldObject =  world.getWorldObjectContainingPosition(eventPosition);\r\n\t\r\n\t\tif(clickWorldObject!=null && clickWorldObject!=this.lastWorldObject)\r\n\t\t{\r\n\t\t\tconsole.log(\"pointerDownEvent:clickWorldObject=\"+clickWorldObject.worldId.id);\r\n\r\n\t\t\tthis.currentWorldObject = clickWorldObject;\r\n\r\n\t\t\tthis.mouseStatus.startPosition = eventPosition.clone();\r\n\r\n\t\t\tthis.currentWorldObject.isSelected = true;\r\n\t\t\tthis.mouseStatus.clickOffset = this.currentWorldObject.getWorldPosition().getDelta(eventPosition);\r\n\r\n\t\t\t/////////////////this.mouseStatus.clickOffset = clickWorldObject.getWorldPosition().getDelta(eventPosition);\r\n\t\t\t//this.mouseEventHandler.pointerDown(this.mouseStatus);\t\t\t\r\n\t\t\tthis.worldObjectSelected(world,event,this.currentWorldObject);\r\n\t\t}\r\n\t\t\r\n\t\tif(clickWorldObject==null)\r\n\t\t{\r\n\t\t\tthis.worldObjectDeselected(world,event);\r\n\t\t}\r\n\t\t\r\n\t\tif(this.lastWorldObject)\r\n\t\t{\r\n\t\t\tthis.worldObjectDeselected(world,event);\r\n\t\t\tthis.lastWorldObject.isSelected = false;\r\n\t\t\tthis.lastWorldObject = null;\r\n\t\t}\r\n\t\r\n    }\r\n    \r\n    \r\n\r\n    public pointerMoveEvent(world:World,event:MouseEvent):void {\r\n\t\tvar eventPosition = new WorldPosition(event.pageX,event.pageY);\r\n            if(this.mouseStatus.isDown)\r\n            {\r\n\t\t\t\t////////////console.log(\"pointerMoveEvent:\"+event);\r\n\r\n                this.worldObjectDeselected(world,event);\r\n        \r\n                if(this.currentWorldObject!=null)\r\n                {\r\n                    this.currentWorldObject.isAnimated = false;\r\n                    this.mouseStatus.position = eventPosition;\r\n                    var deltaPosition = this.mouseStatus.startPosition.getDelta(eventPosition);\r\n\r\n\r\n                          \r\n                    let newX = this.mouseStatus.startPosition.x-\r\n                            deltaPosition.x+\r\n                            this.mouseStatus.clickOffset.x;\r\n                    \r\n                    let newY = this.mouseStatus.startPosition.y-\r\n                            deltaPosition.y+\r\n                            this.mouseStatus.clickOffset.y;\r\n/*\r\n                    \r\n                    this.mouseStatus.node.position.setX(\r\n                            this.mouseStatus.nodeStartPosition.getX()-\r\n                            deltaPosition.getX()+\r\n                            this.mouseStatus.offset.getX());\r\n                    \r\n                    this.mouseStatus.node.position.setY(\r\n                            this.mouseStatus.nodeStartPosition.getY()-\r\n                            deltaPosition.getY()+\r\n                            this.mouseStatus.offset.getY());\r\n\r\n                            */\r\n\r\n                    this.currentWorldObject.setWorldPosition( new WorldPosition(newX,newY));\r\n                    \r\n                    /////////this.nodeCanvas.pointerMove(this.mouseStatus.node);\r\n                    /******* *\r\n                    if(!this.nodeMouseMovment.hasOwnProperty(this.mouseStatus.node.getNodeKey()))\r\n                    {\r\n                        this.nodeMouseMovment[this.mouseStatus.node.getNodeKey()] =\r\n                        {\r\n                                movePostionArray:new Array()\r\n                        }\r\n                    }\r\n                    this.nodeMouseMovment[this.mouseStatus.node.getNodeKey()].movePostionArray.push(this.mouseStatus.node.position.clone());\r\n                    **********/\r\n                }\r\n            }\r\n            else\r\n            {\r\n            }\r\n        }\r\n            \r\n\r\n    public pointerUpEvent(world:World,event:MouseEvent):void \t{\r\n\t\tconsole.log(\"pointerUpEvent:\"+JSON.stringify(event));\r\n\r\n\t\tif(this.currentWorldObject!=null)\r\n\t\t{\r\n\t\t\t///this.nodeCanvas.pointerUp(this.mouseStatus.node);\r\n\t\t\tthis.currentWorldObject.isAnimated = true;\r\n\t\t\t//this.mouseStatus.node.isSelected = false;\r\n\t\t\tthis.lastWorldObject = this.currentWorldObject;\r\n\t\r\n\t\t\tthis.currentWorldObject = null;\r\n\t\t}\r\n\t\tthis.mouseStatus.isDown = false;\r\n\t}\r\n\r\n\tpublic get mouseStatus(): MouseStatus {\r\n\t\treturn this._mouseStatus;\r\n\t}\r\n\r\n\tpublic set mouseStatus(value: MouseStatus) {\r\n\t\tthis._mouseStatus = value;\r\n\t}\r\n\r\n\r\n\tpublic get currentWorldObject(): WorldObject {\r\n\t\treturn this._currentWorldObject;\r\n\t}\r\n\r\n\tpublic set currentWorldObject(value: WorldObject) {\r\n\t\tthis._currentWorldObject = value;\r\n\t}\r\n\r\n\r\n\tpublic get lastWorldObject(): WorldObject {\r\n\t\treturn this._lastWorldObject;\r\n\t}\r\n\r\n\tpublic set lastWorldObject(value: WorldObject) {\r\n\t\tthis._lastWorldObject = value;\r\n\t}\r\n    \r\n}","import { WorldPosition } from \"../../world/worldposition\";\r\n\r\nexport class MouseStatus\r\n{\r\n\tprivate _isDown:boolean;\r\n\tprivate _startPosition:WorldPosition;\r\n\tprivate _position:WorldPosition;\r\n\t//private _worldObject:WorldObject;\r\n\t//private _objectStartPosition:WorldPosition;\r\n\tprivate _clickOffset:WorldPosition;\r\n\t//private _lastWorldObject:WorldObject;\r\n\t\r\n\t\r\n\t\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tthis.isDown = false;\r\n\t\tthis.startPosition = new WorldPosition(0,0);\r\n\t\tthis.position = new WorldPosition(0,0);\r\n\t\tthis.clickOffset = new WorldPosition(0,0);\r\n\r\n\t\t//this.objectStartPosition = null\r\n\t}\r\n// \t\t\tnodeCanvasMouse.mouseStatus = new MouseStatus(false,new Position(0,0),new Position(0,0),null,null);\r\n\r\n\r\n\tpublic get isDown(): boolean {\r\n\t\treturn this._isDown;\r\n\t}\r\n\r\n\tpublic set isDown(value: boolean) {\r\n\t\tthis._isDown = value;\r\n\t}\r\n\r\n\tpublic get startPosition(): WorldPosition {\r\n\t\treturn this._startPosition;\r\n\t}\r\n\r\n\tpublic set startPosition(value: WorldPosition) {\r\n\t\tthis._startPosition = value;\r\n\t}\r\n\t\r\n\r\n\tpublic get position(): WorldPosition {\r\n\t\treturn this._position;\r\n\t}\r\n\r\n\tpublic set position(value: WorldPosition) {\r\n\t\tthis._position = value;\r\n\t}\r\n\r\n\tpublic get clickOffset(): WorldPosition {\r\n\t\treturn this._clickOffset;\r\n\t}\r\n\r\n\tpublic set clickOffset(value: WorldPosition) {\r\n\t\tthis._clickOffset = value;\r\n\t}\r\n\r\n\r\n\r\n\t\r\n}\r\n","import { Drawable } from \"../drawable\";\r\nimport { WorldPosition } from \"../../world/worldposition\";\r\n//import { WalkerWorld } from \"../../walkers/walkerworld/walkerworld\";\r\nimport { WorldDisplay } from \"../worlddisplay\";\r\nimport { CircleEngineShape } from \"../../engine/shapes/circleengineshape\";\r\n//import { WalkerEngine } from \"../../walkerworld/walkerengine\";\r\n\r\n\r\nexport class CircleDisplayShape implements Drawable\r\n{\r\n\tprivate _circleEngineShape:CircleEngineShape;\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tthis.circleEngineShape = null;\r\n\t}\r\n\r\n\tpublic init(circleEngineShape:CircleEngineShape,options:any):void {\r\n\t\tthis.circleEngineShape = circleEngineShape;\t\t\r\n\t}\r\n\t\r\n\r\n\tpublic get circleEngineShape(): CircleEngineShape {\r\n\t\treturn this._circleEngineShape;\r\n\t}\r\n\r\n\tpublic set circleEngineShape(value: CircleEngineShape) {\r\n\t\tthis._circleEngineShape = value;\r\n\t}\r\n\t\r\n\t\r\n\tpublic draw(context:CanvasRenderingContext2D):void\r\n\t{\r\n\t\t//super.drawConnector(canvasHolder,node);\r\n\t\t/*\r\n\t\tsuper.drawNode(canvasHolder,node);\r\n\r\n\t\t*/\r\n\t\t//console.log(\"CircleDisplayShape.drawShape\");\r\n\r\n\t\tcontext.fillStyle = WorldDisplay.getColorFromString(\"ff0000ff\");\r\n\t\tcontext.strokeStyle = WorldDisplay.getColorFromString(\"0000ffff\");\r\n\t\tlet position:WorldPosition = this.circleEngineShape.getWorldPosition();\r\n\t\t\r\n\t    context.beginPath();\r\n\t    context.arc(position.x,position.y,this.circleEngineShape.getRadius(),0,Math.PI * 2, false);\r\n\t    context.closePath();\r\n\t    context.fill();\r\n\t    context.lineWidth = 2;\r\n\t\tcontext.stroke();\r\n\t}\r\n}\r\n","//import { MatterTools } from \"../matterengine/mattertools\";\r\n//import { World } from \"../walkerworld/world\";\r\n//import { MatterEvent } from \"../matterengine/matterevent\";\r\n//import { MatterCollisionEvent } from \"../matterengine/mattercollisionevent\";\r\n//import { MatterCompositeEvent } from \"../matterengine/mattercompositeevent\";\r\nimport { WorldPosition } from \"../world/worldposition\";\r\n\r\n//import * as Matter from \"matter-js\";\r\n\r\nexport class WorldDisplay  {\r\n    /*\r\n    static world(render:Matter.Render) {\r\n\r\n        Matter.Render.world(render);\r\n        console.log(\"doing some redering...\");\r\n    }\r\n    */    \r\n    public static getColorFromString(colorString:string):string\r\n    {\r\n      if(colorString.length==6)\r\n      {\r\n        colorString += \"ff\";\r\n      }\r\n      \r\n      let color = \"rgba(\"+\r\n          parseInt(colorString.substring(0,2), 16)+\",\"+\r\n          parseInt(colorString.substring(2,4), 16)+\",\"+\r\n          parseInt(colorString.substring(4,6), 16)+\",\"+\r\n          parseInt(colorString.substring(6,8), 16)/255.0+\")\";\r\n      \r\n      return(color);\r\n    }\r\n\r\n    public static getCirclePositionList(radius:number,curvePoints:number):Array<WorldPosition> {\r\n\t\tlet pointList = new Array<WorldPosition>();\r\n\t\t\r\n\t\tlet angleInc = 360 / curvePoints;\r\n\t\tfor(let angle=0;angle<=360;angle=angle+angleInc)\r\n\t\t{\r\n\t\t\tlet rads = angle * (Math.PI/180);\r\n\t\t\tpointList.push(\r\n\t\t\t\t\tnew WorldPosition(\r\n\t\t\t\t\t\t\tradius*Math.cos(rads),\r\n\t\t\t\t\t\t\tradius*Math.sin(rads))\r\n\t\t\t\t\t);\t\r\n\t\t}\r\n\t\t\r\n\t\treturn(pointList);\r\n\t}\r\n\r\n\tpublic static getTrianglePositionList(width:number,height:number):Array<WorldPosition> {\r\n\t\tlet pointList = new Array<WorldPosition>();\r\n\t\t\r\n\t\tpointList.push(new WorldPosition(0,-(height/2)));\r\n\t\tpointList.push(new WorldPosition(width/2,height/2));\r\n\t\tpointList.push(new WorldPosition(-(width/2),height/2));\r\n\t\tpointList.push(new WorldPosition(0,-(height/2)));\r\n\t\t\r\n\t\treturn(pointList);;\r\n\t}\r\n\t\r\n\tpublic static getRectanglePositionList(width:number,height:number):Array<WorldPosition> {\r\n\t\tlet pointList = new Array<WorldPosition>();\r\n\t\t\r\n\t\tpointList.push(new WorldPosition(-(width/2),-(height/2)));\r\n\t\tpointList.push(new WorldPosition((width/2),-(height/2)));\r\n\t\tpointList.push(new WorldPosition((width/2),(height/2)));\r\n\t\tpointList.push(new WorldPosition(-(width/2),(height/2)));\t\r\n\t\tpointList.push(new WorldPosition(-(width/2),-(height/2)));\r\n\t\r\n\t\treturn(pointList);;\r\n\t}\r\n\r\n\tpublic static getArcPositionList(endAngle:number,startAngle:number,radius:number,curvePoints:number):Array<WorldPosition> {\r\n\t\tlet pointList = new Array<WorldPosition>();\r\n\t\t\r\n\t\t// bug durring the port to javascript... it was just expecting one arg so probably endAngle was used\r\n\t\tlet angle:number = Math.abs(endAngle-startAngle);\r\n\t\tlet angleInc:number = angle / curvePoints;\r\n\t\t\r\n\t\tpointList.push(new WorldPosition(0,0));\r\n\t\tfor(let angle=startAngle;\r\n\t\t\tangle<=endAngle && angleInc>0;\r\n\t\t\tangle=angle+angleInc)\r\n\t\t{\r\n\t\t\tif( (angle+angleInc) > endAngle )\r\n\t\t\t{\r\n\t\t\t\tif(angle!=endAngle) angle = endAngle ;\r\n\t\t\t}\r\n\t\t\tvar rads = angle * (Math.PI/180);\r\n\t\t\tpointList.push(\r\n\t\t\t\t\tnew WorldPosition(\r\n\t\t\t\t\t\t\tradius*Math.cos(rads),\r\n\t\t\t\t\t\t\tradius*Math.sin(rads))\r\n\t\t\t\t\t);\t\r\n\t\t}\r\n\t\t\r\n\t\tpointList.push(new WorldPosition(0,0));\r\n\t\t\r\n\t\treturn(pointList);\r\n\t}\r\n\r\n    public static fillTextMutipleLines(context:CanvasRenderingContext2D,text:string,x:number,y:number,lineHeight:number,splitChar:string)\r\n\t{\r\n\t\tlet lines:Array<string> = text.split(splitChar);\r\n\t    let line:string = '';\r\n\t\r\n\t    for(let n = 0; n < lines.length; n++)\r\n\t    {\r\n\t      //let metrics:TextMetrics = context.measureText(lines[n]);\r\n\t      context.fillText(lines[n], x, y);\r\n\t      y = y+lineHeight; \r\n\t    }\r\n\t    context.fillText(line, x, y);\r\n\t }\r\n\t\r\n    public static metricsTextMutipleLines(context:CanvasRenderingContext2D,text:string,lineHeight:number,splitChar:string)\r\n\t{\r\n\t\tlet lines:Array<string> = text.split(splitChar);\r\n\t    //let line:string = '';\r\n\t    let maxWidth:number = 0;\r\n\t    let totalHeight = 0;\r\n\t    for(var n = 0; n < lines.length; n++)\r\n\t    {\r\n            let metrics:TextMetrics = context.measureText(lines[n]);\r\n            if(metrics.width>maxWidth) maxWidth = metrics.width;\r\n            totalHeight = totalHeight + lineHeight;\r\n\t    }\r\n\t    return({width:maxWidth,height:totalHeight});\r\n\t }\r\n\t\r\n    public static roundedRect(context:CanvasRenderingContext2D,x:number,y:number,\r\n        w:number,h:number,r:number,borderWitdh:number,borderColor:string,rectColor:string):void\r\n\t{\r\n\t\t  if (w < 2 * r) r = w / 2;\r\n\t\t  if (h < 2 * r) r = h / 2;\r\n\t\t  context.beginPath();\r\n\t\t  context.moveTo(x+r, y);\r\n\t\t  context.arcTo(x+w, y,   x+w, y+h, r);\r\n\t\t  context.arcTo(x+w, y+h, x,   y+h, r);\r\n\t\t  context.arcTo(x,   y+h, x,   y,   r);\r\n\t\t  context.arcTo(x,   y,   x+w, y,   r);\r\n\t\t  context.closePath();\r\n\t\t/*\r\n\t    context.beginPath();\r\n\t    context.moveTo(x, y);\r\n\t    context.lineTo(x + width - cornerRadius, y);\r\n\t    context.arcTo(x + width, y, x + width, y + cornerRadius, cornerRadius);\r\n\t    context.lineTo(x + width, y + height);\r\n\t   */ \r\n\t    context.lineWidth = borderWitdh;\r\n\t    context.fillStyle = rectColor;\r\n\t    context.strokeStyle = borderColor;\r\n\t    \r\n\t    context.stroke();\r\n\t    context.fill();\r\n\t\r\n\t}\r\n}\r\n","import { WorldEngine } from \"../worldengine\";\r\n\r\n\r\n\r\nexport class MockEngine implements WorldEngine {\r\n};","import { CircleEngineShape } from \"../../shapes/circleengineshape\";\r\nimport { WorldPosition } from \"../../../world/worldposition\";\r\nimport { Drawable } from \"../../../display/drawable\";\r\nimport { MockShape } from \"./mockshape\";\r\nimport { WorldId } from \"../../../world/worldid\";\r\n\r\nexport class MockCircle extends MockShape implements CircleEngineShape\r\n{\r\n\tprivate _curvePoints:number;\r\n\tprivate _radius:number;\r\n\t\r\n\r\n\tconstructor(worldId:WorldId,drawable:Drawable,radius:number,curvePoints:number,position:WorldPosition)\r\n\t{\r\n\t\tsuper(worldId,drawable,position);\r\n\t\t//super(shapeName,radius);\r\n\t\tthis.radius = radius;\r\n\t\tthis.curvePoints = curvePoints;\t\t\t\t\t\r\n\t}\r\n\r\n\tpublic containsWorldPosition(worldPosition:WorldPosition):boolean {\r\n\t\tlet distance = this.getWorldPosition().getDistance(worldPosition);\r\n\t\treturn(distance<=this.radius);\r\n\t}\r\n\r\n\tpublic getRadius():number {\r\n\t\treturn(this.radius);\r\n\t}\r\n\r\n\r\n\tpublic get curvePoints(): number {\r\n\t\treturn this._curvePoints;\r\n\t}\r\n\r\n\tpublic set curvePoints(value: number) {\r\n\t\tthis._curvePoints = value;\r\n\t}\r\n\t\r\n\r\n\tpublic get radius(): number {\r\n\t\treturn this._radius;\r\n\t}\r\n\r\n\tpublic set radius(value: number) {\r\n\t\tthis._radius = value;\r\n\t}\r\n\r\n\r\n}\r\n","import { WorldPosition } from \"../../../world/worldposition\";\r\n\r\nimport { EngineShape } from \"../../shapes/engineshape\";\r\nimport { Drawable } from \"../../../display/drawable\";\r\nimport { WorldObject } from \"../../../world/worldobject\";\r\nimport { WorldId } from \"../../../world/worldid\";\r\n\r\n//import { World } from \"../../walkerworld/world\";\r\n//import { WorldObjectDisplay } from \"../worldobjectdisplay\";\r\n\r\nexport abstract class MockShape extends WorldObject implements EngineShape\r\n{\r\n\tprivate _drawable:Drawable;\r\n\tprivate _position:WorldPosition;\r\n\r\n    constructor(worldId:WorldId,drawable:Drawable,position:WorldPosition) {\r\n\t\tsuper(worldId);\r\n\t\tthis.drawable = drawable;\r\n\t\tthis.position = position;\r\n\t\tdrawable.init(this,{});\r\n    }\r\n\t\r\n\tpublic drawObject(context:CanvasRenderingContext2D):void {\r\n\t\tthis.drawable.draw(context);\r\n\t}\r\n\r\n    public getWorldPosition():WorldPosition {\r\n\t\treturn(this.position );\r\n\t}\r\n\r\n\tpublic translate(worldPosition:WorldPosition):void {\r\n\t\tthis.position.x = worldPosition.x;\r\n\t\tthis.position.y = worldPosition.y;\r\n\t}\r\n\r\n\t\r\n\tpublic setWorldPosition(worldPosition:WorldPosition):void {\r\n\t\tthis.position.x = worldPosition.x;\r\n\t\tthis.position.y = worldPosition.y;\r\n\t}\r\n\r\n\tpublic abstract containsWorldPosition(worldPosition:WorldPosition):boolean;\r\n\r\n    public getDrawable():Drawable {\r\n        return(this.drawable);\r\n    }\r\n\r\n\r\n\tpublic get drawable(): Drawable {\r\n\t\treturn this._drawable;\r\n\t}\r\n\r\n\tpublic set drawable(value: Drawable) {\r\n\t\tthis._drawable = value;\r\n\t}\r\n    \r\n\r\n\tpublic get position(): WorldPosition {\r\n\t\treturn this._position;\r\n\t}\r\n\r\n\tpublic set position(value: WorldPosition) {\r\n\t\tthis._position = value;\r\n\t}\r\n\r\n}\r\n","import { CanvasHolderHTML } from \"./display/canvas/canvasholderhtml\";\r\nimport { MockEngine } from \"./engine/mockengine/mockengine\";\r\nimport { WorldOfWorldObjects } from \"./world/worldofworldobjects\";\r\nimport { MockCircle } from \"./engine/mockengine/shapes/mockcircle\";\r\nimport { CircleDisplayShape } from \"./display/drawableshapes/circledisplayshape\";\r\nimport { WorldPosition } from \"./world/worldposition\";\r\nimport { WorldId } from \"./world/worldid\";\r\n\r\n\r\nlet mockEngine = new MockEngine();\r\nlet world:WorldOfWorldObjects = new WorldOfWorldObjects(mockEngine);\r\nlet canvasHolder:CanvasHolderHTML = new CanvasHolderHTML(\"worldCanvas\",world);\r\n\r\nlet circle1:MockCircle = new MockCircle(\r\n    new WorldId(\"mockCircle\"),\r\n    new CircleDisplayShape(),\r\n    30,8,new WorldPosition(400,400));\r\n\r\nlet circle2:MockCircle = new MockCircle(\r\n  new WorldId(\"mockCircle\"),\r\n  new CircleDisplayShape(),\r\n  30,8,new WorldPosition(200,200));\r\n      \r\nworld.worldObjectArray.push(circle1);\r\nworld.worldObjectArray.push(circle2);\r\n\r\nlet interval:number = 1000/30; //one millisecond over beat per second\r\n\r\nconsole.log(\"drawing every : \"+interval+\"ms\");\r\n\r\nsetInterval(doDraw,interval);\r\n\r\nfunction doDraw()\r\n{\r\n  world.drawWorld(canvasHolder);\t\r\n}\r\n\r\n\r\n\r\n","//import { MatterTools } from \"../matterengine/mattertools\";\r\n//import { World } from \"../walkerworld/world\";\r\n//import { MatterEvent } from \"../matterengine/matterevent\";\r\n//import { MatterCollisionEvent } from \"../matterengine/mattercollisionevent\";\r\n//import { DisplayHolder } from \"../display/displayholder\";\r\nimport { WorldEngine } from \"../engine/worldengine\";\r\nimport { WorldPosition } from \"./worldposition\";\r\nimport { WorldObject } from \"./worldobject\";\r\nimport { CanvasHolder } from \"../display/canvas/canvasholder\";\r\n\r\n\r\nexport abstract class World {\r\n\r\n   // private _displayHolder:DisplayHolder;\r\n\tprivate _worldEngine:WorldEngine;\r\n\r\n    constructor(worldEngine:WorldEngine){\r\n\t\tthis.worldEngine = worldEngine;\r\n\t}\r\n\t\r\n\tpublic abstract getWorldObjectContainingPosition(worldPosition:WorldPosition):WorldObject;\r\n\r\n\tpublic abstract drawWorld(canvasHolder:CanvasHolder):void;\r\n\r\n\tpublic get worldEngine(): WorldEngine {\r\n\t\treturn this._worldEngine;\r\n\t}\r\n\r\n\tpublic set worldEngine(value: WorldEngine) {\r\n\t\tthis._worldEngine = value;\r\n\t}\r\n    \r\n}","\r\nexport class WorldId {\r\n    private _id:string;\r\n\r\n    public constructor(woldObjectId:string) {\r\n        this.id = woldObjectId;\r\n    }\r\n\r\n\tpublic get id(): string {\r\n\t\treturn this._id;\r\n\t}\r\n\r\n\tpublic set id(value: string) {\r\n\t\tthis._id = value;\r\n\t}\r\n\r\n}","import { WorldId } from \"./worldid\";\r\nimport { WorldPosition } from \"./worldposition\";\r\nimport { Drawable } from \"../display/drawable\";\r\n//import { WorldObjectDisplay } from \"../display/worldobjectdisplay\";\r\n//import { EngineObject } from \"../engine/engineobjects/engineobject\";\r\n\r\nexport abstract class WorldObject {\r\n\t\r\n\tprivate _worldId : WorldId;  \r\n\t//private _worldObjectDisplayArray:Array<WorldObjectDisplay>;\r\n\tprivate _isAnimated:boolean;\r\n\tprivate _isSelected:boolean;\r\n\t//private _drawable:Drawable;\r\n\t//private _worldPosition:WorldPosition;\r\n\t////private _engineObject:EngineObject;\r\n    \r\n    public constructor(worldId:WorldId) {\r\n\t\tthis.worldId = worldId;   \r\n\t\t//this.worldObjectDisplayArray = new Array<WorldObjectDisplay>();\r\n        //console.log(\"WorldObject:\"+this.worldId.id);\r\n\t}\r\n\r\n\r\n    public abstract getWorldPosition():WorldPosition;\r\n\tpublic abstract translate(worldPosition:WorldPosition):void;\r\n\tpublic abstract setWorldPosition(worldPosition:WorldPosition):void;\r\n\tpublic abstract containsWorldPosition(worldPosition:WorldPosition):boolean;\r\n\tpublic abstract drawObject(context:CanvasRenderingContext2D):void;\r\n\r\n\r\n\r\n\tpublic get worldId(): WorldId {\r\n\t\treturn this._worldId;\r\n\t}\r\n\r\n\tpublic set worldId(value: WorldId) {\r\n\t\tthis._worldId = value;\r\n\t}\r\n\r\n/*\r\n\tpublic get worldObjectDisplayArray(): Array<WorldObjectDisplay> {\r\n\t\treturn this._worldObjectDisplayArray;\r\n\t}\r\n\r\n\tpublic set worldObjectDisplayArray(value: Array<WorldObjectDisplay>) {\r\n\t\tthis._worldObjectDisplayArray = value;\r\n\t}\r\n*/\r\n\r\n\tpublic get isAnimated(): boolean {\r\n\t\treturn this._isAnimated;\r\n\t}\r\n\r\n\tpublic set isAnimated(value: boolean) {\r\n\t\tthis._isAnimated = value;\r\n\t}\r\n\r\n\tpublic get isSelected(): boolean {\r\n\t\treturn this._isSelected;\r\n\t}\r\n\r\n\tpublic set isSelected(value: boolean) {\r\n\t\tthis._isSelected = value;\r\n\t}\r\n\r\n/*\r\n\tpublic get drawable(): Drawable {\r\n\t\treturn this._drawable;\r\n\t}\r\n\r\n\tpublic set drawable(value: Drawable) {\r\n\t\tthis._drawable = value;\r\n\t}\r\n*/\r\n\r\n\r\n\t\r\n}","//import { MatterTools } from \"../matterengine/mattertools\";\r\n//import { World } from \"../walkerworld/world\";\r\n//import { MatterEvent } from \"../matterengine/matterevent\";\r\n//import { MatterCollisionEvent } from \"../matterengine/mattercollisionevent\";\r\n//import { DisplayHolder } from \"../display/displayholder\";\r\nimport { WorldEngine } from \"../engine/worldengine\";\r\nimport { WorldObject } from \"./worldobject\";\r\nimport { World } from \"./world\";\r\nimport { CanvasHolder } from \"../display/canvas/canvasholder\";\r\nimport { WorldPosition } from \"./worldposition\";\r\n\r\n\r\nexport class WorldOfWorldObjects extends World{\r\n\r\n    private _worldObjectArray:Array<WorldObject>;\r\n\r\n    constructor(worldEngine:WorldEngine){\r\n        super(worldEngine);\r\n        this.worldObjectArray = new Array<WorldObject>();\r\n\t}\r\n\t\r\n\t\r\n\tpublic drawWorld(canvasHolder:CanvasHolder):void {\r\n        let context = canvasHolder.getContext();\r\n        canvasHolder.clearCanvas();\r\n        for(let i=0;i<this.worldObjectArray.length;i++) {\r\n            let worldObject:WorldObject = this.worldObjectArray[i];\r\n            worldObject.drawObject(context);\r\n        }\r\n    }\r\n\r\n    public getWorldObjectContainingPosition(worldPosition:WorldPosition):WorldObject {\r\n        let foundObject:WorldObject = null;\r\n        for(let i=0;i<this.worldObjectArray.length;i++) {\r\n            let worldObject:WorldObject = this.worldObjectArray[i];\r\n            if(worldObject.containsWorldPosition(worldPosition)) foundObject = worldObject;\r\n        }\r\n        return(foundObject);\r\n    }\r\n\r\n\r\n\tpublic get worldObjectArray(): Array<WorldObject> {\r\n\t\treturn this._worldObjectArray;\r\n\t}\r\n\r\n\tpublic set worldObjectArray(value: Array<WorldObject>) {\r\n\t\tthis._worldObjectArray = value;\r\n\t}\r\n\r\n    \r\n}","import { WorldObject } from \"./worldobject\";\r\n\r\n\r\nexport class WorldPosition {\r\n    private _x:number;\r\n    private _y:number;\r\n\r\n    public constructor(x:number,y:number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n\tpublic get x(): number {\r\n\t\treturn this._x;\r\n\t}\r\n\r\n\tpublic set x(value: number) {\r\n\t\tthis._x = value;\r\n\t}\r\n\r\n\tpublic get y(): number {\r\n\t\treturn this._y;\r\n\t}\r\n\r\n\tpublic set y(value: number) {\r\n\t\tthis._y = value;\r\n\t}\r\n\r\n\tpublic clone():WorldPosition {\r\n\t\treturn(new WorldPosition(this.x,this.y));\r\n\t}\r\n\r\n\tpublic getDeltaY(worldPosition:WorldPosition):number\r\n\t{\r\n\t\t\treturn(this.y-worldPosition.y);\r\n\t}\r\n\r\n\tpublic getDeltaX(worldPosition:WorldPosition):number\r\n\t{\r\n\t\t\treturn(this.x-worldPosition.x);\r\n\t}\r\n\r\n\tpublic getDelta(worldPosition:WorldPosition):WorldPosition\r\n\t{\r\n\t\t\treturn(new WorldPosition(this.getDeltaX(worldPosition),this.getDeltaY(worldPosition)));\r\n\t}\r\n\r\n\tpublic equals(worldPosition:WorldPosition):boolean\r\n\t{\r\n\t\treturn( (this.x==worldPosition.x) && (this.y==worldPosition.y) ) ;\r\n\t}\r\n\r\n\tpublic getDistance(worldPosition:WorldPosition):number\r\n\t{\r\n\t\treturn (Math.sqrt(Math.pow(this.getDeltaX(worldPosition), 2) + Math.pow(this.getDeltaY(worldPosition), 2)));\r\n\t}\r\n\r\n\tpublic static getAveragePostionFromWorldPositionList(positionList:Array<WorldPosition>):WorldPosition\r\n\t{\r\n\t\tlet x = 0.0;\r\n\t\tlet y = 0.0;\r\n\t\tfor(let i=0;i<positionList.length;i++)\r\n\t\t{\r\n\t\t\tlet p = positionList[i];\r\n\t\t\tx += p.x;\r\n\t\t\ty += p.y;\r\n\t\t}\r\n\t\tx = x / positionList.length;\r\n\t\ty = y / positionList.length;\r\n\t\treturn(new WorldPosition(x,y));\r\n\t}\r\n\r\n\tpublic static getAveragePostionFromWorldObjectList(worldObjectList:Array<WorldObject>):WorldPosition\r\n\t{\r\n\t  let x = 0.0;\r\n\t  let y = 0.0;\r\n\t  for(var i=0;i<worldObjectList.length;i++)\r\n\t  {\r\n\t\t  var p = worldObjectList[i].getWorldPosition();\r\n\t\t  x += p.x;\r\n\t\t  y += p.y;\r\n\t  }\r\n\t  x = x / worldObjectList.length;\r\n\t  y = y / worldObjectList.length;\r\n\t  return(new WorldPosition(x,y));\r\n\t}\r\n\r\n\tpublic static getPostionListFromNodeList(worldObjectList:Array<WorldObject>):Array<WorldPosition>\r\n\t{\r\n\t\tvar positions = new Array<WorldPosition>();\r\n\t\tfor (var i = 0; i < worldObjectList.length; i++)\r\n\t\t{\r\n\t\t\tpositions.push(worldObjectList[i].getWorldPosition());\r\n\t\t}\r\n\t\treturn(positions);\r\n\t}\r\n\r\n\r\n}"]}