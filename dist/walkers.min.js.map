{"version":3,"sources":["node_modules/browser-pack/_prelude.js","source/display/canvas/canvasholderhtml.ts","source/display/canvas/canvasmouse.ts","source/display/canvas/mouseEventhandlerworldobject.ts","source/display/canvas/mousestatus.ts","source/engine/mockengine/mockengine.ts","source/main.ts","source/world/world.ts","source/world/worldofworldobjects.ts","source/world/worldposition.ts"],"names":["f","exports","module","define","amd","g","window","global","self","this","walkers","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","canvasmouse_1","mouseEventhandlerworldobject_1","CanvasHolderHTML","canvasName","world","isVisable","isDrawable","canvas","document","getElementById","context","getContext","canvasMouse","CanvasMouse","MouseEventHandlerWorldObject","prototype","getCanvas","getWidth","getHeight","isCanvasVisable","_isVisable","isCanvasDrawable","_isDrawable","Object","defineProperty","_canvasName","value","_canvas","_context","_canvasMouse","worldposition_1","canvasholderHTML","mouseEventHandler","offset","getCanvasOffset","addEventListener","event","pointerDownEvent","pointerMoveEvent","pointerUpEvent","offsetLeft","offsetTop","object","isNaN","element","offsetParent","hasOwnProperty","WorldPosition","_offset","_mouseEventHandler","mousestatus_1","mouseStatus","MouseStatus","currentWorldObject","lastWorldObject","worldObjectSelected","wWorldObject","worldObjectDeselected","eventPosition","pageX","pageY","isDown","startPosition","position","isAnimated","isSelected","clickWorldObject","getWorldObjectContainingPosition","clone","clickOffset","getWorldPosition","getDelta","deltaPosition","newX","x","newY","y","setWorldPosition","_mouseStatus","_currentWorldObject","_lastWorldObject","_isDown","_startPosition","_position","_clickOffset","MockEngine","doDraw","drawWorld","canvasHolder","canvasholderhtml_1","mockengine_1","worldofworldobjects_1","mockEngine","WorldOfWorldObjects","console","log","setInterval","World","worldEngine","worldPosition","_worldEngine","world_1","_super","_this","worldObjectArray","Array","__extends","drawable","draw","_worldObjectArray","_x","_y","getDeltaY","getDeltaX"],"mappings":"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","file":"walkers.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import { CanvasHolder } from \"./canvasholder\";\r\nimport { World } from \"../../world/world\";\r\nimport { CanvasMouse } from \"./canvasmouse\";\r\nimport { MouseEventHandlerWorldObject } from \"./mouseEventhandlerworldobject\";\r\n\r\n\r\nexport class CanvasHolderHTML implements CanvasHolder\r\n{\r\n\tprivate _isVisable:boolean;\r\n\tprivate _isDrawable:boolean;\r\n\tprivate _canvasName:string;\r\n\tprivate _canvas:HTMLCanvasElement;\r\n\tprivate _context:CanvasRenderingContext2D;\r\n\tprivate _canvasMouse:CanvasMouse;\r\n\t\r\n\tconstructor(canvasName:string,world:World)\r\n\t{\r\n\t\tthis.canvasName = canvasName;\r\n\t\tthis.isVisable = true;\r\n\t\tthis.isDrawable = true;\r\n\t\tthis.canvas = <HTMLCanvasElement>document.getElementById(this.canvasName);\t\t\t\r\n\t\tthis.context = this.canvas.getContext(\"2d\");\r\n\t\tthis.canvasMouse = new CanvasMouse(world,this,new MouseEventHandlerWorldObject());\r\n\t\t/*if (typeof document !== 'undefined')\r\n\t\t{\r\n\t\t\tthis.canvas = document.getElementById(this.canvasName);\t\t\t\r\n\t\t\tthis.context = this.canvas.getContext('2d');\r\n\t\t}*/\r\n\t}\r\n\r\n\tpublic getCanvas():HTMLCanvasElement {\r\n\t\treturn(this.canvas);\r\n\t}\r\n\r\n\tpublic getContext():CanvasRenderingContext2D {\r\n\t\treturn(this.context);\r\n\t}\r\n\t\r\n\tpublic getWidth():number\r\n\t{\r\n\t\treturn(this.canvas.width);\r\n\t}\r\n\t\r\n\tpublic getHeight():number\r\n\t{\r\n\t\treturn(this.canvas.height);\r\n\t}\r\n\r\n\tpublic isCanvasVisable(): boolean {\r\n\t\treturn this._isVisable;\r\n\t}\r\n\r\n\tpublic isCanvasDrawable(): boolean {\r\n\t\treturn this._isDrawable;\r\n\t}\r\n\r\n\tpublic get canvasName(): string {\r\n\t\treturn this._canvasName;\r\n\t}\r\n\r\n\tpublic set canvasName(value: string) {\r\n\t\tthis._canvasName = value;\r\n\t}\r\n\r\n\r\n\tpublic get canvas(): HTMLCanvasElement {\r\n\t\treturn this._canvas;\r\n\t}\r\n\r\n\tpublic set canvas(value: HTMLCanvasElement) {\r\n\t\tthis._canvas = value;\r\n\t}\r\n\r\n\tpublic get context(): CanvasRenderingContext2D {\r\n\t\treturn this._context;\r\n\t}\r\n\r\n\tpublic set context(value: CanvasRenderingContext2D) {\r\n\t\tthis._context = value;\r\n\t}\r\n\r\n\tpublic get isVisable(): boolean {\r\n\t\treturn this._isVisable;\r\n\t}\r\n\r\n\tpublic set isVisable(value: boolean) {\r\n\t\tthis._isVisable = value;\r\n\t}\r\n\r\n\tpublic get isDrawable(): boolean {\r\n\t\treturn this._isDrawable;\r\n\t}\r\n\r\n\tpublic set isDrawable(value: boolean) {\r\n\t\tthis._isDrawable = value;\r\n\t}\r\n\r\n\tpublic get canvasMouse(): CanvasMouse {\r\n\t\treturn this._canvasMouse;\r\n\t}\r\n\r\n\tpublic set canvasMouse(value: CanvasMouse) {\r\n\t\tthis._canvasMouse = value;\r\n\t}\r\n\t\r\n\t\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t/*\r\n\tstatic createCanvasHolderFromClientJson(worldDef,json)\r\n\t{\r\n\t  var canvasHolder = new CanvasHolder(json.canavsName,worldDef);\r\n\t  return(canvasHolder);\r\n\t}\r\n\t*/\r\n\t/*\r\n\t  getClientJson()\r\n\t  {\r\n\t\t  var json = {};\r\n\t\t  \r\n\t\t  \r\n\t\t  json.canvasName = this.canvasName;\r\n\t\t  json.origin = this.origin;\r\n\t\t  json.width = this.getWidth();\r\n\t\t  json.height = this.getHeight();\r\n\t\t  json.worldDef = this.worldDef;\r\n\t\t  \r\n\t\t  JSON.stringify(json);\r\n\t\t  return(json)\r\n\t  }\r\n\t*/\r\n\r\n\t/*  \r\n\tgetConnector(connectorDefKey,name)\r\n\t{\r\n\t\tvar connector = this.getConnectorDef(connectorDefKey)(this.worldDef,name);\r\n\t\tconnector.connectorDefKey = connectorDefKey;\r\n\t\treturn(connector);\r\n\t}\r\n\t*/\r\n\r\n\t/*\r\n\tgetConnectorDef(connectorDefKey)\r\n\t{\r\n\t\tvar connectorDef = this.worldDef.worldDisplay.connectorDefs[\"generic\"];\r\n\t\t\r\n\t\tvar foundConnectorDef = false;\r\n\t\tif(this.worldDef.worldDisplay.connectorDefs.hasOwnProperty(connectorDefKey))\r\n\t\t{\r\n\t\t\tconnectorDef = this.worldDef.worldDisplay.connectorDefs[connectorDefKey];\r\n\t\t\tfoundConnectorDef = true;\r\n\t\t}\r\n\t\tif(!foundConnectorDef) console.trace(\"CanvasHolder:getConnectorDef:connectorDefKey=\\\"\"+connectorDefKey+ \"\\\" was not found using generic\");\r\n\t\telse console.log(\"found connector display :\"+connectorDefKey);\r\n\t\tconnectorDef.connectorDefKey = connectorDefKey;\r\n\t\treturn(connectorDef);\r\n\t}\r\n\t*/\r\n\r\n\t/*\r\n\tgetConnectorDisplay(connectorDisplayKey)\r\n\t{\r\n\t\tvar connectorDisplay = this.worldDef.worldDisplay.connectorDisplay[\"generic\"];\r\n\t\t\r\n\t\tvar foundConnectorDisplay = false;\r\n\t\tif(this.worldDef.worldDisplay.connectorDisplay.hasOwnProperty(connectorDisplayKey))\r\n\t\t{\r\n\t\t\tconnectorDisplay = this.worldDef.worldDisplay.connectorDisplay[connectorDisplayKey];\r\n\t\t\tfoundConnectorDisplay = true;\r\n\t\t}\r\n\t\tif(!foundConnectorDisplay) console.trace(\"CanvasHolder:getConnectorDisplay:connectorDisplayKey=\\\"\"+connectorDisplayKey+ \"\\\" was not found using generic\");\r\n\t\tconnectorDisplay.connectorDisplayKey = connectorDisplayKey;\r\n\t\treturn(connectorDisplay);\r\n\t}\r\n\t*/\r\n\r\n\t/*\r\n\tgetGraphData(graphDataKey)\r\n\t{\r\n\t\tvar graphData = this.worldDef.worldDisplay.nodeDisplay[\"generic\"];\t\r\n\t\tvar foundGraphData = false;\r\n\t\tif(this.worldDef.worldDisplay.nodeDisplay.hasOwnProperty(graphDataKey))\r\n\t\t{\r\n\t\t\tgraphData = this.worldDef.worldDisplay.nodeDisplay[graphDataKey];\r\n\t\t\tfoundGraphData = true;\r\n\t\t}\r\n\t\tif(!foundGraphData) console.trace(\"CanvasHolder:getGraphData:graphDataKey=\\\"\"+graphDataKey+ \"\\\" was not found using generic\")\r\n\t\t//console.trace(\"CanvasHolder:getGraphData:graphDataKey=\\\"\"+graphDataKey+ \"\\\" was not found using generic\")\r\n\t\t//console.log(\"FOR:\"+graphDataKey+Common.toString(graphData));\r\n\t\t//console.log(\"getGraphData:graphDataKey=\"+graphDataKey+\":clone=\"+graphData.nodeDisplay.displayInfo.clone);\r\n\r\n\t\t//if(graphData.nodeDisplay.displayInfo.clone)\r\n\t\tif(graphData.nodeDisplayFunction)\r\n\t\t{\r\n\t\t\t//console.log(\"getGraphData:graphDataKey:FOUND A FUNCTION:\"+graphDataKey);\r\n\t\t\tgraphData = Object.create(graphData);\r\n\t\t\tgraphData.nodeDisplay = graphData.nodeDisplayFunction();\r\n\t\t\t//console.log(\"CLONING:\"+graphDataKey+Common.toString(graphData));\r\n\t\t\t//graphData.nodeDisplay.displayInfo = Object.create(graphData.nodeDisplay.displayInfo);\r\n\t\t\t//graphData.nodeDisplay.displayInfo  = JSON.parse(JSON.stringify(graphData.nodeDisplay.displayInfo));\r\n\t\t\t//graphData.nodeDisplay.displayInfo  = JSON.parse(JSON.stringify(graphData.nodeDisplay.displayInfo));\r\n\t\t\t//graphData = Object.create(graphData);\r\n\t\t\t//graphData.nodeDisplay.displayInfo.ts = new Date().getTime();\r\n\r\n\r\n\t\t}\r\n\r\n\t\tgraphData.graphDataKey = graphDataKey;\r\n\t\treturn(graphData);\r\n\t}\r\n\t*/\r\n\t/*\r\n\tclone(origin)\r\n\t{\r\n\t\tvar canvasHolder = new CanvasHolderHTML(this.canvasName);\r\n\t\t//canvasHolder.origin = origin;\r\n\t\t\r\n\t\tvar canvasHolder = new Object();\r\n\t\tcanvasHolder.origin = origin;\r\n\t\t\r\n\t\tcanvasHolder.canvasName = this.canvasName;\r\n\t\tcanvasHolder.canvas = this.canvas;\r\n\t\tcanvasHolder.context = this.context;\r\n\t\tcanvasHolder.isCanvasVisable = this.isCanvasVisable;\r\n\t\tcanvasHolder.isCanvasDrawable = this.isCanvasDrawable;\r\n\t\tcanvasHolder.isDrawable = this.isDrawable;\r\n\t\tcanvasHolder.isVisable = this.isVisable;\r\n\t\tcanvasHolder.getWidth = this.getWidth;\r\n\t\tcanvasHolder.getHeight = this.getHeight;\r\n\t\tcanvasHolder.worldDef = this.worldDef;\r\n\t\tcanvasHolder.getGraphData = this.getGraphData;\r\n\t\t\r\n\t\t\r\n\t\treturn(canvasHolder);\r\n\t}\r\n\t*/","import { WorldPosition } from \"../../world/worldposition\";\r\nimport { CanvasHolderHTML } from \"./canvasholderhtml\";\r\nimport { MouseEventHandler } from \"./mouseeventhandler\";\r\nimport { World } from \"../../world/world\";\r\n\r\n\r\nexport class CanvasMouse\r\n{\r\n\tprivate _offset:WorldPosition;\r\n\tprivate canvasholderHTML:CanvasHolderHTML;\r\n\tprivate _mouseEventHandler:MouseEventHandler;\r\n\t\r\n\r\n\tconstructor(world:World,canvasholderHTML:CanvasHolderHTML,mouseEventHandler:MouseEventHandler)\r\n\t{\r\n\t\tthis.canvasholderHTML = canvasholderHTML;\r\n\t\tthis.mouseEventHandler = mouseEventHandler;\r\n\t\tif(canvasholderHTML.isCanvasVisable()) \r\n\t\t{\r\n\t\t\t//this.offset = NodeCanvasMouse.getCanvasOffset(this.canvasholder.canvas);\r\n\t\t\tthis.offset = this.getCanvasOffset();\t\t\r\n\t\t\tvar self = this;\r\n\t\t\tthis.canvasholderHTML.canvas.addEventListener(\"pointerdown\", function(event) { self.pointerDownEvent(world,event) }, false);\r\n\t\t\tthis.canvasholderHTML.canvas.addEventListener(\"pointermove\",function(event) { self.pointerMoveEvent(world,event) }, false);\r\n\t\t\tthis.canvasholderHTML.canvas.addEventListener(\"pointerup\",function(event) { self.pointerUpEvent(world,event) }, false);\r\n\t\t\t//this.nodeMouseMovment = {};\r\n\t\t}\r\n\t}\r\n\r\n\tprivate getCanvasOffset():WorldPosition\r\n\t{\r\n\t    let offsetLeft = 0;\r\n\t\tlet offsetTop = 0;\r\n\t\tlet object:HTMLElement = this.canvasholderHTML.canvas;\r\n\t    do\r\n\t    {\r\n\t      if (!isNaN(object.offsetLeft))\r\n\t      {\r\n\t          offsetLeft += object.offsetLeft;\r\n\t      }\r\n\t      if (!isNaN(object.offsetTop))\r\n\t      {\r\n\t          offsetTop += object.offsetTop;\r\n\t\t  }   \r\n\t\t let element:any = object.offsetParent;\r\n\t\t if(element.hasOwnProperty(\"offsetParent\")) object = element;\r\n\t\t else object = null;\r\n\t    }\r\n\t    while(object);\r\n\t    \r\n\t    return( new WorldPosition(offsetLeft,offsetTop) );\r\n\t}\r\n\r\n\tpublic pointerDownEvent(world:World,event:MouseEvent) {\r\n\t\tthis.mouseEventHandler.pointerDownEvent(world,event);\r\n\t}\r\n\t\r\n\tpublic pointerMoveEvent(world:World,event:MouseEvent)\t{\r\n\t\tthis.mouseEventHandler.pointerMoveEvent(world,event);\r\n\r\n\t}\r\n\t\r\n\tpublic pointerUpEvent(world:World,event:MouseEvent)\r\n\t{\r\n\t\tthis.mouseEventHandler.pointerUpEvent(world,event);\r\n\r\n\t}\r\n\t\r\n\r\n\t\r\n\tpublic get offset(): WorldPosition {\r\n\t\treturn this._offset;\r\n\t}\r\n\r\n\tpublic set offset(value: WorldPosition) {\r\n\t\tthis._offset = value;\r\n\t}\r\n\r\n\tpublic get mouseEventHandler(): MouseEventHandler {\r\n\t\treturn this._mouseEventHandler;\r\n\t}\r\n\r\n\tpublic set mouseEventHandler(value: MouseEventHandler) {\r\n\t\tthis._mouseEventHandler = value;\r\n\t}\r\n\r\n\r\n\tpublic get $canvasholderHTML(): CanvasHolderHTML {\r\n\t\treturn this.canvasholderHTML;\r\n\t}\r\n\r\n\tpublic set $canvasholderHTML(value: CanvasHolderHTML) {\r\n\t\tthis.canvasholderHTML = value;\r\n\t}\r\n\t\r\n\r\n}\r\n","import { MouseStatus } from \"./mousestatus\";\r\nimport { WorldObject } from \"../../world/worldobject\";\r\nimport { MouseEventHandler } from \"./mouseeventhandler\";\r\nimport { WorldPosition } from \"../../world/worldposition\";\r\nimport { World } from \"../../world/world\";\r\n\r\n\r\n\r\nexport class MouseEventHandlerWorldObject implements MouseEventHandler {\r\n   private _mouseStatus:MouseStatus;\r\n   private _currentWorldObject:WorldObject;\r\n   private _lastWorldObject:WorldObject;\r\n\r\n    constructor()\r\n    {\r\n        this.mouseStatus = new MouseStatus();\r\n        this.currentWorldObject = null;\r\n        this.lastWorldObject = null;\r\n    }\r\n\r\n    public worldObjectSelected(world:World,event:MouseEvent,wWorldObject:WorldObject):void {\r\n\r\n    }\r\n\r\n    public worldObjectDeselected(world:World,event:MouseEvent):void {\r\n\r\n    }\r\n   \r\n    public pointerDownEvent(world:World,event:MouseEvent):void\r\n\t{\r\n\t\tvar eventPosition:WorldPosition = new WorldPosition(event.pageX,event.pageY);\r\n\t\t//this.hideCurrentNodeInfo();\r\n\t\r\n\t\tthis.mouseStatus.isDown = true;\r\n\t\tthis.mouseStatus.startPosition = eventPosition;\r\n\t\tthis.mouseStatus.position = eventPosition;\r\n\t\tif(this.currentWorldObject!=null)\r\n\t\t{\r\n\t\t\tthis.currentWorldObject.isAnimated = true;\r\n\t\t\tthis.currentWorldObject.isSelected = false;\r\n\t\t\tthis.currentWorldObject = null;\r\n\t\t}\r\n\t\t\r\n\t\tlet clickWorldObject =  world.getWorldObjectContainingPosition(eventPosition);\r\n\t\r\n\t\tif(clickWorldObject!=null && clickWorldObject!=this.lastWorldObject)\r\n\t\t{\r\n\t\t\tthis.currentWorldObject = clickWorldObject;\r\n\r\n\t\t\tthis.mouseStatus.startPosition = eventPosition.clone();\r\n\r\n\t\t\tthis.currentWorldObject.isSelected = true;\r\n\t\t\tthis.mouseStatus.clickOffset = this.currentWorldObject.getWorldPosition().getDelta(eventPosition);\r\n\r\n\t\t\t/////////////////this.mouseStatus.clickOffset = clickWorldObject.getWorldPosition().getDelta(eventPosition);\r\n\t\t\t//this.mouseEventHandler.pointerDown(this.mouseStatus);\t\t\t\r\n\t\t\tthis.worldObjectSelected(world,event,this.currentWorldObject);\r\n\t\t}\r\n\t\t\r\n\t\tif(clickWorldObject==null)\r\n\t\t{\r\n\t\t\tthis.worldObjectDeselected(world,event);\r\n\t\t}\r\n\t\t\r\n\t\tif(this.lastWorldObject)\r\n\t\t{\r\n\t\t\tthis.worldObjectDeselected(world,event);\r\n\t\t\tthis.lastWorldObject.isSelected = false;\r\n\t\t\tthis.lastWorldObject = null;\r\n\t\t}\r\n\t\r\n    }\r\n    \r\n    \r\n\r\n    public pointerMoveEvent(world:World,event:MouseEvent):void {\r\n    \r\n\t\tvar eventPosition = new WorldPosition(event.pageX,event.pageY);\r\n            if(this.mouseStatus.isDown)\r\n            {\r\n                this.worldObjectDeselected(world,event);\r\n        \r\n                if(this.currentWorldObject!=null)\r\n                {\r\n                    this.currentWorldObject.isAnimated = false;\r\n                    this.mouseStatus.position = eventPosition;\r\n                    var deltaPosition = this.mouseStatus.startPosition.getDelta(eventPosition);\r\n\r\n\r\n                          \r\n                    let newX = this.mouseStatus.startPosition.x-\r\n                            deltaPosition.x+\r\n                            this.mouseStatus.clickOffset.x;\r\n                    \r\n                    let newY = this.mouseStatus.startPosition.y-\r\n                            deltaPosition.y+\r\n                            this.mouseStatus.clickOffset.y;\r\n/*\r\n                    \r\n                    this.mouseStatus.node.position.setX(\r\n                            this.mouseStatus.nodeStartPosition.getX()-\r\n                            deltaPosition.getX()+\r\n                            this.mouseStatus.offset.getX());\r\n                    \r\n                    this.mouseStatus.node.position.setY(\r\n                            this.mouseStatus.nodeStartPosition.getY()-\r\n                            deltaPosition.getY()+\r\n                            this.mouseStatus.offset.getY());\r\n\r\n                            */\r\n\r\n                    this.currentWorldObject.setWorldPosition( new WorldPosition(newX,newY));\r\n                    \r\n                    /////////this.nodeCanvas.pointerMove(this.mouseStatus.node);\r\n                    /******* *\r\n                    if(!this.nodeMouseMovment.hasOwnProperty(this.mouseStatus.node.getNodeKey()))\r\n                    {\r\n                        this.nodeMouseMovment[this.mouseStatus.node.getNodeKey()] =\r\n                        {\r\n                                movePostionArray:new Array()\r\n                        }\r\n                    }\r\n                    this.nodeMouseMovment[this.mouseStatus.node.getNodeKey()].movePostionArray.push(this.mouseStatus.node.position.clone());\r\n                    **********/\r\n                }\r\n            }\r\n            else\r\n            {\r\n            }\r\n        }\r\n            \r\n\r\n    public pointerUpEvent(world:World,event:MouseEvent):void \t{\r\n\t\tif(this.currentWorldObject!=null)\r\n\t\t{\r\n\t\t\t///this.nodeCanvas.pointerUp(this.mouseStatus.node);\r\n\t\t\tthis.currentWorldObject.isAnimated = true;\r\n\t\t\t//this.mouseStatus.node.isSelected = false;\r\n\t\t\tthis.lastWorldObject = this.currentWorldObject;\r\n\t\r\n\t\t\tthis.currentWorldObject = null;\r\n\t\t}\r\n\t\tthis.mouseStatus.isDown = false;\r\n\t}\r\n\r\n\tpublic get mouseStatus(): MouseStatus {\r\n\t\treturn this._mouseStatus;\r\n\t}\r\n\r\n\tpublic set mouseStatus(value: MouseStatus) {\r\n\t\tthis._mouseStatus = value;\r\n\t}\r\n\r\n\r\n\tpublic get currentWorldObject(): WorldObject {\r\n\t\treturn this._currentWorldObject;\r\n\t}\r\n\r\n\tpublic set currentWorldObject(value: WorldObject) {\r\n\t\tthis._currentWorldObject = value;\r\n\t}\r\n\r\n\r\n\tpublic get lastWorldObject(): WorldObject {\r\n\t\treturn this._lastWorldObject;\r\n\t}\r\n\r\n\tpublic set lastWorldObject(value: WorldObject) {\r\n\t\tthis._lastWorldObject = value;\r\n\t}\r\n    \r\n}","import { WorldPosition } from \"../../world/worldposition\";\r\n\r\nexport class MouseStatus\r\n{\r\n\tprivate _isDown:boolean;\r\n\tprivate _startPosition:WorldPosition;\r\n\tprivate _position:WorldPosition;\r\n\t//private _worldObject:WorldObject;\r\n\t//private _objectStartPosition:WorldPosition;\r\n\tprivate _clickOffset:WorldPosition;\r\n\t//private _lastWorldObject:WorldObject;\r\n\t\r\n\t\r\n\t\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tthis.isDown = false;\r\n\t\tthis.startPosition = new WorldPosition(0,0);\r\n\t\tthis.position = new WorldPosition(0,0);\r\n\t\tthis.clickOffset = new WorldPosition(0,0);\r\n\r\n\t\t//this.objectStartPosition = null\r\n\t}\r\n// \t\t\tnodeCanvasMouse.mouseStatus = new MouseStatus(false,new Position(0,0),new Position(0,0),null,null);\r\n\r\n\r\n\tpublic get isDown(): boolean {\r\n\t\treturn this._isDown;\r\n\t}\r\n\r\n\tpublic set isDown(value: boolean) {\r\n\t\tthis._isDown = value;\r\n\t}\r\n\r\n\tpublic get startPosition(): WorldPosition {\r\n\t\treturn this._startPosition;\r\n\t}\r\n\r\n\tpublic set startPosition(value: WorldPosition) {\r\n\t\tthis._startPosition = value;\r\n\t}\r\n\t\r\n\r\n\tpublic get position(): WorldPosition {\r\n\t\treturn this._position;\r\n\t}\r\n\r\n\tpublic set position(value: WorldPosition) {\r\n\t\tthis._position = value;\r\n\t}\r\n\r\n\tpublic get clickOffset(): WorldPosition {\r\n\t\treturn this._clickOffset;\r\n\t}\r\n\r\n\tpublic set clickOffset(value: WorldPosition) {\r\n\t\tthis._clickOffset = value;\r\n\t}\r\n\r\n\r\n\r\n\t\r\n}\r\n","import { WorldEngine } from \"../worldengine\";\r\n\r\n\r\n\r\nexport class MockEngine implements WorldEngine {\r\n};","import { CanvasHolderHTML } from \"./display/canvas/canvasholderhtml\";\r\nimport { MockEngine } from \"./engine/mockengine/mockengine\";\r\nimport { WorldOfWorldObjects } from \"./world/worldofworldobjects\";\r\n\r\n\r\nlet mockEngine = new MockEngine();\r\nlet world:WorldOfWorldObjects = new WorldOfWorldObjects(mockEngine);\r\nlet canvasHolder:CanvasHolderHTML = new CanvasHolderHTML(\"worldCanvas\",world);\r\n\r\nlet bbm:number = 240;\r\nlet bbs:number = bbm/60.0;\r\nlet interval:number = 1000/bbs; //one millisecond over beat per second\r\n\r\nconsole.log(\"drawing every : \"+interval+\"ms\");\r\n\r\nsetInterval(doDraw,interval);\r\n\r\nfunction doDraw()\r\n{\r\n  world.drawWorld(canvasHolder);\t\r\n}\r\n\r\n\r\n\r\n","//import { MatterTools } from \"../matterengine/mattertools\";\r\n//import { World } from \"../walkerworld/world\";\r\n//import { MatterEvent } from \"../matterengine/matterevent\";\r\n//import { MatterCollisionEvent } from \"../matterengine/mattercollisionevent\";\r\n//import { DisplayHolder } from \"../display/displayholder\";\r\nimport { WorldEngine } from \"../engine/worldengine\";\r\nimport { WorldPosition } from \"./worldposition\";\r\nimport { WorldObject } from \"./worldobject\";\r\nimport { CanvasHolder } from \"../display/canvas/canvasholder\";\r\n\r\n\r\nexport abstract class World {\r\n\r\n   // private _displayHolder:DisplayHolder;\r\n\tprivate _worldEngine:WorldEngine;\r\n\r\n    constructor(worldEngine:WorldEngine){\r\n\t\tthis.worldEngine = worldEngine;\r\n\t}\r\n\t\r\n\tpublic getWorldObjectContainingPosition(worldPosition:WorldPosition):WorldObject {\r\n\t\treturn(null);\r\n\t}\r\n\r\n\tpublic abstract drawWorld(canvasHolder:CanvasHolder):void;\r\n\r\n\tpublic get worldEngine(): WorldEngine {\r\n\t\treturn this._worldEngine;\r\n\t}\r\n\r\n\tpublic set worldEngine(value: WorldEngine) {\r\n\t\tthis._worldEngine = value;\r\n\t}\r\n    \r\n}","//import { MatterTools } from \"../matterengine/mattertools\";\r\n//import { World } from \"../walkerworld/world\";\r\n//import { MatterEvent } from \"../matterengine/matterevent\";\r\n//import { MatterCollisionEvent } from \"../matterengine/mattercollisionevent\";\r\n//import { DisplayHolder } from \"../display/displayholder\";\r\nimport { WorldEngine } from \"../engine/worldengine\";\r\nimport { WorldObject } from \"./worldobject\";\r\nimport { World } from \"./world\";\r\nimport { CanvasHolder } from \"../display/canvas/canvasholder\";\r\n\r\n\r\nexport class WorldOfWorldObjects extends World{\r\n\r\n    private _worldObjectArray:Array<WorldObject>;\r\n\r\n    constructor(worldEngine:WorldEngine){\r\n        super(worldEngine);\r\n        this.worldObjectArray = new Array<WorldObject>();\r\n\t}\r\n\t\r\n\t\r\n\tpublic drawWorld(canvasHolder:CanvasHolder):void {\r\n        let context = canvasHolder.getContext();\r\n\r\n        for(let i=0;i<this.worldObjectArray.length;i++) {\r\n            let worldObject:WorldObject = this.worldObjectArray[i];\r\n            worldObject.drawable.draw(context);\r\n        }\r\n    }\r\n\r\n\tpublic get worldObjectArray(): Array<WorldObject> {\r\n\t\treturn this._worldObjectArray;\r\n\t}\r\n\r\n\tpublic set worldObjectArray(value: Array<WorldObject>) {\r\n\t\tthis._worldObjectArray = value;\r\n\t}\r\n\r\n    \r\n}","\r\nexport class WorldPosition {\r\n    private _x:number;\r\n    private _y:number;\r\n\r\n    public constructor(x:number,y:number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n\tpublic get x(): number {\r\n\t\treturn this._x;\r\n\t}\r\n\r\n\tpublic set x(value: number) {\r\n\t\tthis._x = value;\r\n\t}\r\n\r\n\tpublic get y(): number {\r\n\t\treturn this._y;\r\n\t}\r\n\r\n\tpublic set y(value: number) {\r\n\t\tthis._y = value;\r\n\t}\r\n\r\n\tpublic clone():WorldPosition {\r\n\t\treturn(new WorldPosition(this.x,this.y));\r\n\t}\r\n\r\n\tpublic getDeltaY(worldPosition:WorldPosition):number\r\n\t{\r\n\t\t\treturn(this.y-worldPosition.y);\r\n\t}\r\n\r\n\tpublic getDeltaX(worldPosition:WorldPosition):number\r\n\t{\r\n\t\t\treturn(this.x-worldPosition.x);\r\n\t}\r\n\r\n\tpublic getDelta(worldPosition:WorldPosition):WorldPosition\r\n\t{\r\n\t\t\treturn(new WorldPosition(this.getDeltaX(worldPosition),this.getDeltaY(worldPosition)));\r\n\t}\r\n\r\n\r\n\r\n}"]}