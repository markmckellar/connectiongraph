{"version":3,"sources":["node_modules/browser-pack/_prelude.js","source/exp/exp.ts","source/exp/instanceloader.ts","source/main.ts"],"names":["f","exports","module","define","amd","g","window","global","self","this","walkers","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","Exp","console","log","prototype","action","value","InstanceLoader","context","getInstance","name","args","_i","arguments","instance","Object","create","constructor","apply","exp_1","instanceloader_1"],"mappings":"CAAA,SAAAA,GAAA,GAAA,gBAAAC,UAAA,mBAAAC,QAAAA,OAAAD,QAAAD,QAAA,IAAA,kBAAAG,SAAAA,OAAAC,IAAAD,UAAAH,OAAA,CAAA,GAAAK,EAAAA,GAAA,mBAAAC,QAAAA,OAAA,mBAAAC,QAAAA,OAAA,mBAAAC,MAAAA,KAAAC,KAAAJ,EAAAK,QAAAV,MAAA,WAAA,MAAA,SAAAW,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAhB,GAAA,GAAAqB,OAAA,uBAAAL,EAAA,IAAA,MAAAhB,GAAAsB,KAAA,mBAAAtB,EAAA,GAAAuB,GAAAV,EAAAG,IAAAf,WAAAW,GAAAI,GAAA,GAAAQ,KAAAD,EAAAtB,QAAA,SAAAU,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,GAAAF,IAAAY,EAAAA,EAAAtB,QAAAU,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAf,QAAA,IAAA,GAAAmB,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAW,OAAAT,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAW,GAAA,SAAAP,EAAAjB,EAAAD,gECAA,IAAA0B,GAAA,WAEI,QAAAA,KACIC,QAAQC,IAAI,eAMpB,MAHWF,GAAAG,UAAAC,OAAP,SAAcC,GACVJ,QAAQC,IAAI,UAAYG,IAEhCL,IATa1B,GAAA0B,IAAAA,uFCAb,IAAAM,GAAA,WACI,QAAAA,GAAoBC,GAAAzB,KAAAyB,QAAAA,EASxB,MALID,GAAAH,UAAAK,YAAA,SAAYC,OAAc,GAAAC,MAAAC,EAAA,EAAAA,EAAAC,UAAAd,OAAAa,IAAAD,EAAAC,EAAA,GAAAC,UAAAD,EACtB,IAAIE,GAAWC,OAAOC,OAAOjC,KAAKyB,QAAQE,GAAMN,UAEhD,OADAU,GAASG,YAAYC,MAAMJ,EAAUH,GAC9BG,GAEfP,IAVahC,GAAAgC,eAAAA,uFCWb,IAAAY,GAAA1B,EAAA,aACA2B,EAAA3B,EAAA,yBAOc,GAAI0B,GAAAlB,KAEdI,OAAO,UAGE,GAAIe,GAAAb,eAAe3B,QAIR6B,YAAY,OAC/BJ,OAAO","file":"walkers.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","export class Exp {\n\n    constructor() {\n        console.log(\"constructor\");\n    }\n\n    public action(value: string): void {\n        console.log(\"action:\" + value);\n    }\n}\n","export class InstanceLoader {\n    constructor(private context: Object) {\n\n    }\n\n    getInstance(name: string, ...args: any[]) {\n        var instance = Object.create(this.context[name].prototype);\n        instance.constructor.apply(instance, args);\n        return instance;\n    }\n}\n","/*\nimport { CanvasHolderHTML } from \"./display/canvas/canvasholderhtml\";\nimport { WorldOfWorldObjects } from \"./world/worldofworldobjects\";\nimport { CircleDisplayShape } from \"./display/drawableshapes/circledisplayshape\";\nimport { WorldPosition } from \"./world/worldposition\";\nimport { WorldId } from \"./world/worldid\";\nimport { MatterEngine } from \"./engine/matterengine/matterengine\";\nimport { MatterCircle } from \"./engine/matterengine/shapes/mattercircle\";\nimport * as Matter from \"matter-js\";\nimport { watch } from \"fs\";\n*/\nimport { Exp } from \"./exp/exp\";\nimport { InstanceLoader } from \"./exp/instanceloader\";\n//import root from \"window-or-global\";\n\n\n\n\n\nlet exp:Exp = new Exp();\n//let exp:Exp = createInstance(\"Exp\");\nexp.action(\"Do it!\");\n\n\nvar loader = new InstanceLoader(window);\n\n//var exp = <Exp> loader.getInstance('Exp', 'A', 'B');\n\nvar exp2 = <Exp> loader.getInstance('Exp');\nexp2.action(\"Do it!\");\n\n\n\n\n\n/*\nlet matterEngine = new MatterEngine();\nlet world:WorldOfWorldObjects = new WorldOfWorldObjects(matterEngine);\nlet canvasHolder:CanvasHolderHTML = new CanvasHolderHTML(\"worldCanvas\",world);\n\nlet circle1:MatterCircle = new MatterCircle(\n      new WorldId(\"circle1\"),\n      new CircleDisplayShape(),\n      30,8,new WorldPosition(400,400),\n      {});\n\n    let circle2:MatterCircle = new MatterCircle(\n      new WorldId(\"circle2\"),\n      new CircleDisplayShape(),\n      30,8,new WorldPosition(200,200),\n      {});\n  \n      \nworld.worldObjectArray.push(circle1);\nworld.worldObjectArray.push(circle2);\n\nmatterEngine.createBounds(canvasHolder.getWidth(),canvasHolder.getHeight());\nlet interval:number = 1000/30; //one millisecond over beat per second\nconsole.log(\"drawing every : \"+interval+\"ms\");\nsetInterval(doDraw,interval);\nMatter.Engine.run(matterEngine.engine);\n\nfunction doDraw()\n{\n  world.drawWorld(canvasHolder);\t\n}\n*/"]}